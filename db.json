{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"bd14fc833e4174069fc5700d85f5c3dee81e832b","modified":1547882637755},{"_id":"themes/next/.DS_Store","hash":"7700df523433dfb791c00458ee8a56a83b3f07ce","modified":1554436187268},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1547882637781},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1547882637782},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1547882637782},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1547882637782},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1547882637782},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1547882637782},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1547882637782},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1547882637783},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1547882637783},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1547882637783},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1547882637784},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1547882637784},{"_id":"themes/next/_config.yml","hash":"5c39552fe1f48801fbc94cec22ca334847c4b534","modified":1554436590042},{"_id":"source/.DS_Store","hash":"a45101a286b0ec44e6f3d42b5453acb8add922ea","modified":1554437128070},{"_id":"source/_posts/.DS_Store","hash":"ae0590da1ffd02d6557ca10a1eeae08871fc86c1","modified":1554436982878},{"_id":"source/_posts/2018-year-end-summary.md","hash":"c2291d6c21013d441cf97896d3ad501173463e39","modified":1547882637737},{"_id":"source/_posts/blog.md","hash":"694969744d882c0a8227bf4a9ebb4e184c0ec35b","modified":1547882637737},{"_id":"source/_posts/c-dynamic-memory-allocation.md","hash":"6391c356b5736cfa1a093affc2ea4bb638a9b9a2","modified":1547882637738},{"_id":"source/booklist/index.md","hash":"7769871e015a7b0bb5a4af20ec6fbc5e58c6105e","modified":1547882637755},{"_id":"source/_posts/c-or-cpp-char-pointer-string-constant-unmodified.md","hash":"db62965183b12d1e8402842ca1a6baced55cb2ac","modified":1553142178177},{"_id":"source/about/index.md","hash":"7e5abcbd8f792911750e2460226b7cbacfe28611","modified":1554301650319},{"_id":"source/about/.DS_Store","hash":"45673a8ec47535550c1655fb6f129816c4bf94f9","modified":1554301866715},{"_id":"source/_posts/c-pointer.md","hash":"09433a676a96b3d326f5c028c163096f425266e3","modified":1547882637738},{"_id":"source/_posts/c-struct.md","hash":"0c61e9acf42b0240aeb4db5ff1a6a8d21358d8c1","modified":1547882637738},{"_id":"source/_posts/ccf-csp-daily-practice-20180301-jump.md","hash":"8b5634c6b73fabfcd7dda732aef9c1c24fd9d28e","modified":1547882637738},{"_id":"source/_posts/ccf-csp-daily-practice-20180302-crash.md","hash":"78637c4f14b1c548bda327480fa5177ba84b7641","modified":1547882637738},{"_id":"source/_posts/ccf-csp-daily-practice-20180303-urlmapping.md","hash":"46c732d549fc478b3c429c0087f82893d8211047","modified":1547882637739},{"_id":"source/_posts/command-scrapy-not-found.md","hash":"b8a2699491448b3bca9104387b253813b967d694","modified":1547882637739},{"_id":"source/_posts/data-structure-and-algorithm-analysis-homework-arraylist.md","hash":"4eaad7a7532610815bfc30575fef47854a0166f2","modified":1547882637739},{"_id":"source/_posts/data-structure-and-algorithm-analysis-homework-doublelinkedlist-in-java.md","hash":"0e6ab2d397f5a0a2df1c936ac10b808adb135108","modified":1547882637740},{"_id":"source/_posts/data-structure-and-algorithm-analysis-homework-singlelinkedlist-in-java.md","hash":"f8aeecdf7eafe895e52aada39da1afb5a0b5b1c5","modified":1547882637740},{"_id":"source/_posts/data-structure-singlelinkedlist-in-c-or-c.md","hash":"ae83d2530320d0a12f610c149d67e609f9862046","modified":1547882637740},{"_id":"source/_posts/data-structure-sqlist-in-c-or-c++.md","hash":"1f923c5d82def96c621c382fbe3d502e284b8464","modified":1547882637740},{"_id":"source/_posts/java-binary-octal-decimal-hexadecimal.md","hash":"4fa517f1c708331c9a4dd30af4bceb78e139b127","modified":1547882637741},{"_id":"source/_posts/java-bitwise-operation.md","hash":"fc6287a167ed80c00c13ae9172056dc54a940ca0","modified":1547882637741},{"_id":"source/_posts/java-collections-api-arraylist.md","hash":"db619d505cd09b13210140d8a47497cf81794cc6","modified":1547882637741},{"_id":"source/_posts/java-collections-api-linkedlist.md","hash":"ca8afb8d4abb3b26efe99b395a0687541b98c552","modified":1547882637741},{"_id":"source/_posts/java-collections-api-stack.md","hash":"fa3b251e71b6c4cef3cb7cd2847283b826929ecb","modified":1547882637742},{"_id":"source/_posts/java-command-javap.md","hash":"aa636e8cd547f18d8068943350d174cd41b069dc","modified":1548408313064},{"_id":"source/_posts/java-enum.md","hash":"4167ca677660053358faac370fa423f7a348bde2","modified":1547882637742},{"_id":"source/_posts/java-exception-handle.md","hash":"a8b7e1577d6a66f6d5524784827c16a98d0478d0","modified":1547882637742},{"_id":"source/_posts/java-final.md","hash":"e3d9bc3737a368988dbc0c868687b3e471ef652c","modified":1548423616450},{"_id":"source/_posts/java-initialization-block.md","hash":"e248f478f9b3908f718da46f5ad67f74373afb4b","modified":1547882637742},{"_id":"source/_posts/java-inner-class-implementation-principle.md","hash":"324eea3a0327efce338194d7260e6e5cb3c5f86c","modified":1548420451902},{"_id":"source/_posts/java-inner-class-extends.md","hash":"3c6e2629da63c850f947d8b6d3ab4297750402ad","modified":1548420858140},{"_id":"source/_posts/java-inner-class.md","hash":"7e6fe603ed0e2789392fb7934865ef4d42e36b6d","modified":1548408857234},{"_id":"source/_posts/java-object.md","hash":"7292349311f97d3f851a7471872acf781bc32bd6","modified":1547882637743},{"_id":"source/_posts/java-regular-expression.md","hash":"73f1e88395f9ab7c785bf41f3fac4139ddbcd082","modified":1547882637743},{"_id":"source/_posts/java-spider-httpurlconnection-in-action.md","hash":"b74dccd1a6d02f061f516eb71381ba9b882226e6","modified":1547882637743},{"_id":"source/_posts/java-spider-httpurlconnection.md","hash":"f18241d172abbeef03d48a3cb58f2febadfad350","modified":1547882637744},{"_id":"source/_posts/java-timer.md","hash":"432a27f561a3de75aec80849731dfd8fd7a3ecb7","modified":1547882637744},{"_id":"source/_posts/leetcode-21-merge-two-sorted-lists.md","hash":"d13e21a2ff6b9f3b4a2e59db3b7bcdafab96e219","modified":1554435646096},{"_id":"source/_posts/leetcode-23-merge-k-sorted-lists.md","hash":"79203971e5945381a3ea94f72725ca47fdf4f31f","modified":1551273834334},{"_id":"source/_posts/leetcode-25-reverse-nodes-in-k-group.md","hash":"b0c043fcdc995989e49931594aaf5389ed5c4e73","modified":1554433221638},{"_id":"source/_posts/leetcode-82-remove-duplicates-from-sorted-list-ii.md","hash":"c9240ca02090122d373e2b7e692ea2f6ef52aa99","modified":1551274118641},{"_id":"source/_posts/linux-command-ssh-and-scp.md","hash":"dbbb87c4311b77f2f0af2f30b5084766ad742fb4","modified":1547882637744},{"_id":"source/_posts/linux-command-tar.md","hash":"94d9550682b6026f0c70b5d1ab28473f35a81fe5","modified":1547882637744},{"_id":"source/_posts/linux-file-directory-manage.md","hash":"267edb1bcac35ceade9ff97eafc6702c5d4370a6","modified":1547882637744},{"_id":"source/_posts/linux-vi.md","hash":"1160b1cee35eef19b20bddc0bc261ba08cf53a18","modified":1547882637745},{"_id":"source/_posts/machine-learning-adaboost.md","hash":"54650118a1a60337ce1167936bab0e75927c5bea","modified":1547882637745},{"_id":"source/_posts/machine-learning-apriori.md","hash":"ffd2ec305e885f38e1bd67219f71eed615284611","modified":1547882637745},{"_id":"source/_posts/machine-learning-knn.md","hash":"f0a475a166b1dc5b1cb5d15b347dc3d940862523","modified":1547882637745},{"_id":"source/_posts/machine-learning-linear-regression.md","hash":"3c5d8f8066f74413ec32a934787a003f91fe25da","modified":1547882637746},{"_id":"source/_posts/machine-learning-locally-weighted-linear-regression.md","hash":"4b170ae048893022b0e78b0b7b49fff8c5251230","modified":1547882637746},{"_id":"source/_posts/machine-learning-logistic-regression.md","hash":"4956c4128578e5a25cd86c04445ea920ec66cd5d","modified":1547882637746},{"_id":"source/_posts/machine-learning-navie-bayes.md","hash":"71df4f5a7f31dd476c4da2ada465258b6ab75e6f","modified":1547882637746},{"_id":"source/_posts/machine-learning-pagerank.md","hash":"791322abeb26202032ee8a3aef3410a9abbe4116","modified":1547882637746},{"_id":"source/_posts/machine-learning-pca.md","hash":"1298656fa302108903f9e74dcdd7266ea788b014","modified":1547882637747},{"_id":"source/_posts/machine-learning-svm-linearly-separable.md","hash":"62d455e2435fb206bb52c8368e5f8e8c65f12ec9","modified":1547882637747},{"_id":"source/_posts/machine-learning-svm-smo.md","hash":"25bda2a9627d7138d22f3da8cc0125c67e991827","modified":1547882637747},{"_id":"source/_posts/macos-keyboard-shortcut.md","hash":"7ff0e87fe01d826d43bf0a0c3fcfd21a74700483","modified":1550728226808},{"_id":"source/_posts/mathjax-tutorial.md","hash":"5984b0e2a6aa342ee0fb9d8d615e76d1590b4979","modified":1547882637747},{"_id":"source/_posts/matrix-derivative.md","hash":"12b87741d32e2139a3e64f6b9adae2b5087724b5","modified":1547882637748},{"_id":"source/_posts/matrix-singular-value-decomposition.md","hash":"e7eacb4cb20a173aeba6888d41d1e0f99e8e0577","modified":1547882637748},{"_id":"source/_posts/nginx-413-request-entity-too-large.md","hash":"f7b5fe66cc22ccf85b3b41121b129ca698d616ab","modified":1547882637748},{"_id":"source/_posts/pat-advanced-1042.md","hash":"9e66039a02fc832dbfcfad5758e373fd36facf54","modified":1554285979463},{"_id":"source/_posts/pat-basic-1001.md","hash":"eec0067a66050db56e2b9da62c9096679247fcbd","modified":1553764324169},{"_id":"source/_posts/pat-basic-1008.md","hash":"6edf297845379f2cdadd9ce790856cca7677bf77","modified":1554106908761},{"_id":"source/_posts/pat-basic-1011.md","hash":"31ca87b8ff07d133d6fbc24bcb68883c40f4705a","modified":1553764405897},{"_id":"source/_posts/pat-basic-1012.md","hash":"43a92b99799b407278f935b0aa20b2203d0960f7","modified":1554106930752},{"_id":"source/_posts/pat-basic-1016.md","hash":"023358d544238497f496b8f0ccf6b8f7317cf342","modified":1553764356675},{"_id":"source/_posts/pat-basic-1018.md","hash":"2acaf05d4d36c654af0a8f389bbf0fdae5b30059","modified":1554286179700},{"_id":"source/_posts/pat-basic-1026.md","hash":"ab3d87369bb23c26527818e79c7996bce9146d7b","modified":1554024972283},{"_id":"source/_posts/pat-basic-1046.md","hash":"050e8aeb6fb8d19ea5b65687d28650c1fc1e9220","modified":1554024938195},{"_id":"source/_posts/putty-file-upload-and-download.md","hash":"7fe1be70c9a87427e0319de020b6653344aebfbd","modified":1547882637748},{"_id":"source/_posts/putty-ssh.md","hash":"c93f699791b337037295d464991f509085c358de","modified":1547882637748},{"_id":"source/_posts/python-data-analysis-matplotlib.md","hash":"c091741d3c31ff8e612dc6d605d40d698bbfc2fb","modified":1547882637749},{"_id":"source/_posts/python-data-analysis-numpy.md","hash":"847b0762c5b7a0aa73e0eb4a49c54312f0848215","modified":1547882637749},{"_id":"source/_posts/python3-tutorial-chapter1-helloworld.md","hash":"ba488278593f9ffb65a94d8240763db6d3969908","modified":1547882637749},{"_id":"source/_posts/python3-tutorial-chapter10-function-1.md","hash":"cf0a46afbd13663a371d67999628a023fd3f3047","modified":1547882637749},{"_id":"source/_posts/python3-tutorial-chapter10-function-2.md","hash":"870e31c334d8637688fb47039e736efd2a65de7d","modified":1547882637749},{"_id":"source/_posts/python3-tutorial-chapter11-class.md","hash":"689a83f6e4f64712269fccd50ac13331fae54718","modified":1547882637750},{"_id":"source/_posts/python3-tutorial-chapter12-file.md","hash":"41b7ca7633bb66b69a9698100c0d44f76093900d","modified":1547882637750},{"_id":"source/_posts/python3-tutorial-chapter13-error.md","hash":"537d9e27ac893e6dc9f64317de3f2c9ec3f6318d","modified":1547882637750},{"_id":"source/_posts/python3-tutorial-chapter14-json.md","hash":"f5f78aeee781011790a34227e562f3012bb8fc9e","modified":1547882637750},{"_id":"source/_posts/python3-tutorial-chapter2-input-and-print.md","hash":"8190f2019bb515014f7949bb56472c39140fe4fb","modified":1547882637751},{"_id":"source/_posts/python3-tutorial-chapter4-string.md","hash":"c12d537f804bf407224f5d8ee8b8f4975dcad59f","modified":1547882637751},{"_id":"source/_posts/python3-tutorial-chapter5-if-else.md","hash":"693084378a4a5fea1daa07d225b02699eca546d3","modified":1547882637751},{"_id":"source/_posts/python3-tutorial-chapter6-loop.md","hash":"706eebe937d27cc69277234f9202332d0ba303cf","modified":1547882637751},{"_id":"source/_posts/python3-tutorial-chapter7-list.md","hash":"946b748defc80eadee9bf6aa39a64d61e2a04a28","modified":1547882637751},{"_id":"source/_posts/python3-tutorial-chapter8-tuple.md","hash":"71486b9e3af980f515f20eae360de7f8205026d2","modified":1547882637752},{"_id":"source/_posts/python3-tutorial-chapter9-dictionary.md","hash":"7737a98b0dc04bf2313416edd8ce8691742b7645","modified":1547882637752},{"_id":"source/_posts/python3-tutorial-content.md","hash":"4cf73b71208a59663dae450583f0eca3c7fd7315","modified":1547882637752},{"_id":"source/_posts/recommend-system-cold-start.md","hash":"10363e6e0489c48bbdf451400298ddf8731d1289","modified":1552646934190},{"_id":"source/_posts/recommend-system-evaluation-metrics.md","hash":"3234efcceb34f01ad3939a84972771abe3baf142","modified":1552645938935},{"_id":"source/_posts/recommend-system-item-based-collaborative-filtering.md","hash":"3ab899842c58310a745f0665a38c8cc1d2936c7a","modified":1552467951808},{"_id":"source/_posts/sql-drop-delete-and-truncate-table.md","hash":"0bd79f42aa69bb99cf0dc086e7e39656e052788d","modified":1547882637752},{"_id":"source/_posts/sql-fuzzy-query-and-highlight-keyword.md","hash":"400c7393af48c5890d6c4efd3334da1ed6ce3998","modified":1547882637752},{"_id":"source/_posts/sql-join.md","hash":"79cd9feaf6b84569ad7167a1526d3f9b1a9a8dd2","modified":1547882637753},{"_id":"source/_posts/sql-like.md","hash":"d1930c3df154fcbd83dcdeb3cb57c4380fb0d828","modified":1547882637753},{"_id":"source/_posts/sql-null-value.md","hash":"f2fbe5ba3b7725e1095d7992d482fb31a382e6e8","modified":1547882637753},{"_id":"source/_posts/sql-summary.md","hash":"55af661c9bd0026f073ca4307e02c4fff531e890","modified":1547882637753},{"_id":"source/_posts/sql-union.md","hash":"b684b098d044251fd5c313fef0f0f601f0522df5","modified":1547882637753},{"_id":"source/_posts/time-and-space-complexity.md","hash":"e5eaf471ec6770455548c5e44863aa1b9b14e8f4","modified":1547882637754},{"_id":"source/_posts/vector-and-matrix-norm.md","hash":"606208971067a7d7b905b58952cde7257c8fbdec","modified":1547882637754},{"_id":"source/_posts/windows-nginx-tomcat-development-environment.md","hash":"bae626356ff805263458d59eb7907d6acd2fa2da","modified":1548244517883},{"_id":"source/ccf-csp/index.md","hash":"2b46ea30f99abf68095c75d87b6caf28e559521f","modified":1554437264183},{"_id":"source/categories/index.md","hash":"e59fbd395683fdfdfe83071a748ff6c99460a37e","modified":1547882637755},{"_id":"source/leetcode/index.md","hash":"d5de1fc21fd9bbd7c6711cd3b47460fafa6fd20c","modified":1554435975034},{"_id":"source/pat-advanced/index.md","hash":"e1c43d8f112cffa718a731f11cf4f7e83a2d65a0","modified":1554286113020},{"_id":"source/tags/index.md","hash":"90e86c4fbab966fce6f425593a474a34b9d46261","modified":1547882637755},{"_id":"source/pat-basic/index.md","hash":"7864efc374786eafc50102adaa8665ce55e0ef7a","modified":1554108863063},{"_id":"themes/next/languages/en.yml","hash":"2e38154fa9b8052a4df31c547ae85d192bb07eda","modified":1554436301719},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1547882637784},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1547882637784},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1547882637785},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1547882637786},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1547882637785},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1547882637786},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1547882637786},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1547882637786},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1547882637786},{"_id":"themes/next/languages/zh-Hans.yml","hash":"36d798deafac23d38a4d70ed48f3b166487c21a6","modified":1554436320082},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1547882637786},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1547882637787},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1547882637787},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1547882637787},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1547882637788},{"_id":"themes/next/layout/.DS_Store","hash":"42c341fc062384057d84bb2ccc5a81f846c95f9d","modified":1548239234233},{"_id":"themes/next/layout/_layout.swig","hash":"c11bba854d80c742ecc91d6bae3afaf1451c7e1e","modified":1547882637788},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1547882637803},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1547882637803},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1547882637803},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1547882637804},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1547882637804},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1547882637804},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1547882637803},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1547882637804},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1547882637805},{"_id":"themes/next/layout/_custom/header.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547882637788},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547882637830},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1547882637788},{"_id":"themes/next/layout/_macro/article-end-tag.swig","hash":"61af59bd91a479c2b45134633cc75dec0c4efacc","modified":1547882637788},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1547882637789},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1547882637789},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1547882637789},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1547882637790},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1547882637790},{"_id":"themes/next/layout/_macro/post.swig","hash":"19538e3507e8417f99380f2c13d3db43bd5d8f7d","modified":1547882637789},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1547882637790},{"_id":"themes/next/layout/_partials/footer.swig","hash":"ec2a586f34295820e398550de24b487eea75876c","modified":1547882637790},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1547882637791},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1547882637791},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1547882637791},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1547882637792},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1547882637792},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1547882637794},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1547882637794},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1547882637795},{"_id":"themes/next/layout/_third-party/.DS_Store","hash":"eaf1aa994efc5575e0b88d8b4253788870c2adb9","modified":1548239239732},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1547882637800},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1547882637800},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1547882637800},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1547882637801},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1547882637801},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1547882637801},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1547882637801},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1547882637805},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1547882637805},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1547882637805},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1547882637806},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1547882637806},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1547882637806},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1547882637806},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1547882637806},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1547882637807},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1547882637830},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1547882637830},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1547882637831},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1547882637831},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1547882637831},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1547882637832},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1547882637832},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1547882637832},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1547882637832},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1547882637833},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1547882637832},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1547882637833},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1547882637833},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547882637833},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1547882637834},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547882637834},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1547882637834},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1547882637834},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1547882637834},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547882637795},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547882637795},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547882637823},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547882637823},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547882637823},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547882637829},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547882637830},{"_id":"themes/next/source/images/alipay.jpg","hash":"bc84ee4a6f294d5d7c2df47705cc15f637e3c1e8","modified":1547882637831},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"9c0a636f6b521aa2d9b81312613b6cf955709f37","modified":1547882637835},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1547882637791},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1547882637791},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1547882637792},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1547882637792},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1547882637793},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1547882637793},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1547882637794},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1547882637794},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1547882637793},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1547882637793},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1547882637795},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1547882637796},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1547882637796},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"4aa55cd424389cf5626aa019c15ef6f3e4da09f2","modified":1547882637796},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1547882637796},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1547882637796},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1547882637797},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1547882637797},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1547882637797},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1547882637797},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1547882637797},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1547882637798},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1547882637798},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"de9f911b9aa6473533f2e5686dab282bdc965933","modified":1548244307672},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1547882637798},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1547882637799},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1547882637799},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1547882637799},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1547882637799},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1547882637799},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1547882637799},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1547882637800},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1547882637794},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1547882637795},{"_id":"themes/next/layout/_third-party/comments/.DS_Store","hash":"771953376af27e7246749449a851c4d31742e315","modified":1548241558333},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1547882637802},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1547882637802},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1547882637802},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1547882637803},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"5f80eec52bbc550e807f1983a0f17ff73a756120","modified":1547882637822},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1547882637822},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1547882637823},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1547882637823},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1547882637829},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1547882637829},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1547882637829},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1547882637829},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1547882637836},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1547882637836},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1547882637837},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1547882637836},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1547882637836},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1547882637837},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1547882637837},{"_id":"themes/next/source/js/src/post-details.js","hash":"89b8ea97f53577084acf0baa473bd649851dbcc1","modified":1547882637837},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1547882637838},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1547882637838},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1547882637845},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1547882637838},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1547882637845},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1547882637849},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1547882637850},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1547882637850},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1547882637850},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1547882637851},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1547882637851},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1547882637851},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1547882637842},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1547882637852},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1547882637852},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1547882637858},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1547882637859},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1547882637860},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1547882637860},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1547882637860},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1547882637860},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1547882637860},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1547882637862},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1547882637861},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1547882637862},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1547882637862},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1547882637862},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1547882637862},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1547882637861},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1547882637863},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1547882637863},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1547882637863},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1547882637863},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1547882637861},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1547882637863},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1547882637864},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1547882637864},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1547882637864},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1547882637865},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1547882637865},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1547882637864},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1547882637870},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1547882637869},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1547882637871},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1547882637865},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1547882637872},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1547882637872},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1547882637859},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1547882637802},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1547882637802},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1547882637807},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1547882637807},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1547882637807},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1547882637808},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1547882637808},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1547882637811},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1547882637817},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1547882637820},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1547882637821},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1547882637821},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1547882637821},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1547882637822},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1547882637822},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1547882637821},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1547882637823},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1547882637824},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1547882637824},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1547882637824},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1547882637824},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1547882637825},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1547882637824},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1547882637825},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1547882637826},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1547882637826},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1547882637826},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1547882637826},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1547882637827},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1547882637826},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1547882637827},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1547882637827},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1547882637828},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"81eba9e01559675e4ee4072aeca20b1c56dbd457","modified":1547882637828},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1547882637828},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1547882637837},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1547882637841},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1547882637846},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1547882637846},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1547882637841},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1547882637846},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1547882637846},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1547882637848},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1547882637847},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1547882637849},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1547882637846},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1547882637849},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1547882637851},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1547882637850},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1547882637852},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1547882637853},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1547882637869},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1547882637869},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1547882637840},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1547882637852},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1547882637858},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1547882637808},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1547882637808},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1547882637809},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1547882637809},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1547882637809},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1547882637809},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1547882637810},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1547882637810},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1547882637810},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1547882637810},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1547882637810},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1547882637811},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1547882637811},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1547882637811},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1547882637811},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1547882637812},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1547882637812},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1547882637812},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1547882637812},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1547882637813},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1547882637813},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1547882637813},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1547882637813},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1547882637813},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1547882637814},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1547882637814},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1547882637814},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1547882637814},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1547882637815},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"fe91753b61f3a18a93122a9f92617d3b95e6c7f6","modified":1547882637815},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1547882637815},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1547882637815},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1547882637816},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1547882637816},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1547882637816},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1547882637815},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1547882637814},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1547882637816},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1547882637816},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1547882637817},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1547882637817},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1547882637817},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1547882637818},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1547882637818},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1547882637818},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1547882637818},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1547882637819},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1547882637819},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1547882637817},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1547882637819},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1547882637818},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1547882637820},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1547882637820},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1547882637820},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1547882637820},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1547882637820},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1547882637819},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1547882637819},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1547882637825},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1547882637825},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1547882637827},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1547882637839},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1547882637839},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1547882637839},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1547882637839},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1547882637840},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1547882637841},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1547882637847},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1547882637847},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1547882637848},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1547882637847},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1547882637848},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1547882637848},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1547882637858},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1547882637871},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1547882637853},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1547882637857},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1547882637855},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1547882637856},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1547882637844},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1547882637868},{"_id":"source/_posts/ccf-csp-20180301-jump.md","hash":"8dfd7d2542e211f95fd3003ea89ba1ee4cf1ad8f","modified":1554437165234},{"_id":"source/_posts/ccf-csp-20180303-urlmapping.md","hash":"981709aed483649c6efa00162db17f229bfa553c","modified":1554437177827},{"_id":"source/_posts/ccf-csp-20180302-crash.md","hash":"066b3a1b9a318a1bcafaa65137c23d6a1edf208f","modified":1554437157689},{"_id":"public/search.xml","hash":"177fe2ecb1a4edba7d1de70ec01bd0ab4b1603c8","modified":1554437506253},{"_id":"public/about/index.html","hash":"ceef149447d69d5341c0a3423e7064fe9c17130e","modified":1554436985362},{"_id":"public/categories/index.html","hash":"3955b2ac4e4a28d3693e6d59d771effe921ea371","modified":1554436985362},{"_id":"public/pat-advanced/index.html","hash":"7239c6af4f719c08359d326a87c1d3f96d93ea69","modified":1554436985365},{"_id":"public/tags/index.html","hash":"6ba3d25b80271139c135f956a57f21de733398bd","modified":1554436985365},{"_id":"public/leetcode/index.html","hash":"eec505862cdf7079c536ab16dd41d96370334e29","modified":1554436985365},{"_id":"public/pat-basic/index.html","hash":"f534204f27066be4edfd017d3dc34085f4b3a90f","modified":1554436985365},{"_id":"public/booklist/index.html","hash":"c604159a423bc226b18e6dec691fa8bebd48650a","modified":1554436985365},{"_id":"public/2019/04/04/leetcode-25-reverse-nodes-in-k-group/index.html","hash":"43710b9ca768d86143e598cb22c8764f49d36c19","modified":1554436985365},{"_id":"public/2019/04/03/pat-advanced-1042/index.html","hash":"c741738ed009bde41949551a3eebe5a41d9ceadb","modified":1554436985365},{"_id":"public/2019/04/01/pat-basic-1018/index.html","hash":"c7d4ad2e1615b1526f5e7a29647b8eecaec67c9a","modified":1554436985365},{"_id":"public/2019/04/01/pat-basic-1012/index.html","hash":"aeaaa22b73e534a83937f5085244a28e8e6ea6d8","modified":1554436985365},{"_id":"public/2019/03/31/pat-basic-1046/index.html","hash":"2e96b7357f6bd01c2a4bdbc81eb2a6825cdbd713","modified":1554436985365},{"_id":"public/2019/03/28/pat-basic-1026/index.html","hash":"3ddc26f919aaceed7328ea6e512872f4f1ab0ad8","modified":1554436985365},{"_id":"public/2019/03/28/pat-basic-1016/index.html","hash":"0f7652c5188f448de187b107a0992596d2cdb640","modified":1554436985365},{"_id":"public/2019/03/28/pat-basic-1011/index.html","hash":"aca4a10eace9ba92b17f2fc6010ceef6e8de9580","modified":1554436985366},{"_id":"public/2019/03/28/pat-basic-1001/index.html","hash":"db76e184a4bffae2833dec55be0d6611ae18ab6d","modified":1554436985366},{"_id":"public/2019/03/21/c-or-cpp-char-pointer-string-constant-unmodified/index.html","hash":"e78fc26e2e250a8e7f875c2ae4c42abfe9eafd87","modified":1554436985366},{"_id":"public/2019/03/15/pat-basic-1008/index.html","hash":"3579160618ee20848c208509e9b6f6433db37f42","modified":1554436985366},{"_id":"public/2019/03/14/recommend-system-cold-start/index.html","hash":"1106aa8a4ada4a0b02b60692180a0de68eb0042a","modified":1554436985367},{"_id":"public/2019/03/13/recommend-system-item-based-collaborative-filtering/index.html","hash":"96e9feb6e407a038b6bc321c6f65c8330c3fd46a","modified":1554436985367},{"_id":"public/2019/03/04/recommend-system-evaluation-metrics/index.html","hash":"184365581aabf024eacc1b55db37dbd8acfcdeb7","modified":1554436985367},{"_id":"public/2019/02/27/leetcode-82-remove-duplicates-from-sorted-list-ii/index.html","hash":"98f9f47a3f1eb4515c2526dc6876cf3fdf019d7f","modified":1554436985367},{"_id":"public/2019/02/22/leetcode-23-merge-k-sorted-lists/index.html","hash":"fee7a28e37c08c95fd8f09d36b36ad1f23553af2","modified":1554436985367},{"_id":"public/2019/01/26/macos-keyboard-shortcut/index.html","hash":"49281fc65ff2f5b4806d17d827cd46131e7a1a52","modified":1554436985367},{"_id":"public/2019/01/17/java-exception-handle/index.html","hash":"b928f2aff23e62cae08483c3333a41b815afdf85","modified":1554436985367},{"_id":"public/2019/01/15/java-command-javap/index.html","hash":"0ebc9e0344690cf1a76c4bda94a80fd90e592811","modified":1554436985368},{"_id":"public/2019/01/14/java-inner-class-implementation-principle/index.html","hash":"baf561526f62a4fe24cad87746ce012f9145e94f","modified":1554436985368},{"_id":"public/2019/01/13/java-inner-class-extends/index.html","hash":"a0c9b79b0f1b7a13b2b65f7441e4f18490ee61fe","modified":1554436985368},{"_id":"public/2019/01/12/java-inner-class/index.html","hash":"dc14d010679ba13c3e9d7edfe1151f675b9b7fd4","modified":1554436985368},{"_id":"public/2019/01/10/java-final/index.html","hash":"4be9f6cfc73cf4b38405d763b5af79bdf0b5a76b","modified":1554436985368},{"_id":"public/2019/01/04/2018-year-end-summary/index.html","hash":"3b2c0d60c684a472d7dfa060432fa690f72370ad","modified":1554436985369},{"_id":"public/2018/10/14/nginx-413-request-entity-too-large/index.html","hash":"b0e8b8e98748bf304b822c7af127a28326b606df","modified":1554436985369},{"_id":"public/2018/09/19/sql-null-value/index.html","hash":"384d212fb7ddd54cc1e6e55ecc52b501a61fcec3","modified":1554436985369},{"_id":"public/2018/09/19/sql-drop-delete-and-truncate-table/index.html","hash":"67a8d2035c4d32e1c273bf82f02354cde69e8696","modified":1554436985369},{"_id":"public/2018/09/19/sql-like/index.html","hash":"a969659dfb0dca95ac4728745c4dbfe867953245","modified":1554436985369},{"_id":"public/2018/09/14/sql-join/index.html","hash":"e5c64c9994b186d7164836519b4a7d583a50d895","modified":1554436985370},{"_id":"public/2018/09/12/sql-union/index.html","hash":"dae23136b0fee2880ff0f7b309287fbed0a87316","modified":1554436985370},{"_id":"public/2018/09/08/sql-summary/index.html","hash":"d59416c6ed80d2b0cb3f9635c3fcef828e7859e6","modified":1554436985370},{"_id":"public/2018/08/28/matrix-singular-value-decomposition/index.html","hash":"1888ca1dce86026af695f0e56239a4a0d6c284bc","modified":1554436985370},{"_id":"public/2018/08/27/vector-and-matrix-norm/index.html","hash":"4851606d318c97feea95742aff7d26cc8697776e","modified":1554436985370},{"_id":"public/2018/08/26/machine-learning-pca/index.html","hash":"f276da917fd22f62db91939c3e91e4cc7fc91ca9","modified":1554436985370},{"_id":"public/2018/08/25/machine-learning-pagerank/index.html","hash":"65d65bf5ea60271371acdde55eba003a106efda4","modified":1554436985370},{"_id":"public/2018/08/23/machine-learning-apriori/index.html","hash":"d06c48b6f86b475abec09e738cd2baec1dd2b388","modified":1554436985371},{"_id":"public/2018/08/23/java-initialization-block/index.html","hash":"f03f7f8c4a913ba947679ba5a66ec649ae83214d","modified":1554436985371},{"_id":"public/2018/08/22/java-object/index.html","hash":"5b69c50334bfd8aaa7ef546185ab0a0783515352","modified":1554436985371},{"_id":"public/2018/08/20/java-enum/index.html","hash":"12a9fe20e449d69a9e53ef164c28d5fbac62eadf","modified":1554436985371},{"_id":"public/2018/08/17/machine-learning-locally-weighted-linear-regression/index.html","hash":"259a75f5f238c18ce5060ef3cf51bf7b7f0412c1","modified":1554436985371},{"_id":"public/2018/08/17/machine-learning-linear-regression/index.html","hash":"ce5ea56d55eb032b54832f11e294880b7edd4505","modified":1554436985371},{"_id":"public/2018/08/17/matrix-derivative/index.html","hash":"6c1f2e36795b492fb82e06c273b3ffb31e5cd933","modified":1554436985371},{"_id":"public/2018/08/17/linux-command-ssh-and-scp/index.html","hash":"e95cebc6aa6d3ceba99ba5da443bde2db2509541","modified":1554436985371},{"_id":"public/2018/08/17/putty-file-upload-and-download/index.html","hash":"9f93362d25e8c4a98968ee06d50ef99e0ae61f03","modified":1554436985373},{"_id":"public/2018/08/16/putty-ssh/index.html","hash":"47be3ec06e2474f7103f2702d15f9f597735f10b","modified":1554436985373},{"_id":"public/2018/08/02/java-timer/index.html","hash":"9f31bed2bf6ef56c17fd6eabe91ff53d3904940c","modified":1554436985373},{"_id":"public/2018/08/02/machine-learning-adaboost/index.html","hash":"c2b75ea152187f9d29ecc9b8b5878451d1754ab2","modified":1554436985373},{"_id":"public/2018/07/28/machine-learning-svm-smo/index.html","hash":"3bde71b1a55cd8e086f4f21bcb633099aaa76b28","modified":1554436985373},{"_id":"public/2018/07/16/mathjax-tutorial/index.html","hash":"ec7455e9563021f2590358586aaa39d467a7a4ee","modified":1554436985373},{"_id":"public/2018/07/16/machine-learning-svm-linearly-separable/index.html","hash":"4a6a78c11875b49357e0a2f5619943a8f2e860c2","modified":1554436985374},{"_id":"public/2018/07/10/machine-learning-logistic-regression/index.html","hash":"867239d731ea97de1c48d8016153e0e6afdec12e","modified":1554436985374},{"_id":"public/2018/07/02/machine-learning-navie-bayes/index.html","hash":"f96ee05fc9d6dd93b81e5e3788c11f7a174264ab","modified":1554436985374},{"_id":"public/2018/06/30/command-scrapy-not-found/index.html","hash":"ef22338e5bae3a31f307af5f53524863a06f1b4b","modified":1554436985374},{"_id":"public/2018/06/27/machine-learning-knn/index.html","hash":"e95a7566e2631bf0eb696f15e1e82e9263514ccd","modified":1554436985374},{"_id":"public/2018/06/26/python-data-analysis-matplotlib/index.html","hash":"624294a7c029f5ea4dd90506a0dd79f0b481bc08","modified":1554436985374},{"_id":"public/2018/06/25/python-data-analysis-numpy/index.html","hash":"2e1fc794515edcd2dd3b426d512f9a58c2d8bb83","modified":1554436985374},{"_id":"public/2018/06/21/python3-tutorial-content/index.html","hash":"a206df4f42bdde72540defc2b6161fd4225c8351","modified":1554436985375},{"_id":"public/2018/06/20/python3-tutorial-chapter14-json/index.html","hash":"24fc376d731b4516cb177f12584932ed83c77e09","modified":1554436985375},{"_id":"public/2018/06/19/python3-tutorial-chapter13-error/index.html","hash":"41d27ab42e860a35e2ea23e7805d534acc626db1","modified":1554436985375},{"_id":"public/2018/06/19/python3-tutorial-chapter12-file/index.html","hash":"6c5800cde39fe2287f9af60c160d2a929d1be530","modified":1554436985375},{"_id":"public/2018/06/19/python3-tutorial-chapter11-class/index.html","hash":"8f3dc4d810463487fb8a21fb146d559baa592d87","modified":1554436985375},{"_id":"public/2018/06/17/python3-tutorial-chapter10-function-2/index.html","hash":"6a35e6f7ebc10d4396ee28c6e7279ada3505eb16","modified":1554436985375},{"_id":"public/2018/06/17/python3-tutorial-chapter10-function-1/index.html","hash":"4f7eb24eadf3cdc30d41df2373b5d4e0cf7cc734","modified":1554436985375},{"_id":"public/2018/06/16/python3-tutorial-chapter9-dictionary/index.html","hash":"ef61eaa42253f214628515d151db8178fe0646cd","modified":1554436985375},{"_id":"public/2018/06/16/java-bitwise-operation/index.html","hash":"6ea0ffafd5496fde672f0a084f8b894558b2e67b","modified":1554436985375},{"_id":"public/2018/06/15/python3-tutorial-chapter8-tuple/index.html","hash":"ec0002d81bcbfab740e4ec49830dd73e5bfdc98b","modified":1554436985376},{"_id":"public/2018/06/14/python3-tutorial-chapter7-list/index.html","hash":"59618648024cf57dfd3ac1b7f8f1d56491e6e99a","modified":1554436985376},{"_id":"public/2018/06/13/python3-tutorial-chapter6-loop/index.html","hash":"94889c2a42b4b715e65f9bbf05de9ad75f137957","modified":1554436985376},{"_id":"public/2018/06/13/python3-tutorial-chapter5-if-else/index.html","hash":"1600dd0353c77562c24f31e4a2ca5be17d71e28e","modified":1554436985376},{"_id":"public/2018/06/12/python3-tutorial-chapter4-string/index.html","hash":"02e3a4ca85939c50b05e49536418b0b2f30b8b12","modified":1554436985376},{"_id":"public/2018/06/12/python3-tutorial-chapter2-input-and-print/index.html","hash":"78f0a3b801ee5e56077c474af0a8b47235e05faa","modified":1554436985376},{"_id":"public/2018/06/11/python3-tutorial-chapter1-helloworld/index.html","hash":"ee8cabdf206081e2e353f0a2f7c3cd0ca05e90b2","modified":1554436985376},{"_id":"public/2018/06/10/java-binary-octal-decimal-hexadecimal/index.html","hash":"1039899d771fac5eae7f8e69ae8745f67b0429eb","modified":1554436985376},{"_id":"public/2018/06/07/data-structure-singlelinkedlist-in-c-or-c/index.html","hash":"3c827faaa21aa7203f85e24dcc3d7ee084f879cd","modified":1554437506399},{"_id":"public/2018/06/03/data-structure-sqlist-in-c-or-c++/index.html","hash":"54d7ebd4dfcdba4c01361420b30498c832d0d454","modified":1554437506399},{"_id":"public/2018/06/01/c-dynamic-memory-allocation/index.html","hash":"80a7770eafe1c130ff9eaedd1e54deb9adaeef58","modified":1554436985377},{"_id":"public/2018/05/31/time-and-space-complexity/index.html","hash":"39b3a6bb4cf787591247c11647e072c5522191b6","modified":1554436985377},{"_id":"public/2018/05/31/c-struct/index.html","hash":"76b38e4a80476b70dc7f69388ddf4235e4fbe048","modified":1554436985377},{"_id":"public/2018/05/27/data-structure-and-algorithm-analysis-homework-doublelinkedlist-in-java/index.html","hash":"85ac1f0b0f2c3020bf0ac06466c8e6720d56f3e0","modified":1554436985377},{"_id":"public/2018/05/26/data-structure-and-algorithm-analysis-homework-singlelinkedlist-in-java/index.html","hash":"77cbe6815b4ab79393e918cf724de9edb6480012","modified":1554436985377},{"_id":"public/2018/05/26/c-pointer/index.html","hash":"7cec16b866bb91e192a9f629d09b3cc8c50e1f7e","modified":1554436985377},{"_id":"public/2018/05/25/data-structure-and-algorithm-analysis-homework-arraylist/index.html","hash":"eb813e3b0180982f70b3b1e0a50f1088663e217f","modified":1554436985378},{"_id":"public/2018/05/21/java-spider-httpurlconnection-in-action/index.html","hash":"c8e786cbe2950309d05517b133fda1a0154c5170","modified":1554436985378},{"_id":"public/2018/05/21/java-spider-httpurlconnection/index.html","hash":"c6f3e8877954b5b7b45895396966fc9210d1000a","modified":1554436985378},{"_id":"public/2018/05/19/windows-nginx-tomcat-development-environment/index.html","hash":"d3341bb2e0fe219f1b1408ac7db2d3a7966b910f","modified":1554436985379},{"_id":"public/2018/05/14/sql-fuzzy-query-and-highlight-keyword/index.html","hash":"5298829e231bba24711ba423058175fa6ef57ba4","modified":1554436985379},{"_id":"public/2018/05/14/linux-command-tar/index.html","hash":"3c5df7426a6e98a9cf6440dae8490796452607f8","modified":1554436985379},{"_id":"public/2018/05/11/linux-vi/index.html","hash":"a3b00e47587df4aa2024041a117053217716ed9b","modified":1554436985379},{"_id":"public/2018/05/10/linux-file-directory-manage/index.html","hash":"36d45299700747464ee68a3f25ea1b1ffba9935b","modified":1554436985379},{"_id":"public/2018/04/11/java-regular-expression/index.html","hash":"ecad163020eb42baeb88cdd061cf9363e62f5b53","modified":1554436985379},{"_id":"public/2018/04/02/java-collections-api-stack/index.html","hash":"3e8fadac4e7f68d24fd03ab61b5e4ec41afd3032","modified":1554436985379},{"_id":"public/2018/04/01/java-collections-api-linkedlist/index.html","hash":"bf741f43cf729c2501dcec3f27bd0e5ce5240620","modified":1554436985379},{"_id":"public/2018/03/30/java-collections-api-arraylist/index.html","hash":"cace5e7119159c728b6303ad0e0be71095828826","modified":1554436985380},{"_id":"public/2018/03/24/blog/index.html","hash":"712081ee6bf02d490616fa3a525405945a7a189d","modified":1554436985380},{"_id":"public/categories/任重而道远/index.html","hash":"696dba0cbb2248876929512acce80cd69986f282","modified":1554436985380},{"_id":"public/categories/生活/index.html","hash":"b59d7fa3d3f6cba4c51bbf6b7f1afa1633e289d8","modified":1554436985380},{"_id":"public/categories/c/index.html","hash":"478b289cf5139ae0c130d8706392eb3305f18e18","modified":1554436985380},{"_id":"public/categories/cpp/index.html","hash":"eb7caaf5baccf9927ee3c4b1ad8c410c547cae7c","modified":1554436985380},{"_id":"public/categories/ccf-csp/index.html","hash":"f730858a34fd1e68c75ab1cf8589f952793884b2","modified":1554437506399},{"_id":"public/categories/scrapy/index.html","hash":"5d05388b0de713bd34bd58efb656c0d96ea90296","modified":1554436985380},{"_id":"public/categories/数据结构与算法分析-Java语言描述/index.html","hash":"da1a197c8f3796d95cf0c04a721e8a4c285f034b","modified":1554436985380},{"_id":"public/categories/数据结构/index.html","hash":"5396c087c6de2c1d0a9f11733fd1afd424aef8c4","modified":1554436985380},{"_id":"public/categories/java/index.html","hash":"a418df76055007bb45a2823629870b2d08721f24","modified":1554436985381},{"_id":"public/categories/java/page/2/index.html","hash":"ed8c47ea9eadc3775b97852103a096f18eb65de0","modified":1554436985381},{"_id":"public/categories/正则表达式/index.html","hash":"21b4744df8123b635c6c2b77cb1cda4dd2490f47","modified":1554436985381},{"_id":"public/categories/网络爬虫/index.html","hash":"99649d921eba1f42eca64dab2827a8e3ca2286b1","modified":1554436985381},{"_id":"public/categories/leetcode/index.html","hash":"565801d3c2ac930ea9e34c41a9a5b5256f7b5b74","modified":1554436985381},{"_id":"public/categories/linux/index.html","hash":"f41106012be9490344a284f658bd8e94c5dd9b53","modified":1554436985381},{"_id":"public/categories/机器学习/index.html","hash":"fbe9d73ace96b82b297d00a2b45604c45f7ed8f7","modified":1554436985381},{"_id":"public/categories/机器学习/page/2/index.html","hash":"9453ca120e301714216051af899af600e5520e8b","modified":1554436985381},{"_id":"public/categories/macos/index.html","hash":"99584dae25758114b63e6fe3e529a46b603133e4","modified":1554436985381},{"_id":"public/categories/mathjax/index.html","hash":"075c7538356e19ada29e91123408d09573c60bb1","modified":1554436985381},{"_id":"public/categories/nginx/index.html","hash":"35b7d33b44db35220cba007333993585ba514016","modified":1554436985382},{"_id":"public/categories/pat甲级/index.html","hash":"7f099468ceb43d7ffba0a5ebfce386746f9b7399","modified":1554436985382},{"_id":"public/categories/pat乙级/index.html","hash":"3c68fece242fe10972f23ac981ef90726f51d704","modified":1554436985382},{"_id":"public/categories/putty/index.html","hash":"bc397e3cc46c6e819fce64d1f7bb5009dcc51a81","modified":1554436985382},{"_id":"public/categories/python/index.html","hash":"d46a7350074be0435d85092672d403e03fa11b6e","modified":1554436985382},{"_id":"public/categories/python/page/2/index.html","hash":"ccb6154218341ce55190aa467ba00bedfb853f18","modified":1554436985383},{"_id":"public/categories/recommend-system/index.html","hash":"8844c29d5b4187b4ef1671275a0d960601095a10","modified":1554436985383},{"_id":"public/categories/sql/index.html","hash":"caa77408027f0944c41845b7c4f64b19c72ddaba","modified":1554436985384},{"_id":"public/categories/算法/index.html","hash":"3b195c8512116cb53e7353416695a6d0c900fb5c","modified":1554436985384},{"_id":"public/archives/index.html","hash":"b70e1d0babf578b1690f7aabdb62b510ce3aea1f","modified":1554436985384},{"_id":"public/archives/page/2/index.html","hash":"a5cd6e408b3c27b0392616bdaca172231afd1f09","modified":1554436985384},{"_id":"public/archives/page/3/index.html","hash":"a990e7c05f59a309bd90dd0ccae0f5dd9ed57c0f","modified":1554436985384},{"_id":"public/archives/page/4/index.html","hash":"b02c4af548fc29d0071caa944ae3d7cc13f4d775","modified":1554436985384},{"_id":"public/archives/page/5/index.html","hash":"e960c302f50d8733fb482872c3be799fd61d384a","modified":1554436985384},{"_id":"public/archives/page/6/index.html","hash":"e80e8937e18cd3913a7fb239f337477b5c637355","modified":1554436985385},{"_id":"public/archives/page/7/index.html","hash":"6e56985e1bab9d691107b31d907b302ff443eca5","modified":1554436985385},{"_id":"public/archives/page/8/index.html","hash":"84553671c7e27c2b08b67e860ce0391632005abc","modified":1554437506399},{"_id":"public/archives/page/9/index.html","hash":"85cb3e264fdcbb2dd2d26c4c27d4792be7e08085","modified":1554436985385},{"_id":"public/archives/page/10/index.html","hash":"768893b9d3df34752fd16b2812414e29d9275275","modified":1554436985385},{"_id":"public/archives/2018/index.html","hash":"650ad48df0c494eb3296594e813be15903db0724","modified":1554436985385},{"_id":"public/archives/2018/page/2/index.html","hash":"bad279e6e92d01782385851fab35596e6209c1de","modified":1554436985385},{"_id":"public/archives/2018/page/3/index.html","hash":"4419975eb25e9900ae6997566cca77ead99d8934","modified":1554436985385},{"_id":"public/archives/2018/page/4/index.html","hash":"ab03cff0b6b00cec3196a71f0bec68b83d486997","modified":1554436985385},{"_id":"public/archives/2018/page/5/index.html","hash":"54baf2f3e2f32c2f512af6aaf93abbf7942d51c8","modified":1554436985385},{"_id":"public/archives/2018/page/6/index.html","hash":"a5a79dd8c7338f35fa79034b6d40d6b400ddc6fb","modified":1554437506399},{"_id":"public/archives/2018/page/7/index.html","hash":"fabc3ee3ead544c72a86d3cd720839156e8b0c24","modified":1554436985385},{"_id":"public/archives/2018/page/8/index.html","hash":"363a1c423963129ae21fa4659e802c0a6e000092","modified":1554436985385},{"_id":"public/archives/2018/03/index.html","hash":"305b66ce81ef1c48608c2ac9273b5c6b5a2a5df9","modified":1554436985386},{"_id":"public/archives/2018/04/index.html","hash":"78bd075edc7d2151b053242d356febcbbe725e89","modified":1554436985386},{"_id":"public/archives/2018/05/index.html","hash":"c6564bb80dd87b9a37a0eb437b800772a41cbd98","modified":1554436985386},{"_id":"public/archives/2018/05/page/2/index.html","hash":"60219c3de560a2e441f5963ecbf97b193df7d594","modified":1554436985386},{"_id":"public/archives/2018/06/index.html","hash":"dbfd4dc81bae62e37203a4bd3e2b67be9c767389","modified":1554436985386},{"_id":"public/archives/2018/06/page/2/index.html","hash":"54a5e99832eb25c120f5792b3be56c3a43d7a62f","modified":1554436985386},{"_id":"public/archives/2018/06/page/3/index.html","hash":"c85e8b200e91f7846b5354259358c2e4076ab429","modified":1554437506400},{"_id":"public/archives/2018/07/index.html","hash":"5d290b0078ff0dc00f4533b82f998e9d8fc47bf3","modified":1554436985386},{"_id":"public/archives/2018/08/index.html","hash":"be3150aff378508b35e61d12c1b5305396120d58","modified":1554436985386},{"_id":"public/archives/2018/08/page/2/index.html","hash":"5938a27f9691e646e1c11dd49264591dfc70baa0","modified":1554436985386},{"_id":"public/archives/2018/09/index.html","hash":"8c3062adfb3d54dadf8bdc2bbcf39f2d53e3574f","modified":1554436985386},{"_id":"public/archives/2018/10/index.html","hash":"5af78cea76d7a53623b17c81c061ed9c05be2bdc","modified":1554436985386},{"_id":"public/archives/2019/index.html","hash":"12fef24eaa633473a1bd23f4eee7b0b7c3605ac8","modified":1554436985386},{"_id":"public/archives/2019/page/2/index.html","hash":"508db5af17e401c12ec6d096ace769e80bd55996","modified":1554436985386},{"_id":"public/archives/2019/page/3/index.html","hash":"039c8e67ae8b880df2b8b4614977036a3b98f20b","modified":1554436985387},{"_id":"public/archives/2019/01/index.html","hash":"e0f0171ff39452e8e702b8211bafaae7981d2e56","modified":1554436985387},{"_id":"public/archives/2019/02/index.html","hash":"3f18e50d4c6f2bb263edba3d1aff88fc2f6a9200","modified":1554436985387},{"_id":"public/archives/2019/03/index.html","hash":"566767ed9834e5ba02256174f9cc496c6af40231","modified":1554436985387},{"_id":"public/archives/2019/04/index.html","hash":"eaf595fb4ce9ae1b646f74b7b2bc5b68bfeaedfa","modified":1554436985387},{"_id":"public/index.html","hash":"5638a525bb04562320ae435df0dc789708e66d1b","modified":1554436985387},{"_id":"public/page/2/index.html","hash":"5d682f6cb4287dba779148c9e5e018ab4cfafce1","modified":1554436985387},{"_id":"public/page/3/index.html","hash":"15d517764f4865cd50a08c941b777a16d12f47ee","modified":1554436985387},{"_id":"public/page/4/index.html","hash":"dee87c40282968187766fb42f94604335f9b78fa","modified":1554436985387},{"_id":"public/page/5/index.html","hash":"fc91a0fce2878d99eb09b346a79c7e0ae00204c6","modified":1554436985387},{"_id":"public/page/6/index.html","hash":"9a9299fe429928887572d5d9aef03a8845bf6940","modified":1554436985389},{"_id":"public/page/7/index.html","hash":"b63e9bc8a4d8a0acf9bfec758d03b0bd48e4bfd2","modified":1554436985389},{"_id":"public/page/9/index.html","hash":"afe1115f21d61b8e7680f07c0a17008c33ef5fdf","modified":1554436985389},{"_id":"public/page/8/index.html","hash":"52b7be65ef3008539e25716e843d3c8a587623b7","modified":1554437506399},{"_id":"public/page/10/index.html","hash":"98933ae9a5acaa6648df6015c6cae98ab5b8fa07","modified":1554436985389},{"_id":"public/tags/任重而道远/index.html","hash":"3d24c345a2f275f0050d63698d2b40ef30260cf7","modified":1554436985391},{"_id":"public/tags/随笔/index.html","hash":"a63d4784133d97f699080b2517fa84b95ea3e713","modified":1554436985391},{"_id":"public/tags/生活/index.html","hash":"2471823bbff367cd7f85741168e9eee11787df0d","modified":1554436985391},{"_id":"public/tags/c/index.html","hash":"093469de1191b641ba5cd5c5edb6d89a2e8bd3ac","modified":1554436985391},{"_id":"public/tags/cpp/index.html","hash":"f7c29ae4e5cb10f659605a51fd46be203c4494c0","modified":1554436985391},{"_id":"public/tags/ccf-csp/index.html","hash":"28ce0ad4d7c72541a1d2bfb464d8f401d893b999","modified":1554437506399},{"_id":"public/tags/python/index.html","hash":"8a2a8c2b471a106424d3ba697d32e689ce34d5fa","modified":1554436985391},{"_id":"public/tags/python/page/2/index.html","hash":"773ab478cb020d4feb2a937fc52f4819ef328a00","modified":1554436985391},{"_id":"public/tags/scrapy/index.html","hash":"8d11c4bc939a57b1bce168adbe0f7465ccd754a2","modified":1554436985392},{"_id":"public/tags/数据结构/index.html","hash":"a314914548c3a2ebd6aa9d9ffa2ec987e52b8709","modified":1554436985392},{"_id":"public/tags/java/index.html","hash":"6dedbda62066856088796481882ca474aa316e3b","modified":1554436985392},{"_id":"public/tags/java/page/2/index.html","hash":"c008e11fc0e64f659278cfc92d20bccc87fa4cfc","modified":1554436985392},{"_id":"public/tags/c-c/index.html","hash":"068621bd4ccd7a477e7175eb145d3a9dc476cbf6","modified":1554436985392},{"_id":"public/tags/java-collections-api/index.html","hash":"2f80a06910225887382b160e1011887da1fb8d1b","modified":1554436985392},{"_id":"public/tags/网络爬虫/index.html","hash":"4d2de5d306394f513a53aae5d23b4b3ad19a21d1","modified":1554436985392},{"_id":"public/tags/linked-list/index.html","hash":"14858a70e4840034be54461d22ae71e2001f6ad7","modified":1554436985393},{"_id":"public/tags/linux/index.html","hash":"085ccf174246d9e62309f04a159fb051657535c1","modified":1554436985393},{"_id":"public/tags/压缩/index.html","hash":"ca12f33c309e9a3abbe461247bbc6ad20fadbdf4","modified":1554436985393},{"_id":"public/tags/解压缩/index.html","hash":"54c99af73b91422d7e3419d594a908395d776eb5","modified":1554436985393},{"_id":"public/tags/vi/index.html","hash":"e557dcfaca6531a32d8fc1fac490ca5d85514d76","modified":1554436985393},{"_id":"public/tags/机器学习/index.html","hash":"cf5ce9cff8d907edaa115f1e8bc015b31b6e3857","modified":1554436985393},{"_id":"public/tags/关联分析/index.html","hash":"ed3f029ee648cc8b88079204c6a2ca98c7bb7220","modified":1554436985393},{"_id":"public/tags/降维/index.html","hash":"4c5570c33c256a65215311c2e3d4c61ff077a9a3","modified":1554436985393},{"_id":"public/tags/链接挖掘/index.html","hash":"9aea1594ad8071ce80de24062e20d1b33e2a71ef","modified":1554436985393},{"_id":"public/tags/mathjax/index.html","hash":"db5756021801ed0aa8a0bd4cc878f31947724f16","modified":1554436985393},{"_id":"public/tags/macos/index.html","hash":"bea04758f48ea636af9510da269e2d5c8d48d98e","modified":1554436985394},{"_id":"public/tags/线性代数/index.html","hash":"c039d5ceeb273090969214ad876a3d2f24118561","modified":1554436985394},{"_id":"public/tags/矩阵论/index.html","hash":"7d55883b9436aeca4df532569682575b56938b39","modified":1554436985394},{"_id":"public/tags/nginx/index.html","hash":"c10686d5de1877367b6160f27e52e086b0e17468","modified":1554436985394},{"_id":"public/tags/pat/index.html","hash":"e626376935f0fc61eed844da6f9d4c5b04b82a8a","modified":1554436985394},{"_id":"public/tags/putty/index.html","hash":"323777eb29a10a32bc5aabbe574a7a77fde79637","modified":1554436985394},{"_id":"public/tags/数据分析/index.html","hash":"bc178c9c586bea8c5402fa6734b84905dca6e51b","modified":1554436985394},{"_id":"public/tags/matplotlib/index.html","hash":"fb7ba23edcfc45f7556b71db7dc8620958df408a","modified":1554436985394},{"_id":"public/tags/recommend-system/index.html","hash":"b014c832b1fb74faf04016624366de39d2330d73","modified":1554436985394},{"_id":"public/tags/sql/index.html","hash":"9888fcc30689aa2c63990da9d531e6e975aa4e0c","modified":1554436985394},{"_id":"public/tags/mysql/index.html","hash":"ed8434900561b1eb6c9a5d7101c0155a562e5cf0","modified":1554436985394},{"_id":"public/tags/算法/index.html","hash":"b3a1c7becf01c4f4796906eb698e0f40c7f2ace9","modified":1554436985394},{"_id":"public/tags/tomcat/index.html","hash":"3d3968ad95eb1db9655bc2ce9ffacc3b2f2c6325","modified":1554436985394},{"_id":"public/ccf-csp/index.html","hash":"06d0b31cb100227aa0e0476c2c036a615b1fc8fa","modified":1554437506398},{"_id":"public/2019/04/05/leetcode-21-merge-two-sorted-lists/index.html","hash":"c83d8b44f5a6eac4d0bd13c5f54aa5474e3d7d97","modified":1554436985402},{"_id":"public/2018/06/06/ccf-csp-20180303-urlmapping/index.html","hash":"c0fadf8a0ac936b23e116de9ee34b6af6183b890","modified":1554437506399},{"_id":"public/2018/06/05/ccf-csp-20180301-jump/index.html","hash":"59cdcb8ab0fba38233af6dab8c61c3b777a8ad8a","modified":1554437506399},{"_id":"public/2018/06/06/ccf-csp-20180302-crash/index.html","hash":"def47b9fddb4f3c1f176ca7d64b6960295a62343","modified":1554437506399}],"Category":[{"name":"任重而道远","_id":"cju3j9aon0004j1q0rbz1t44c"},{"name":"生活","_id":"cju3j9aot000bj1q0zjb70h52"},{"name":"c","_id":"cju3j9ap1000kj1q0fdope2i8"},{"name":"cpp","_id":"cju3j9ap4000pj1q0yc8wr3lk"},{"name":"ccf csp","_id":"cju3j9apc0017j1q0tfyaja4f"},{"name":"scrapy","_id":"cju3j9api001kj1q0uyhjx16p"},{"name":"数据结构与算法分析:Java语言描述","_id":"cju3j9apm001rj1q07g3fc83k"},{"name":"数据结构","_id":"cju3j9apu0027j1q0llieuz2x"},{"name":"java","_id":"cju3j9aq0002jj1q05ybulno1"},{"name":"正则表达式","_id":"cju3j9ar5004mj1q0plq0fzpz"},{"name":"网络爬虫","_id":"cju3j9ar7004tj1q0zrvzzm5b"},{"name":"leetcode","_id":"cju3j9arm005aj1q0832sv4dh"},{"name":"linux","_id":"cju3j9arv0060j1q0xyah9p3p"},{"name":"机器学习","_id":"cju3j9as5006tj1q0p64ok8pg"},{"name":"macos","_id":"cju3j9asq008lj1q08c4cd5g5"},{"name":"mathjax","_id":"cju3j9asq008rj1q0t9qiwmto"},{"name":"nginx","_id":"cju3j9ass0092j1q0hvr551n4"},{"name":"pat甲级","_id":"cju3j9ast0097j1q0p7sabyzp"},{"name":"pat乙级","_id":"cju3j9asu009bj1q0yjpvc4r1"},{"name":"putty","_id":"cju3j9asz00a5j1q0p7qfep4u"},{"name":"python","_id":"cju3j9at000adj1q0b1skmxe4"},{"name":"recommend system","_id":"cju3j9atc00bwj1q0fzek48j5"},{"name":"sql","_id":"cju3j9ate00c9j1q0hkeewze5"},{"name":"算法","_id":"cju3j9atj00d1j1q0fxjrv17f"}],"Data":[],"Page":[{"title":"About","date":"2018-03-24T14:12:03.000Z","_content":"### 关于我\n\n- 2017年6月，毕业于华中师范大学电子商务专业，获管理学学士学位\n\n  > To live is to change the world.\t\n\n- 2018年9月，于武汉大学软件工程专业攻读硕士学位\n\n  > 选择很重要\n\n- [关于我的更多信息](https://www.hegongshan.com/cv/)","source":"about/index.md","raw":"---\ntitle: About\ndate: 2018-03-24 22:12:03\n---\n### 关于我\n\n- 2017年6月，毕业于华中师范大学电子商务专业，获管理学学士学位\n\n  > To live is to change the world.\t\n\n- 2018年9月，于武汉大学软件工程专业攻读硕士学位\n\n  > 选择很重要\n\n- [关于我的更多信息](https://www.hegongshan.com/cv/)","updated":"2019-04-03T14:27:30.319Z","path":"about/index.html","comments":1,"layout":"page","_id":"cju3j9aoj0001j1q0o77l3ibt","content":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><ul>\n<li><p>2017年6月，毕业于华中师范大学电子商务专业，获管理学学士学位</p>\n<blockquote>\n<p>To live is to change the world.    </p>\n</blockquote>\n</li>\n<li><p>2018年9月，于武汉大学软件工程专业攻读硕士学位</p>\n<blockquote>\n<p>选择很重要</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.hegongshan.com/cv/\">关于我的更多信息</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><ul>\n<li><p>2017年6月，毕业于华中师范大学电子商务专业，获管理学学士学位</p>\n<blockquote>\n<p>To live is to change the world.    </p>\n</blockquote>\n</li>\n<li><p>2018年9月，于武汉大学软件工程专业攻读硕士学位</p>\n<blockquote>\n<p>选择很重要</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.hegongshan.com/cv/\">关于我的更多信息</a></p>\n</li>\n</ul>\n"},{"title":"分类","date":"2018-03-24T14:12:15.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-03-24 22:12:15\ntype: \"categories\"\n---\n","updated":"2019-01-19T07:23:57.755Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cju3j9aol0003j1q03qqagqz8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"CCF CSP","date":"2019-04-05T03:49:19.000Z","_content":"\n|   编号   |    标题    | C/C++ |                         Java                         |    备注    |\n| :------: | :--------: | :---: | :--------------------------------------------------: | :--------: |\n| 201803-1 |   跳一跳   |       |    [查看题解](/2018/06/05/ccf-csp-20180301-jump/)    |  简单循环  |\n| 201803-2 | 碰撞的小球 |       |   [查看题解](/2018/06/06/ccf-csp-20180302-crash/)    |            |\n| 201803-3 |  URL映射   |       | [查看题解](/2018/06/06/ccf-csp-20180303-urlmapping/) | 字符串模拟 |\n\n","source":"ccf-csp/index.md","raw":"---\ntitle: CCF CSP\ndate: 2019-04-05 11:49:19\n---\n\n|   编号   |    标题    | C/C++ |                         Java                         |    备注    |\n| :------: | :--------: | :---: | :--------------------------------------------------: | :--------: |\n| 201803-1 |   跳一跳   |       |    [查看题解](/2018/06/05/ccf-csp-20180301-jump/)    |  简单循环  |\n| 201803-2 | 碰撞的小球 |       |   [查看题解](/2018/06/06/ccf-csp-20180302-crash/)    |            |\n| 201803-3 |  URL映射   |       | [查看题解](/2018/06/06/ccf-csp-20180303-urlmapping/) | 字符串模拟 |\n\n","updated":"2019-04-05T04:07:44.183Z","path":"ccf-csp/index.html","_id":"cju3j9aoq0007j1q0ubqnvlt8","comments":1,"layout":"page","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">编号</th>\n<th style=\"text-align:center\">标题</th>\n<th style=\"text-align:center\">C/C++</th>\n<th style=\"text-align:center\">Java</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">201803-1</td>\n<td style=\"text-align:center\">跳一跳</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><a href=\"/2018/06/05/ccf-csp-20180301-jump/\">查看题解</a></td>\n<td style=\"text-align:center\">简单循环</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">201803-2</td>\n<td style=\"text-align:center\">碰撞的小球</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><a href=\"/2018/06/06/ccf-csp-20180302-crash/\">查看题解</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">201803-3</td>\n<td style=\"text-align:center\">URL映射</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><a href=\"/2018/06/06/ccf-csp-20180303-urlmapping/\">查看题解</a></td>\n<td style=\"text-align:center\">字符串模拟</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">编号</th>\n<th style=\"text-align:center\">标题</th>\n<th style=\"text-align:center\">C/C++</th>\n<th style=\"text-align:center\">Java</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">201803-1</td>\n<td style=\"text-align:center\">跳一跳</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><a href=\"/2018/06/05/ccf-csp-20180301-jump/\">查看题解</a></td>\n<td style=\"text-align:center\">简单循环</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">201803-2</td>\n<td style=\"text-align:center\">碰撞的小球</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><a href=\"/2018/06/06/ccf-csp-20180302-crash/\">查看题解</a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">201803-3</td>\n<td style=\"text-align:center\">URL映射</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><a href=\"/2018/06/06/ccf-csp-20180303-urlmapping/\">查看题解</a></td>\n<td style=\"text-align:center\">字符串模拟</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"PAT甲级题解","date":"2019-03-20T03:21:02.000Z","_content":"\n| 编号 |       标题        |                   C/C++                    |   备注   |\n| :--: | :---------------: | :----------------------------------------: | :------: |\n| 1042 | Shuffling Machine | [查看题解](/2019/04/03/pat-advanced-1042/) | 简单模拟 |\n\n","source":"pat-advanced/index.md","raw":"---\ntitle: PAT甲级题解\ndate: 2019-03-20 11:21:02\n---\n\n| 编号 |       标题        |                   C/C++                    |   备注   |\n| :--: | :---------------: | :----------------------------------------: | :------: |\n| 1042 | Shuffling Machine | [查看题解](/2019/04/03/pat-advanced-1042/) | 简单模拟 |\n\n","updated":"2019-04-03T10:08:33.020Z","path":"pat-advanced/index.html","_id":"cju3j9aor0009j1q0axifltve","comments":1,"layout":"page","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">编号</th>\n<th style=\"text-align:center\">标题</th>\n<th style=\"text-align:center\">C/C++</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1042</td>\n<td style=\"text-align:center\">Shuffling Machine</td>\n<td style=\"text-align:center\"><a href=\"/2019/04/03/pat-advanced-1042/\">查看题解</a></td>\n<td style=\"text-align:center\">简单模拟</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">编号</th>\n<th style=\"text-align:center\">标题</th>\n<th style=\"text-align:center\">C/C++</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1042</td>\n<td style=\"text-align:center\">Shuffling Machine</td>\n<td style=\"text-align:center\"><a href=\"/2019/04/03/pat-advanced-1042/\">查看题解</a></td>\n<td style=\"text-align:center\">简单模拟</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"标签","date":"2018-03-24T14:07:33.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-03-24 22:07:33\ntype: \"tags\"\n---","updated":"2019-01-19T07:23:57.755Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cju3j9aou000dj1q0ixqq1rsm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"LeetCode题解","date":"2019-03-20T03:00:31.000Z","_content":"\n|  #   |                             题名                             |                             题解                             | 分类 |                    难度                     |\n| :--: | :----------------------------------------------------------: | :----------------------------------------------------------: | :--: | :-----------------------------------------: |\n|  21  | [合并两个有序链表](https://leetcode-cn.com/problems/merge-two-sorted-lists/) |  [查看题解](2019/04/05/leetcode-21-merge-two-sorted-lists/)  | 链表 |  <strong style=\"color:green\">简单</strong>  |\n|  23  | [合并K个排序链表](https://leetcode-cn.com/problems/merge-k-sorted-lists/) |  [查看题解](/2019/02/22/leetcode-23-merge-k-sorted-lists/)   | 链表 |   <strong style=\"color:red\">困难</strong>   |\n|  25  | [k个一组翻转链表](<https://leetcode-cn.com/problems/reverse-nodes-in-k-group/>) | [查看题解](/2019/04/04/leetcode-25-reverse-nodes-in-k-group/) | 链表 |   <strong style=\"color:red\">困难</strong>   |\n|  82  | [删除排序链表中的重复元素 II](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/) | [查看题解](/2019/02/27/leetcode-82-remove-duplicates-from-sorted-list-ii/) | 链表 | <strong style=\"color:#f0ad4e\">中等</strong> |\n\n","source":"leetcode/index.md","raw":"---\ntitle: LeetCode题解\ndate: 2019-03-20 11:00:31\n---\n\n|  #   |                             题名                             |                             题解                             | 分类 |                    难度                     |\n| :--: | :----------------------------------------------------------: | :----------------------------------------------------------: | :--: | :-----------------------------------------: |\n|  21  | [合并两个有序链表](https://leetcode-cn.com/problems/merge-two-sorted-lists/) |  [查看题解](2019/04/05/leetcode-21-merge-two-sorted-lists/)  | 链表 |  <strong style=\"color:green\">简单</strong>  |\n|  23  | [合并K个排序链表](https://leetcode-cn.com/problems/merge-k-sorted-lists/) |  [查看题解](/2019/02/22/leetcode-23-merge-k-sorted-lists/)   | 链表 |   <strong style=\"color:red\">困难</strong>   |\n|  25  | [k个一组翻转链表](<https://leetcode-cn.com/problems/reverse-nodes-in-k-group/>) | [查看题解](/2019/04/04/leetcode-25-reverse-nodes-in-k-group/) | 链表 |   <strong style=\"color:red\">困难</strong>   |\n|  82  | [删除排序链表中的重复元素 II](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/) | [查看题解](/2019/02/27/leetcode-82-remove-duplicates-from-sorted-list-ii/) | 链表 | <strong style=\"color:#f0ad4e\">中等</strong> |\n\n","updated":"2019-04-05T03:46:15.034Z","path":"leetcode/index.html","comments":1,"layout":"page","_id":"cju3j9aox000gj1q0f9dja6q6","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">#</th>\n<th style=\"text-align:center\">题名</th>\n<th style=\"text-align:center\">题解</th>\n<th style=\"text-align:center\">分类</th>\n<th style=\"text-align:center\">难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">21</td>\n<td style=\"text-align:center\"><a href=\"https://leetcode-cn.com/problems/merge-two-sorted-lists/\" target=\"_blank\" rel=\"noopener\">合并两个有序链表</a></td>\n<td style=\"text-align:center\"><a href=\"2019/04/05/leetcode-21-merge-two-sorted-lists/\">查看题解</a></td>\n<td style=\"text-align:center\">链表</td>\n<td style=\"text-align:center\"><strong style=\"color:green\">简单</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">23</td>\n<td style=\"text-align:center\"><a href=\"https://leetcode-cn.com/problems/merge-k-sorted-lists/\" target=\"_blank\" rel=\"noopener\">合并K个排序链表</a></td>\n<td style=\"text-align:center\"><a href=\"/2019/02/22/leetcode-23-merge-k-sorted-lists/\">查看题解</a></td>\n<td style=\"text-align:center\">链表</td>\n<td style=\"text-align:center\"><strong style=\"color:red\">困难</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25</td>\n<td style=\"text-align:center\"><a href=\"https://leetcode-cn.com/problems/reverse-nodes-in-k-group/\" target=\"_blank\" rel=\"noopener\">k个一组翻转链表</a></td>\n<td style=\"text-align:center\"><a href=\"/2019/04/04/leetcode-25-reverse-nodes-in-k-group/\">查看题解</a></td>\n<td style=\"text-align:center\">链表</td>\n<td style=\"text-align:center\"><strong style=\"color:red\">困难</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">82</td>\n<td style=\"text-align:center\"><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/\" target=\"_blank\" rel=\"noopener\">删除排序链表中的重复元素 II</a></td>\n<td style=\"text-align:center\"><a href=\"/2019/02/27/leetcode-82-remove-duplicates-from-sorted-list-ii/\">查看题解</a></td>\n<td style=\"text-align:center\">链表</td>\n<td style=\"text-align:center\"><strong style=\"color:#f0ad4e\">中等</strong></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">#</th>\n<th style=\"text-align:center\">题名</th>\n<th style=\"text-align:center\">题解</th>\n<th style=\"text-align:center\">分类</th>\n<th style=\"text-align:center\">难度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">21</td>\n<td style=\"text-align:center\"><a href=\"https://leetcode-cn.com/problems/merge-two-sorted-lists/\" target=\"_blank\" rel=\"noopener\">合并两个有序链表</a></td>\n<td style=\"text-align:center\"><a href=\"2019/04/05/leetcode-21-merge-two-sorted-lists/\">查看题解</a></td>\n<td style=\"text-align:center\">链表</td>\n<td style=\"text-align:center\"><strong style=\"color:green\">简单</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">23</td>\n<td style=\"text-align:center\"><a href=\"https://leetcode-cn.com/problems/merge-k-sorted-lists/\" target=\"_blank\" rel=\"noopener\">合并K个排序链表</a></td>\n<td style=\"text-align:center\"><a href=\"/2019/02/22/leetcode-23-merge-k-sorted-lists/\">查看题解</a></td>\n<td style=\"text-align:center\">链表</td>\n<td style=\"text-align:center\"><strong style=\"color:red\">困难</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25</td>\n<td style=\"text-align:center\"><a href=\"https://leetcode-cn.com/problems/reverse-nodes-in-k-group/\" target=\"_blank\" rel=\"noopener\">k个一组翻转链表</a></td>\n<td style=\"text-align:center\"><a href=\"/2019/04/04/leetcode-25-reverse-nodes-in-k-group/\">查看题解</a></td>\n<td style=\"text-align:center\">链表</td>\n<td style=\"text-align:center\"><strong style=\"color:red\">困难</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">82</td>\n<td style=\"text-align:center\"><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/\" target=\"_blank\" rel=\"noopener\">删除排序链表中的重复元素 II</a></td>\n<td style=\"text-align:center\"><a href=\"/2019/02/27/leetcode-82-remove-duplicates-from-sorted-list-ii/\">查看题解</a></td>\n<td style=\"text-align:center\">链表</td>\n<td style=\"text-align:center\"><strong style=\"color:#f0ad4e\">中等</strong></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"PAT乙级题解","date":"2019-03-20T03:20:47.000Z","_content":"\n| 编号 |           标题           |                  C/C++                  |   备注   |\n| :--: | :----------------------: | :-------------------------------------: | :------: |\n| 1001 | 害死人不偿命的(3n+1)猜想 | [查看题解](/2019/03/28/pat-basic-1001/) | 简单模拟 |\n| 1008 |   数组元素循环右移问题   | [查看题解](/2019/03/15/pat-basic-1008/) | 简单模拟 |\n| 1011 |         A+B 和 C         | [查看题解](/2019/03/28/pat-basic-1011/) | 简单模拟 |\n| 1012 |         数字分类         | [查看题解](/2019/04/01/pat-basic-1012/) | 简单模拟 |\n| 1016 |         部分A+B          | [查看题解](/2019/03/28/pat-basic-1016/) | 简单模拟 |\n| 1018 |        锤子剪刀布        | [查看题解](/2019/04/01/pat-basic-1018/) | 简单模拟 |\n| 1026 |       程序运行时间       | [查看题解](/2019/03/28/pat-basic-1026/) | 简单模拟 |\n| 1046 |           划拳           | [查看题解](/2019/03/31/pat-basic-1046/) | 简单模拟 |\n\n","source":"pat-basic/index.md","raw":"---\ntitle: PAT乙级题解\ndate: 2019-03-20 11:20:47\n---\n\n| 编号 |           标题           |                  C/C++                  |   备注   |\n| :--: | :----------------------: | :-------------------------------------: | :------: |\n| 1001 | 害死人不偿命的(3n+1)猜想 | [查看题解](/2019/03/28/pat-basic-1001/) | 简单模拟 |\n| 1008 |   数组元素循环右移问题   | [查看题解](/2019/03/15/pat-basic-1008/) | 简单模拟 |\n| 1011 |         A+B 和 C         | [查看题解](/2019/03/28/pat-basic-1011/) | 简单模拟 |\n| 1012 |         数字分类         | [查看题解](/2019/04/01/pat-basic-1012/) | 简单模拟 |\n| 1016 |         部分A+B          | [查看题解](/2019/03/28/pat-basic-1016/) | 简单模拟 |\n| 1018 |        锤子剪刀布        | [查看题解](/2019/04/01/pat-basic-1018/) | 简单模拟 |\n| 1026 |       程序运行时间       | [查看题解](/2019/03/28/pat-basic-1026/) | 简单模拟 |\n| 1046 |           划拳           | [查看题解](/2019/03/31/pat-basic-1046/) | 简单模拟 |\n\n","updated":"2019-04-01T08:54:23.063Z","path":"pat-basic/index.html","comments":1,"layout":"page","_id":"cju3j9ap1000jj1q0wzcju2iy","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">编号</th>\n<th style=\"text-align:center\">标题</th>\n<th style=\"text-align:center\">C/C++</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1001</td>\n<td style=\"text-align:center\">害死人不偿命的(3n+1)猜想</td>\n<td style=\"text-align:center\"><a href=\"/2019/03/28/pat-basic-1001/\">查看题解</a></td>\n<td style=\"text-align:center\">简单模拟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1008</td>\n<td style=\"text-align:center\">数组元素循环右移问题</td>\n<td style=\"text-align:center\"><a href=\"/2019/03/15/pat-basic-1008/\">查看题解</a></td>\n<td style=\"text-align:center\">简单模拟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1011</td>\n<td style=\"text-align:center\">A+B 和 C</td>\n<td style=\"text-align:center\"><a href=\"/2019/03/28/pat-basic-1011/\">查看题解</a></td>\n<td style=\"text-align:center\">简单模拟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1012</td>\n<td style=\"text-align:center\">数字分类</td>\n<td style=\"text-align:center\"><a href=\"/2019/04/01/pat-basic-1012/\">查看题解</a></td>\n<td style=\"text-align:center\">简单模拟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1016</td>\n<td style=\"text-align:center\">部分A+B</td>\n<td style=\"text-align:center\"><a href=\"/2019/03/28/pat-basic-1016/\">查看题解</a></td>\n<td style=\"text-align:center\">简单模拟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1018</td>\n<td style=\"text-align:center\">锤子剪刀布</td>\n<td style=\"text-align:center\"><a href=\"/2019/04/01/pat-basic-1018/\">查看题解</a></td>\n<td style=\"text-align:center\">简单模拟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1026</td>\n<td style=\"text-align:center\">程序运行时间</td>\n<td style=\"text-align:center\"><a href=\"/2019/03/28/pat-basic-1026/\">查看题解</a></td>\n<td style=\"text-align:center\">简单模拟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1046</td>\n<td style=\"text-align:center\">划拳</td>\n<td style=\"text-align:center\"><a href=\"/2019/03/31/pat-basic-1046/\">查看题解</a></td>\n<td style=\"text-align:center\">简单模拟</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">编号</th>\n<th style=\"text-align:center\">标题</th>\n<th style=\"text-align:center\">C/C++</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1001</td>\n<td style=\"text-align:center\">害死人不偿命的(3n+1)猜想</td>\n<td style=\"text-align:center\"><a href=\"/2019/03/28/pat-basic-1001/\">查看题解</a></td>\n<td style=\"text-align:center\">简单模拟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1008</td>\n<td style=\"text-align:center\">数组元素循环右移问题</td>\n<td style=\"text-align:center\"><a href=\"/2019/03/15/pat-basic-1008/\">查看题解</a></td>\n<td style=\"text-align:center\">简单模拟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1011</td>\n<td style=\"text-align:center\">A+B 和 C</td>\n<td style=\"text-align:center\"><a href=\"/2019/03/28/pat-basic-1011/\">查看题解</a></td>\n<td style=\"text-align:center\">简单模拟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1012</td>\n<td style=\"text-align:center\">数字分类</td>\n<td style=\"text-align:center\"><a href=\"/2019/04/01/pat-basic-1012/\">查看题解</a></td>\n<td style=\"text-align:center\">简单模拟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1016</td>\n<td style=\"text-align:center\">部分A+B</td>\n<td style=\"text-align:center\"><a href=\"/2019/03/28/pat-basic-1016/\">查看题解</a></td>\n<td style=\"text-align:center\">简单模拟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1018</td>\n<td style=\"text-align:center\">锤子剪刀布</td>\n<td style=\"text-align:center\"><a href=\"/2019/04/01/pat-basic-1018/\">查看题解</a></td>\n<td style=\"text-align:center\">简单模拟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1026</td>\n<td style=\"text-align:center\">程序运行时间</td>\n<td style=\"text-align:center\"><a href=\"/2019/03/28/pat-basic-1026/\">查看题解</a></td>\n<td style=\"text-align:center\">简单模拟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1046</td>\n<td style=\"text-align:center\">划拳</td>\n<td style=\"text-align:center\"><a href=\"/2019/03/31/pat-basic-1046/\">查看题解</a></td>\n<td style=\"text-align:center\">简单模拟</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"书单","date":"2018-05-26T12:14:08.000Z","_content":"<div class=\"booklist-tabs\"><a class=\"booklist-tab booklist-tab-active\" href=\"javascript:void(0)\" id=\"booklist-tab-1\" onclick=\"tabClick(1)\">Java</a>&nbsp;<a class=\"booklist-tab\" href=\"javascript:void(0)\" id=\"booklist-tab-2\" onclick=\"tabClick(2)\">Python</a>&nbsp;<a class=\"booklist-tab\" href=\"javascript:void(0)\" id=\"booklist-tab-3\" onclick=\"tabClick(3)\">数据库</a>&nbsp;<a class=\"booklist-tab\" href=\"javascript:void(0)\" id=\"booklist-tab-4\" onclick=\"tabClick(4)\">机器学习</a></div>&nbsp;<div class=\"booklist\" id=\"booklist-1\"><div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m6.ddimg.cn/86/32/24035306-1_b_6.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"https://item.jd.com/12037418.html\">Java核心技术 卷I</a></div><div class=\"book-author\">作者：(美)凯S.霍斯特曼</div><div class=\"book-summary\">在卷I中，Horstmann主要强调基本语言概念和现代用户界面编程基础，深入介绍了从Java面向对象编程到泛型、集合、lambda表达式、Swing UI设计以及并发和函数式编程的*新方法等内容。</div></div></div>&nbsp;<div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m2.ddimg.cn/53/15/25171892-1_b_2.jpg\"/></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"https://item.jd.com/12198563.html\">Java核心技术 卷Ⅱ</a></div><div class=\"book-author\">作者：(美)凯S.霍斯特曼</div><div class=\"book-summary\"></div></div></div>&nbsp;<div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m1.ddimg.cn/44/17/23918741-1_b_2.jpg\"/></div><div class=\"book-info\"><div class=\"book-title\">书名：<strong>数据结构与算法分析: Java语言描述</strong></div><div class=\"book-author\">作者：马克·艾伦·维斯(Mark Allen Weiss)</div><div class=\"book-summary\"></div></div></div>&nbsp;</div><div class=\"booklist\" id=\"booklist-2\"><div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m0.ddimg.cn/67/4/24003310-1_b_5.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/24003310.html\">Python编程 从入门到实践</a></div><div class=\"book-author\">作者：[美] 埃里克·马瑟斯 (Eric Matthes)</div><div class=\"book-summary\">本书是一本针对所有层次的Python读者而作的Python入门书。全书分两部分：首部分介绍用Python 编程所必须了解的基本概念，包括matplotlib、NumPy和Pygal等强大的Python库和工具介绍，以及列表、字典、if语句、类、文件与异常、代码测试等内容；第二部分将理论付诸实践，讲解如何开发三个项目，包括简单的Python 2D游戏开发，如何利用数据生成交互式的信息图，以及创建和定制简单的Web应用，并帮读者解决常见编程问题和困惑。</div></div></div></div>&nbsp;<div class=\"booklist\" id=\"booklist-3\"><div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m9.ddimg.cn/46/17/25163569-1_b_3.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/25163569.html\">Neo4j权威指南</a></div><div class=\"book-author\">作者：张帜</div><div class=\"book-summary\">本书基于Neo4j 3.1版本编写，共分9章，外加两个附录，涵盖基本概念、基础入门、查询语言、开发技术、管理运维、集群技术、应用案例、高级应用、中文扩展、配置设置、内建过程等内容。</div></div></div></div>&nbsp;<div class=\"booklist\" id=\"booklist-4\"><div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m7.ddimg.cn/43/25/23254747-1_b_3.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/23254747.html\">机器学习实战</a></div><div class=\"book-author\">作者：Peter Harrington</div><div class=\"book-summary\">本书通过精心编排的实例，切入日常工作任务，摒弃学术化语言，利用高效可复用的Python代码阐释如何处理统计数据，进行数据分析及可视化。读者可从中学到一些核心的机器学习算法，并将其运用于某些策略性任务中，如分类、预测及推荐等。</div></div></div>&nbsp;<div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m0.ddimg.cn/20/24/23898620-1_b_3.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/23898620.html\">机器学习</a></div><div class=\"book-author\">作者：周志华</div><div class=\"book-summary\">机器学习是计算机科学与人工智能的重要分支领域. 本书作为该领域的入门教材，在内容上尽可能涵盖机器学习基础知识的各方面. 全书共16 章，大致分为3 个部分：第1 部分（第1～3 章）介绍机器学习的基础知识；第2 部分（第4～10 章）讨论一些经典而常用的机器学习方法（决策树、神经网络、支持向量机、贝叶斯分类器、集成学习、聚类、降维与度量学习）；第3 部分（第11～16 章）为进阶知识，内容涉及特征选择与稀疏学习、计算学习理论、半监督学习、概率图模型、规则学习以及强化学习等. 每章都附有习题并介绍了相关阅读材料，以便有兴趣的读者进一步钻研探索。</div></div></div>&nbsp;<div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m0.ddimg.cn/29/0/25295420-1_b_2.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/25295420.html\">统计学习方法</a></div><div class=\"book-author\">作者：李航</div><div class=\"book-summary\">本书全面系统地介绍了统计学习的主要方法，特别是监督学习方法，包括感知机、k近邻法、朴素贝叶斯法、决策树、逻辑斯谛回归与*熵模型、支持向量机、提升方法、em算法、隐马尔可夫模型和条件*场等。除第1章概论和*后一章总结外，每章介绍一种方法。叙述从具体问题或实例入手，由浅入深，阐明思路，给出必要的数学推导，便于读者掌握统计学习方法的实质，学会运用。为满足读者进一步学习的需要，书中还介绍了一些相关研究，给出了少量习题，列出了主要参考文献。</div></div></div>\n</div>\n\n\n\n<!--\n\n### Java\n\n* [Java核心技术 卷I](https://item.jd.com/12037418.html)，(美) 凯S.霍斯特曼，机械工业出版社\n* [Java核心技术 卷Ⅱ](https://item.jd.com/12198563.html)，(美) 凯S.霍斯特曼，机械工业出版社\n* [Java多线程编程核心技术](https://item.jd.com/11701869.html)，高洪岩，机械工业出版社\n* [数据结构与算法分析: Java语言描述](https://item.jd.com/11886254.html)，马克·艾伦·维斯(Mark Allen Weiss)，机械工业出版社\n\n### Python\n\n* [Python编程 从入门到实践](https://item.jd.com/11993134.html)，[美] 埃里克·马瑟斯 (Eric Matthes)\n\n### 数据库\n* Neo4j权威指南，张帜，清华大学出版社\n\n### 机器学习\n\n* **机器学习实战**，[美] Peter Harrington，人民邮电出版社\n\n* **机器学习**，周志华，清华大学出版社\n* **统计学习方法**，李航，清华大学出版社\n\n### 深度学习\n\n* **深度学习**，[美] 伊恩·古德费洛 （Ian Goodfellow），人民邮电出版社\n\n### 自然语言处理\n\n* **Java自然语言处理**，[美] 理查德 M 里斯 (Richard M. Reese)，机械工业出版社\n\n-->\n\n<script type=\"text/javascript\">\n    function tabClick(no) {\n        var tab = document.getElementById(\"booklist-tab-\"+no);\n        /*if(tab.className == \"booklist-tab booklist-tab-active\") {\n            return;\n        }*/\n        tab.className = \"booklist-tab booklist-tab-active\";\n        var tabs = document.getElementsByClassName(\"booklist-tab\");\n        for(var i = 0;i<tabs.length;i++) {\n            if(tabs[i] != tab) {\n                tabs[i].className = \"booklist-tab\";\n            }\n        }\n        var booklist = document.getElementById(\"booklist-\"+no);\n        var booklists = document.getElementsByClassName(\"booklist\");\n        for(var i = 0;i<booklists.length;i++) {\n            if(booklists[i] != booklist) {\n                booklists[i].style.display = \"none\";\n            }\n        }\n        booklist.style.display = \"block\";\n    }\n    window.onload = function(){\n        tabClick(1);\n    };\n</script>\n\n","source":"booklist/index.md","raw":"---\ntitle: 书单\ndate: 2018-05-26 20:14:08\n---\n<div class=\"booklist-tabs\"><a class=\"booklist-tab booklist-tab-active\" href=\"javascript:void(0)\" id=\"booklist-tab-1\" onclick=\"tabClick(1)\">Java</a>&nbsp;<a class=\"booklist-tab\" href=\"javascript:void(0)\" id=\"booklist-tab-2\" onclick=\"tabClick(2)\">Python</a>&nbsp;<a class=\"booklist-tab\" href=\"javascript:void(0)\" id=\"booklist-tab-3\" onclick=\"tabClick(3)\">数据库</a>&nbsp;<a class=\"booklist-tab\" href=\"javascript:void(0)\" id=\"booklist-tab-4\" onclick=\"tabClick(4)\">机器学习</a></div>&nbsp;<div class=\"booklist\" id=\"booklist-1\"><div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m6.ddimg.cn/86/32/24035306-1_b_6.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"https://item.jd.com/12037418.html\">Java核心技术 卷I</a></div><div class=\"book-author\">作者：(美)凯S.霍斯特曼</div><div class=\"book-summary\">在卷I中，Horstmann主要强调基本语言概念和现代用户界面编程基础，深入介绍了从Java面向对象编程到泛型、集合、lambda表达式、Swing UI设计以及并发和函数式编程的*新方法等内容。</div></div></div>&nbsp;<div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m2.ddimg.cn/53/15/25171892-1_b_2.jpg\"/></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"https://item.jd.com/12198563.html\">Java核心技术 卷Ⅱ</a></div><div class=\"book-author\">作者：(美)凯S.霍斯特曼</div><div class=\"book-summary\"></div></div></div>&nbsp;<div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m1.ddimg.cn/44/17/23918741-1_b_2.jpg\"/></div><div class=\"book-info\"><div class=\"book-title\">书名：<strong>数据结构与算法分析: Java语言描述</strong></div><div class=\"book-author\">作者：马克·艾伦·维斯(Mark Allen Weiss)</div><div class=\"book-summary\"></div></div></div>&nbsp;</div><div class=\"booklist\" id=\"booklist-2\"><div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m0.ddimg.cn/67/4/24003310-1_b_5.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/24003310.html\">Python编程 从入门到实践</a></div><div class=\"book-author\">作者：[美] 埃里克·马瑟斯 (Eric Matthes)</div><div class=\"book-summary\">本书是一本针对所有层次的Python读者而作的Python入门书。全书分两部分：首部分介绍用Python 编程所必须了解的基本概念，包括matplotlib、NumPy和Pygal等强大的Python库和工具介绍，以及列表、字典、if语句、类、文件与异常、代码测试等内容；第二部分将理论付诸实践，讲解如何开发三个项目，包括简单的Python 2D游戏开发，如何利用数据生成交互式的信息图，以及创建和定制简单的Web应用，并帮读者解决常见编程问题和困惑。</div></div></div></div>&nbsp;<div class=\"booklist\" id=\"booklist-3\"><div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m9.ddimg.cn/46/17/25163569-1_b_3.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/25163569.html\">Neo4j权威指南</a></div><div class=\"book-author\">作者：张帜</div><div class=\"book-summary\">本书基于Neo4j 3.1版本编写，共分9章，外加两个附录，涵盖基本概念、基础入门、查询语言、开发技术、管理运维、集群技术、应用案例、高级应用、中文扩展、配置设置、内建过程等内容。</div></div></div></div>&nbsp;<div class=\"booklist\" id=\"booklist-4\"><div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m7.ddimg.cn/43/25/23254747-1_b_3.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/23254747.html\">机器学习实战</a></div><div class=\"book-author\">作者：Peter Harrington</div><div class=\"book-summary\">本书通过精心编排的实例，切入日常工作任务，摒弃学术化语言，利用高效可复用的Python代码阐释如何处理统计数据，进行数据分析及可视化。读者可从中学到一些核心的机器学习算法，并将其运用于某些策略性任务中，如分类、预测及推荐等。</div></div></div>&nbsp;<div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m0.ddimg.cn/20/24/23898620-1_b_3.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/23898620.html\">机器学习</a></div><div class=\"book-author\">作者：周志华</div><div class=\"book-summary\">机器学习是计算机科学与人工智能的重要分支领域. 本书作为该领域的入门教材，在内容上尽可能涵盖机器学习基础知识的各方面. 全书共16 章，大致分为3 个部分：第1 部分（第1～3 章）介绍机器学习的基础知识；第2 部分（第4～10 章）讨论一些经典而常用的机器学习方法（决策树、神经网络、支持向量机、贝叶斯分类器、集成学习、聚类、降维与度量学习）；第3 部分（第11～16 章）为进阶知识，内容涉及特征选择与稀疏学习、计算学习理论、半监督学习、概率图模型、规则学习以及强化学习等. 每章都附有习题并介绍了相关阅读材料，以便有兴趣的读者进一步钻研探索。</div></div></div>&nbsp;<div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m0.ddimg.cn/29/0/25295420-1_b_2.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/25295420.html\">统计学习方法</a></div><div class=\"book-author\">作者：李航</div><div class=\"book-summary\">本书全面系统地介绍了统计学习的主要方法，特别是监督学习方法，包括感知机、k近邻法、朴素贝叶斯法、决策树、逻辑斯谛回归与*熵模型、支持向量机、提升方法、em算法、隐马尔可夫模型和条件*场等。除第1章概论和*后一章总结外，每章介绍一种方法。叙述从具体问题或实例入手，由浅入深，阐明思路，给出必要的数学推导，便于读者掌握统计学习方法的实质，学会运用。为满足读者进一步学习的需要，书中还介绍了一些相关研究，给出了少量习题，列出了主要参考文献。</div></div></div>\n</div>\n\n\n\n<!--\n\n### Java\n\n* [Java核心技术 卷I](https://item.jd.com/12037418.html)，(美) 凯S.霍斯特曼，机械工业出版社\n* [Java核心技术 卷Ⅱ](https://item.jd.com/12198563.html)，(美) 凯S.霍斯特曼，机械工业出版社\n* [Java多线程编程核心技术](https://item.jd.com/11701869.html)，高洪岩，机械工业出版社\n* [数据结构与算法分析: Java语言描述](https://item.jd.com/11886254.html)，马克·艾伦·维斯(Mark Allen Weiss)，机械工业出版社\n\n### Python\n\n* [Python编程 从入门到实践](https://item.jd.com/11993134.html)，[美] 埃里克·马瑟斯 (Eric Matthes)\n\n### 数据库\n* Neo4j权威指南，张帜，清华大学出版社\n\n### 机器学习\n\n* **机器学习实战**，[美] Peter Harrington，人民邮电出版社\n\n* **机器学习**，周志华，清华大学出版社\n* **统计学习方法**，李航，清华大学出版社\n\n### 深度学习\n\n* **深度学习**，[美] 伊恩·古德费洛 （Ian Goodfellow），人民邮电出版社\n\n### 自然语言处理\n\n* **Java自然语言处理**，[美] 理查德 M 里斯 (Richard M. Reese)，机械工业出版社\n\n-->\n\n<script type=\"text/javascript\">\n    function tabClick(no) {\n        var tab = document.getElementById(\"booklist-tab-\"+no);\n        /*if(tab.className == \"booklist-tab booklist-tab-active\") {\n            return;\n        }*/\n        tab.className = \"booklist-tab booklist-tab-active\";\n        var tabs = document.getElementsByClassName(\"booklist-tab\");\n        for(var i = 0;i<tabs.length;i++) {\n            if(tabs[i] != tab) {\n                tabs[i].className = \"booklist-tab\";\n            }\n        }\n        var booklist = document.getElementById(\"booklist-\"+no);\n        var booklists = document.getElementsByClassName(\"booklist\");\n        for(var i = 0;i<booklists.length;i++) {\n            if(booklists[i] != booklist) {\n                booklists[i].style.display = \"none\";\n            }\n        }\n        booklist.style.display = \"block\";\n    }\n    window.onload = function(){\n        tabClick(1);\n    };\n</script>\n\n","updated":"2019-01-19T07:23:57.755Z","path":"booklist/index.html","comments":1,"layout":"page","_id":"cju3j9au600dkj1q0z6s5e6ru","content":"<div class=\"booklist-tabs\"><a class=\"booklist-tab booklist-tab-active\" href=\"javascript:void(0)\" id=\"booklist-tab-1\" onclick=\"tabClick(1)\" target=\"_blank\" rel=\"noopener\">Java</a>&nbsp;<a class=\"booklist-tab\" href=\"javascript:void(0)\" id=\"booklist-tab-2\" onclick=\"tabClick(2)\" target=\"_blank\" rel=\"noopener\">Python</a>&nbsp;<a class=\"booklist-tab\" href=\"javascript:void(0)\" id=\"booklist-tab-3\" onclick=\"tabClick(3)\" target=\"_blank\" rel=\"noopener\">数据库</a>&nbsp;<a class=\"booklist-tab\" href=\"javascript:void(0)\" id=\"booklist-tab-4\" onclick=\"tabClick(4)\" target=\"_blank\" rel=\"noopener\">机器学习</a></div>&nbsp;<div class=\"booklist\" id=\"booklist-1\"><div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m6.ddimg.cn/86/32/24035306-1_b_6.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"https://item.jd.com/12037418.html\" target=\"_blank\" rel=\"noopener\">Java核心技术 卷I</a></div><div class=\"book-author\">作者：(美)凯S.霍斯特曼</div><div class=\"book-summary\">在卷I中，Horstmann主要强调基本语言概念和现代用户界面编程基础，深入介绍了从Java面向对象编程到泛型、集合、lambda表达式、Swing UI设计以及并发和函数式编程的<em>新方法等内容。</em></div></div></div>&nbsp;<div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m2.ddimg.cn/53/15/25171892-1_b_2.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"https://item.jd.com/12198563.html\" target=\"_blank\" rel=\"noopener\">Java核心技术 卷Ⅱ</a></div><div class=\"book-author\">作者：(美)凯S.霍斯特曼</div><div class=\"book-summary\"></div></div></div>&nbsp;<div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m1.ddimg.cn/44/17/23918741-1_b_2.jpg\"></div><div class=\"book-info\"><div class=\"book-title\">书名：<strong>数据结构与算法分析: Java语言描述</strong></div><div class=\"book-author\">作者：马克·艾伦·维斯(Mark Allen Weiss)</div><div class=\"book-summary\"></div></div></div>&nbsp;</div><div class=\"booklist\" id=\"booklist-2\"><div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m0.ddimg.cn/67/4/24003310-1_b_5.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/24003310.html\" target=\"_blank\" rel=\"noopener\">Python编程 从入门到实践</a></div><div class=\"book-author\">作者：[美] 埃里克·马瑟斯 (Eric Matthes)</div><div class=\"book-summary\">本书是一本针对所有层次的Python读者而作的Python入门书。全书分两部分：首部分介绍用Python 编程所必须了解的基本概念，包括matplotlib、NumPy和Pygal等强大的Python库和工具介绍，以及列表、字典、if语句、类、文件与异常、代码测试等内容；第二部分将理论付诸实践，讲解如何开发三个项目，包括简单的Python 2D游戏开发，如何利用数据生成交互式的信息图，以及创建和定制简单的Web应用，并帮读者解决常见编程问题和困惑。</div></div></div></div>&nbsp;<div class=\"booklist\" id=\"booklist-3\"><div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m9.ddimg.cn/46/17/25163569-1_b_3.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/25163569.html\" target=\"_blank\" rel=\"noopener\">Neo4j权威指南</a></div><div class=\"book-author\">作者：张帜</div><div class=\"book-summary\">本书基于Neo4j 3.1版本编写，共分9章，外加两个附录，涵盖基本概念、基础入门、查询语言、开发技术、管理运维、集群技术、应用案例、高级应用、中文扩展、配置设置、内建过程等内容。</div></div></div></div>&nbsp;<div class=\"booklist\" id=\"booklist-4\"><div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m7.ddimg.cn/43/25/23254747-1_b_3.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/23254747.html\" target=\"_blank\" rel=\"noopener\">机器学习实战</a></div><div class=\"book-author\">作者：Peter Harrington</div><div class=\"book-summary\">本书通过精心编排的实例，切入日常工作任务，摒弃学术化语言，利用高效可复用的Python代码阐释如何处理统计数据，进行数据分析及可视化。读者可从中学到一些核心的机器学习算法，并将其运用于某些策略性任务中，如分类、预测及推荐等。</div></div></div>&nbsp;<div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m0.ddimg.cn/20/24/23898620-1_b_3.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/23898620.html\" target=\"_blank\" rel=\"noopener\">机器学习</a></div><div class=\"book-author\">作者：周志华</div><div class=\"book-summary\">机器学习是计算机科学与人工智能的重要分支领域. 本书作为该领域的入门教材，在内容上尽可能涵盖机器学习基础知识的各方面. 全书共16 章，大致分为3 个部分：第1 部分（第1～3 章）介绍机器学习的基础知识；第2 部分（第4～10 章）讨论一些经典而常用的机器学习方法（决策树、神经网络、支持向量机、贝叶斯分类器、集成学习、聚类、降维与度量学习）；第3 部分（第11～16 章）为进阶知识，内容涉及特征选择与稀疏学习、计算学习理论、半监督学习、概率图模型、规则学习以及强化学习等. 每章都附有习题并介绍了相关阅读材料，以便有兴趣的读者进一步钻研探索。</div></div></div>&nbsp;<div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m0.ddimg.cn/29/0/25295420-1_b_2.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/25295420.html\" target=\"_blank\" rel=\"noopener\">统计学习方法</a></div><div class=\"book-author\">作者：李航</div><div class=\"book-summary\">本书全面系统地介绍了统计学习的主要方法，特别是监督学习方法，包括感知机、k近邻法、朴素贝叶斯法、决策树、逻辑斯谛回归与熵模型、支持向量机、提升方法、em算法、隐马尔可夫模型和条件<em>场等。除第1章概论和</em>后一章总结外，每章介绍一种方法。叙述从具体问题或实例入手，由浅入深，阐明思路，给出必要的数学推导，便于读者掌握统计学习方法的实质，学会运用。为满足读者进一步学习的需要，书中还介绍了一些相关研究，给出了少量习题，列出了主要参考文献。</div></div></div><br></div>\n\n\n\n<!--\n\n### Java\n\n* [Java核心技术 卷I](https://item.jd.com/12037418.html)，(美) 凯S.霍斯特曼，机械工业出版社\n* [Java核心技术 卷Ⅱ](https://item.jd.com/12198563.html)，(美) 凯S.霍斯特曼，机械工业出版社\n* [Java多线程编程核心技术](https://item.jd.com/11701869.html)，高洪岩，机械工业出版社\n* [数据结构与算法分析: Java语言描述](https://item.jd.com/11886254.html)，马克·艾伦·维斯(Mark Allen Weiss)，机械工业出版社\n\n### Python\n\n* [Python编程 从入门到实践](https://item.jd.com/11993134.html)，[美] 埃里克·马瑟斯 (Eric Matthes)\n\n### 数据库\n* Neo4j权威指南，张帜，清华大学出版社\n\n### 机器学习\n\n* **机器学习实战**，[美] Peter Harrington，人民邮电出版社\n\n* **机器学习**，周志华，清华大学出版社\n* **统计学习方法**，李航，清华大学出版社\n\n### 深度学习\n\n* **深度学习**，[美] 伊恩·古德费洛 （Ian Goodfellow），人民邮电出版社\n\n### 自然语言处理\n\n* **Java自然语言处理**，[美] 理查德 M 里斯 (Richard M. Reese)，机械工业出版社\n\n-->\n<script type=\"text/javascript\">\n    function tabClick(no) {\n        var tab = document.getElementById(\"booklist-tab-\"+no);\n        /*if(tab.className == \"booklist-tab booklist-tab-active\") {\n            return;\n        }*/\n        tab.className = \"booklist-tab booklist-tab-active\";\n        var tabs = document.getElementsByClassName(\"booklist-tab\");\n        for(var i = 0;i<tabs.length;i++) {\n            if(tabs[i] != tab) {\n                tabs[i].className = \"booklist-tab\";\n            }\n        }\n        var booklist = document.getElementById(\"booklist-\"+no);\n        var booklists = document.getElementsByClassName(\"booklist\");\n        for(var i = 0;i<booklists.length;i++) {\n            if(booklists[i] != booklist) {\n                booklists[i].style.display = \"none\";\n            }\n        }\n        booklist.style.display = \"block\";\n    }\n    window.onload = function(){\n        tabClick(1);\n    };\n</script>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"booklist-tabs\"><a class=\"booklist-tab booklist-tab-active\" href=\"javascript:void(0)\" id=\"booklist-tab-1\" onclick=\"tabClick(1)\" target=\"_blank\" rel=\"noopener\">Java</a>&nbsp;<a class=\"booklist-tab\" href=\"javascript:void(0)\" id=\"booklist-tab-2\" onclick=\"tabClick(2)\" target=\"_blank\" rel=\"noopener\">Python</a>&nbsp;<a class=\"booklist-tab\" href=\"javascript:void(0)\" id=\"booklist-tab-3\" onclick=\"tabClick(3)\" target=\"_blank\" rel=\"noopener\">数据库</a>&nbsp;<a class=\"booklist-tab\" href=\"javascript:void(0)\" id=\"booklist-tab-4\" onclick=\"tabClick(4)\" target=\"_blank\" rel=\"noopener\">机器学习</a></div>&nbsp;<div class=\"booklist\" id=\"booklist-1\"><div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m6.ddimg.cn/86/32/24035306-1_b_6.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"https://item.jd.com/12037418.html\" target=\"_blank\" rel=\"noopener\">Java核心技术 卷I</a></div><div class=\"book-author\">作者：(美)凯S.霍斯特曼</div><div class=\"book-summary\">在卷I中，Horstmann主要强调基本语言概念和现代用户界面编程基础，深入介绍了从Java面向对象编程到泛型、集合、lambda表达式、Swing UI设计以及并发和函数式编程的<em>新方法等内容。</em></div></div></div>&nbsp;<div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m2.ddimg.cn/53/15/25171892-1_b_2.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"https://item.jd.com/12198563.html\" target=\"_blank\" rel=\"noopener\">Java核心技术 卷Ⅱ</a></div><div class=\"book-author\">作者：(美)凯S.霍斯特曼</div><div class=\"book-summary\"></div></div></div>&nbsp;<div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m1.ddimg.cn/44/17/23918741-1_b_2.jpg\"></div><div class=\"book-info\"><div class=\"book-title\">书名：<strong>数据结构与算法分析: Java语言描述</strong></div><div class=\"book-author\">作者：马克·艾伦·维斯(Mark Allen Weiss)</div><div class=\"book-summary\"></div></div></div>&nbsp;</div><div class=\"booklist\" id=\"booklist-2\"><div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m0.ddimg.cn/67/4/24003310-1_b_5.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/24003310.html\" target=\"_blank\" rel=\"noopener\">Python编程 从入门到实践</a></div><div class=\"book-author\">作者：[美] 埃里克·马瑟斯 (Eric Matthes)</div><div class=\"book-summary\">本书是一本针对所有层次的Python读者而作的Python入门书。全书分两部分：首部分介绍用Python 编程所必须了解的基本概念，包括matplotlib、NumPy和Pygal等强大的Python库和工具介绍，以及列表、字典、if语句、类、文件与异常、代码测试等内容；第二部分将理论付诸实践，讲解如何开发三个项目，包括简单的Python 2D游戏开发，如何利用数据生成交互式的信息图，以及创建和定制简单的Web应用，并帮读者解决常见编程问题和困惑。</div></div></div></div>&nbsp;<div class=\"booklist\" id=\"booklist-3\"><div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m9.ddimg.cn/46/17/25163569-1_b_3.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/25163569.html\" target=\"_blank\" rel=\"noopener\">Neo4j权威指南</a></div><div class=\"book-author\">作者：张帜</div><div class=\"book-summary\">本书基于Neo4j 3.1版本编写，共分9章，外加两个附录，涵盖基本概念、基础入门、查询语言、开发技术、管理运维、集群技术、应用案例、高级应用、中文扩展、配置设置、内建过程等内容。</div></div></div></div>&nbsp;<div class=\"booklist\" id=\"booklist-4\"><div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m7.ddimg.cn/43/25/23254747-1_b_3.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/23254747.html\" target=\"_blank\" rel=\"noopener\">机器学习实战</a></div><div class=\"book-author\">作者：Peter Harrington</div><div class=\"book-summary\">本书通过精心编排的实例，切入日常工作任务，摒弃学术化语言，利用高效可复用的Python代码阐释如何处理统计数据，进行数据分析及可视化。读者可从中学到一些核心的机器学习算法，并将其运用于某些策略性任务中，如分类、预测及推荐等。</div></div></div>&nbsp;<div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m0.ddimg.cn/20/24/23898620-1_b_3.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/23898620.html\" target=\"_blank\" rel=\"noopener\">机器学习</a></div><div class=\"book-author\">作者：周志华</div><div class=\"book-summary\">机器学习是计算机科学与人工智能的重要分支领域. 本书作为该领域的入门教材，在内容上尽可能涵盖机器学习基础知识的各方面. 全书共16 章，大致分为3 个部分：第1 部分（第1～3 章）介绍机器学习的基础知识；第2 部分（第4～10 章）讨论一些经典而常用的机器学习方法（决策树、神经网络、支持向量机、贝叶斯分类器、集成学习、聚类、降维与度量学习）；第3 部分（第11～16 章）为进阶知识，内容涉及特征选择与稀疏学习、计算学习理论、半监督学习、概率图模型、规则学习以及强化学习等. 每章都附有习题并介绍了相关阅读材料，以便有兴趣的读者进一步钻研探索。</div></div></div>&nbsp;<div class=\"book\"><div class=\"book-picture\"><img src=\"http://img3m0.ddimg.cn/29/0/25295420-1_b_2.jpg\"></div><div class=\"book-info\"><div class=\"book-title\"><a href=\"http://product.dangdang.com/25295420.html\" target=\"_blank\" rel=\"noopener\">统计学习方法</a></div><div class=\"book-author\">作者：李航</div><div class=\"book-summary\">本书全面系统地介绍了统计学习的主要方法，特别是监督学习方法，包括感知机、k近邻法、朴素贝叶斯法、决策树、逻辑斯谛回归与熵模型、支持向量机、提升方法、em算法、隐马尔可夫模型和条件<em>场等。除第1章概论和</em>后一章总结外，每章介绍一种方法。叙述从具体问题或实例入手，由浅入深，阐明思路，给出必要的数学推导，便于读者掌握统计学习方法的实质，学会运用。为满足读者进一步学习的需要，书中还介绍了一些相关研究，给出了少量习题，列出了主要参考文献。</div></div></div><br></div>\n\n\n\n<!--\n\n### Java\n\n* [Java核心技术 卷I](https://item.jd.com/12037418.html)，(美) 凯S.霍斯特曼，机械工业出版社\n* [Java核心技术 卷Ⅱ](https://item.jd.com/12198563.html)，(美) 凯S.霍斯特曼，机械工业出版社\n* [Java多线程编程核心技术](https://item.jd.com/11701869.html)，高洪岩，机械工业出版社\n* [数据结构与算法分析: Java语言描述](https://item.jd.com/11886254.html)，马克·艾伦·维斯(Mark Allen Weiss)，机械工业出版社\n\n### Python\n\n* [Python编程 从入门到实践](https://item.jd.com/11993134.html)，[美] 埃里克·马瑟斯 (Eric Matthes)\n\n### 数据库\n* Neo4j权威指南，张帜，清华大学出版社\n\n### 机器学习\n\n* **机器学习实战**，[美] Peter Harrington，人民邮电出版社\n\n* **机器学习**，周志华，清华大学出版社\n* **统计学习方法**，李航，清华大学出版社\n\n### 深度学习\n\n* **深度学习**，[美] 伊恩·古德费洛 （Ian Goodfellow），人民邮电出版社\n\n### 自然语言处理\n\n* **Java自然语言处理**，[美] 理查德 M 里斯 (Richard M. Reese)，机械工业出版社\n\n-->\n<script type=\"text/javascript\">\n    function tabClick(no) {\n        var tab = document.getElementById(\"booklist-tab-\"+no);\n        /*if(tab.className == \"booklist-tab booklist-tab-active\") {\n            return;\n        }*/\n        tab.className = \"booklist-tab booklist-tab-active\";\n        var tabs = document.getElementsByClassName(\"booklist-tab\");\n        for(var i = 0;i<tabs.length;i++) {\n            if(tabs[i] != tab) {\n                tabs[i].className = \"booklist-tab\";\n            }\n        }\n        var booklist = document.getElementById(\"booklist-\"+no);\n        var booklists = document.getElementsByClassName(\"booklist\");\n        for(var i = 0;i<booklists.length;i++) {\n            if(booklists[i] != booklist) {\n                booklists[i].style.display = \"none\";\n            }\n        }\n        booklist.style.display = \"block\";\n    }\n    window.onload = function(){\n        tabClick(1);\n    };\n</script>\n\n"}],"Post":[{"title":"2018年度总结","date":"2019-01-04T08:46:40.000Z","updated":"2019-01-04T08:46:40.000Z","_content":"\n目标明确，才能不迷失方向！是时候总结下过去一年的收获了，顺便给新的一年制定下计划。\n<!--more-->\n\n# 2018年度总结\n\n* 3月27日，武汉大学计算机学院硕士研究生拟录取结果公布\n* 4月12日，进入朱卫平老师的智慧爬虫小组\n* 7月3日，“乐渔”课程教学系统 软件著作权申请（10月15日审批通过）\n* 9月5日，进入丁立新老师的课题组（原国软的老师不能带原计算机的学生）\n* 11月22日，结束考研辅导（6月1日开始）\n* 12月5日，“锐捷杯”华中区研究生程序设计大赛一轮游(accept 3/10)，rank 34/105\n* 12月16日，第十五次CSP 130分\n\n# 2019年度计划\n\n* 1-2月，项目开发（软著）\n* 3月17日，第十六次CSP，目标300\n* 5月，CET6，标500+\n* 5月25日，软考系统分析师\n* 9月22日，第十七次CSP，目标400\n* 10月，CCSP竞赛，目标铜牌\n* 11月9日，软考系统架构设计师\n* 12月，“锐捷杯”华中区研究生程序设计大赛，目标三等奖","source":"_posts/2018-year-end-summary.md","raw":"---\ntitle: 2018年度总结\ndate: 2019-01-04 16:46:40\nupdated: 2019-01-04 16:46:40\ntags: 任重而道远\ncategories: 任重而道远\n---\n\n目标明确，才能不迷失方向！是时候总结下过去一年的收获了，顺便给新的一年制定下计划。\n<!--more-->\n\n# 2018年度总结\n\n* 3月27日，武汉大学计算机学院硕士研究生拟录取结果公布\n* 4月12日，进入朱卫平老师的智慧爬虫小组\n* 7月3日，“乐渔”课程教学系统 软件著作权申请（10月15日审批通过）\n* 9月5日，进入丁立新老师的课题组（原国软的老师不能带原计算机的学生）\n* 11月22日，结束考研辅导（6月1日开始）\n* 12月5日，“锐捷杯”华中区研究生程序设计大赛一轮游(accept 3/10)，rank 34/105\n* 12月16日，第十五次CSP 130分\n\n# 2019年度计划\n\n* 1-2月，项目开发（软著）\n* 3月17日，第十六次CSP，目标300\n* 5月，CET6，标500+\n* 5月25日，软考系统分析师\n* 9月22日，第十七次CSP，目标400\n* 10月，CCSP竞赛，目标铜牌\n* 11月9日，软考系统架构设计师\n* 12月，“锐捷杯”华中区研究生程序设计大赛，目标三等奖","slug":"2018-year-end-summary","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aoe0000j1q02snlopxm","content":"<p>目标明确，才能不迷失方向！是时候总结下过去一年的收获了，顺便给新的一年制定下计划。<br><a id=\"more\"></a></p>\n<h1 id=\"2018年度总结\"><a href=\"#2018年度总结\" class=\"headerlink\" title=\"2018年度总结\"></a>2018年度总结</h1><ul>\n<li>3月27日，武汉大学计算机学院硕士研究生拟录取结果公布</li>\n<li>4月12日，进入朱卫平老师的智慧爬虫小组</li>\n<li>7月3日，“乐渔”课程教学系统 软件著作权申请（10月15日审批通过）</li>\n<li>9月5日，进入丁立新老师的课题组（原国软的老师不能带原计算机的学生）</li>\n<li>11月22日，结束考研辅导（6月1日开始）</li>\n<li>12月5日，“锐捷杯”华中区研究生程序设计大赛一轮游(accept 3/10)，rank 34/105</li>\n<li>12月16日，第十五次CSP 130分</li>\n</ul>\n<h1 id=\"2019年度计划\"><a href=\"#2019年度计划\" class=\"headerlink\" title=\"2019年度计划\"></a>2019年度计划</h1><ul>\n<li>1-2月，项目开发（软著）</li>\n<li>3月17日，第十六次CSP，目标300</li>\n<li>5月，CET6，标500+</li>\n<li>5月25日，软考系统分析师</li>\n<li>9月22日，第十七次CSP，目标400</li>\n<li>10月，CCSP竞赛，目标铜牌</li>\n<li>11月9日，软考系统架构设计师</li>\n<li>12月，“锐捷杯”华中区研究生程序设计大赛，目标三等奖</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>目标明确，才能不迷失方向！是时候总结下过去一年的收获了，顺便给新的一年制定下计划。<br>","more":"</p>\n<h1 id=\"2018年度总结\"><a href=\"#2018年度总结\" class=\"headerlink\" title=\"2018年度总结\"></a>2018年度总结</h1><ul>\n<li>3月27日，武汉大学计算机学院硕士研究生拟录取结果公布</li>\n<li>4月12日，进入朱卫平老师的智慧爬虫小组</li>\n<li>7月3日，“乐渔”课程教学系统 软件著作权申请（10月15日审批通过）</li>\n<li>9月5日，进入丁立新老师的课题组（原国软的老师不能带原计算机的学生）</li>\n<li>11月22日，结束考研辅导（6月1日开始）</li>\n<li>12月5日，“锐捷杯”华中区研究生程序设计大赛一轮游(accept 3/10)，rank 34/105</li>\n<li>12月16日，第十五次CSP 130分</li>\n</ul>\n<h1 id=\"2019年度计划\"><a href=\"#2019年度计划\" class=\"headerlink\" title=\"2019年度计划\"></a>2019年度计划</h1><ul>\n<li>1-2月，项目开发（软著）</li>\n<li>3月17日，第十六次CSP，目标300</li>\n<li>5月，CET6，标500+</li>\n<li>5月25日，软考系统分析师</li>\n<li>9月22日，第十七次CSP，目标400</li>\n<li>10月，CCSP竞赛，目标铜牌</li>\n<li>11月9日，软考系统架构设计师</li>\n<li>12月，“锐捷杯”华中区研究生程序设计大赛，目标三等奖</li>\n</ul>"},{"title":"从阿里云服务器到使用github pages的变迁","date":"2018-03-24T12:01:39.000Z","_content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;从2016年5月20号晚上注册了域名 http://www.hegongshan.com ，一直到2017年9月，我在阿里云上租用了一年多的云服务器。由于那时候是新手，所以保守的选择了windows server，而且是最低档的配置——1核1G内存20G磁盘，每个月80多，没办法，谁叫咱穷。</p><!-- more --> \n<p>&nbsp;&nbsp;&nbsp;&nbsp;一年多的时间，我的个人博客也经历了数次重构，从最开始采用最原始的JSP+Servlet+JDBC，到后来痴迷SSM，沉迷freemarker，再到后来觉得SSM项目jar包太多太大，占用内存过多，经常发生OOM，又想到将MyBatis砍掉，就采用Spring JdbcTemplate来处理dao层，直到现在选择了hexo和github pages。个人博客的搭建和维系，真是让人心累。</p>","source":"_posts/blog.md","raw":"---\ntitle: 从阿里云服务器到使用github pages的变迁\ndate: 2018-03-24 20:01:39\ntags: [随笔,生活]\ncategories: 生活\n---\n<p>&nbsp;&nbsp;&nbsp;&nbsp;从2016年5月20号晚上注册了域名 http://www.hegongshan.com ，一直到2017年9月，我在阿里云上租用了一年多的云服务器。由于那时候是新手，所以保守的选择了windows server，而且是最低档的配置——1核1G内存20G磁盘，每个月80多，没办法，谁叫咱穷。</p><!-- more --> \n<p>&nbsp;&nbsp;&nbsp;&nbsp;一年多的时间，我的个人博客也经历了数次重构，从最开始采用最原始的JSP+Servlet+JDBC，到后来痴迷SSM，沉迷freemarker，再到后来觉得SSM项目jar包太多太大，占用内存过多，经常发生OOM，又想到将MyBatis砍掉，就采用Spring JdbcTemplate来处理dao层，直到现在选择了hexo和github pages。个人博客的搭建和维系，真是让人心累。</p>","slug":"blog","published":1,"updated":"2019-01-19T07:23:57.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aok0002j1q09bbtebcu","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;从2016年5月20号晚上注册了域名 <a href=\"http://www.hegongshan.com\">http://www.hegongshan.com</a> ，一直到2017年9月，我在阿里云上租用了一年多的云服务器。由于那时候是新手，所以保守的选择了windows server，而且是最低档的配置——1核1G内存20G磁盘，每个月80多，没办法，谁叫咱穷。</p><a id=\"more\"></a><br><p>&nbsp;&nbsp;&nbsp;&nbsp;一年多的时间，我的个人博客也经历了数次重构，从最开始采用最原始的JSP+Servlet+JDBC，到后来痴迷SSM，沉迷freemarker，再到后来觉得SSM项目jar包太多太大，占用内存过多，经常发生OOM，又想到将MyBatis砍掉，就采用Spring JdbcTemplate来处理dao层，直到现在选择了hexo和github pages。个人博客的搭建和维系，真是让人心累。</p>","site":{"data":{}},"excerpt":"<p>&nbsp;&nbsp;&nbsp;&nbsp;从2016年5月20号晚上注册了域名 <a href=\"http://www.hegongshan.com\">http://www.hegongshan.com</a> ，一直到2017年9月，我在阿里云上租用了一年多的云服务器。由于那时候是新手，所以保守的选择了windows server，而且是最低档的配置——1核1G内存20G磁盘，每个月80多，没办法，谁叫咱穷。</p>","more":"<br><p>&nbsp;&nbsp;&nbsp;&nbsp;一年多的时间，我的个人博客也经历了数次重构，从最开始采用最原始的JSP+Servlet+JDBC，到后来痴迷SSM，沉迷freemarker，再到后来觉得SSM项目jar包太多太大，占用内存过多，经常发生OOM，又想到将MyBatis砍掉，就采用Spring JdbcTemplate来处理dao层，直到现在选择了hexo和github pages。个人博客的搭建和维系，真是让人心累。</p>"},{"title":"C语言中的动态内存分配","date":"2018-06-01T03:42:24.000Z","updated":"2018-06-01T03:42:24.000Z","_content":"\n### 简介\n\n全局变量是分配在内存中的静态存储区的，非静态的局部变量是分配在内存中的动态存储区的，这个存储区是一个称为栈（stack）的区域。\n\n除此以外，C语言还允许建立内存动态分配区域，以存放一些临时用的数据，这些数据不必在程序的声明部分定义，也不必等到函数结束时才释放，而是需要时随时开辟，不需要时随时释放。这些数据是临时存放在一个特别的自由存储区，称为堆（heap）区。由于未在声明部分定义它们为变量或数组，因此不能通过变量名或数组名去引用这些数据，只能通过指针来引用。\n\n<!--more-->\n\n### 动态分配内存\n\nC语言中，对内存的动态分配，主要是通过malloc、calloc、free和realloc这四个函数实现。\n\n1.malloc函数\n\n函数原型为\n\n```c\nvoid * malloc(unsigned int size);\n```\n\n作用：在内存的动态存储区中分配一个长度为size的连续空间。\n\n函数的返回值是所分配区域的第一个字节的地址。指针的基类型为void，即不能指向任何类型的数据，只提供一个地址。如果函数未能成功地执行，则返回空指针（NULL）。\n\n示例\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\nint main() {\n\textern void check(int * p);//函数声明\n\tint * p = (int *)malloc(5*sizeof(int));//开辟动态内存区，并将地址转换为int * 型\n\tfor(int i = 0; i < 5;i++) {\n\t\tscanf(\"%d\",p+i);\n\t}\n\tcheck(p);\n\treturn 0;\n}\nextern void check(int * p) {\n\tprintf(\"fail\\n\");\n\tfor(int i = 0 ; i < 5;i++ ) {\n\t\tif(p[i] < 60) printf(\"%d\",p[i]);\n\t}\n}\n```\n\n事实上，第5行中的代码也可以写成如下形式：\n\n```c\nint * p = malloc(5*sizeof(int));//由系统进行隐式的类型转换\n```\n\n推荐采用第一种写法，显式的强制转换，更加清楚直观。\n\n另外，因为在不同系统中存放一个指定类型的字节数是不同的，为了使程序具有通用性，我在第5行中使用了sizeof运算符测定在本系统中整数的字节数。\n\n(未完待续)","source":"_posts/c-dynamic-memory-allocation.md","raw":"---\ntitle: C语言中的动态内存分配\ndate: 2018-06-01 11:42:24\nupdated: 2018-06-01 11:42:24\ntags: c\ncategories: c\n---\n\n### 简介\n\n全局变量是分配在内存中的静态存储区的，非静态的局部变量是分配在内存中的动态存储区的，这个存储区是一个称为栈（stack）的区域。\n\n除此以外，C语言还允许建立内存动态分配区域，以存放一些临时用的数据，这些数据不必在程序的声明部分定义，也不必等到函数结束时才释放，而是需要时随时开辟，不需要时随时释放。这些数据是临时存放在一个特别的自由存储区，称为堆（heap）区。由于未在声明部分定义它们为变量或数组，因此不能通过变量名或数组名去引用这些数据，只能通过指针来引用。\n\n<!--more-->\n\n### 动态分配内存\n\nC语言中，对内存的动态分配，主要是通过malloc、calloc、free和realloc这四个函数实现。\n\n1.malloc函数\n\n函数原型为\n\n```c\nvoid * malloc(unsigned int size);\n```\n\n作用：在内存的动态存储区中分配一个长度为size的连续空间。\n\n函数的返回值是所分配区域的第一个字节的地址。指针的基类型为void，即不能指向任何类型的数据，只提供一个地址。如果函数未能成功地执行，则返回空指针（NULL）。\n\n示例\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\nint main() {\n\textern void check(int * p);//函数声明\n\tint * p = (int *)malloc(5*sizeof(int));//开辟动态内存区，并将地址转换为int * 型\n\tfor(int i = 0; i < 5;i++) {\n\t\tscanf(\"%d\",p+i);\n\t}\n\tcheck(p);\n\treturn 0;\n}\nextern void check(int * p) {\n\tprintf(\"fail\\n\");\n\tfor(int i = 0 ; i < 5;i++ ) {\n\t\tif(p[i] < 60) printf(\"%d\",p[i]);\n\t}\n}\n```\n\n事实上，第5行中的代码也可以写成如下形式：\n\n```c\nint * p = malloc(5*sizeof(int));//由系统进行隐式的类型转换\n```\n\n推荐采用第一种写法，显式的强制转换，更加清楚直观。\n\n另外，因为在不同系统中存放一个指定类型的字节数是不同的，为了使程序具有通用性，我在第5行中使用了sizeof运算符测定在本系统中整数的字节数。\n\n(未完待续)","slug":"c-dynamic-memory-allocation","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aop0006j1q0yb3mhemk","content":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>全局变量是分配在内存中的静态存储区的，非静态的局部变量是分配在内存中的动态存储区的，这个存储区是一个称为栈（stack）的区域。</p>\n<p>除此以外，C语言还允许建立内存动态分配区域，以存放一些临时用的数据，这些数据不必在程序的声明部分定义，也不必等到函数结束时才释放，而是需要时随时开辟，不需要时随时释放。这些数据是临时存放在一个特别的自由存储区，称为堆（heap）区。由于未在声明部分定义它们为变量或数组，因此不能通过变量名或数组名去引用这些数据，只能通过指针来引用。</p>\n<a id=\"more\"></a>\n<h3 id=\"动态分配内存\"><a href=\"#动态分配内存\" class=\"headerlink\" title=\"动态分配内存\"></a>动态分配内存</h3><p>C语言中，对内存的动态分配，主要是通过malloc、calloc、free和realloc这四个函数实现。</p>\n<p>1.malloc函数</p>\n<p>函数原型为</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> * <span class=\"title\">malloc</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>作用：在内存的动态存储区中分配一个长度为size的连续空间。</p>\n<p>函数的返回值是所分配区域的第一个字节的地址。指针的基类型为void，即不能指向任何类型的数据，只提供一个地址。如果函数未能成功地执行，则返回空指针（NULL）。</p>\n<p>示例</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> * p)</span></span>;<span class=\"comment\">//函数声明</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> * p = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">5</span>*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));<span class=\"comment\">//开辟动态内存区，并将地址转换为int * 型</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>;i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,p+i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcheck(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> * p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"fail\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">5</span>;i++ ) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p[i] &lt; <span class=\"number\">60</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,p[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事实上，第5行中的代码也可以写成如下形式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> * p = <span class=\"built_in\">malloc</span>(<span class=\"number\">5</span>*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));<span class=\"comment\">//由系统进行隐式的类型转换</span></span><br></pre></td></tr></table></figure>\n<p>推荐采用第一种写法，显式的强制转换，更加清楚直观。</p>\n<p>另外，因为在不同系统中存放一个指定类型的字节数是不同的，为了使程序具有通用性，我在第5行中使用了sizeof运算符测定在本系统中整数的字节数。</p>\n<p>(未完待续)</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>全局变量是分配在内存中的静态存储区的，非静态的局部变量是分配在内存中的动态存储区的，这个存储区是一个称为栈（stack）的区域。</p>\n<p>除此以外，C语言还允许建立内存动态分配区域，以存放一些临时用的数据，这些数据不必在程序的声明部分定义，也不必等到函数结束时才释放，而是需要时随时开辟，不需要时随时释放。这些数据是临时存放在一个特别的自由存储区，称为堆（heap）区。由于未在声明部分定义它们为变量或数组，因此不能通过变量名或数组名去引用这些数据，只能通过指针来引用。</p>","more":"<h3 id=\"动态分配内存\"><a href=\"#动态分配内存\" class=\"headerlink\" title=\"动态分配内存\"></a>动态分配内存</h3><p>C语言中，对内存的动态分配，主要是通过malloc、calloc、free和realloc这四个函数实现。</p>\n<p>1.malloc函数</p>\n<p>函数原型为</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> * <span class=\"title\">malloc</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>作用：在内存的动态存储区中分配一个长度为size的连续空间。</p>\n<p>函数的返回值是所分配区域的第一个字节的地址。指针的基类型为void，即不能指向任何类型的数据，只提供一个地址。如果函数未能成功地执行，则返回空指针（NULL）。</p>\n<p>示例</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> * p)</span></span>;<span class=\"comment\">//函数声明</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> * p = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">5</span>*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));<span class=\"comment\">//开辟动态内存区，并将地址转换为int * 型</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>;i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,p+i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcheck(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> * p)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"fail\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">5</span>;i++ ) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p[i] &lt; <span class=\"number\">60</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,p[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事实上，第5行中的代码也可以写成如下形式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> * p = <span class=\"built_in\">malloc</span>(<span class=\"number\">5</span>*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));<span class=\"comment\">//由系统进行隐式的类型转换</span></span><br></pre></td></tr></table></figure>\n<p>推荐采用第一种写法，显式的强制转换，更加清楚直观。</p>\n<p>另外，因为在不同系统中存放一个指定类型的字节数是不同的，为了使程序具有通用性，我在第5行中使用了sizeof运算符测定在本系统中整数的字节数。</p>\n<p>(未完待续)</p>"},{"title":"c++中char * a=\"xxx\"引发的警告","date":"2019-03-21T03:50:22.000Z","_content":"\n在c++中，当char * 指向字符常量时（以下面的程序为例）\n\n```c++\n#include <cstdio>\n\nint main() {\n\tchar *a = \"I love China!\";\n\tprintf(\"%s\\n\",a);\n\treturn 0;\n}\n```\n\n编译时，将产生如下warning：\n\n```c++\nProblemC.cpp:4:12: warning: conversion from string literal to 'char *' is\n      deprecated [-Wc++11-compat-deprecated-writable-strings]\n        char *a = \"I love China!\";\n                  ^\n1 warning generated.\n```\n\n<!--more-->\n\n* 为什么会产生该warning呢？\n\n因为此时a中存储的是“I love China!”在内存中的首地址，而“I love China!”是字符常量，存放在只读区中。程序员有可能通过a去修改“I love China!”的值，从而导致error。\n\n* 如何解决该warning呢？\n\n在定义a时，使用const修饰，表明a所指地址中的内容不允许被修改。示例如下：\n\n```c++\n#include <cstdio>\n\nint main() {\n\tconst char *a = \"I love China!\";\n\tprintf(\"%s\\n\",a);\n\treturn 0;\n}\n```\n\n\n\n\n\n","source":"_posts/c-or-cpp-char-pointer-string-constant-unmodified.md","raw":"---\ntitle: c++中char * a=\"xxx\"引发的警告\ndate: 2019-03-21 11:50:22\ntags: cpp\ncategories: cpp\n---\n\n在c++中，当char * 指向字符常量时（以下面的程序为例）\n\n```c++\n#include <cstdio>\n\nint main() {\n\tchar *a = \"I love China!\";\n\tprintf(\"%s\\n\",a);\n\treturn 0;\n}\n```\n\n编译时，将产生如下warning：\n\n```c++\nProblemC.cpp:4:12: warning: conversion from string literal to 'char *' is\n      deprecated [-Wc++11-compat-deprecated-writable-strings]\n        char *a = \"I love China!\";\n                  ^\n1 warning generated.\n```\n\n<!--more-->\n\n* 为什么会产生该warning呢？\n\n因为此时a中存储的是“I love China!”在内存中的首地址，而“I love China!”是字符常量，存放在只读区中。程序员有可能通过a去修改“I love China!”的值，从而导致error。\n\n* 如何解决该warning呢？\n\n在定义a时，使用const修饰，表明a所指地址中的内容不允许被修改。示例如下：\n\n```c++\n#include <cstdio>\n\nint main() {\n\tconst char *a = \"I love China!\";\n\tprintf(\"%s\\n\",a);\n\treturn 0;\n}\n```\n\n\n\n\n\n","slug":"c-or-cpp-char-pointer-string-constant-unmodified","published":1,"updated":"2019-03-21T04:22:58.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aor0008j1q0s80zlgm5","content":"<p>在c++中，当char * 指向字符常量时（以下面的程序为例）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *a = <span class=\"string\">\"I love China!\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,a);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译时，将产生如下warning：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProblemC.cpp:4:12: warning: conversion from string literal to 'char *' is</span><br><span class=\"line\">      deprecated [-Wc++<span class=\"number\">11</span>-compat-deprecated-writable-strings]</span><br><span class=\"line\">        <span class=\"keyword\">char</span> *a = <span class=\"string\">\"I love China!\"</span>;</span><br><span class=\"line\">                  ^</span><br><span class=\"line\"><span class=\"number\">1</span> warning generated.</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>为什么会产生该warning呢？</li>\n</ul>\n<p>因为此时a中存储的是“I love China!”在内存中的首地址，而“I love China!”是字符常量，存放在只读区中。程序员有可能通过a去修改“I love China!”的值，从而导致error。</p>\n<ul>\n<li>如何解决该warning呢？</li>\n</ul>\n<p>在定义a时，使用const修饰，表明a所指地址中的内容不允许被修改。示例如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *a = <span class=\"string\">\"I love China!\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,a);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>在c++中，当char * 指向字符常量时（以下面的程序为例）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *a = <span class=\"string\">\"I love China!\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,a);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译时，将产生如下warning：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProblemC.cpp:4:12: warning: conversion from string literal to 'char *' is</span><br><span class=\"line\">      deprecated [-Wc++<span class=\"number\">11</span>-compat-deprecated-writable-strings]</span><br><span class=\"line\">        <span class=\"keyword\">char</span> *a = <span class=\"string\">\"I love China!\"</span>;</span><br><span class=\"line\">                  ^</span><br><span class=\"line\"><span class=\"number\">1</span> warning generated.</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>为什么会产生该warning呢？</li>\n</ul>\n<p>因为此时a中存储的是“I love China!”在内存中的首地址，而“I love China!”是字符常量，存放在只读区中。程序员有可能通过a去修改“I love China!”的值，从而导致error。</p>\n<ul>\n<li>如何解决该warning呢？</li>\n</ul>\n<p>在定义a时，使用const修饰，表明a所指地址中的内容不允许被修改。示例如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *a = <span class=\"string\">\"I love China!\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,a);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"浅析C语言指针","date":"2018-05-26T11:13:35.000Z","updated":"2018-05-26T11:13:35.000Z","_content":"\n&nbsp;&nbsp;&nbsp;&nbsp;指针是一个地址，而指针变量是存放地址的变量。\n\n<!--more-->\n\n### 定义指针变量\n\n定义指针变量的一般形式：\n\n类型名 * 指针变量名;\n\n如：\n\n```c\nint * p1,* p2;\n```\n\n### 引用指针变量\n\n***相关运算符***\n\n1. &&nbsp;&nbsp;&nbsp;取地址运算符，&a是变量a的地址\n2. \\*&nbsp;&nbsp;&nbsp;&nbsp;指针运算符，\\*p代表指针变量p指向的对象\n\n* 给指针变量赋值（指针变量的值只能是地址）\n\n```c\np = &a;//把a的地址赋给指针变量p，p指向a\n```\n\n* 引用指针变量指向的变量\n\n```c\nint * p,a = 10;\np = &a;\nprintf(\"%d\",*p);//其中*p等价于a\n```\n\n这里\\*p出现了两次，但是二者的含义完全不同。第一行中的\\*p表示定义了一个指针变量\\*p，其前面的\\*只是表示该变量是一个指针变量。而第三行中的\\*p则代表指针变量p所指向的变量a。\n\n* 引用指针变量的值。如：\n\n```c\nprintf(\"%d\",p);//以八进制数的形式输出指针变量p的值，如果p指向了a，就是输出a的地址，即&a。\n```\n\n示例：\n\n```c\n#include <stdio.h>\nint main()\n{\n    int a = 100,b = 90;\n    int * p1, * p2;\n    p1 = &a;\n    p2 = &b;\n    printf(\"a = %d,b = %d\\n\",a,b);\n    printf(\"* p1 = %d,* p2 = %d\",*p1,*p2);\n    return 0;\n}\n```\n\n输出：\n\n```c\na = 100,b = 90\n* p1 = 100,* p2 = 90\n```\n\n这里指针变量p1指向a，指针变量p2指向b，因此\\*p1等价于a，\\*p2等价于b\n\n### 指针变量的好处\n\nC语言中，实参变量和形参变量之间的数据传递是单向的“值传递”方式。函数的调用可以（且只可以）得到一个返回值，而使用指针变量作参数，可以得到多个变化了的值。虽然不能改变实参指针变量的值，但是可以改变实参指针变量所指向的变量的值。","source":"_posts/c-pointer.md","raw":"---\ntitle: 浅析C语言指针\ndate: 2018-05-26 19:13:35\nupdated: 2018-05-26 19:13:35\ntags: c\ncategories: c\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp;指针是一个地址，而指针变量是存放地址的变量。\n\n<!--more-->\n\n### 定义指针变量\n\n定义指针变量的一般形式：\n\n类型名 * 指针变量名;\n\n如：\n\n```c\nint * p1,* p2;\n```\n\n### 引用指针变量\n\n***相关运算符***\n\n1. &&nbsp;&nbsp;&nbsp;取地址运算符，&a是变量a的地址\n2. \\*&nbsp;&nbsp;&nbsp;&nbsp;指针运算符，\\*p代表指针变量p指向的对象\n\n* 给指针变量赋值（指针变量的值只能是地址）\n\n```c\np = &a;//把a的地址赋给指针变量p，p指向a\n```\n\n* 引用指针变量指向的变量\n\n```c\nint * p,a = 10;\np = &a;\nprintf(\"%d\",*p);//其中*p等价于a\n```\n\n这里\\*p出现了两次，但是二者的含义完全不同。第一行中的\\*p表示定义了一个指针变量\\*p，其前面的\\*只是表示该变量是一个指针变量。而第三行中的\\*p则代表指针变量p所指向的变量a。\n\n* 引用指针变量的值。如：\n\n```c\nprintf(\"%d\",p);//以八进制数的形式输出指针变量p的值，如果p指向了a，就是输出a的地址，即&a。\n```\n\n示例：\n\n```c\n#include <stdio.h>\nint main()\n{\n    int a = 100,b = 90;\n    int * p1, * p2;\n    p1 = &a;\n    p2 = &b;\n    printf(\"a = %d,b = %d\\n\",a,b);\n    printf(\"* p1 = %d,* p2 = %d\",*p1,*p2);\n    return 0;\n}\n```\n\n输出：\n\n```c\na = 100,b = 90\n* p1 = 100,* p2 = 90\n```\n\n这里指针变量p1指向a，指针变量p2指向b，因此\\*p1等价于a，\\*p2等价于b\n\n### 指针变量的好处\n\nC语言中，实参变量和形参变量之间的数据传递是单向的“值传递”方式。函数的调用可以（且只可以）得到一个返回值，而使用指针变量作参数，可以得到多个变化了的值。虽然不能改变实参指针变量的值，但是可以改变实参指针变量所指向的变量的值。","slug":"c-pointer","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aot000aj1q0g8lx7htk","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;指针是一个地址，而指针变量是存放地址的变量。</p>\n<a id=\"more\"></a>\n<h3 id=\"定义指针变量\"><a href=\"#定义指针变量\" class=\"headerlink\" title=\"定义指针变量\"></a>定义指针变量</h3><p>定义指针变量的一般形式：</p>\n<p>类型名 * 指针变量名;</p>\n<p>如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> * p1,* p2;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用指针变量\"><a href=\"#引用指针变量\" class=\"headerlink\" title=\"引用指针变量\"></a>引用指针变量</h3><p><strong><em>相关运算符</em></strong></p>\n<ol>\n<li>&amp;&nbsp;&nbsp;&nbsp;取地址运算符，&amp;a是变量a的地址</li>\n<li>*&nbsp;&nbsp;&nbsp;&nbsp;指针运算符，*p代表指针变量p指向的对象</li>\n</ol>\n<ul>\n<li>给指针变量赋值（指针变量的值只能是地址）</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = &amp;a;<span class=\"comment\">//把a的地址赋给指针变量p，p指向a</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>引用指针变量指向的变量</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> * p,a = <span class=\"number\">10</span>;</span><br><span class=\"line\">p = &amp;a;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,*p);<span class=\"comment\">//其中*p等价于a</span></span><br></pre></td></tr></table></figure>\n<p>这里*p出现了两次，但是二者的含义完全不同。第一行中的*p表示定义了一个指针变量*p，其前面的*只是表示该变量是一个指针变量。而第三行中的*p则代表指针变量p所指向的变量a。</p>\n<ul>\n<li>引用指针变量的值。如：</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,p);<span class=\"comment\">//以八进制数的形式输出指针变量p的值，如果p指向了a，就是输出a的地址，即&amp;a。</span></span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">100</span>,b = <span class=\"number\">90</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> * p1, * p2;</span><br><span class=\"line\">    p1 = &amp;a;</span><br><span class=\"line\">    p2 = &amp;b;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"a = %d,b = %d\\n\"</span>,a,b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"* p1 = %d,* p2 = %d\"</span>,*p1,*p2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">100</span>,b = <span class=\"number\">90</span></span><br><span class=\"line\">* p1 = <span class=\"number\">100</span>,* p2 = <span class=\"number\">90</span></span><br></pre></td></tr></table></figure>\n<p>这里指针变量p1指向a，指针变量p2指向b，因此*p1等价于a，*p2等价于b</p>\n<h3 id=\"指针变量的好处\"><a href=\"#指针变量的好处\" class=\"headerlink\" title=\"指针变量的好处\"></a>指针变量的好处</h3><p>C语言中，实参变量和形参变量之间的数据传递是单向的“值传递”方式。函数的调用可以（且只可以）得到一个返回值，而使用指针变量作参数，可以得到多个变化了的值。虽然不能改变实参指针变量的值，但是可以改变实参指针变量所指向的变量的值。</p>\n","site":{"data":{}},"excerpt":"<p>&nbsp;&nbsp;&nbsp;&nbsp;指针是一个地址，而指针变量是存放地址的变量。</p>","more":"<h3 id=\"定义指针变量\"><a href=\"#定义指针变量\" class=\"headerlink\" title=\"定义指针变量\"></a>定义指针变量</h3><p>定义指针变量的一般形式：</p>\n<p>类型名 * 指针变量名;</p>\n<p>如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> * p1,* p2;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用指针变量\"><a href=\"#引用指针变量\" class=\"headerlink\" title=\"引用指针变量\"></a>引用指针变量</h3><p><strong><em>相关运算符</em></strong></p>\n<ol>\n<li>&amp;&nbsp;&nbsp;&nbsp;取地址运算符，&amp;a是变量a的地址</li>\n<li>*&nbsp;&nbsp;&nbsp;&nbsp;指针运算符，*p代表指针变量p指向的对象</li>\n</ol>\n<ul>\n<li>给指针变量赋值（指针变量的值只能是地址）</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = &amp;a;<span class=\"comment\">//把a的地址赋给指针变量p，p指向a</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>引用指针变量指向的变量</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> * p,a = <span class=\"number\">10</span>;</span><br><span class=\"line\">p = &amp;a;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,*p);<span class=\"comment\">//其中*p等价于a</span></span><br></pre></td></tr></table></figure>\n<p>这里*p出现了两次，但是二者的含义完全不同。第一行中的*p表示定义了一个指针变量*p，其前面的*只是表示该变量是一个指针变量。而第三行中的*p则代表指针变量p所指向的变量a。</p>\n<ul>\n<li>引用指针变量的值。如：</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,p);<span class=\"comment\">//以八进制数的形式输出指针变量p的值，如果p指向了a，就是输出a的地址，即&amp;a。</span></span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">100</span>,b = <span class=\"number\">90</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> * p1, * p2;</span><br><span class=\"line\">    p1 = &amp;a;</span><br><span class=\"line\">    p2 = &amp;b;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"a = %d,b = %d\\n\"</span>,a,b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"* p1 = %d,* p2 = %d\"</span>,*p1,*p2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">100</span>,b = <span class=\"number\">90</span></span><br><span class=\"line\">* p1 = <span class=\"number\">100</span>,* p2 = <span class=\"number\">90</span></span><br></pre></td></tr></table></figure>\n<p>这里指针变量p1指向a，指针变量p2指向b，因此*p1等价于a，*p2等价于b</p>\n<h3 id=\"指针变量的好处\"><a href=\"#指针变量的好处\" class=\"headerlink\" title=\"指针变量的好处\"></a>指针变量的好处</h3><p>C语言中，实参变量和形参变量之间的数据传递是单向的“值传递”方式。函数的调用可以（且只可以）得到一个返回值，而使用指针变量作参数，可以得到多个变化了的值。虽然不能改变实参指针变量的值，但是可以改变实参指针变量所指向的变量的值。</p>"},{"title":"C语言结构体","date":"2018-05-31T04:04:44.000Z","updated":"2018-05-31T04:04:44.000Z","_content":"\nC语言允许用户自己建立由不同类型数据组成的组合型的数据结构，它称为结构体。（类似于Java中的类）\n\n### 定义结构体类型\n\n声明一个结构体类型的一般形式：\n\n```c\nstruct 结构体名 {\n\t成员列表  \n};\n```\n\n对结构体中各成员都应进行类型声明，即\n\n```c\n类型名\t成员名;\n```\n\n<!--more-->\n\n示例\n\n```c\nstruct Book {\n    char author[10];\n    char name[20];\n    double price;\n};//注意最后有一个分号\n```\n\n结构体的成员可以属于另一个结构体类型。例如：\n\n```c\nstruct Date {\n    int year;\n    int month;\n    int day;\n};\nstruct Book {\n    char author[10];\n    char name[20];\n    double price;\n    struct Date publishTime;//成员publishTime属于struct Date类型\n}\n```\n\n值得注意的是，***结构体类型的名字是由关键字struct和结构体名组合而成的***，即结构体类型 = struct 结构体名。 \n\n### 定义结构体类型变量\n\nC语言中定义结构体类型变量有三种方式。\n\n1.先声明结构体类型，再定义该类型的变量（常用）\n\n上面说到结构体内可以定义结构体类型的成员变量时，我的做法是先声明了一个结构体类型Struct Date，然后在声明Struct Book类型时，将成员变量publishTime指定为struct Date类型。下面再举一个例子说明\n\n```c\nstruct Date {\n    int year;\n    int month;\n    int day;\n};//声明struct Date类型\nint main() {\n    struct Date today;//定义struct Date类型的变量\n    ...\n    return 0;\n}\n```\n\n2.在声明类型的同时定义变量\n\n这种定义的一般形式如下：\n\n```c\nstruct 结构体名 {\n    成员列表\n} 变量名列表;\n```\n\n例如：\n\n```c\nstruct Book {\n    char author[10];\n    char name[20];\n    double price;  \n} book1,book2;//声明struct Book类型的同时定义了两个struct Book类型的变量book1,book2\n```\n\n个人觉得，把上面的申明类型同时定义变量，变成如下形式来看，可能更易于理解：\n\n```c\nstruct Book{char author[10];char name[20];double price;} book1,book2;\n```\n\n这样看，是不是特别类似于普通变量的定义，前面是类型，后面是变量列表。当然你也可以通过其他的方式来记住结构体类型，不管黑猫白猫能抓到老鼠就是好猫>_<。\n\n 3.不指定类型名而直接定义结构体类型变量\n\n其一般形式如下：\n\n```c\nstruct {\n    成员列表\n} 变量名列表;\n```\n\n例如：\n\n```c\nstruct {\n    char author[10];\n    char name[20];\n    double price;  \n} book1,book2;\n```\n\n可以看到，这种方法指定了一个匿名的结构体类型，它没有名字，因此不能再以此结构体类型去定义其他变量。这种方式用的不多。\n\n### 结构体变量的初始化和引用\n\n#### 初始化结构体变量\n\n在定义结构体变量时，可以对它初始化，即赋予初始值。\n\n先看一个例子\n\n```c\n#include <stdio.h>\nint main() {\n\tstruct Book {\n\t\tchar author[10];\n\t\tchar name[20];\n\t\tdouble price;\n\t} book = {\"谭浩强\",\"C程序设计\",33.00};\n\tprintf(\"作者：%s，书名：%s，价格：%f\\n\",book.author,book.name,book.price);\n\treturn 0;\n}\n```\n\n输出结果:\n\n```c\n作者：谭浩强，书名：C程序设计，价格：33.000000\n```\n\n从上例可以看出，***初始化列表是用花括号括起来的一些常量，这些常量依次赋给结构体变量中的各成员。***\n\n如果我只想对某一成员初始化怎么办呢？\n\nC99标准允许对某一成员初始化，如：\n\n```c\n#include <stdio.h>\nint main() {\n\tstruct Book {\n\t\tchar author[10];\n\t\tchar name[20];\n\t\tdouble price;\n\t} book = {.price = 33.00};\n    //在成员名前有成员运算符\".\",\".price\"隐含代表结构体变量book的成员book.price\n\tprintf(\"作者：%s，书名：%s，价格：%f\\n\",book.author,book.name,book.price);\n\treturn 0;\n}\n```\n\n输出结果：\n\n```c\n作者：，书名：，价格：33.000000\n```\n\n其他未被初始化的成员由系统赋默认值，数值型为0，字符型为'\\0'，指针型成员为NULL\n\n#### 引用结构体变量中的成员\n\n引用方式为\n\n```c\n结构体变量名.成员名\n```\n\n其中，“.”是成员运算符，它在所有的运算符中优先级最高\n\n### 结构体数组\n\n定义结构体数组的一般形式：\n\n①直接定义\n\n```c\nstruct 结构体名 {\n    成员列表\n} 数组名[数组长度]; \n```\n\n②先声明结构体类型，再用此类型定义结构体数组\n\n```c\n结构体类型 数组名[数组长度]; \n```\n\n示例：\n\n```c\n#include <stdio.h>\nint main() {\n\tstruct Book{\n\t\tchar author[16];\n\t\tchar name[25];\n\t\tdouble price;\n\t} book[2] = {{\"谭浩强\",\"C程序设计\",33.00},{\"明日科技\",\"Java从入门到精通\",55.51}};\n\tconst int n = 2;//定义常变量,const 类似于Java中的 final\n\tfor(int i = 0 ; i < n ;i++) {\n\t\tprintf(\"作者：%s，书名：%s，价格：%f\\n\",book[i].author,book[i].name,book[i].price);\n\t}\n\treturn 0;\n}\n\n```\n\n输出结果：\n\n```c\n作者：谭浩强，书名：C程序设计，价格：33.000000\n作者：明日科技，书名：Java从入门到精通，价格：55.510000\n```\n\n需要注意的是，在上面代码的第7行，给数组初始化的时候，每本书的信息，我用一对花括号包起来了，这样做的目的是方便阅读和检查。事实上，下面的代码也是可行的，但不推荐\n\n```c\nstruct Book{\n    char author[16];\n    char name[25];\n    double price;\n} book[2] = {\"谭浩强\",\"C程序设计\",33.00,\"明日科技\",\"Java从入门到精通\",55.51};\n```\n\n### 结构体指针\n\n结构体指针变量的定义和引用，与普通的指针变量一样。\n\n示例:\n\n```c\n#include <stdio.h>\n#include <string.h>\nstruct Book{\n\tchar author[16];\n\tchar name[25];\n\tdouble price;\n};\nint main() {\n\tstruct Book book;\n\tstruct Book * p = &book;//定义结构体指针变量p并让其指向book\n\tstrcpy(book.author,\"谭浩强\");\n    //这里不能直接写book.name = \"C程序设计\";，会报错，必须通过c语言提供的字符串赋值函数赋值\n\tstrcpy(book.name,\"C程序设计\");\n\tbook.price = 33.00;\n\tprintf(\"作者：%s，书名：%s，价格：%f\\n\",book.author,book.name,book.price);\n\tprintf(\"作者：%s，书名：%s，价格：%f\\n\",(*p).author,(*p).name,(*p).price);\n\treturn 0;\n}\n```\n\n输出结果：\n\n```c\n作者：谭浩强，书名：C程序设计，价格：33.000000\n作者：谭浩强，书名：C程序设计，价格：33.000000\n```\n\n需要注意的是,\".\"的优先级高于“\\*”，所以必须用括号将\\*p括起来，即使用(\\*p).author这种形式。\n\n<hr>\n\n为了使用方便和直观，C语言允许把(\\*p).author用p->author来代替，<strong>“->”称为指向运算符</strong>，p->author表示p所指向的结构体变量中的author成员。(这里很重要，C语言中最常见的就是\"->\")\n\n用->改写上面的代码：\n\n```c\n#include <stdio.h>\n#include <string.h>\nstruct Book{\n\tchar author[16];\n\tchar name[25];\n\tdouble price;\n};\nint main() {\n\tstruct Book book;\n\tstruct Book * p = &book;\n\tstrcpy(book.author,\"谭浩强\");\n\tstrcpy(book.name,\"C程序设计\");\n\tbook.price = 33.00;\n\tprintf(\"作者：%s，书名：%s，价格：%f\\n\",book.author,book.name,book.price);\n\tprintf(\"作者：%s，书名：%s，价格：%f\\n\",p->author,p->name,p->price);\n\treturn 0;\n}\n```\n\n输出结果：\n\n```\n作者：谭浩强，书名：C程序设计，价格：33.000000\n作者：谭浩强，书名：C程序设计，价格：33.000000\n```\n\n","source":"_posts/c-struct.md","raw":"---\ntitle: C语言结构体\ndate: 2018-05-31 12:04:44\nupdated: 2018-05-31 12:04:44\ntags: c\ncategories: c\n---\n\nC语言允许用户自己建立由不同类型数据组成的组合型的数据结构，它称为结构体。（类似于Java中的类）\n\n### 定义结构体类型\n\n声明一个结构体类型的一般形式：\n\n```c\nstruct 结构体名 {\n\t成员列表  \n};\n```\n\n对结构体中各成员都应进行类型声明，即\n\n```c\n类型名\t成员名;\n```\n\n<!--more-->\n\n示例\n\n```c\nstruct Book {\n    char author[10];\n    char name[20];\n    double price;\n};//注意最后有一个分号\n```\n\n结构体的成员可以属于另一个结构体类型。例如：\n\n```c\nstruct Date {\n    int year;\n    int month;\n    int day;\n};\nstruct Book {\n    char author[10];\n    char name[20];\n    double price;\n    struct Date publishTime;//成员publishTime属于struct Date类型\n}\n```\n\n值得注意的是，***结构体类型的名字是由关键字struct和结构体名组合而成的***，即结构体类型 = struct 结构体名。 \n\n### 定义结构体类型变量\n\nC语言中定义结构体类型变量有三种方式。\n\n1.先声明结构体类型，再定义该类型的变量（常用）\n\n上面说到结构体内可以定义结构体类型的成员变量时，我的做法是先声明了一个结构体类型Struct Date，然后在声明Struct Book类型时，将成员变量publishTime指定为struct Date类型。下面再举一个例子说明\n\n```c\nstruct Date {\n    int year;\n    int month;\n    int day;\n};//声明struct Date类型\nint main() {\n    struct Date today;//定义struct Date类型的变量\n    ...\n    return 0;\n}\n```\n\n2.在声明类型的同时定义变量\n\n这种定义的一般形式如下：\n\n```c\nstruct 结构体名 {\n    成员列表\n} 变量名列表;\n```\n\n例如：\n\n```c\nstruct Book {\n    char author[10];\n    char name[20];\n    double price;  \n} book1,book2;//声明struct Book类型的同时定义了两个struct Book类型的变量book1,book2\n```\n\n个人觉得，把上面的申明类型同时定义变量，变成如下形式来看，可能更易于理解：\n\n```c\nstruct Book{char author[10];char name[20];double price;} book1,book2;\n```\n\n这样看，是不是特别类似于普通变量的定义，前面是类型，后面是变量列表。当然你也可以通过其他的方式来记住结构体类型，不管黑猫白猫能抓到老鼠就是好猫>_<。\n\n 3.不指定类型名而直接定义结构体类型变量\n\n其一般形式如下：\n\n```c\nstruct {\n    成员列表\n} 变量名列表;\n```\n\n例如：\n\n```c\nstruct {\n    char author[10];\n    char name[20];\n    double price;  \n} book1,book2;\n```\n\n可以看到，这种方法指定了一个匿名的结构体类型，它没有名字，因此不能再以此结构体类型去定义其他变量。这种方式用的不多。\n\n### 结构体变量的初始化和引用\n\n#### 初始化结构体变量\n\n在定义结构体变量时，可以对它初始化，即赋予初始值。\n\n先看一个例子\n\n```c\n#include <stdio.h>\nint main() {\n\tstruct Book {\n\t\tchar author[10];\n\t\tchar name[20];\n\t\tdouble price;\n\t} book = {\"谭浩强\",\"C程序设计\",33.00};\n\tprintf(\"作者：%s，书名：%s，价格：%f\\n\",book.author,book.name,book.price);\n\treturn 0;\n}\n```\n\n输出结果:\n\n```c\n作者：谭浩强，书名：C程序设计，价格：33.000000\n```\n\n从上例可以看出，***初始化列表是用花括号括起来的一些常量，这些常量依次赋给结构体变量中的各成员。***\n\n如果我只想对某一成员初始化怎么办呢？\n\nC99标准允许对某一成员初始化，如：\n\n```c\n#include <stdio.h>\nint main() {\n\tstruct Book {\n\t\tchar author[10];\n\t\tchar name[20];\n\t\tdouble price;\n\t} book = {.price = 33.00};\n    //在成员名前有成员运算符\".\",\".price\"隐含代表结构体变量book的成员book.price\n\tprintf(\"作者：%s，书名：%s，价格：%f\\n\",book.author,book.name,book.price);\n\treturn 0;\n}\n```\n\n输出结果：\n\n```c\n作者：，书名：，价格：33.000000\n```\n\n其他未被初始化的成员由系统赋默认值，数值型为0，字符型为'\\0'，指针型成员为NULL\n\n#### 引用结构体变量中的成员\n\n引用方式为\n\n```c\n结构体变量名.成员名\n```\n\n其中，“.”是成员运算符，它在所有的运算符中优先级最高\n\n### 结构体数组\n\n定义结构体数组的一般形式：\n\n①直接定义\n\n```c\nstruct 结构体名 {\n    成员列表\n} 数组名[数组长度]; \n```\n\n②先声明结构体类型，再用此类型定义结构体数组\n\n```c\n结构体类型 数组名[数组长度]; \n```\n\n示例：\n\n```c\n#include <stdio.h>\nint main() {\n\tstruct Book{\n\t\tchar author[16];\n\t\tchar name[25];\n\t\tdouble price;\n\t} book[2] = {{\"谭浩强\",\"C程序设计\",33.00},{\"明日科技\",\"Java从入门到精通\",55.51}};\n\tconst int n = 2;//定义常变量,const 类似于Java中的 final\n\tfor(int i = 0 ; i < n ;i++) {\n\t\tprintf(\"作者：%s，书名：%s，价格：%f\\n\",book[i].author,book[i].name,book[i].price);\n\t}\n\treturn 0;\n}\n\n```\n\n输出结果：\n\n```c\n作者：谭浩强，书名：C程序设计，价格：33.000000\n作者：明日科技，书名：Java从入门到精通，价格：55.510000\n```\n\n需要注意的是，在上面代码的第7行，给数组初始化的时候，每本书的信息，我用一对花括号包起来了，这样做的目的是方便阅读和检查。事实上，下面的代码也是可行的，但不推荐\n\n```c\nstruct Book{\n    char author[16];\n    char name[25];\n    double price;\n} book[2] = {\"谭浩强\",\"C程序设计\",33.00,\"明日科技\",\"Java从入门到精通\",55.51};\n```\n\n### 结构体指针\n\n结构体指针变量的定义和引用，与普通的指针变量一样。\n\n示例:\n\n```c\n#include <stdio.h>\n#include <string.h>\nstruct Book{\n\tchar author[16];\n\tchar name[25];\n\tdouble price;\n};\nint main() {\n\tstruct Book book;\n\tstruct Book * p = &book;//定义结构体指针变量p并让其指向book\n\tstrcpy(book.author,\"谭浩强\");\n    //这里不能直接写book.name = \"C程序设计\";，会报错，必须通过c语言提供的字符串赋值函数赋值\n\tstrcpy(book.name,\"C程序设计\");\n\tbook.price = 33.00;\n\tprintf(\"作者：%s，书名：%s，价格：%f\\n\",book.author,book.name,book.price);\n\tprintf(\"作者：%s，书名：%s，价格：%f\\n\",(*p).author,(*p).name,(*p).price);\n\treturn 0;\n}\n```\n\n输出结果：\n\n```c\n作者：谭浩强，书名：C程序设计，价格：33.000000\n作者：谭浩强，书名：C程序设计，价格：33.000000\n```\n\n需要注意的是,\".\"的优先级高于“\\*”，所以必须用括号将\\*p括起来，即使用(\\*p).author这种形式。\n\n<hr>\n\n为了使用方便和直观，C语言允许把(\\*p).author用p->author来代替，<strong>“->”称为指向运算符</strong>，p->author表示p所指向的结构体变量中的author成员。(这里很重要，C语言中最常见的就是\"->\")\n\n用->改写上面的代码：\n\n```c\n#include <stdio.h>\n#include <string.h>\nstruct Book{\n\tchar author[16];\n\tchar name[25];\n\tdouble price;\n};\nint main() {\n\tstruct Book book;\n\tstruct Book * p = &book;\n\tstrcpy(book.author,\"谭浩强\");\n\tstrcpy(book.name,\"C程序设计\");\n\tbook.price = 33.00;\n\tprintf(\"作者：%s，书名：%s，价格：%f\\n\",book.author,book.name,book.price);\n\tprintf(\"作者：%s，书名：%s，价格：%f\\n\",p->author,p->name,p->price);\n\treturn 0;\n}\n```\n\n输出结果：\n\n```\n作者：谭浩强，书名：C程序设计，价格：33.000000\n作者：谭浩强，书名：C程序设计，价格：33.000000\n```\n\n","slug":"c-struct","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aow000fj1q03mdefx89","content":"<p>C语言允许用户自己建立由不同类型数据组成的组合型的数据结构，它称为结构体。（类似于Java中的类）</p>\n<h3 id=\"定义结构体类型\"><a href=\"#定义结构体类型\" class=\"headerlink\" title=\"定义结构体类型\"></a>定义结构体类型</h3><p>声明一个结构体类型的一般形式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体名 &#123;</span></span><br><span class=\"line\">\t成员列表  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对结构体中各成员都应进行类型声明，即</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型名\t成员名;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>示例</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> author[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">&#125;;<span class=\"comment\">//注意最后有一个分号</span></span><br></pre></td></tr></table></figure>\n<p>结构体的成员可以属于另一个结构体类型。例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Date</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> year;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> month;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> day;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> author[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Date</span> <span class=\"title\">publishTime</span>;</span><span class=\"comment\">//成员publishTime属于struct Date类型</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>值得注意的是，<strong><em>结构体类型的名字是由关键字struct和结构体名组合而成的</em></strong>，即结构体类型 = struct 结构体名。 </p>\n<h3 id=\"定义结构体类型变量\"><a href=\"#定义结构体类型变量\" class=\"headerlink\" title=\"定义结构体类型变量\"></a>定义结构体类型变量</h3><p>C语言中定义结构体类型变量有三种方式。</p>\n<p>1.先声明结构体类型，再定义该类型的变量（常用）</p>\n<p>上面说到结构体内可以定义结构体类型的成员变量时，我的做法是先声明了一个结构体类型Struct Date，然后在声明Struct Book类型时，将成员变量publishTime指定为struct Date类型。下面再举一个例子说明</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Date</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> year;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> month;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> day;</span><br><span class=\"line\">&#125;;<span class=\"comment\">//声明struct Date类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Date</span> <span class=\"title\">today</span>;</span><span class=\"comment\">//定义struct Date类型的变量</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.在声明类型的同时定义变量</p>\n<p>这种定义的一般形式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体名 &#123;</span></span><br><span class=\"line\">    成员列表</span><br><span class=\"line\">&#125; 变量名列表;</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> author[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;  </span><br><span class=\"line\">&#125; book1,book2;<span class=\"comment\">//声明struct Book类型的同时定义了两个struct Book类型的变量book1,book2</span></span><br></pre></td></tr></table></figure>\n<p>个人觉得，把上面的申明类型同时定义变量，变成如下形式来看，可能更易于理解：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span>&#123;</span><span class=\"keyword\">char</span> author[<span class=\"number\">10</span>];<span class=\"keyword\">char</span> name[<span class=\"number\">20</span>];<span class=\"keyword\">double</span> price;&#125; book1,book2;</span><br></pre></td></tr></table></figure>\n<p>这样看，是不是特别类似于普通变量的定义，前面是类型，后面是变量列表。当然你也可以通过其他的方式来记住结构体类型，不管黑猫白猫能抓到老鼠就是好猫&gt;_&lt;。</p>\n<p> 3.不指定类型名而直接定义结构体类型变量</p>\n<p>其一般形式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    成员列表</span><br><span class=\"line\">&#125; 变量名列表;</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> author[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;  </span><br><span class=\"line\">&#125; book1,book2;</span><br></pre></td></tr></table></figure>\n<p>可以看到，这种方法指定了一个匿名的结构体类型，它没有名字，因此不能再以此结构体类型去定义其他变量。这种方式用的不多。</p>\n<h3 id=\"结构体变量的初始化和引用\"><a href=\"#结构体变量的初始化和引用\" class=\"headerlink\" title=\"结构体变量的初始化和引用\"></a>结构体变量的初始化和引用</h3><h4 id=\"初始化结构体变量\"><a href=\"#初始化结构体变量\" class=\"headerlink\" title=\"初始化结构体变量\"></a>初始化结构体变量</h4><p>在定义结构体变量时，可以对它初始化，即赋予初始值。</p>\n<p>先看一个例子</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> author[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> price;</span><br><span class=\"line\">\t&#125; book = &#123;<span class=\"string\">\"谭浩强\"</span>,<span class=\"string\">\"C程序设计\"</span>,<span class=\"number\">33.00</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"作者：%s，书名：%s，价格：%f\\n\"</span>,book.author,book.name,book.price);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作者：谭浩强，书名：C程序设计，价格：<span class=\"number\">33.000000</span></span><br></pre></td></tr></table></figure>\n<p>从上例可以看出，<strong><em>初始化列表是用花括号括起来的一些常量，这些常量依次赋给结构体变量中的各成员。</em></strong></p>\n<p>如果我只想对某一成员初始化怎么办呢？</p>\n<p>C99标准允许对某一成员初始化，如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> author[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> price;</span><br><span class=\"line\">\t&#125; book = &#123;.price = <span class=\"number\">33.00</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//在成员名前有成员运算符\".\",\".price\"隐含代表结构体变量book的成员book.price</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"作者：%s，书名：%s，价格：%f\\n\"</span>,book.author,book.name,book.price);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作者：，书名：，价格：<span class=\"number\">33.000000</span></span><br></pre></td></tr></table></figure>\n<p>其他未被初始化的成员由系统赋默认值，数值型为0，字符型为’\\0’，指针型成员为NULL</p>\n<h4 id=\"引用结构体变量中的成员\"><a href=\"#引用结构体变量中的成员\" class=\"headerlink\" title=\"引用结构体变量中的成员\"></a>引用结构体变量中的成员</h4><p>引用方式为</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">结构体变量名.成员名</span><br></pre></td></tr></table></figure>\n<p>其中，“.”是成员运算符，它在所有的运算符中优先级最高</p>\n<h3 id=\"结构体数组\"><a href=\"#结构体数组\" class=\"headerlink\" title=\"结构体数组\"></a>结构体数组</h3><p>定义结构体数组的一般形式：</p>\n<p>①直接定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体名 &#123;</span></span><br><span class=\"line\">    成员列表</span><br><span class=\"line\">&#125; 数组名[数组长度];</span><br></pre></td></tr></table></figure>\n<p>②先声明结构体类型，再用此类型定义结构体数组</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">结构体类型 数组名[数组长度];</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> author[<span class=\"number\">16</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> name[<span class=\"number\">25</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> price;</span><br><span class=\"line\">\t&#125; book[<span class=\"number\">2</span>] = &#123;&#123;<span class=\"string\">\"谭浩强\"</span>,<span class=\"string\">\"C程序设计\"</span>,<span class=\"number\">33.00</span>&#125;,&#123;<span class=\"string\">\"明日科技\"</span>,<span class=\"string\">\"Java从入门到精通\"</span>,<span class=\"number\">55.51</span>&#125;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> n = <span class=\"number\">2</span>;<span class=\"comment\">//定义常变量,const 类似于Java中的 final</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ;i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"作者：%s，书名：%s，价格：%f\\n\"</span>,book[i].author,book[i].name,book[i].price);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作者：谭浩强，书名：C程序设计，价格：<span class=\"number\">33.000000</span></span><br><span class=\"line\">作者：明日科技，书名：Java从入门到精通，价格：<span class=\"number\">55.510000</span></span><br></pre></td></tr></table></figure>\n<p>需要注意的是，在上面代码的第7行，给数组初始化的时候，每本书的信息，我用一对花括号包起来了，这样做的目的是方便阅读和检查。事实上，下面的代码也是可行的，但不推荐</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> author[<span class=\"number\">16</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">25</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">&#125; book[<span class=\"number\">2</span>] = &#123;<span class=\"string\">\"谭浩强\"</span>,<span class=\"string\">\"C程序设计\"</span>,<span class=\"number\">33.00</span>,<span class=\"string\">\"明日科技\"</span>,<span class=\"string\">\"Java从入门到精通\"</span>,<span class=\"number\">55.51</span>&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"结构体指针\"><a href=\"#结构体指针\" class=\"headerlink\" title=\"结构体指针\"></a>结构体指针</h3><p>结构体指针变量的定义和引用，与普通的指针变量一样。</p>\n<p>示例:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> author[<span class=\"number\">16</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[<span class=\"number\">25</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> price;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> <span class=\"title\">book</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> * <span class=\"title\">p</span> = &amp;<span class=\"title\">book</span>;</span><span class=\"comment\">//定义结构体指针变量p并让其指向book</span></span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(book.author,<span class=\"string\">\"谭浩强\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//这里不能直接写book.name = \"C程序设计\";，会报错，必须通过c语言提供的字符串赋值函数赋值</span></span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(book.name,<span class=\"string\">\"C程序设计\"</span>);</span><br><span class=\"line\">\tbook.price = <span class=\"number\">33.00</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"作者：%s，书名：%s，价格：%f\\n\"</span>,book.author,book.name,book.price);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"作者：%s，书名：%s，价格：%f\\n\"</span>,(*p).author,(*p).name,(*p).price);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作者：谭浩强，书名：C程序设计，价格：<span class=\"number\">33.000000</span></span><br><span class=\"line\">作者：谭浩强，书名：C程序设计，价格：<span class=\"number\">33.000000</span></span><br></pre></td></tr></table></figure>\n<p>需要注意的是,”.”的优先级高于“*”，所以必须用括号将*p括起来，即使用(*p).author这种形式。</p>\n<hr>\n\n<p>为了使用方便和直观，C语言允许把(*p).author用p-&gt;author来代替，<strong>“-&gt;”称为指向运算符</strong>，p-&gt;author表示p所指向的结构体变量中的author成员。(这里很重要，C语言中最常见的就是”-&gt;”)</p>\n<p>用-&gt;改写上面的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> author[<span class=\"number\">16</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[<span class=\"number\">25</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> price;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> <span class=\"title\">book</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> * <span class=\"title\">p</span> = &amp;<span class=\"title\">book</span>;</span></span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(book.author,<span class=\"string\">\"谭浩强\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(book.name,<span class=\"string\">\"C程序设计\"</span>);</span><br><span class=\"line\">\tbook.price = <span class=\"number\">33.00</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"作者：%s，书名：%s，价格：%f\\n\"</span>,book.author,book.name,book.price);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"作者：%s，书名：%s，价格：%f\\n\"</span>,p-&gt;author,p-&gt;name,p-&gt;price);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作者：谭浩强，书名：C程序设计，价格：33.000000</span><br><span class=\"line\">作者：谭浩强，书名：C程序设计，价格：33.000000</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>C语言允许用户自己建立由不同类型数据组成的组合型的数据结构，它称为结构体。（类似于Java中的类）</p>\n<h3 id=\"定义结构体类型\"><a href=\"#定义结构体类型\" class=\"headerlink\" title=\"定义结构体类型\"></a>定义结构体类型</h3><p>声明一个结构体类型的一般形式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体名 &#123;</span></span><br><span class=\"line\">\t成员列表  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对结构体中各成员都应进行类型声明，即</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型名\t成员名;</span><br></pre></td></tr></table></figure>","more":"<p>示例</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> author[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">&#125;;<span class=\"comment\">//注意最后有一个分号</span></span><br></pre></td></tr></table></figure>\n<p>结构体的成员可以属于另一个结构体类型。例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Date</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> year;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> month;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> day;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> author[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Date</span> <span class=\"title\">publishTime</span>;</span><span class=\"comment\">//成员publishTime属于struct Date类型</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>值得注意的是，<strong><em>结构体类型的名字是由关键字struct和结构体名组合而成的</em></strong>，即结构体类型 = struct 结构体名。 </p>\n<h3 id=\"定义结构体类型变量\"><a href=\"#定义结构体类型变量\" class=\"headerlink\" title=\"定义结构体类型变量\"></a>定义结构体类型变量</h3><p>C语言中定义结构体类型变量有三种方式。</p>\n<p>1.先声明结构体类型，再定义该类型的变量（常用）</p>\n<p>上面说到结构体内可以定义结构体类型的成员变量时，我的做法是先声明了一个结构体类型Struct Date，然后在声明Struct Book类型时，将成员变量publishTime指定为struct Date类型。下面再举一个例子说明</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Date</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> year;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> month;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> day;</span><br><span class=\"line\">&#125;;<span class=\"comment\">//声明struct Date类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Date</span> <span class=\"title\">today</span>;</span><span class=\"comment\">//定义struct Date类型的变量</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.在声明类型的同时定义变量</p>\n<p>这种定义的一般形式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体名 &#123;</span></span><br><span class=\"line\">    成员列表</span><br><span class=\"line\">&#125; 变量名列表;</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> author[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;  </span><br><span class=\"line\">&#125; book1,book2;<span class=\"comment\">//声明struct Book类型的同时定义了两个struct Book类型的变量book1,book2</span></span><br></pre></td></tr></table></figure>\n<p>个人觉得，把上面的申明类型同时定义变量，变成如下形式来看，可能更易于理解：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span>&#123;</span><span class=\"keyword\">char</span> author[<span class=\"number\">10</span>];<span class=\"keyword\">char</span> name[<span class=\"number\">20</span>];<span class=\"keyword\">double</span> price;&#125; book1,book2;</span><br></pre></td></tr></table></figure>\n<p>这样看，是不是特别类似于普通变量的定义，前面是类型，后面是变量列表。当然你也可以通过其他的方式来记住结构体类型，不管黑猫白猫能抓到老鼠就是好猫&gt;_&lt;。</p>\n<p> 3.不指定类型名而直接定义结构体类型变量</p>\n<p>其一般形式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    成员列表</span><br><span class=\"line\">&#125; 变量名列表;</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> author[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;  </span><br><span class=\"line\">&#125; book1,book2;</span><br></pre></td></tr></table></figure>\n<p>可以看到，这种方法指定了一个匿名的结构体类型，它没有名字，因此不能再以此结构体类型去定义其他变量。这种方式用的不多。</p>\n<h3 id=\"结构体变量的初始化和引用\"><a href=\"#结构体变量的初始化和引用\" class=\"headerlink\" title=\"结构体变量的初始化和引用\"></a>结构体变量的初始化和引用</h3><h4 id=\"初始化结构体变量\"><a href=\"#初始化结构体变量\" class=\"headerlink\" title=\"初始化结构体变量\"></a>初始化结构体变量</h4><p>在定义结构体变量时，可以对它初始化，即赋予初始值。</p>\n<p>先看一个例子</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> author[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> price;</span><br><span class=\"line\">\t&#125; book = &#123;<span class=\"string\">\"谭浩强\"</span>,<span class=\"string\">\"C程序设计\"</span>,<span class=\"number\">33.00</span>&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"作者：%s，书名：%s，价格：%f\\n\"</span>,book.author,book.name,book.price);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作者：谭浩强，书名：C程序设计，价格：<span class=\"number\">33.000000</span></span><br></pre></td></tr></table></figure>\n<p>从上例可以看出，<strong><em>初始化列表是用花括号括起来的一些常量，这些常量依次赋给结构体变量中的各成员。</em></strong></p>\n<p>如果我只想对某一成员初始化怎么办呢？</p>\n<p>C99标准允许对某一成员初始化，如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> author[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> price;</span><br><span class=\"line\">\t&#125; book = &#123;.price = <span class=\"number\">33.00</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//在成员名前有成员运算符\".\",\".price\"隐含代表结构体变量book的成员book.price</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"作者：%s，书名：%s，价格：%f\\n\"</span>,book.author,book.name,book.price);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作者：，书名：，价格：<span class=\"number\">33.000000</span></span><br></pre></td></tr></table></figure>\n<p>其他未被初始化的成员由系统赋默认值，数值型为0，字符型为’\\0’，指针型成员为NULL</p>\n<h4 id=\"引用结构体变量中的成员\"><a href=\"#引用结构体变量中的成员\" class=\"headerlink\" title=\"引用结构体变量中的成员\"></a>引用结构体变量中的成员</h4><p>引用方式为</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">结构体变量名.成员名</span><br></pre></td></tr></table></figure>\n<p>其中，“.”是成员运算符，它在所有的运算符中优先级最高</p>\n<h3 id=\"结构体数组\"><a href=\"#结构体数组\" class=\"headerlink\" title=\"结构体数组\"></a>结构体数组</h3><p>定义结构体数组的一般形式：</p>\n<p>①直接定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 结构体名 &#123;</span></span><br><span class=\"line\">    成员列表</span><br><span class=\"line\">&#125; 数组名[数组长度];</span><br></pre></td></tr></table></figure>\n<p>②先声明结构体类型，再用此类型定义结构体数组</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">结构体类型 数组名[数组长度];</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> author[<span class=\"number\">16</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> name[<span class=\"number\">25</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> price;</span><br><span class=\"line\">\t&#125; book[<span class=\"number\">2</span>] = &#123;&#123;<span class=\"string\">\"谭浩强\"</span>,<span class=\"string\">\"C程序设计\"</span>,<span class=\"number\">33.00</span>&#125;,&#123;<span class=\"string\">\"明日科技\"</span>,<span class=\"string\">\"Java从入门到精通\"</span>,<span class=\"number\">55.51</span>&#125;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> n = <span class=\"number\">2</span>;<span class=\"comment\">//定义常变量,const 类似于Java中的 final</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ;i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"作者：%s，书名：%s，价格：%f\\n\"</span>,book[i].author,book[i].name,book[i].price);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作者：谭浩强，书名：C程序设计，价格：<span class=\"number\">33.000000</span></span><br><span class=\"line\">作者：明日科技，书名：Java从入门到精通，价格：<span class=\"number\">55.510000</span></span><br></pre></td></tr></table></figure>\n<p>需要注意的是，在上面代码的第7行，给数组初始化的时候，每本书的信息，我用一对花括号包起来了，这样做的目的是方便阅读和检查。事实上，下面的代码也是可行的，但不推荐</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> author[<span class=\"number\">16</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">25</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">&#125; book[<span class=\"number\">2</span>] = &#123;<span class=\"string\">\"谭浩强\"</span>,<span class=\"string\">\"C程序设计\"</span>,<span class=\"number\">33.00</span>,<span class=\"string\">\"明日科技\"</span>,<span class=\"string\">\"Java从入门到精通\"</span>,<span class=\"number\">55.51</span>&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"结构体指针\"><a href=\"#结构体指针\" class=\"headerlink\" title=\"结构体指针\"></a>结构体指针</h3><p>结构体指针变量的定义和引用，与普通的指针变量一样。</p>\n<p>示例:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> author[<span class=\"number\">16</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[<span class=\"number\">25</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> price;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> <span class=\"title\">book</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> * <span class=\"title\">p</span> = &amp;<span class=\"title\">book</span>;</span><span class=\"comment\">//定义结构体指针变量p并让其指向book</span></span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(book.author,<span class=\"string\">\"谭浩强\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//这里不能直接写book.name = \"C程序设计\";，会报错，必须通过c语言提供的字符串赋值函数赋值</span></span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(book.name,<span class=\"string\">\"C程序设计\"</span>);</span><br><span class=\"line\">\tbook.price = <span class=\"number\">33.00</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"作者：%s，书名：%s，价格：%f\\n\"</span>,book.author,book.name,book.price);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"作者：%s，书名：%s，价格：%f\\n\"</span>,(*p).author,(*p).name,(*p).price);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作者：谭浩强，书名：C程序设计，价格：<span class=\"number\">33.000000</span></span><br><span class=\"line\">作者：谭浩强，书名：C程序设计，价格：<span class=\"number\">33.000000</span></span><br></pre></td></tr></table></figure>\n<p>需要注意的是,”.”的优先级高于“*”，所以必须用括号将*p括起来，即使用(*p).author这种形式。</p>\n<hr>\n\n<p>为了使用方便和直观，C语言允许把(*p).author用p-&gt;author来代替，<strong>“-&gt;”称为指向运算符</strong>，p-&gt;author表示p所指向的结构体变量中的author成员。(这里很重要，C语言中最常见的就是”-&gt;”)</p>\n<p>用-&gt;改写上面的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> author[<span class=\"number\">16</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[<span class=\"number\">25</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> price;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> <span class=\"title\">book</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> * <span class=\"title\">p</span> = &amp;<span class=\"title\">book</span>;</span></span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(book.author,<span class=\"string\">\"谭浩强\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(book.name,<span class=\"string\">\"C程序设计\"</span>);</span><br><span class=\"line\">\tbook.price = <span class=\"number\">33.00</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"作者：%s，书名：%s，价格：%f\\n\"</span>,book.author,book.name,book.price);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"作者：%s，书名：%s，价格：%f\\n\"</span>,p-&gt;author,p-&gt;name,p-&gt;price);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作者：谭浩强，书名：C程序设计，价格：33.000000</span><br><span class=\"line\">作者：谭浩强，书名：C程序设计，价格：33.000000</span><br></pre></td></tr></table></figure>"},{"title":"Command 'scrapy' not found","date":"2018-06-30T06:24:24.000Z","_content":"\n### 问题描述\n\n在ubuntu中执行\n\n```python\npip3 install scrapy\n```\n\n成功安装scrapy，且在python命令行交互模式中成功执行\n\n```python\nimport scrapy\n```\n\n但是在终端中执行scrapy startproject xxx时，出现＂Command 'scrapy' not found＂\n\n<!--more-->\n\n### 解决办法\n\n找到python的主目录，我的是\n\n```python\n/home/hegongshan/.local/lib/python3.6\n```\n\n在上面lib的同级目录bin下有一个scrapy文件，我的是**/home/hegongshan/.local/bin**\n\n为该目录下的scrapy文件在/usr/bin目录下建立一个软链接\n\n```shell\nsudo ln -s /home/hegongshan/.local/bin/scrapy /usr/bin\n```\n\n然后在终端下执行scrapy，可以看到，\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/30/20180630144107.png)","source":"_posts/command-scrapy-not-found.md","raw":"---\ntitle: Command 'scrapy' not found\ndate: 2018-06-30 14:24:24\ntags: [python,scrapy]\ncategories: scrapy\n---\n\n### 问题描述\n\n在ubuntu中执行\n\n```python\npip3 install scrapy\n```\n\n成功安装scrapy，且在python命令行交互模式中成功执行\n\n```python\nimport scrapy\n```\n\n但是在终端中执行scrapy startproject xxx时，出现＂Command 'scrapy' not found＂\n\n<!--more-->\n\n### 解决办法\n\n找到python的主目录，我的是\n\n```python\n/home/hegongshan/.local/lib/python3.6\n```\n\n在上面lib的同级目录bin下有一个scrapy文件，我的是**/home/hegongshan/.local/bin**\n\n为该目录下的scrapy文件在/usr/bin目录下建立一个软链接\n\n```shell\nsudo ln -s /home/hegongshan/.local/bin/scrapy /usr/bin\n```\n\n然后在终端下执行scrapy，可以看到，\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/30/20180630144107.png)","slug":"command-scrapy-not-found","published":1,"updated":"2019-01-19T07:23:57.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9ap3000nj1q02almfuse","content":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>在ubuntu中执行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install scrapy</span><br></pre></td></tr></table></figure>\n<p>成功安装scrapy，且在python命令行交互模式中成功执行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br></pre></td></tr></table></figure>\n<p>但是在终端中执行scrapy startproject xxx时，出现＂Command ‘scrapy’ not found＂</p>\n<a id=\"more\"></a>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>找到python的主目录，我的是</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/hegongshan/.local/lib/python3<span class=\"number\">.6</span></span><br></pre></td></tr></table></figure>\n<p>在上面lib的同级目录bin下有一个scrapy文件，我的是<strong>/home/hegongshan/.local/bin</strong></p>\n<p>为该目录下的scrapy文件在/usr/bin目录下建立一个软链接</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /home/hegongshan/.local/bin/scrapy /usr/bin</span><br></pre></td></tr></table></figure>\n<p>然后在终端下执行scrapy，可以看到，</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/30/20180630144107.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>在ubuntu中执行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install scrapy</span><br></pre></td></tr></table></figure>\n<p>成功安装scrapy，且在python命令行交互模式中成功执行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br></pre></td></tr></table></figure>\n<p>但是在终端中执行scrapy startproject xxx时，出现＂Command ‘scrapy’ not found＂</p>","more":"<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>找到python的主目录，我的是</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/hegongshan/.local/lib/python3<span class=\"number\">.6</span></span><br></pre></td></tr></table></figure>\n<p>在上面lib的同级目录bin下有一个scrapy文件，我的是<strong>/home/hegongshan/.local/bin</strong></p>\n<p>为该目录下的scrapy文件在/usr/bin目录下建立一个软链接</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /home/hegongshan/.local/bin/scrapy /usr/bin</span><br></pre></td></tr></table></figure>\n<p>然后在终端下执行scrapy，可以看到，</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/30/20180630144107.png\" alt=\"\"></p>"},{"title":"数据结构与算法分析作业之自己实现Java顺序表","date":"2018-05-25T14:55:17.000Z","updated":"2018-05-25T14:55:17.000Z","_content":"\n<p class=\"text-center\">自己实现的Java顺序表</p>\n\n<!--more-->\n\n```java\npackage com.hegongshan.collections;\n/**\n * 顺序表\n * @author hegongshan https://www.hegongshan.com\n * @param <E>\n */\npublic class ArrayList<E> {\n\tprivate static final int DEFAULT_CAPACITY = 10;\n\tprivate Object[] elementData;\n\tprivate int size = 0;\n\n\tpublic ArrayList() {\n\t\tthis(DEFAULT_CAPACITY);\n\t}\n\n\tpublic ArrayList(int capacity) {\n\t\tif (capacity < 0) {\n\t\t\tthrow new IllegalArgumentException(\"Illegal Capacity: \" + capacity);\n\t\t}\n\t\telementData = new Object[capacity];\n\t}\n\n\t// 返回顺序表中的元素个数\n\tpublic int size() {\n\t\treturn size;\n\t}\n\n\t// 是否为空\n\tpublic boolean isEmpty() {\n\t\treturn size == 0;\n\t}\n\n\t// 添加元素\n\tpublic boolean add(E e) {\n\t\tensureCapacity();\n\t\telementData[size] = e;\n\t\tsize++;\n\t\treturn true;\n\t}\n\n\t// 根据索引号添加元素\n\tpublic void add(int index, E e) {\n\t\tcheckPositionIndex(index);\n\t\tensureCapacity();\n\t\tfor (int i = size - 1; i >= index; i--) {\n\t\t\telementData[i + 1] = elementData[i];\n\t\t}\n\t\telementData[index] = e;\n\t\tsize++;\n\t}\n\n\t// 删除指定索引处的元素\n\t@SuppressWarnings(\"unchecked\")\n\tpublic E remove(int index) {\n\t\tcheckElementIndex(index);\n\t\tE oldValue = (E) elementData[index];\n\t\tfor (int i = size - 1; i > index; i--) {\n\t\t\telementData[i - 1] = elementData[i];\n\t\t}\n\t\telementData[--size] = null;// 最后一个元素变为null\n\t\treturn oldValue;\n\t}\n\n\t// 删除指定元素值首次出现的那个元素\n\tpublic boolean remove(Object obj) {\n\t\tint index = indexOf(obj);\n\t\tif (index != -1) {\n\t\t\tremove(index);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// 根据索引号获取元素\n\t@SuppressWarnings(\"unchecked\")\n\tpublic E get(int index) {\n\t\tcheckElementIndex(index);\n\t\treturn (E) elementData[index];\n\t}\n\n\t// 改变指定索引号的元素值\n\tpublic void set(int index, E e) {\n\t\tcheckElementIndex(index);\n\t\telementData[index] = e;\n\t}\n\n\tpublic void clear() {\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\telementData[i] = null;\n\t\t}\n\t\tsize = 0;\n\t}\n\n\t// 去掉多余的容量\n\tpublic void trimToSize() {\n\t\tif (size < elementData.length) {\n\t\t\tif (size == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tObject[] newElementData = new Object[size];\n\t\t\tfor (int i = 0; i < size; i++) {\n\t\t\t\tnewElementData[i] = elementData[i];\n\t\t\t}\n\t\t\telementData = newElementData;\n\t\t}\n\t}\n\n\t// 是否包含某一元素\n\tpublic boolean contains(Object obj) {\n\t\treturn indexOf(obj) != -1;\n\t}\n\n\t// 某一元素首次出现的位置\n\tpublic int indexOf(Object obj) {\n\t\tif (obj == null) {\n\t\t\tfor (int i = 0; i < size; i++) {\n\t\t\t\tif (elementData[i] == null) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (int i = 0; i < size; i++) {\n\t\t\t\tif (obj.equals(elementData[i])) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t// 某一元素最后一次出现的位置\n\tpublic int lastIndexOf(Object obj) {\n\t\tif (obj == null) {\n\t\t\tfor (int i = size - 1; i >= 0; i--) {\n\t\t\t\tif (elementData[i] == null) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (int i = size - 1; i >= 0; i--) {\n\t\t\t\tif (obj.equals(elementData[i])) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t// 确保容量，如果实际的元素个数大于等于容量，则扩容\n\tprivate void ensureCapacity() {\n\t\tif (size >= elementData.length) {\n\t\t\tgrow();\n\t\t}\n\t}\n\n\t// 扩容，每次增加原来一半的容量\n\tprivate void grow() {\n\t\t// 右移的时候一定要加括号，>>的优先级低于+，\n\t\t// 为了避免size为0，取扩容后的size和默认容量两者的最大值为新的容量\n\t\tint newCapacity = Math.max(size + (size >> 1), DEFAULT_CAPACITY);\n\t\tObject[] newElementData = new Object[newCapacity];\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\tnewElementData[i] = elementData[i];\n\t\t}\n\t\telementData = newElementData;\n\t}\n\n\t// 判断索引值是否为正确的元素索引\n\tprivate void checkElementIndex(int index) {\n\t\tif (index < 0 || index >= size) {\n\t\t\tthrow new IndexOutOfBoundsException(\"index:\" + index + \",size:\" + size);\n\t\t}\n\t}\n\n\t// 可以添加元素的位置，索引从0开始到size\n\tprivate void checkPositionIndex(int index) {\n\t\tif (index < 0 || index > size) {\n\t\t\tthrow new IndexOutOfBoundsException(\"index:\" + index + \",size:\" + size);\n\t\t}\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder list = new StringBuilder();\n\t\tlist.append(\"ArrayList [\");\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\tlist.append(elementData[i]);\n\t\t\tif (i < size - 1) {\n\t\t\t\tlist.append(',');\n\t\t\t}\n\t\t}\n\t\tlist.append(\"]\");\n\t\treturn list.toString();\n\t}\n}\n```\n\n","source":"_posts/data-structure-and-algorithm-analysis-homework-arraylist.md","raw":"---\ntitle: 数据结构与算法分析作业之自己实现Java顺序表\ndate: 2018-05-25 22:55:17\nupdated: 2018-05-25 22:55:17\ntags: [数据结构,java]\ncategories: 数据结构与算法分析:Java语言描述\n---\n\n<p class=\"text-center\">自己实现的Java顺序表</p>\n\n<!--more-->\n\n```java\npackage com.hegongshan.collections;\n/**\n * 顺序表\n * @author hegongshan https://www.hegongshan.com\n * @param <E>\n */\npublic class ArrayList<E> {\n\tprivate static final int DEFAULT_CAPACITY = 10;\n\tprivate Object[] elementData;\n\tprivate int size = 0;\n\n\tpublic ArrayList() {\n\t\tthis(DEFAULT_CAPACITY);\n\t}\n\n\tpublic ArrayList(int capacity) {\n\t\tif (capacity < 0) {\n\t\t\tthrow new IllegalArgumentException(\"Illegal Capacity: \" + capacity);\n\t\t}\n\t\telementData = new Object[capacity];\n\t}\n\n\t// 返回顺序表中的元素个数\n\tpublic int size() {\n\t\treturn size;\n\t}\n\n\t// 是否为空\n\tpublic boolean isEmpty() {\n\t\treturn size == 0;\n\t}\n\n\t// 添加元素\n\tpublic boolean add(E e) {\n\t\tensureCapacity();\n\t\telementData[size] = e;\n\t\tsize++;\n\t\treturn true;\n\t}\n\n\t// 根据索引号添加元素\n\tpublic void add(int index, E e) {\n\t\tcheckPositionIndex(index);\n\t\tensureCapacity();\n\t\tfor (int i = size - 1; i >= index; i--) {\n\t\t\telementData[i + 1] = elementData[i];\n\t\t}\n\t\telementData[index] = e;\n\t\tsize++;\n\t}\n\n\t// 删除指定索引处的元素\n\t@SuppressWarnings(\"unchecked\")\n\tpublic E remove(int index) {\n\t\tcheckElementIndex(index);\n\t\tE oldValue = (E) elementData[index];\n\t\tfor (int i = size - 1; i > index; i--) {\n\t\t\telementData[i - 1] = elementData[i];\n\t\t}\n\t\telementData[--size] = null;// 最后一个元素变为null\n\t\treturn oldValue;\n\t}\n\n\t// 删除指定元素值首次出现的那个元素\n\tpublic boolean remove(Object obj) {\n\t\tint index = indexOf(obj);\n\t\tif (index != -1) {\n\t\t\tremove(index);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// 根据索引号获取元素\n\t@SuppressWarnings(\"unchecked\")\n\tpublic E get(int index) {\n\t\tcheckElementIndex(index);\n\t\treturn (E) elementData[index];\n\t}\n\n\t// 改变指定索引号的元素值\n\tpublic void set(int index, E e) {\n\t\tcheckElementIndex(index);\n\t\telementData[index] = e;\n\t}\n\n\tpublic void clear() {\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\telementData[i] = null;\n\t\t}\n\t\tsize = 0;\n\t}\n\n\t// 去掉多余的容量\n\tpublic void trimToSize() {\n\t\tif (size < elementData.length) {\n\t\t\tif (size == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tObject[] newElementData = new Object[size];\n\t\t\tfor (int i = 0; i < size; i++) {\n\t\t\t\tnewElementData[i] = elementData[i];\n\t\t\t}\n\t\t\telementData = newElementData;\n\t\t}\n\t}\n\n\t// 是否包含某一元素\n\tpublic boolean contains(Object obj) {\n\t\treturn indexOf(obj) != -1;\n\t}\n\n\t// 某一元素首次出现的位置\n\tpublic int indexOf(Object obj) {\n\t\tif (obj == null) {\n\t\t\tfor (int i = 0; i < size; i++) {\n\t\t\t\tif (elementData[i] == null) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (int i = 0; i < size; i++) {\n\t\t\t\tif (obj.equals(elementData[i])) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t// 某一元素最后一次出现的位置\n\tpublic int lastIndexOf(Object obj) {\n\t\tif (obj == null) {\n\t\t\tfor (int i = size - 1; i >= 0; i--) {\n\t\t\t\tif (elementData[i] == null) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (int i = size - 1; i >= 0; i--) {\n\t\t\t\tif (obj.equals(elementData[i])) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t// 确保容量，如果实际的元素个数大于等于容量，则扩容\n\tprivate void ensureCapacity() {\n\t\tif (size >= elementData.length) {\n\t\t\tgrow();\n\t\t}\n\t}\n\n\t// 扩容，每次增加原来一半的容量\n\tprivate void grow() {\n\t\t// 右移的时候一定要加括号，>>的优先级低于+，\n\t\t// 为了避免size为0，取扩容后的size和默认容量两者的最大值为新的容量\n\t\tint newCapacity = Math.max(size + (size >> 1), DEFAULT_CAPACITY);\n\t\tObject[] newElementData = new Object[newCapacity];\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\tnewElementData[i] = elementData[i];\n\t\t}\n\t\telementData = newElementData;\n\t}\n\n\t// 判断索引值是否为正确的元素索引\n\tprivate void checkElementIndex(int index) {\n\t\tif (index < 0 || index >= size) {\n\t\t\tthrow new IndexOutOfBoundsException(\"index:\" + index + \",size:\" + size);\n\t\t}\n\t}\n\n\t// 可以添加元素的位置，索引从0开始到size\n\tprivate void checkPositionIndex(int index) {\n\t\tif (index < 0 || index > size) {\n\t\t\tthrow new IndexOutOfBoundsException(\"index:\" + index + \",size:\" + size);\n\t\t}\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder list = new StringBuilder();\n\t\tlist.append(\"ArrayList [\");\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\tlist.append(elementData[i]);\n\t\t\tif (i < size - 1) {\n\t\t\t\tlist.append(',');\n\t\t\t}\n\t\t}\n\t\tlist.append(\"]\");\n\t\treturn list.toString();\n\t}\n}\n```\n\n","slug":"data-structure-and-algorithm-analysis-homework-arraylist","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9ap4000rj1q0nybp0dm3","content":"<p class=\"text-center\">自己实现的Java顺序表</p>\n\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hegongshan.collections;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 顺序表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> hegongshan https://www.hegongshan.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;E&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Object[] elementData;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>(DEFAULT_CAPACITY);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (capacity &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Capacity: \"</span> + capacity);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telementData = <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 返回顺序表中的元素个数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 是否为空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size == <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加元素</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t\tensureCapacity();</span><br><span class=\"line\">\t\telementData[size] = e;</span><br><span class=\"line\">\t\tsize++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 根据索引号添加元素</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E e)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckPositionIndex(index);</span><br><span class=\"line\">\t\tensureCapacity();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &gt;= index; i--) &#123;</span><br><span class=\"line\">\t\t\telementData[i + <span class=\"number\">1</span>] = elementData[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telementData[index] = e;</span><br><span class=\"line\">\t\tsize++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除指定索引处的元素</span></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\tE oldValue = (E) elementData[index];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &gt; index; i--) &#123;</span><br><span class=\"line\">\t\t\telementData[i - <span class=\"number\">1</span>] = elementData[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telementData[--size] = <span class=\"keyword\">null</span>;<span class=\"comment\">// 最后一个元素变为null</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除指定元素值首次出现的那个元素</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = indexOf(obj);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tremove(index);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 根据索引号获取元素</span></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (E) elementData[index];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 改变指定索引号的元素值</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E e)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\telementData[index] = e;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\telementData[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsize = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 去掉多余的容量</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">trimToSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (size &lt; elementData.length) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tObject[] newElementData = <span class=\"keyword\">new</span> Object[size];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\t\tnewElementData[i] = elementData[i];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telementData = newElementData;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 是否包含某一元素</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> indexOf(obj) != -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 某一元素首次出现的位置</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (elementData[i] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (obj.equals(elementData[i])) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 某一元素最后一次出现的位置</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (elementData[i] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (obj.equals(elementData[i])) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 确保容量，如果实际的元素个数大于等于容量，则扩容</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (size &gt;= elementData.length) &#123;</span><br><span class=\"line\">\t\t\tgrow();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 扩容，每次增加原来一半的容量</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 右移的时候一定要加括号，&gt;&gt;的优先级低于+，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 为了避免size为0，取扩容后的size和默认容量两者的最大值为新的容量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> newCapacity = Math.max(size + (size &gt;&gt; <span class=\"number\">1</span>), DEFAULT_CAPACITY);</span><br><span class=\"line\">\t\tObject[] newElementData = <span class=\"keyword\">new</span> Object[newCapacity];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\tnewElementData[i] = elementData[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telementData = newElementData;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 判断索引值是否为正确的元素索引</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkElementIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= size) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"index:\"</span> + index + <span class=\"string\">\",size:\"</span> + size);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 可以添加元素的位置，索引从0开始到size</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkPositionIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; size) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"index:\"</span> + index + <span class=\"string\">\",size:\"</span> + size);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tStringBuilder list = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">\t\tlist.append(<span class=\"string\">\"ArrayList [\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\tlist.append(elementData[i]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i &lt; size - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tlist.append(<span class=\"string\">','</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlist.append(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list.toString();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p class=\"text-center\">自己实现的Java顺序表</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hegongshan.collections;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 顺序表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> hegongshan https://www.hegongshan.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;E&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Object[] elementData;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>(DEFAULT_CAPACITY);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (capacity &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Capacity: \"</span> + capacity);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telementData = <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 返回顺序表中的元素个数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 是否为空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size == <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加元素</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t\tensureCapacity();</span><br><span class=\"line\">\t\telementData[size] = e;</span><br><span class=\"line\">\t\tsize++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 根据索引号添加元素</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E e)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckPositionIndex(index);</span><br><span class=\"line\">\t\tensureCapacity();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &gt;= index; i--) &#123;</span><br><span class=\"line\">\t\t\telementData[i + <span class=\"number\">1</span>] = elementData[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telementData[index] = e;</span><br><span class=\"line\">\t\tsize++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除指定索引处的元素</span></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\tE oldValue = (E) elementData[index];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &gt; index; i--) &#123;</span><br><span class=\"line\">\t\t\telementData[i - <span class=\"number\">1</span>] = elementData[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telementData[--size] = <span class=\"keyword\">null</span>;<span class=\"comment\">// 最后一个元素变为null</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除指定元素值首次出现的那个元素</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = indexOf(obj);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tremove(index);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 根据索引号获取元素</span></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (E) elementData[index];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 改变指定索引号的元素值</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E e)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\telementData[index] = e;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\telementData[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsize = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 去掉多余的容量</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">trimToSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (size &lt; elementData.length) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tObject[] newElementData = <span class=\"keyword\">new</span> Object[size];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\t\tnewElementData[i] = elementData[i];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telementData = newElementData;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 是否包含某一元素</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> indexOf(obj) != -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 某一元素首次出现的位置</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (elementData[i] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (obj.equals(elementData[i])) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 某一元素最后一次出现的位置</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (elementData[i] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (obj.equals(elementData[i])) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 确保容量，如果实际的元素个数大于等于容量，则扩容</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (size &gt;= elementData.length) &#123;</span><br><span class=\"line\">\t\t\tgrow();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 扩容，每次增加原来一半的容量</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 右移的时候一定要加括号，&gt;&gt;的优先级低于+，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 为了避免size为0，取扩容后的size和默认容量两者的最大值为新的容量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> newCapacity = Math.max(size + (size &gt;&gt; <span class=\"number\">1</span>), DEFAULT_CAPACITY);</span><br><span class=\"line\">\t\tObject[] newElementData = <span class=\"keyword\">new</span> Object[newCapacity];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\tnewElementData[i] = elementData[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telementData = newElementData;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 判断索引值是否为正确的元素索引</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkElementIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= size) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"index:\"</span> + index + <span class=\"string\">\",size:\"</span> + size);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 可以添加元素的位置，索引从0开始到size</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkPositionIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; size) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"index:\"</span> + index + <span class=\"string\">\",size:\"</span> + size);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tStringBuilder list = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">\t\tlist.append(<span class=\"string\">\"ArrayList [\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\tlist.append(elementData[i]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i &lt; size - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tlist.append(<span class=\"string\">','</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlist.append(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list.toString();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"数据结构与算法分析作业之自己实现Java单链表","date":"2018-05-26T12:14:55.000Z","updated":"2018-05-26T12:14:55.000Z","_content":"\n<p class=\"text-center\">自己实现的Java单链表</p>\n\n<!--more-->\n\n```java\npackage com.hegongshan.collections;\nimport java.util.NoSuchElementException;\n/**\n * 单链表\n * @author hegongshan https://www.hegongshan.com\n * @param <E>\n */\npublic class SingleLinkedList<E> {\n\n\tprivate int size = 0;\n\tprivate Node<E> first;\n\n\tpublic SingleLinkedList() {\n\t}\n\n\t// 单链表中元素个数\n\tpublic int size() {\n\t\treturn size;\n\t}\n\n\t// 判断单链表是否为空\n\tpublic boolean isEmpty() {\n\t\treturn first == null;\n\t}\n\n\tpublic boolean contains(Object obj) {\n\t\treturn indexOf(obj) != -1;\n\t}\n\n\tpublic Object[] toArray() {\n\t\tif (isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\tObject[] array = new Object[size];\n\t\tNode<E> node = first;\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\tarray[i] = node.data;\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic <T> T[] toArray(T[] a) {\n\t\treturn (T[]) toArray();\n\t}\n\n\tpublic boolean add(E e) {\n\t\tlinkLast(e);\n\t\treturn true;\n\t}\n\n\t// 在单链表尾部插入新的结点\n\tpublic void linkLast(E e) {\n\t\tif (!isEmpty()) {\n\t\t\tNode<E> newNode = new Node<>(e, null);\n\t\t\tNode<E> last = first;\n\t\t\twhile (last.next != null) {\n\t\t\t\tlast = last.next;\n\t\t\t}\n\t\t\tlast.next = newNode;\n\t\t} else {\n\t\t\tfirst = new Node<>(e, null);\n\t\t}\n\t\tsize++;\n\t}\n\n\t// 在单链表头部插入新的数据\n\tpublic void linkFirst(E e) {\n\t\tNode<E> newNode = new Node<>(e, first);\n\t\tfirst = newNode;\n\t\tsize++;\n\t}\n\n\t// 清空单链表\n\tpublic void clear() {\n\t\tfor (Node<E> node = first; node != null;) {\n\t\t\tNode<E> next = node.next;\n\t\t\tnode.data = null;\n\t\t\tnode.next = null;\n\t\t\tnode = next;\n\t\t}\n\t\tfirst = null;\n\t\tsize = 0;\n\t}\n\n\tpublic E get(int index) {\n\t\tcheckElementIndex(index);\n\t\treturn node(index).data;\n\t}\n\t\n\tpublic E getFirst() {\n\t\tif(first == null) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\t\treturn first.data;\n\t}\n\n\t// 把索引号为index的结点的数据改为element，并返回原来的结点数据\n\tpublic E set(int index, E element) {\n\t\tcheckElementIndex(index);\n\t\tNode<E> node = node(index);\n\t\tE oldElement = node.data;\n\t\tnode.data = element;\n\t\treturn oldElement;\n\t}\n\n\t// 在指定索引处插入元素\n\tpublic void add(int index, E element) {\n\t\tcheckPositionIndex(index);\n\t\tif (index == 0) {\n\t\t\tlinkFirst(element);\n\t\t\treturn;\n\t\t}\n\t\tNode<E> newNode = new Node<>(element, null);\n\t\tNode<E> node = first;\n\t\tfor (int i = 0; i < index - 1; i++) {\n\t\t\tnode = node.next;\n\t\t}\n\t\tnewNode.next = node.next;\n\t\tnode.next = newNode;\n\t\tsize++;\n\t}\n\n\t// 删除指定索引的结点，并返回该结点的数据值\n\tpublic E remove(int index) {\n\t\tcheckElementIndex(index);\n\t\tNode<E> node = first;\n\t\tfor (int i = 0; i < index - 1; i++) {\n\t\t\tnode = node.next;\n\t\t}\n\t\tNode<E> removeNode = node.next;\n\t\tnode.next = removeNode.next;\n\t\tE e = removeNode.data;\n\t\tremoveNode.data = null;\n\t\tremoveNode.next = null;\n\t\treturn e;\n\t}\n\t\n\t//反转单链表pre->p->next\n\tpublic void reverse() {\n\t\tNode<E> pre = first;\n\t\tNode<E> p = first.next;\n\t\tNode<E> next = null;\n\t\tpre.next = null;\n\t\twhile(p != null) {\n\t\t\tnext = p.next;\n\t\t\tp.next = pre;\n\t\t\tpre = p;\n\t\t\tp = next;\n\t\t}\n\t\tfirst = pre;\n\t}\n\n\t// 给定数据在单链表中首次出现的位置\n\tpublic int indexOf(Object obj) {\n\t\tint index = 0;\n\t\tif (obj == null) {\n\t\t\tfor (Node<E> node = first; node != null; node = node.next) {\n\t\t\t\tif (node.data == null) {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (Node<E> node = first; node != null; node = node.next) {\n\t\t\t\tif (obj.equals(node.data)) {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t// 给定数据在单链表中最后一次出现的位置\n\tpublic int lastIndexOf(Object obj) {\n\t\tint index = 0;\n\t\tint i = 0;\n\t\tint[] array = new int[size];\n\t\tif (obj == null) {\n\t\t\tfor (Node<E> node = first; node != null; node = node.next) {\n\t\t\t\tif (node.data == null) {\n\t\t\t\t\tarray[i++] = index;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (Node<E> node = first; node != null; node = node.next) {\n\t\t\t\tif (obj.equals(node.data)) {\n\t\t\t\t\tarray[i++] = index;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\tif (array.length != 0) {\n\t\t\treturn array[i - 1];\n\t\t}\n\t\treturn -1;\n\t}\n\t\n\t/*public int lastIndexOf(Object obj) {\n\t\tObject[] array = toArray();\n\t\tif(obj == null) {\n\t\t\tfor(int i = array.length -1;i>=0;i--) {\n\t\t\t\tif(array[i] == null) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor(int i = array.length -1;i>=0;i--) {\n\t\t\t\tif(obj.equals(array[i])) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}*/\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder list = new StringBuilder(\"[\");\n\t\tNode<E> node = first;\n\t\tint index = 0;\n\t\twhile (node != null) {\n\t\t\tindex++;\n\t\t\tif (index == size) {\n\t\t\t\tlist.append(node.data);\n\t\t\t} else {\n\t\t\t\tlist.append(node.data).append(\",\");\n\t\t\t}\n\t\t\tnode = node.next;\n\t\t}\n\t\tlist.append(\"]\");\n\t\treturn list.toString();\n\t}\n\t\n\tprivate Node<E> node(int index) {\n\t\tcheckElementIndex(index);\n\t\tNode<E> node = first;\n\t\tfor(int i = 0 ; i < index ;i++) {\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn node;\n\t}\n\n\tprivate static class Node<E> {\n\t\tprivate E data;\n\t\tprivate Node<E> next;\n\n\t\tNode(E data, Node<E> next) {\n\t\t\tthis.data = data;\n\t\t\tthis.next = next;\n\t\t}\n\t}\n\n\t// 单链表中的结点索引从0开始到size-1\n\tprivate void checkElementIndex(int index) {\n\t\tif (index < 0 || index >= size) {\n\t\t\tthrow new IndexOutOfBoundsException(\"index:\" + index + \",size:\" + size);\n\t\t}\n\t}\n\n\t// 可以添加结点的位置，索引从0开始到size\n\tprivate void checkPositionIndex(int index) {\n\t\tif (index < 0 || index > size) {\n\t\t\tthrow new IndexOutOfBoundsException(\"index:\" + index + \",size:\" + size);\n\t\t}\n\t}\n}\n```\n\n","source":"_posts/data-structure-and-algorithm-analysis-homework-singlelinkedlist-in-java.md","raw":"---\ntitle: 数据结构与算法分析作业之自己实现Java单链表\ndate: 2018-05-26 20:14:55\nupdated: 2018-05-26 20:14:55\ntags: [数据结构,java]\ncategories: 数据结构与算法分析:Java语言描述\n---\n\n<p class=\"text-center\">自己实现的Java单链表</p>\n\n<!--more-->\n\n```java\npackage com.hegongshan.collections;\nimport java.util.NoSuchElementException;\n/**\n * 单链表\n * @author hegongshan https://www.hegongshan.com\n * @param <E>\n */\npublic class SingleLinkedList<E> {\n\n\tprivate int size = 0;\n\tprivate Node<E> first;\n\n\tpublic SingleLinkedList() {\n\t}\n\n\t// 单链表中元素个数\n\tpublic int size() {\n\t\treturn size;\n\t}\n\n\t// 判断单链表是否为空\n\tpublic boolean isEmpty() {\n\t\treturn first == null;\n\t}\n\n\tpublic boolean contains(Object obj) {\n\t\treturn indexOf(obj) != -1;\n\t}\n\n\tpublic Object[] toArray() {\n\t\tif (isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\tObject[] array = new Object[size];\n\t\tNode<E> node = first;\n\t\tfor (int i = 0; i < size; i++) {\n\t\t\tarray[i] = node.data;\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic <T> T[] toArray(T[] a) {\n\t\treturn (T[]) toArray();\n\t}\n\n\tpublic boolean add(E e) {\n\t\tlinkLast(e);\n\t\treturn true;\n\t}\n\n\t// 在单链表尾部插入新的结点\n\tpublic void linkLast(E e) {\n\t\tif (!isEmpty()) {\n\t\t\tNode<E> newNode = new Node<>(e, null);\n\t\t\tNode<E> last = first;\n\t\t\twhile (last.next != null) {\n\t\t\t\tlast = last.next;\n\t\t\t}\n\t\t\tlast.next = newNode;\n\t\t} else {\n\t\t\tfirst = new Node<>(e, null);\n\t\t}\n\t\tsize++;\n\t}\n\n\t// 在单链表头部插入新的数据\n\tpublic void linkFirst(E e) {\n\t\tNode<E> newNode = new Node<>(e, first);\n\t\tfirst = newNode;\n\t\tsize++;\n\t}\n\n\t// 清空单链表\n\tpublic void clear() {\n\t\tfor (Node<E> node = first; node != null;) {\n\t\t\tNode<E> next = node.next;\n\t\t\tnode.data = null;\n\t\t\tnode.next = null;\n\t\t\tnode = next;\n\t\t}\n\t\tfirst = null;\n\t\tsize = 0;\n\t}\n\n\tpublic E get(int index) {\n\t\tcheckElementIndex(index);\n\t\treturn node(index).data;\n\t}\n\t\n\tpublic E getFirst() {\n\t\tif(first == null) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\t\treturn first.data;\n\t}\n\n\t// 把索引号为index的结点的数据改为element，并返回原来的结点数据\n\tpublic E set(int index, E element) {\n\t\tcheckElementIndex(index);\n\t\tNode<E> node = node(index);\n\t\tE oldElement = node.data;\n\t\tnode.data = element;\n\t\treturn oldElement;\n\t}\n\n\t// 在指定索引处插入元素\n\tpublic void add(int index, E element) {\n\t\tcheckPositionIndex(index);\n\t\tif (index == 0) {\n\t\t\tlinkFirst(element);\n\t\t\treturn;\n\t\t}\n\t\tNode<E> newNode = new Node<>(element, null);\n\t\tNode<E> node = first;\n\t\tfor (int i = 0; i < index - 1; i++) {\n\t\t\tnode = node.next;\n\t\t}\n\t\tnewNode.next = node.next;\n\t\tnode.next = newNode;\n\t\tsize++;\n\t}\n\n\t// 删除指定索引的结点，并返回该结点的数据值\n\tpublic E remove(int index) {\n\t\tcheckElementIndex(index);\n\t\tNode<E> node = first;\n\t\tfor (int i = 0; i < index - 1; i++) {\n\t\t\tnode = node.next;\n\t\t}\n\t\tNode<E> removeNode = node.next;\n\t\tnode.next = removeNode.next;\n\t\tE e = removeNode.data;\n\t\tremoveNode.data = null;\n\t\tremoveNode.next = null;\n\t\treturn e;\n\t}\n\t\n\t//反转单链表pre->p->next\n\tpublic void reverse() {\n\t\tNode<E> pre = first;\n\t\tNode<E> p = first.next;\n\t\tNode<E> next = null;\n\t\tpre.next = null;\n\t\twhile(p != null) {\n\t\t\tnext = p.next;\n\t\t\tp.next = pre;\n\t\t\tpre = p;\n\t\t\tp = next;\n\t\t}\n\t\tfirst = pre;\n\t}\n\n\t// 给定数据在单链表中首次出现的位置\n\tpublic int indexOf(Object obj) {\n\t\tint index = 0;\n\t\tif (obj == null) {\n\t\t\tfor (Node<E> node = first; node != null; node = node.next) {\n\t\t\t\tif (node.data == null) {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (Node<E> node = first; node != null; node = node.next) {\n\t\t\t\tif (obj.equals(node.data)) {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t// 给定数据在单链表中最后一次出现的位置\n\tpublic int lastIndexOf(Object obj) {\n\t\tint index = 0;\n\t\tint i = 0;\n\t\tint[] array = new int[size];\n\t\tif (obj == null) {\n\t\t\tfor (Node<E> node = first; node != null; node = node.next) {\n\t\t\t\tif (node.data == null) {\n\t\t\t\t\tarray[i++] = index;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (Node<E> node = first; node != null; node = node.next) {\n\t\t\t\tif (obj.equals(node.data)) {\n\t\t\t\t\tarray[i++] = index;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\tif (array.length != 0) {\n\t\t\treturn array[i - 1];\n\t\t}\n\t\treturn -1;\n\t}\n\t\n\t/*public int lastIndexOf(Object obj) {\n\t\tObject[] array = toArray();\n\t\tif(obj == null) {\n\t\t\tfor(int i = array.length -1;i>=0;i--) {\n\t\t\t\tif(array[i] == null) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor(int i = array.length -1;i>=0;i--) {\n\t\t\t\tif(obj.equals(array[i])) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}*/\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder list = new StringBuilder(\"[\");\n\t\tNode<E> node = first;\n\t\tint index = 0;\n\t\twhile (node != null) {\n\t\t\tindex++;\n\t\t\tif (index == size) {\n\t\t\t\tlist.append(node.data);\n\t\t\t} else {\n\t\t\t\tlist.append(node.data).append(\",\");\n\t\t\t}\n\t\t\tnode = node.next;\n\t\t}\n\t\tlist.append(\"]\");\n\t\treturn list.toString();\n\t}\n\t\n\tprivate Node<E> node(int index) {\n\t\tcheckElementIndex(index);\n\t\tNode<E> node = first;\n\t\tfor(int i = 0 ; i < index ;i++) {\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn node;\n\t}\n\n\tprivate static class Node<E> {\n\t\tprivate E data;\n\t\tprivate Node<E> next;\n\n\t\tNode(E data, Node<E> next) {\n\t\t\tthis.data = data;\n\t\t\tthis.next = next;\n\t\t}\n\t}\n\n\t// 单链表中的结点索引从0开始到size-1\n\tprivate void checkElementIndex(int index) {\n\t\tif (index < 0 || index >= size) {\n\t\t\tthrow new IndexOutOfBoundsException(\"index:\" + index + \",size:\" + size);\n\t\t}\n\t}\n\n\t// 可以添加结点的位置，索引从0开始到size\n\tprivate void checkPositionIndex(int index) {\n\t\tif (index < 0 || index > size) {\n\t\t\tthrow new IndexOutOfBoundsException(\"index:\" + index + \",size:\" + size);\n\t\t}\n\t}\n}\n```\n\n","slug":"data-structure-and-algorithm-analysis-homework-singlelinkedlist-in-java","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9ap5000tj1q0vs42n5ve","content":"<p class=\"text-center\">自己实现的Java单链表</p>\n\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hegongshan.collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.NoSuchElementException;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 单链表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> hegongshan https://www.hegongshan.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;E&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleLinkedList</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node&lt;E&gt; first;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SingleLinkedList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 单链表中元素个数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 判断单链表是否为空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> first == <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> indexOf(obj) != -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Object[] toArray() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tObject[] array = <span class=\"keyword\">new</span> Object[size];</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\tarray[i] = node.data;</span><br><span class=\"line\">\t\t\tnode = node.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> array;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (T[]) toArray();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t\tlinkLast(e);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 在单链表尾部插入新的结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!isEmpty()) &#123;</span><br><span class=\"line\">\t\t\tNode&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(e, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t\tNode&lt;E&gt; last = first;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (last.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tlast = last.next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tlast.next = newNode;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tfirst = <span class=\"keyword\">new</span> Node&lt;&gt;(e, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsize++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 在单链表头部插入新的数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">linkFirst</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t\tNode&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(e, first);</span><br><span class=\"line\">\t\tfirst = newNode;</span><br><span class=\"line\">\t\tsize++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 清空单链表</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Node&lt;E&gt; node = first; node != <span class=\"keyword\">null</span>;) &#123;</span><br><span class=\"line\">\t\t\tNode&lt;E&gt; next = node.next;</span><br><span class=\"line\">\t\t\tnode.data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\tnode.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\tnode = next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfirst = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tsize = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> node(index).data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getFirst</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(first == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> first.data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 把索引号为index的结点的数据改为element，并返回原来的结点数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = node(index);</span><br><span class=\"line\">\t\tE oldElement = node.data;</span><br><span class=\"line\">\t\tnode.data = element;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> oldElement;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 在指定索引处插入元素</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckPositionIndex(index);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tlinkFirst(element);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tNode&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(element, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tnode = node.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnewNode.next = node.next;</span><br><span class=\"line\">\t\tnode.next = newNode;</span><br><span class=\"line\">\t\tsize++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除指定索引的结点，并返回该结点的数据值</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tnode = node.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tNode&lt;E&gt; removeNode = node.next;</span><br><span class=\"line\">\t\tnode.next = removeNode.next;</span><br><span class=\"line\">\t\tE e = removeNode.data;</span><br><span class=\"line\">\t\tremoveNode.data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tremoveNode.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> e;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//反转单链表pre-&gt;p-&gt;next</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tNode&lt;E&gt; pre = first;</span><br><span class=\"line\">\t\tNode&lt;E&gt; p = first.next;</span><br><span class=\"line\">\t\tNode&lt;E&gt; next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tpre.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(p != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tnext = p.next;</span><br><span class=\"line\">\t\t\tp.next = pre;</span><br><span class=\"line\">\t\t\tpre = p;</span><br><span class=\"line\">\t\t\tp = next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfirst = pre;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 给定数据在单链表中首次出现的位置</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Node&lt;E&gt; node = first; node != <span class=\"keyword\">null</span>; node = node.next) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (node.data == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tindex++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Node&lt;E&gt; node = first; node != <span class=\"keyword\">null</span>; node = node.next) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (obj.equals(node.data)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tindex++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 给定数据在单链表中最后一次出现的位置</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Node&lt;E&gt; node = first; node != <span class=\"keyword\">null</span>; node = node.next) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (node.data == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tarray[i++] = index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tindex++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Node&lt;E&gt; node = first; node != <span class=\"keyword\">null</span>; node = node.next) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (obj.equals(node.data)) &#123;</span><br><span class=\"line\">\t\t\t\t\tarray[i++] = index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tindex++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (array.length != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> array[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/*public int lastIndexOf(Object obj) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tObject[] array = toArray();</span></span><br><span class=\"line\"><span class=\"comment\">\t\tif(obj == null) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tfor(int i = array.length -1;i&gt;=0;i--) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tif(array[i] == null) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\treturn i;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tfor(int i = array.length -1;i&gt;=0;i--) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tif(obj.equals(array[i])) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\treturn i;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn -1;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tStringBuilder list = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tindex++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (index == size) &#123;</span><br><span class=\"line\">\t\t\t\tlist.append(node.data);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tlist.append(node.data).append(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tnode = node.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlist.append(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list.toString();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node&lt;E&gt; <span class=\"title\">node</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; index ;i++) &#123;</span><br><span class=\"line\">\t\t\tnode = node.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> E data;</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> Node&lt;E&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tNode(E data, Node&lt;E&gt; next) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 单链表中的结点索引从0开始到size-1</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkElementIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= size) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"index:\"</span> + index + <span class=\"string\">\",size:\"</span> + size);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 可以添加结点的位置，索引从0开始到size</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkPositionIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; size) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"index:\"</span> + index + <span class=\"string\">\",size:\"</span> + size);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p class=\"text-center\">自己实现的Java单链表</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hegongshan.collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.NoSuchElementException;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 单链表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> hegongshan https://www.hegongshan.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;E&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleLinkedList</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node&lt;E&gt; first;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SingleLinkedList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 单链表中元素个数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 判断单链表是否为空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> first == <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> indexOf(obj) != -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Object[] toArray() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tObject[] array = <span class=\"keyword\">new</span> Object[size];</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\tarray[i] = node.data;</span><br><span class=\"line\">\t\t\tnode = node.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> array;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (T[]) toArray();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t\tlinkLast(e);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 在单链表尾部插入新的结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!isEmpty()) &#123;</span><br><span class=\"line\">\t\t\tNode&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(e, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t\tNode&lt;E&gt; last = first;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (last.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tlast = last.next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tlast.next = newNode;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tfirst = <span class=\"keyword\">new</span> Node&lt;&gt;(e, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsize++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 在单链表头部插入新的数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">linkFirst</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t\tNode&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(e, first);</span><br><span class=\"line\">\t\tfirst = newNode;</span><br><span class=\"line\">\t\tsize++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 清空单链表</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Node&lt;E&gt; node = first; node != <span class=\"keyword\">null</span>;) &#123;</span><br><span class=\"line\">\t\t\tNode&lt;E&gt; next = node.next;</span><br><span class=\"line\">\t\t\tnode.data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\tnode.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\tnode = next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfirst = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tsize = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> node(index).data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getFirst</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(first == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> first.data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 把索引号为index的结点的数据改为element，并返回原来的结点数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = node(index);</span><br><span class=\"line\">\t\tE oldElement = node.data;</span><br><span class=\"line\">\t\tnode.data = element;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> oldElement;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 在指定索引处插入元素</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckPositionIndex(index);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tlinkFirst(element);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tNode&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(element, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tnode = node.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnewNode.next = node.next;</span><br><span class=\"line\">\t\tnode.next = newNode;</span><br><span class=\"line\">\t\tsize++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除指定索引的结点，并返回该结点的数据值</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tnode = node.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tNode&lt;E&gt; removeNode = node.next;</span><br><span class=\"line\">\t\tnode.next = removeNode.next;</span><br><span class=\"line\">\t\tE e = removeNode.data;</span><br><span class=\"line\">\t\tremoveNode.data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tremoveNode.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> e;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//反转单链表pre-&gt;p-&gt;next</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tNode&lt;E&gt; pre = first;</span><br><span class=\"line\">\t\tNode&lt;E&gt; p = first.next;</span><br><span class=\"line\">\t\tNode&lt;E&gt; next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tpre.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(p != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tnext = p.next;</span><br><span class=\"line\">\t\t\tp.next = pre;</span><br><span class=\"line\">\t\t\tpre = p;</span><br><span class=\"line\">\t\t\tp = next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfirst = pre;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 给定数据在单链表中首次出现的位置</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Node&lt;E&gt; node = first; node != <span class=\"keyword\">null</span>; node = node.next) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (node.data == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tindex++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Node&lt;E&gt; node = first; node != <span class=\"keyword\">null</span>; node = node.next) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (obj.equals(node.data)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tindex++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 给定数据在单链表中最后一次出现的位置</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Node&lt;E&gt; node = first; node != <span class=\"keyword\">null</span>; node = node.next) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (node.data == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tarray[i++] = index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tindex++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Node&lt;E&gt; node = first; node != <span class=\"keyword\">null</span>; node = node.next) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (obj.equals(node.data)) &#123;</span><br><span class=\"line\">\t\t\t\t\tarray[i++] = index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tindex++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (array.length != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> array[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/*public int lastIndexOf(Object obj) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tObject[] array = toArray();</span></span><br><span class=\"line\"><span class=\"comment\">\t\tif(obj == null) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tfor(int i = array.length -1;i&gt;=0;i--) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tif(array[i] == null) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\treturn i;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tfor(int i = array.length -1;i&gt;=0;i--) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tif(obj.equals(array[i])) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\treturn i;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn -1;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tStringBuilder list = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tindex++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (index == size) &#123;</span><br><span class=\"line\">\t\t\t\tlist.append(node.data);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tlist.append(node.data).append(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tnode = node.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlist.append(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list.toString();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node&lt;E&gt; <span class=\"title\">node</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; index ;i++) &#123;</span><br><span class=\"line\">\t\t\tnode = node.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> E data;</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> Node&lt;E&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tNode(E data, Node&lt;E&gt; next) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 单链表中的结点索引从0开始到size-1</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkElementIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= size) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"index:\"</span> + index + <span class=\"string\">\",size:\"</span> + size);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 可以添加结点的位置，索引从0开始到size</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkPositionIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; size) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"index:\"</span> + index + <span class=\"string\">\",size:\"</span> + size);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"数据结构与算法分析作业之自己实现Java双链表","date":"2018-05-27T09:30:16.000Z","updated":"2018-05-27T09:30:16.000Z","_content":"\n<p class=\"text-center\">自己实现的Java双链表</p>\n\n<!--more-->\n\n```java\npackage com.hegongshan.collections;\nimport java.util.NoSuchElementException;\n/**\n * 双链表\n * @author hegongshan https://www.hegongshan.com\n * @param <E>\n */\npublic class DoubleLinkedList<E> {\n\tprivate int size = 0;\n\tprivate Node<E> first;\n\tprivate Node<E> last;\n\t\n\tprivate static class Node<E> {\n\t\tNode<E> prev;\n\t\tE data;\n\t\tNode<E> next;\n\t\tNode(Node<E> prev, E data, Node<E> next) {\n\t\t\tsuper();\n\t\t\tthis.prev = prev;\n\t\t\tthis.data = data;\n\t\t\tthis.next = next;\n\t\t}\n\t}\n    \n\tpublic DoubleLinkedList(){\n\t\t\n\t}\n\t\n\tpublic int size() {\n\t\treturn size;\n\t}\n\t\n\tpublic boolean isEmpty() {\n\t\treturn first == null;\n\t}\n\t\n\tpublic boolean add(E e) {\n\t\tlinkLast(e);\n\t\treturn true;\n\t}\n\t\n\tpublic void add(int index,E e) {\n\t\tcheckPositionIndex(index);\n\t\tif(index == size) {\n\t\t\tlinkLast(e);\n\t\t} else {\n\t\t\tlinkBefore(e,node(index));\n\t\t}\n\t}\n\t\n\tpublic E get(int index) {\n\t\tcheckElementIndex(index);\n\t\treturn node(index).data;\n\t}\n\t\n\tpublic E getFirst() {\n\t\tif(first == null) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\t\treturn first.data;\n\t}\n\t\n\tpublic E getLast() {\n\t\tif(last == null) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\t\treturn last.data;\n\t}\n\t\n\tpublic E set(int index,E e) {\n\t\tcheckElementIndex(index);\n\t\tNode<E> node = node(index);\n\t\tE oldValue = node.data;\n\t\tnode.data = e;\n\t\treturn oldValue;\n\t}\n\t\n\tpublic E remove(int index) {\n\t\tcheckElementIndex(index);\n\t\tNode<E> node = node(index);\n\t\tnode.prev.next = node.next;\n\t\tnode.next.prev = node.prev;\n\t\tE e = node.data;\n\t\tnode.prev = null;\n\t\tnode.next = null;\n\t\tnode.data = null;\n\t\tsize--;\n\t\treturn e;\n\t}\n\t\n\tpublic E removeFirst() {\n\t\tif(first == null) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\t\tNode<E> node = first;\n\t\tE e = node.data;\n\t\tfirst = node.next;\n\t\tnode.next = null;\n\t\tnode.data = null;\n\t\tif(first == null) {\n\t\t\tlast = null;\n\t\t} else {\n\t\t\tfirst.prev = null;\n\t\t}\n\t\tsize--;\n\t\treturn e;\n\t}\n\t\n\tpublic E removeLast() {\n\t\tif(last == null) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\t\tNode<E> node = last;\n\t\tE e = node.data;\n\t\tlast = node.prev;\n\t\tnode.prev = null;\n\t\tnode.data = null;\n\t\tif(last == null) {\n\t\t\tfirst = null;\n\t\t} else {\n\t\t\tlast.next = null;\n\t\t}\n\t\tsize--;\n\t\treturn e;\n\t}\n\t\n\tpublic void clear() {\t\t\n\t\tfor(Node<E> node = first;node != null;) {\n\t\t\tNode<E> next = node.next;\n\t\t\tnode.prev = null;\n\t\t\tnode.data = null;\n\t\t\tnode.next = null;\n\t\t\tnode = next;\n\t\t}\n\t\tfirst = last = null;\n\t\tsize = 0;\n\t}\n\t\n\tpublic void reverse() {\n\t\tNode<E> temp = first;\n\t\tfirst = last;\n\t\tlast = temp;\n\t}\n\t\n\tpublic boolean contains(Object obj) {\n\t\treturn indexOf(obj) != -1;\n\t}\n\t\n\tpublic int indexOf(Object obj) {\n\t\tint index = 0;\n\t\tif(obj == null) {\n\t\t\tfor(Node<E> node = first;node != null;node = node.next) {\n\t\t\t\tif(node.data == null) {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t}\n\t\t} else {\n\t\t\tfor(Node<E> node = first;node != null;node = node.next) {\n\t\t\t\tif(obj.equals(node.data)) {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t\n\tpublic int lastIndexOf(Object obj) {\n\t\tint index = size - 1;\n\t\tif(obj == null) {\n\t\t\tfor(Node<E> node = last;node != null;node = node.prev) {\n\t\t\t\tif(node.data == null) {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t\tindex--;\n\t\t\t}\n\t\t} else {\n\t\t\tfor(Node<E> node = last;node != null;node = node.prev) {\n\t\t\t\tif(obj.equals(node.data)) {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t\tindex--;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t\n\tpublic void linkFirst(E e) {\n\t\tNode<E> node = new Node<>(null,e,first);\n\t\tfirst.prev = node;\n\t\tfirst = node;\n\t\tsize++;\n\t}\n\t\n\tprivate void linkBefore(E e,Node<E> node) {\n\t\tNode<E> newNode = new Node<>(node.prev,e,node);\n\t\tnode.prev.next = newNode;\n\t\tnode.prev = newNode;\n\t\tsize++;\n\t}\n\t\n\tpublic void linkLast(E e) {\n\t\tif(size == 0) {\n\t\t\tfirst = new Node<>(null,e,null);\n\t\t\tlast = first;\n\t\t\tsize++;\n\t\t\treturn ;\n\t\t}\n\t\tNode<E> node = new Node<E>(last,e,null);\n\t\tlast.next = node;\n\t\tlast = node;\n\t\tsize++;\n\t}\n\t\n\tprivate Node<E> node(int index) {\n\t\tcheckElementIndex(index);\n\t\tif(index < (size >> 1)) {\n\t\t\tNode<E> node = first;\n\t\t\tfor(int i = 0 ; i < index ; i++) {\n\t\t\t\tnode = node.next;\n\t\t\t}\n\t\t\treturn node;\n\t\t} else {\n\t\t\tNode<E> node = last;\n\t\t\tfor(int i = size - 1 ; i > index ; i--) {\n\t\t\t\tnode = node.prev;\n\t\t\t}\n\t\t\treturn node;\n\t\t}\n\t}\n\t\n\tprivate void checkElementIndex(int index) {\n\t\tif (index < 0 || index >= size) {\n\t\t\tthrow new IndexOutOfBoundsException(\"index:\" + index + \",size:\" + size);\n\t\t}\n\t}\n\n\t// 可以添加结点的位置，索引从0开始到size\n\tprivate void checkPositionIndex(int index) {\n\t\tif (index < 0 || index > size) {\n\t\t\tthrow new IndexOutOfBoundsException(\"index:\" + index + \",size:\" + size);\n\t\t}\n\t}\n}\n```\n\n","source":"_posts/data-structure-and-algorithm-analysis-homework-doublelinkedlist-in-java.md","raw":"---\ntitle: 数据结构与算法分析作业之自己实现Java双链表\ndate: 2018-05-27 17:30:16\nupdated: 2018-05-27 17:30:16\ntags: [数据结构,java]\ncategories: 数据结构与算法分析:Java语言描述\n---\n\n<p class=\"text-center\">自己实现的Java双链表</p>\n\n<!--more-->\n\n```java\npackage com.hegongshan.collections;\nimport java.util.NoSuchElementException;\n/**\n * 双链表\n * @author hegongshan https://www.hegongshan.com\n * @param <E>\n */\npublic class DoubleLinkedList<E> {\n\tprivate int size = 0;\n\tprivate Node<E> first;\n\tprivate Node<E> last;\n\t\n\tprivate static class Node<E> {\n\t\tNode<E> prev;\n\t\tE data;\n\t\tNode<E> next;\n\t\tNode(Node<E> prev, E data, Node<E> next) {\n\t\t\tsuper();\n\t\t\tthis.prev = prev;\n\t\t\tthis.data = data;\n\t\t\tthis.next = next;\n\t\t}\n\t}\n    \n\tpublic DoubleLinkedList(){\n\t\t\n\t}\n\t\n\tpublic int size() {\n\t\treturn size;\n\t}\n\t\n\tpublic boolean isEmpty() {\n\t\treturn first == null;\n\t}\n\t\n\tpublic boolean add(E e) {\n\t\tlinkLast(e);\n\t\treturn true;\n\t}\n\t\n\tpublic void add(int index,E e) {\n\t\tcheckPositionIndex(index);\n\t\tif(index == size) {\n\t\t\tlinkLast(e);\n\t\t} else {\n\t\t\tlinkBefore(e,node(index));\n\t\t}\n\t}\n\t\n\tpublic E get(int index) {\n\t\tcheckElementIndex(index);\n\t\treturn node(index).data;\n\t}\n\t\n\tpublic E getFirst() {\n\t\tif(first == null) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\t\treturn first.data;\n\t}\n\t\n\tpublic E getLast() {\n\t\tif(last == null) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\t\treturn last.data;\n\t}\n\t\n\tpublic E set(int index,E e) {\n\t\tcheckElementIndex(index);\n\t\tNode<E> node = node(index);\n\t\tE oldValue = node.data;\n\t\tnode.data = e;\n\t\treturn oldValue;\n\t}\n\t\n\tpublic E remove(int index) {\n\t\tcheckElementIndex(index);\n\t\tNode<E> node = node(index);\n\t\tnode.prev.next = node.next;\n\t\tnode.next.prev = node.prev;\n\t\tE e = node.data;\n\t\tnode.prev = null;\n\t\tnode.next = null;\n\t\tnode.data = null;\n\t\tsize--;\n\t\treturn e;\n\t}\n\t\n\tpublic E removeFirst() {\n\t\tif(first == null) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\t\tNode<E> node = first;\n\t\tE e = node.data;\n\t\tfirst = node.next;\n\t\tnode.next = null;\n\t\tnode.data = null;\n\t\tif(first == null) {\n\t\t\tlast = null;\n\t\t} else {\n\t\t\tfirst.prev = null;\n\t\t}\n\t\tsize--;\n\t\treturn e;\n\t}\n\t\n\tpublic E removeLast() {\n\t\tif(last == null) {\n\t\t\tthrow new NoSuchElementException();\n\t\t}\n\t\tNode<E> node = last;\n\t\tE e = node.data;\n\t\tlast = node.prev;\n\t\tnode.prev = null;\n\t\tnode.data = null;\n\t\tif(last == null) {\n\t\t\tfirst = null;\n\t\t} else {\n\t\t\tlast.next = null;\n\t\t}\n\t\tsize--;\n\t\treturn e;\n\t}\n\t\n\tpublic void clear() {\t\t\n\t\tfor(Node<E> node = first;node != null;) {\n\t\t\tNode<E> next = node.next;\n\t\t\tnode.prev = null;\n\t\t\tnode.data = null;\n\t\t\tnode.next = null;\n\t\t\tnode = next;\n\t\t}\n\t\tfirst = last = null;\n\t\tsize = 0;\n\t}\n\t\n\tpublic void reverse() {\n\t\tNode<E> temp = first;\n\t\tfirst = last;\n\t\tlast = temp;\n\t}\n\t\n\tpublic boolean contains(Object obj) {\n\t\treturn indexOf(obj) != -1;\n\t}\n\t\n\tpublic int indexOf(Object obj) {\n\t\tint index = 0;\n\t\tif(obj == null) {\n\t\t\tfor(Node<E> node = first;node != null;node = node.next) {\n\t\t\t\tif(node.data == null) {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t}\n\t\t} else {\n\t\t\tfor(Node<E> node = first;node != null;node = node.next) {\n\t\t\t\tif(obj.equals(node.data)) {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t\n\tpublic int lastIndexOf(Object obj) {\n\t\tint index = size - 1;\n\t\tif(obj == null) {\n\t\t\tfor(Node<E> node = last;node != null;node = node.prev) {\n\t\t\t\tif(node.data == null) {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t\tindex--;\n\t\t\t}\n\t\t} else {\n\t\t\tfor(Node<E> node = last;node != null;node = node.prev) {\n\t\t\t\tif(obj.equals(node.data)) {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t\tindex--;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t\n\tpublic void linkFirst(E e) {\n\t\tNode<E> node = new Node<>(null,e,first);\n\t\tfirst.prev = node;\n\t\tfirst = node;\n\t\tsize++;\n\t}\n\t\n\tprivate void linkBefore(E e,Node<E> node) {\n\t\tNode<E> newNode = new Node<>(node.prev,e,node);\n\t\tnode.prev.next = newNode;\n\t\tnode.prev = newNode;\n\t\tsize++;\n\t}\n\t\n\tpublic void linkLast(E e) {\n\t\tif(size == 0) {\n\t\t\tfirst = new Node<>(null,e,null);\n\t\t\tlast = first;\n\t\t\tsize++;\n\t\t\treturn ;\n\t\t}\n\t\tNode<E> node = new Node<E>(last,e,null);\n\t\tlast.next = node;\n\t\tlast = node;\n\t\tsize++;\n\t}\n\t\n\tprivate Node<E> node(int index) {\n\t\tcheckElementIndex(index);\n\t\tif(index < (size >> 1)) {\n\t\t\tNode<E> node = first;\n\t\t\tfor(int i = 0 ; i < index ; i++) {\n\t\t\t\tnode = node.next;\n\t\t\t}\n\t\t\treturn node;\n\t\t} else {\n\t\t\tNode<E> node = last;\n\t\t\tfor(int i = size - 1 ; i > index ; i--) {\n\t\t\t\tnode = node.prev;\n\t\t\t}\n\t\t\treturn node;\n\t\t}\n\t}\n\t\n\tprivate void checkElementIndex(int index) {\n\t\tif (index < 0 || index >= size) {\n\t\t\tthrow new IndexOutOfBoundsException(\"index:\" + index + \",size:\" + size);\n\t\t}\n\t}\n\n\t// 可以添加结点的位置，索引从0开始到size\n\tprivate void checkPositionIndex(int index) {\n\t\tif (index < 0 || index > size) {\n\t\t\tthrow new IndexOutOfBoundsException(\"index:\" + index + \",size:\" + size);\n\t\t}\n\t}\n}\n```\n\n","slug":"data-structure-and-algorithm-analysis-homework-doublelinkedlist-in-java","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9ap6000yj1q05tvvhetq","content":"<p class=\"text-center\">自己实现的Java双链表</p>\n\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hegongshan.collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.NoSuchElementException;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 双链表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> hegongshan https://www.hegongshan.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;E&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubleLinkedList</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node&lt;E&gt; first;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node&lt;E&gt; last;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">\t\tNode&lt;E&gt; prev;</span><br><span class=\"line\">\t\tE data;</span><br><span class=\"line\">\t\tNode&lt;E&gt; next;</span><br><span class=\"line\">\t\tNode(Node&lt;E&gt; prev, E data, Node&lt;E&gt; next) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.prev = prev;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DoubleLinkedList</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> first == <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t\tlinkLast(e);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index,E e)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckPositionIndex(index);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index == size) &#123;</span><br><span class=\"line\">\t\t\tlinkLast(e);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tlinkBefore(e,node(index));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> node(index).data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getFirst</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(first == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> first.data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getLast</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(last == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> last.data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index,E e)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = node(index);</span><br><span class=\"line\">\t\tE oldValue = node.data;</span><br><span class=\"line\">\t\tnode.data = e;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = node(index);</span><br><span class=\"line\">\t\tnode.prev.next = node.next;</span><br><span class=\"line\">\t\tnode.next.prev = node.prev;</span><br><span class=\"line\">\t\tE e = node.data;</span><br><span class=\"line\">\t\tnode.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tnode.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tnode.data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tsize--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> e;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">removeFirst</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(first == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = first;</span><br><span class=\"line\">\t\tE e = node.data;</span><br><span class=\"line\">\t\tfirst = node.next;</span><br><span class=\"line\">\t\tnode.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tnode.data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(first == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tlast = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tfirst.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsize--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> e;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">removeLast</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(last == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = last;</span><br><span class=\"line\">\t\tE e = node.data;</span><br><span class=\"line\">\t\tlast = node.prev;</span><br><span class=\"line\">\t\tnode.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tnode.data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(last == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tfirst = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tlast.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsize--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> e;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Node&lt;E&gt; node = first;node != <span class=\"keyword\">null</span>;) &#123;</span><br><span class=\"line\">\t\t\tNode&lt;E&gt; next = node.next;</span><br><span class=\"line\">\t\t\tnode.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\tnode.data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\tnode.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\tnode = next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfirst = last = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tsize = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tNode&lt;E&gt; temp = first;</span><br><span class=\"line\">\t\tfirst = last;</span><br><span class=\"line\">\t\tlast = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> indexOf(obj) != -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(obj == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(Node&lt;E&gt; node = first;node != <span class=\"keyword\">null</span>;node = node.next) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(node.data == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tindex++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(Node&lt;E&gt; node = first;node != <span class=\"keyword\">null</span>;node = node.next) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(obj.equals(node.data)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tindex++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = size - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(obj == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(Node&lt;E&gt; node = last;node != <span class=\"keyword\">null</span>;node = node.prev) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(node.data == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tindex--;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(Node&lt;E&gt; node = last;node != <span class=\"keyword\">null</span>;node = node.prev) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(obj.equals(node.data)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tindex--;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">linkFirst</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"keyword\">null</span>,e,first);</span><br><span class=\"line\">\t\tfirst.prev = node;</span><br><span class=\"line\">\t\tfirst = node;</span><br><span class=\"line\">\t\tsize++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">linkBefore</span><span class=\"params\">(E e,Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class=\"line\">\t\tNode&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(node.prev,e,node);</span><br><span class=\"line\">\t\tnode.prev.next = newNode;</span><br><span class=\"line\">\t\tnode.prev = newNode;</span><br><span class=\"line\">\t\tsize++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tfirst = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"keyword\">null</span>,e,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t\tlast = first;</span><br><span class=\"line\">\t\t\tsize++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = <span class=\"keyword\">new</span> Node&lt;E&gt;(last,e,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\tlast.next = node;</span><br><span class=\"line\">\t\tlast = node;</span><br><span class=\"line\">\t\tsize++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node&lt;E&gt; <span class=\"title\">node</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index &lt; (size &gt;&gt; <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t\t\tNode&lt;E&gt; node = first;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; index ; i++) &#123;</span><br><span class=\"line\">\t\t\t\tnode = node.next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tNode&lt;E&gt; node = last;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span> ; i &gt; index ; i--) &#123;</span><br><span class=\"line\">\t\t\t\tnode = node.prev;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkElementIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= size) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"index:\"</span> + index + <span class=\"string\">\",size:\"</span> + size);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 可以添加结点的位置，索引从0开始到size</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkPositionIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; size) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"index:\"</span> + index + <span class=\"string\">\",size:\"</span> + size);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p class=\"text-center\">自己实现的Java双链表</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.hegongshan.collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.NoSuchElementException;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 双链表</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> hegongshan https://www.hegongshan.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;E&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubleLinkedList</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node&lt;E&gt; first;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node&lt;E&gt; last;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">\t\tNode&lt;E&gt; prev;</span><br><span class=\"line\">\t\tE data;</span><br><span class=\"line\">\t\tNode&lt;E&gt; next;</span><br><span class=\"line\">\t\tNode(Node&lt;E&gt; prev, E data, Node&lt;E&gt; next) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.prev = prev;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DoubleLinkedList</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> first == <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t\tlinkLast(e);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index,E e)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckPositionIndex(index);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index == size) &#123;</span><br><span class=\"line\">\t\t\tlinkLast(e);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tlinkBefore(e,node(index));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> node(index).data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getFirst</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(first == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> first.data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">getLast</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(last == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> last.data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index,E e)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = node(index);</span><br><span class=\"line\">\t\tE oldValue = node.data;</span><br><span class=\"line\">\t\tnode.data = e;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = node(index);</span><br><span class=\"line\">\t\tnode.prev.next = node.next;</span><br><span class=\"line\">\t\tnode.next.prev = node.prev;</span><br><span class=\"line\">\t\tE e = node.data;</span><br><span class=\"line\">\t\tnode.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tnode.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tnode.data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tsize--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> e;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">removeFirst</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(first == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = first;</span><br><span class=\"line\">\t\tE e = node.data;</span><br><span class=\"line\">\t\tfirst = node.next;</span><br><span class=\"line\">\t\tnode.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tnode.data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(first == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tlast = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tfirst.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsize--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> e;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">removeLast</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(last == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = last;</span><br><span class=\"line\">\t\tE e = node.data;</span><br><span class=\"line\">\t\tlast = node.prev;</span><br><span class=\"line\">\t\tnode.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tnode.data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(last == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tfirst = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tlast.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsize--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> e;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Node&lt;E&gt; node = first;node != <span class=\"keyword\">null</span>;) &#123;</span><br><span class=\"line\">\t\t\tNode&lt;E&gt; next = node.next;</span><br><span class=\"line\">\t\t\tnode.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\tnode.data = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\tnode.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\tnode = next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfirst = last = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tsize = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tNode&lt;E&gt; temp = first;</span><br><span class=\"line\">\t\tfirst = last;</span><br><span class=\"line\">\t\tlast = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> indexOf(obj) != -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(obj == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(Node&lt;E&gt; node = first;node != <span class=\"keyword\">null</span>;node = node.next) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(node.data == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tindex++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(Node&lt;E&gt; node = first;node != <span class=\"keyword\">null</span>;node = node.next) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(obj.equals(node.data)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tindex++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = size - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(obj == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(Node&lt;E&gt; node = last;node != <span class=\"keyword\">null</span>;node = node.prev) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(node.data == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tindex--;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(Node&lt;E&gt; node = last;node != <span class=\"keyword\">null</span>;node = node.prev) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(obj.equals(node.data)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tindex--;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">linkFirst</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"keyword\">null</span>,e,first);</span><br><span class=\"line\">\t\tfirst.prev = node;</span><br><span class=\"line\">\t\tfirst = node;</span><br><span class=\"line\">\t\tsize++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">linkBefore</span><span class=\"params\">(E e,Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class=\"line\">\t\tNode&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(node.prev,e,node);</span><br><span class=\"line\">\t\tnode.prev.next = newNode;</span><br><span class=\"line\">\t\tnode.prev = newNode;</span><br><span class=\"line\">\t\tsize++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tfirst = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"keyword\">null</span>,e,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t\tlast = first;</span><br><span class=\"line\">\t\t\tsize++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tNode&lt;E&gt; node = <span class=\"keyword\">new</span> Node&lt;E&gt;(last,e,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\tlast.next = node;</span><br><span class=\"line\">\t\tlast = node;</span><br><span class=\"line\">\t\tsize++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Node&lt;E&gt; <span class=\"title\">node</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tcheckElementIndex(index);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index &lt; (size &gt;&gt; <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t\t\tNode&lt;E&gt; node = first;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; index ; i++) &#123;</span><br><span class=\"line\">\t\t\t\tnode = node.next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tNode&lt;E&gt; node = last;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span> ; i &gt; index ; i--) &#123;</span><br><span class=\"line\">\t\t\t\tnode = node.prev;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkElementIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= size) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"index:\"</span> + index + <span class=\"string\">\",size:\"</span> + size);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 可以添加结点的位置，索引从0开始到size</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkPositionIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; size) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"index:\"</span> + index + <span class=\"string\">\",size:\"</span> + size);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"数据结构(C/C++版)之单链表的实现","date":"2018-06-07T10:45:53.000Z","updated":"2018-06-07T10:45:53.000Z","_content":"\n<p class=\"text-center\">用C/C++实现的单链表</p>\n\n<!--more-->\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n/*以下所有方法中的index从1开始，而不是0. */\ntypedef struct Node\n{\n\tElemType data;\n\tstruct Node * next;\n} LinkedList;//单链表\n//如果参数写为LinkedList * list，并不会改变实参的值，但可以改变实参指针变量所指向的变量的值\n//初始化单链表\nvoid init(LinkedList * &list)\n{\n\tlist = (LinkedList *) malloc(sizeof(LinkedList));\n\tlist->next = NULL;\n}\n//是否为空\nbool isEmpty(LinkedList * list)\n{\n\treturn list->next == NULL;\n}\n//输出单链表\nvoid print(LinkedList * list)\n{\n\tLinkedList * p = list->next;\n\twhile(p!=NULL)\n\t{\n\t\tprintf(\"%d \",p->data);\n\t\tp=p->next;\n\t}\n\tprintf(\"\\n\");\n}\n//计算单链表长度，头结点不算在内\nint length(LinkedList * list)\n{\n\tint count = 0;\n\tLinkedList * p = list;\n\twhile(p->next!=NULL)\n\t{\n\t\tcount++;\n\t\tp = p->next;\n\t}\n\treturn count;\n}\n/*//判断index是否为正确的位置索引，索引号从1开始到length(list)\nstatic bool isPositionIndex(LinkedList * list,int index) {\n\tif(index > 0 && index <= length(list))\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n//判断index是否为正确的可添加结点的位置索引，索引号从1开始到length(list)+1\nstatic bool isPositionIndexForAdd(LinkedList * list,int index) {\n\tif(index > 0 && index <= length(list) + 1)\n\t\treturn true;\n\telse\n\t\treturn false;\n}*/\n//在单链表尾部添加结点\nbool add(LinkedList * &list,ElemType e)\n{\n\tLinkedList * p,* last = list;\n\twhile(last->next!=NULL)\n\t{\n\t\tlast = last->next;\n\t}\n\tp = (LinkedList *)malloc(sizeof(LinkedList));\n\tp->data = e;\n\tp->next = NULL;\n\tlast->next = p;\n\treturn true;\n}\n//在索引位置为index处插入新的结点\n//下面的写法，只遍历了一次单链表\nbool add(LinkedList * &list,int index,ElemType e)\n{\n\tint count = 0;\n\tLinkedList * newNode,* p = list;\n\twhile(p != NULL && count < index - 1)//找到index结点的前一个结点\n\t{\n\t\tcount++;\n\t\tp = p->next;\n\t}\n\tif(p == NULL)//不存在第index-1个结点\n\t\treturn false;\n\telse\n\t{\n\t\tnewNode = (LinkedList *)malloc(sizeof(LinkedList));\n\t\tnewNode->data = e;\n\t\tnewNode->next = p->next;\n\t\tp->next = newNode;\n\t\treturn true;\n\t}\n}\n/*//下面的写法，  遍历了两遍单链表\nbool add(LinkedList * &list,int index,ElemType e)\n{\n\t//判断给定的index是否合理\n\tif(!isPositionIndexForAdd(list,index))\n\t\treturn false;\n\tint count = 0;\n\tLinkedList * newNode,* p = list;\n\twhile(p != NULL && count < index - 1)//找到index结点的前一个结点\n\t{\n\t\tcount++;\n\t\tp = p->next;\n\t}\n\tnewNode = (LinkedList *)malloc(sizeof(LinkedList));\n\tnewNode->data = e;\n\tnewNode->next = p->next;\n\tp->next = newNode;\n\treturn true;\n}*/\n//获取单链表中位置索引为index的元素，并将值赋给e\n//只遍历一次\nbool get(LinkedList * list,int index,ElemType &e)\n{\n\tLinkedList * p = list->next;\n\tint count = 1;\n\twhile(p != NULL && count < index)\n\t{\n\t\tcount++;\n\t\tp = p->next;\n\t}\n\tif(p == NULL)//不存在第index个结点\n\t\treturn false;\n\telse\n\t{\n\t\te = p->data;\n\t\treturn true;\n\t}\n}\n/*//需要遍历两次单链表\nbool get(LinkedList * list,int index,ElemType &e)\n{\n\tif(!isPositionIndex(list,index))\n\t\treturn false;\n\tLinkedList * p = list->next;\n\tint count = 1;\n\twhile(p != NULL && count < index)\n\t{\n\t\tcount++;\n\t\tp = p->next;\n\t}\n\te = p->data;\n\treturn true;\n}*/\n/*//另一种更简洁的写法\nElemType get(LinkedList * list,int index)\n{\n\tLinkedList * p = list->next;\n\tint count = 1;\n\twhile(p != NULL && count < index)\n\t{\n\t\tcount++;\n\t\tp = p->next;\n\t}\n\tif(p == NULL)//不存在第index个结点\n\t\treturn NULL;\n\telse\n\t\treturn p->data;\n}\n */\n//删除最后一个结点\nbool remove(LinkedList * &list,ElemType &e)\n{\n\tLinkedList * oldNode,* p = list;\n\tif(p->next == NULL)\n\t\treturn false;\n\twhile(p->next->next != NULL)//找最后一个结点的前驱结点\n\t{\n\t\tp = p->next;\n\t}\n\toldNode = p->next;\n\te =oldNode->data;\n\tp->next = NULL;\n\tfree(oldNode);\n\treturn true;\n}\n//删除第index个结点\nbool remove(LinkedList * &list,int index,ElemType &e)\n{\n\tint count = 0;\n\tLinkedList * oldNode, * p = list;\n\twhile(p != NULL && count < index - 1)//找到第index-1个结点\n\t{\n\t\tcount++;\n\t\tp = p->next;\n\t}\n\tif(p == NULL)//不存在第index-1个结点\n\t\treturn false;\n\telse\n\t{\n\t\toldNode = p->next;\n\t\t//这里需要特别注意，必须判断oldNode是否为NULL\n\t\tif(oldNode == NULL)\n\t\t\treturn false;\n\t\te = oldNode->data;\n\t\tp->next = oldNode->next;\n\t\tfree(oldNode);\n\t\treturn true;\n\t}\n}\n//在单链表中元素e首次出现的位置 ，若不存在，则返回-1\nint indexOf(LinkedList * list,ElemType e)\n{\n\tint count = 1;\n\tLinkedList * p = list->next;\n\twhile(p != NULL && p->data != e)\n\t{\n\t\tcount++;\n\t\tp = p->next;\n\t}\n\tif(p == NULL)\n\t\treturn -1;\n\telse\n\t\treturn count;\n}\n//销毁单链表\nvoid destroy(LinkedList * &list)\n{\n\tLinkedList * pre = list,* p = list->next;\n\twhile(p!=NULL)\n\t{\n\t\tfree(pre);\n\t\tpre = p;\n\t\tp = p->next;\n\t}\n\tfree(pre);\n}\n```\n\n测试程序：\n\n```c\ntypedef int ElemType;//声明LinkedList.h中的ElemType为int类型\n#include <stdio.h>\n#include \"LinkedList.h\"//包含头文件时，尖括号用于引入系统库，自己定义的头文件，需要使用引号引入\n\nint main() {\n\tLinkedList * list;\n\tinit(list);\n\tadd(list,20);\n\tadd(list,20);\n\tadd(list,21);\n\tadd(list,22);\n\tadd(list,23);\n\tadd(list,2,100);\n\tprintf(\"长度：%d\\n\",length(list));\n\tprint(list);\n\tElemType e;\n\tif(get(list,4,e))\n\t\tprintf(\"第4个结点的值为：%d\\n\",e);\n\tprintf(\"100首次出现的位置为：%d\\n\",indexOf(list,100));\n\tif(remove(list,3,e))\n\t\tprintf(\"第3个结点的值为：%d\\n\",e);\n\tif(remove(list,e))\n\t\tprintf(\"最后一个结点的值为：%d\\n\",e);\n\tprint(list);\n\tdestroy(list);\n\treturn 0;\n}\n```\n\n输出结果：\n\n```c\n长度：6\n20 100 20 21 22 23 \n第4个结点的值为：21\n100首次出现的位置为：2\n第3个结点的值为：20\n最后一个结点的值为：23\n20 100 21 22 \n```\n\n","source":"_posts/data-structure-singlelinkedlist-in-c-or-c.md","raw":"---\ntitle: 数据结构(C/C++版)之单链表的实现\ndate: 2018-06-07 18:45:53\nupdated: 2018-06-07 18:45:53\ntags: [数据结构,c/c++]\ncategories: 数据结构\n---\n\n<p class=\"text-center\">用C/C++实现的单链表</p>\n\n<!--more-->\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n/*以下所有方法中的index从1开始，而不是0. */\ntypedef struct Node\n{\n\tElemType data;\n\tstruct Node * next;\n} LinkedList;//单链表\n//如果参数写为LinkedList * list，并不会改变实参的值，但可以改变实参指针变量所指向的变量的值\n//初始化单链表\nvoid init(LinkedList * &list)\n{\n\tlist = (LinkedList *) malloc(sizeof(LinkedList));\n\tlist->next = NULL;\n}\n//是否为空\nbool isEmpty(LinkedList * list)\n{\n\treturn list->next == NULL;\n}\n//输出单链表\nvoid print(LinkedList * list)\n{\n\tLinkedList * p = list->next;\n\twhile(p!=NULL)\n\t{\n\t\tprintf(\"%d \",p->data);\n\t\tp=p->next;\n\t}\n\tprintf(\"\\n\");\n}\n//计算单链表长度，头结点不算在内\nint length(LinkedList * list)\n{\n\tint count = 0;\n\tLinkedList * p = list;\n\twhile(p->next!=NULL)\n\t{\n\t\tcount++;\n\t\tp = p->next;\n\t}\n\treturn count;\n}\n/*//判断index是否为正确的位置索引，索引号从1开始到length(list)\nstatic bool isPositionIndex(LinkedList * list,int index) {\n\tif(index > 0 && index <= length(list))\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n//判断index是否为正确的可添加结点的位置索引，索引号从1开始到length(list)+1\nstatic bool isPositionIndexForAdd(LinkedList * list,int index) {\n\tif(index > 0 && index <= length(list) + 1)\n\t\treturn true;\n\telse\n\t\treturn false;\n}*/\n//在单链表尾部添加结点\nbool add(LinkedList * &list,ElemType e)\n{\n\tLinkedList * p,* last = list;\n\twhile(last->next!=NULL)\n\t{\n\t\tlast = last->next;\n\t}\n\tp = (LinkedList *)malloc(sizeof(LinkedList));\n\tp->data = e;\n\tp->next = NULL;\n\tlast->next = p;\n\treturn true;\n}\n//在索引位置为index处插入新的结点\n//下面的写法，只遍历了一次单链表\nbool add(LinkedList * &list,int index,ElemType e)\n{\n\tint count = 0;\n\tLinkedList * newNode,* p = list;\n\twhile(p != NULL && count < index - 1)//找到index结点的前一个结点\n\t{\n\t\tcount++;\n\t\tp = p->next;\n\t}\n\tif(p == NULL)//不存在第index-1个结点\n\t\treturn false;\n\telse\n\t{\n\t\tnewNode = (LinkedList *)malloc(sizeof(LinkedList));\n\t\tnewNode->data = e;\n\t\tnewNode->next = p->next;\n\t\tp->next = newNode;\n\t\treturn true;\n\t}\n}\n/*//下面的写法，  遍历了两遍单链表\nbool add(LinkedList * &list,int index,ElemType e)\n{\n\t//判断给定的index是否合理\n\tif(!isPositionIndexForAdd(list,index))\n\t\treturn false;\n\tint count = 0;\n\tLinkedList * newNode,* p = list;\n\twhile(p != NULL && count < index - 1)//找到index结点的前一个结点\n\t{\n\t\tcount++;\n\t\tp = p->next;\n\t}\n\tnewNode = (LinkedList *)malloc(sizeof(LinkedList));\n\tnewNode->data = e;\n\tnewNode->next = p->next;\n\tp->next = newNode;\n\treturn true;\n}*/\n//获取单链表中位置索引为index的元素，并将值赋给e\n//只遍历一次\nbool get(LinkedList * list,int index,ElemType &e)\n{\n\tLinkedList * p = list->next;\n\tint count = 1;\n\twhile(p != NULL && count < index)\n\t{\n\t\tcount++;\n\t\tp = p->next;\n\t}\n\tif(p == NULL)//不存在第index个结点\n\t\treturn false;\n\telse\n\t{\n\t\te = p->data;\n\t\treturn true;\n\t}\n}\n/*//需要遍历两次单链表\nbool get(LinkedList * list,int index,ElemType &e)\n{\n\tif(!isPositionIndex(list,index))\n\t\treturn false;\n\tLinkedList * p = list->next;\n\tint count = 1;\n\twhile(p != NULL && count < index)\n\t{\n\t\tcount++;\n\t\tp = p->next;\n\t}\n\te = p->data;\n\treturn true;\n}*/\n/*//另一种更简洁的写法\nElemType get(LinkedList * list,int index)\n{\n\tLinkedList * p = list->next;\n\tint count = 1;\n\twhile(p != NULL && count < index)\n\t{\n\t\tcount++;\n\t\tp = p->next;\n\t}\n\tif(p == NULL)//不存在第index个结点\n\t\treturn NULL;\n\telse\n\t\treturn p->data;\n}\n */\n//删除最后一个结点\nbool remove(LinkedList * &list,ElemType &e)\n{\n\tLinkedList * oldNode,* p = list;\n\tif(p->next == NULL)\n\t\treturn false;\n\twhile(p->next->next != NULL)//找最后一个结点的前驱结点\n\t{\n\t\tp = p->next;\n\t}\n\toldNode = p->next;\n\te =oldNode->data;\n\tp->next = NULL;\n\tfree(oldNode);\n\treturn true;\n}\n//删除第index个结点\nbool remove(LinkedList * &list,int index,ElemType &e)\n{\n\tint count = 0;\n\tLinkedList * oldNode, * p = list;\n\twhile(p != NULL && count < index - 1)//找到第index-1个结点\n\t{\n\t\tcount++;\n\t\tp = p->next;\n\t}\n\tif(p == NULL)//不存在第index-1个结点\n\t\treturn false;\n\telse\n\t{\n\t\toldNode = p->next;\n\t\t//这里需要特别注意，必须判断oldNode是否为NULL\n\t\tif(oldNode == NULL)\n\t\t\treturn false;\n\t\te = oldNode->data;\n\t\tp->next = oldNode->next;\n\t\tfree(oldNode);\n\t\treturn true;\n\t}\n}\n//在单链表中元素e首次出现的位置 ，若不存在，则返回-1\nint indexOf(LinkedList * list,ElemType e)\n{\n\tint count = 1;\n\tLinkedList * p = list->next;\n\twhile(p != NULL && p->data != e)\n\t{\n\t\tcount++;\n\t\tp = p->next;\n\t}\n\tif(p == NULL)\n\t\treturn -1;\n\telse\n\t\treturn count;\n}\n//销毁单链表\nvoid destroy(LinkedList * &list)\n{\n\tLinkedList * pre = list,* p = list->next;\n\twhile(p!=NULL)\n\t{\n\t\tfree(pre);\n\t\tpre = p;\n\t\tp = p->next;\n\t}\n\tfree(pre);\n}\n```\n\n测试程序：\n\n```c\ntypedef int ElemType;//声明LinkedList.h中的ElemType为int类型\n#include <stdio.h>\n#include \"LinkedList.h\"//包含头文件时，尖括号用于引入系统库，自己定义的头文件，需要使用引号引入\n\nint main() {\n\tLinkedList * list;\n\tinit(list);\n\tadd(list,20);\n\tadd(list,20);\n\tadd(list,21);\n\tadd(list,22);\n\tadd(list,23);\n\tadd(list,2,100);\n\tprintf(\"长度：%d\\n\",length(list));\n\tprint(list);\n\tElemType e;\n\tif(get(list,4,e))\n\t\tprintf(\"第4个结点的值为：%d\\n\",e);\n\tprintf(\"100首次出现的位置为：%d\\n\",indexOf(list,100));\n\tif(remove(list,3,e))\n\t\tprintf(\"第3个结点的值为：%d\\n\",e);\n\tif(remove(list,e))\n\t\tprintf(\"最后一个结点的值为：%d\\n\",e);\n\tprint(list);\n\tdestroy(list);\n\treturn 0;\n}\n```\n\n输出结果：\n\n```c\n长度：6\n20 100 20 21 22 23 \n第4个结点的值为：21\n100首次出现的位置为：2\n第3个结点的值为：20\n最后一个结点的值为：23\n20 100 21 22 \n```\n\n","slug":"data-structure-singlelinkedlist-in-c-or-c","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9ap80010j1q028z8m0ar","content":"<p class=\"text-center\">用C/C++实现的单链表</p>\n\n<a id=\"more\"></a>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">/*以下所有方法中的index从1开始，而不是0. */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tElemType data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> * <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; LinkedList;<span class=\"comment\">//单链表</span></span><br><span class=\"line\"><span class=\"comment\">//如果参数写为LinkedList * list，并不会改变实参的值，但可以改变实参指针变量所指向的变量的值</span></span><br><span class=\"line\"><span class=\"comment\">//初始化单链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(LinkedList * &amp;<span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span> = (LinkedList *) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkedList));</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">(LinkedList * <span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">list</span>-&gt;next == <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出单链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(LinkedList * <span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tLinkedList * p = <span class=\"built_in\">list</span>-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,p-&gt;data);</span><br><span class=\"line\">\t\tp=p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//计算单链表长度，头结点不算在内</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">(LinkedList * <span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tLinkedList * p = <span class=\"built_in\">list</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p-&gt;next!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*//判断index是否为正确的位置索引，索引号从1开始到length(list)</span></span><br><span class=\"line\"><span class=\"comment\">static bool isPositionIndex(LinkedList * list,int index) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\tif(index &gt; 0 &amp;&amp; index &lt;= length(list))</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn true;</span></span><br><span class=\"line\"><span class=\"comment\">\telse</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn false;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//判断index是否为正确的可添加结点的位置索引，索引号从1开始到length(list)+1</span></span><br><span class=\"line\"><span class=\"comment\">static bool isPositionIndexForAdd(LinkedList * list,int index) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\tif(index &gt; 0 &amp;&amp; index &lt;= length(list) + 1)</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn true;</span></span><br><span class=\"line\"><span class=\"comment\">\telse</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn false;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"comment\">//在单链表尾部添加结点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">add</span><span class=\"params\">(LinkedList * &amp;<span class=\"built_in\">list</span>,ElemType e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tLinkedList * p,* last = <span class=\"built_in\">list</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(last-&gt;next!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tlast = last-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tp = (LinkedList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkedList));</span><br><span class=\"line\">\tp-&gt;data = e;</span><br><span class=\"line\">\tp-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tlast-&gt;next = p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在索引位置为index处插入新的结点</span></span><br><span class=\"line\"><span class=\"comment\">//下面的写法，只遍历了一次单链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">add</span><span class=\"params\">(LinkedList * &amp;<span class=\"built_in\">list</span>,<span class=\"keyword\">int</span> index,ElemType e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tLinkedList * newNode,* p = <span class=\"built_in\">list</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p != <span class=\"literal\">NULL</span> &amp;&amp; count &lt; index - <span class=\"number\">1</span>)<span class=\"comment\">//找到index结点的前一个结点</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)<span class=\"comment\">//不存在第index-1个结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tnewNode = (LinkedList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkedList));</span><br><span class=\"line\">\t\tnewNode-&gt;data = e;</span><br><span class=\"line\">\t\tnewNode-&gt;next = p-&gt;next;</span><br><span class=\"line\">\t\tp-&gt;next = newNode;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*//下面的写法，  遍历了两遍单链表</span></span><br><span class=\"line\"><span class=\"comment\">bool add(LinkedList * &amp;list,int index,ElemType e)</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t//判断给定的index是否合理</span></span><br><span class=\"line\"><span class=\"comment\">\tif(!isPositionIndexForAdd(list,index))</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn false;</span></span><br><span class=\"line\"><span class=\"comment\">\tint count = 0;</span></span><br><span class=\"line\"><span class=\"comment\">\tLinkedList * newNode,* p = list;</span></span><br><span class=\"line\"><span class=\"comment\">\twhile(p != NULL &amp;&amp; count &lt; index - 1)//找到index结点的前一个结点</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcount++;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tp = p-&gt;next;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\tnewNode = (LinkedList *)malloc(sizeof(LinkedList));</span></span><br><span class=\"line\"><span class=\"comment\">\tnewNode-&gt;data = e;</span></span><br><span class=\"line\"><span class=\"comment\">\tnewNode-&gt;next = p-&gt;next;</span></span><br><span class=\"line\"><span class=\"comment\">\tp-&gt;next = newNode;</span></span><br><span class=\"line\"><span class=\"comment\">\treturn true;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"comment\">//获取单链表中位置索引为index的元素，并将值赋给e</span></span><br><span class=\"line\"><span class=\"comment\">//只遍历一次</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">get</span><span class=\"params\">(LinkedList * <span class=\"built_in\">list</span>,<span class=\"keyword\">int</span> index,ElemType &amp;e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tLinkedList * p = <span class=\"built_in\">list</span>-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p != <span class=\"literal\">NULL</span> &amp;&amp; count &lt; index)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)<span class=\"comment\">//不存在第index个结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\te = p-&gt;data;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*//需要遍历两次单链表</span></span><br><span class=\"line\"><span class=\"comment\">bool get(LinkedList * list,int index,ElemType &amp;e)</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\tif(!isPositionIndex(list,index))</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn false;</span></span><br><span class=\"line\"><span class=\"comment\">\tLinkedList * p = list-&gt;next;</span></span><br><span class=\"line\"><span class=\"comment\">\tint count = 1;</span></span><br><span class=\"line\"><span class=\"comment\">\twhile(p != NULL &amp;&amp; count &lt; index)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcount++;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tp = p-&gt;next;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\te = p-&gt;data;</span></span><br><span class=\"line\"><span class=\"comment\">\treturn true;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"comment\">/*//另一种更简洁的写法</span></span><br><span class=\"line\"><span class=\"comment\">ElemType get(LinkedList * list,int index)</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\tLinkedList * p = list-&gt;next;</span></span><br><span class=\"line\"><span class=\"comment\">\tint count = 1;</span></span><br><span class=\"line\"><span class=\"comment\">\twhile(p != NULL &amp;&amp; count &lt; index)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcount++;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tp = p-&gt;next;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\tif(p == NULL)//不存在第index个结点</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn NULL;</span></span><br><span class=\"line\"><span class=\"comment\">\telse</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn p-&gt;data;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//删除最后一个结点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">remove</span><span class=\"params\">(LinkedList * &amp;<span class=\"built_in\">list</span>,ElemType &amp;e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tLinkedList * oldNode,* p = <span class=\"built_in\">list</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p-&gt;next == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p-&gt;next-&gt;next != <span class=\"literal\">NULL</span>)<span class=\"comment\">//找最后一个结点的前驱结点</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\toldNode = p-&gt;next;</span><br><span class=\"line\">\te =oldNode-&gt;data;</span><br><span class=\"line\">\tp-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(oldNode);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除第index个结点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">remove</span><span class=\"params\">(LinkedList * &amp;<span class=\"built_in\">list</span>,<span class=\"keyword\">int</span> index,ElemType &amp;e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tLinkedList * oldNode, * p = <span class=\"built_in\">list</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p != <span class=\"literal\">NULL</span> &amp;&amp; count &lt; index - <span class=\"number\">1</span>)<span class=\"comment\">//找到第index-1个结点</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)<span class=\"comment\">//不存在第index-1个结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\toldNode = p-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"comment\">//这里需要特别注意，必须判断oldNode是否为NULL</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(oldNode == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\te = oldNode-&gt;data;</span><br><span class=\"line\">\t\tp-&gt;next = oldNode-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(oldNode);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在单链表中元素e首次出现的位置 ，若不存在，则返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(LinkedList * <span class=\"built_in\">list</span>,ElemType e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tLinkedList * p = <span class=\"built_in\">list</span>-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p != <span class=\"literal\">NULL</span> &amp;&amp; p-&gt;data != e)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//销毁单链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">(LinkedList * &amp;<span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tLinkedList * pre = <span class=\"built_in\">list</span>,* p = <span class=\"built_in\">list</span>-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(pre);</span><br><span class=\"line\">\t\tpre = p;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(pre);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试程序：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> ElemType;<span class=\"comment\">//声明LinkedList.h中的ElemType为int类型</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"LinkedList.h\"</span><span class=\"comment\">//包含头文件时，尖括号用于引入系统库，自己定义的头文件，需要使用引号引入</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tLinkedList * <span class=\"built_in\">list</span>;</span><br><span class=\"line\">\tinit(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">\tadd(<span class=\"built_in\">list</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">\tadd(<span class=\"built_in\">list</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">\tadd(<span class=\"built_in\">list</span>,<span class=\"number\">21</span>);</span><br><span class=\"line\">\tadd(<span class=\"built_in\">list</span>,<span class=\"number\">22</span>);</span><br><span class=\"line\">\tadd(<span class=\"built_in\">list</span>,<span class=\"number\">23</span>);</span><br><span class=\"line\">\tadd(<span class=\"built_in\">list</span>,<span class=\"number\">2</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"长度：%d\\n\"</span>,length(<span class=\"built_in\">list</span>));</span><br><span class=\"line\">\tprint(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">\tElemType e;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(get(<span class=\"built_in\">list</span>,<span class=\"number\">4</span>,e))</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"第4个结点的值为：%d\\n\"</span>,e);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"100首次出现的位置为：%d\\n\"</span>,indexOf(<span class=\"built_in\">list</span>,<span class=\"number\">100</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(remove(<span class=\"built_in\">list</span>,<span class=\"number\">3</span>,e))</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"第3个结点的值为：%d\\n\"</span>,e);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(remove(<span class=\"built_in\">list</span>,e))</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"最后一个结点的值为：%d\\n\"</span>,e);</span><br><span class=\"line\">\tprint(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">\tdestroy(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">长度：<span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">20</span> <span class=\"number\">100</span> <span class=\"number\">20</span> <span class=\"number\">21</span> <span class=\"number\">22</span> <span class=\"number\">23</span> </span><br><span class=\"line\">第<span class=\"number\">4</span>个结点的值为：<span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"number\">100</span>首次出现的位置为：<span class=\"number\">2</span></span><br><span class=\"line\">第<span class=\"number\">3</span>个结点的值为：<span class=\"number\">20</span></span><br><span class=\"line\">最后一个结点的值为：<span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">20</span> <span class=\"number\">100</span> <span class=\"number\">21</span> <span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p class=\"text-center\">用C/C++实现的单链表</p>","more":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">/*以下所有方法中的index从1开始，而不是0. */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tElemType data;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> * <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; LinkedList;<span class=\"comment\">//单链表</span></span><br><span class=\"line\"><span class=\"comment\">//如果参数写为LinkedList * list，并不会改变实参的值，但可以改变实参指针变量所指向的变量的值</span></span><br><span class=\"line\"><span class=\"comment\">//初始化单链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(LinkedList * &amp;<span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span> = (LinkedList *) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkedList));</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">(LinkedList * <span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">list</span>-&gt;next == <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出单链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(LinkedList * <span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tLinkedList * p = <span class=\"built_in\">list</span>-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,p-&gt;data);</span><br><span class=\"line\">\t\tp=p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//计算单链表长度，头结点不算在内</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">(LinkedList * <span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tLinkedList * p = <span class=\"built_in\">list</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p-&gt;next!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*//判断index是否为正确的位置索引，索引号从1开始到length(list)</span></span><br><span class=\"line\"><span class=\"comment\">static bool isPositionIndex(LinkedList * list,int index) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\tif(index &gt; 0 &amp;&amp; index &lt;= length(list))</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn true;</span></span><br><span class=\"line\"><span class=\"comment\">\telse</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn false;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//判断index是否为正确的可添加结点的位置索引，索引号从1开始到length(list)+1</span></span><br><span class=\"line\"><span class=\"comment\">static bool isPositionIndexForAdd(LinkedList * list,int index) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\tif(index &gt; 0 &amp;&amp; index &lt;= length(list) + 1)</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn true;</span></span><br><span class=\"line\"><span class=\"comment\">\telse</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn false;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"comment\">//在单链表尾部添加结点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">add</span><span class=\"params\">(LinkedList * &amp;<span class=\"built_in\">list</span>,ElemType e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tLinkedList * p,* last = <span class=\"built_in\">list</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(last-&gt;next!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tlast = last-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tp = (LinkedList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkedList));</span><br><span class=\"line\">\tp-&gt;data = e;</span><br><span class=\"line\">\tp-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tlast-&gt;next = p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在索引位置为index处插入新的结点</span></span><br><span class=\"line\"><span class=\"comment\">//下面的写法，只遍历了一次单链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">add</span><span class=\"params\">(LinkedList * &amp;<span class=\"built_in\">list</span>,<span class=\"keyword\">int</span> index,ElemType e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tLinkedList * newNode,* p = <span class=\"built_in\">list</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p != <span class=\"literal\">NULL</span> &amp;&amp; count &lt; index - <span class=\"number\">1</span>)<span class=\"comment\">//找到index结点的前一个结点</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)<span class=\"comment\">//不存在第index-1个结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tnewNode = (LinkedList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkedList));</span><br><span class=\"line\">\t\tnewNode-&gt;data = e;</span><br><span class=\"line\">\t\tnewNode-&gt;next = p-&gt;next;</span><br><span class=\"line\">\t\tp-&gt;next = newNode;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*//下面的写法，  遍历了两遍单链表</span></span><br><span class=\"line\"><span class=\"comment\">bool add(LinkedList * &amp;list,int index,ElemType e)</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t//判断给定的index是否合理</span></span><br><span class=\"line\"><span class=\"comment\">\tif(!isPositionIndexForAdd(list,index))</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn false;</span></span><br><span class=\"line\"><span class=\"comment\">\tint count = 0;</span></span><br><span class=\"line\"><span class=\"comment\">\tLinkedList * newNode,* p = list;</span></span><br><span class=\"line\"><span class=\"comment\">\twhile(p != NULL &amp;&amp; count &lt; index - 1)//找到index结点的前一个结点</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcount++;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tp = p-&gt;next;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\tnewNode = (LinkedList *)malloc(sizeof(LinkedList));</span></span><br><span class=\"line\"><span class=\"comment\">\tnewNode-&gt;data = e;</span></span><br><span class=\"line\"><span class=\"comment\">\tnewNode-&gt;next = p-&gt;next;</span></span><br><span class=\"line\"><span class=\"comment\">\tp-&gt;next = newNode;</span></span><br><span class=\"line\"><span class=\"comment\">\treturn true;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"comment\">//获取单链表中位置索引为index的元素，并将值赋给e</span></span><br><span class=\"line\"><span class=\"comment\">//只遍历一次</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">get</span><span class=\"params\">(LinkedList * <span class=\"built_in\">list</span>,<span class=\"keyword\">int</span> index,ElemType &amp;e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tLinkedList * p = <span class=\"built_in\">list</span>-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p != <span class=\"literal\">NULL</span> &amp;&amp; count &lt; index)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)<span class=\"comment\">//不存在第index个结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\te = p-&gt;data;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*//需要遍历两次单链表</span></span><br><span class=\"line\"><span class=\"comment\">bool get(LinkedList * list,int index,ElemType &amp;e)</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\tif(!isPositionIndex(list,index))</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn false;</span></span><br><span class=\"line\"><span class=\"comment\">\tLinkedList * p = list-&gt;next;</span></span><br><span class=\"line\"><span class=\"comment\">\tint count = 1;</span></span><br><span class=\"line\"><span class=\"comment\">\twhile(p != NULL &amp;&amp; count &lt; index)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcount++;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tp = p-&gt;next;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\te = p-&gt;data;</span></span><br><span class=\"line\"><span class=\"comment\">\treturn true;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"comment\">/*//另一种更简洁的写法</span></span><br><span class=\"line\"><span class=\"comment\">ElemType get(LinkedList * list,int index)</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\tLinkedList * p = list-&gt;next;</span></span><br><span class=\"line\"><span class=\"comment\">\tint count = 1;</span></span><br><span class=\"line\"><span class=\"comment\">\twhile(p != NULL &amp;&amp; count &lt; index)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcount++;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tp = p-&gt;next;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\tif(p == NULL)//不存在第index个结点</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn NULL;</span></span><br><span class=\"line\"><span class=\"comment\">\telse</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn p-&gt;data;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//删除最后一个结点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">remove</span><span class=\"params\">(LinkedList * &amp;<span class=\"built_in\">list</span>,ElemType &amp;e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tLinkedList * oldNode,* p = <span class=\"built_in\">list</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p-&gt;next == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p-&gt;next-&gt;next != <span class=\"literal\">NULL</span>)<span class=\"comment\">//找最后一个结点的前驱结点</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\toldNode = p-&gt;next;</span><br><span class=\"line\">\te =oldNode-&gt;data;</span><br><span class=\"line\">\tp-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(oldNode);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除第index个结点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">remove</span><span class=\"params\">(LinkedList * &amp;<span class=\"built_in\">list</span>,<span class=\"keyword\">int</span> index,ElemType &amp;e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tLinkedList * oldNode, * p = <span class=\"built_in\">list</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p != <span class=\"literal\">NULL</span> &amp;&amp; count &lt; index - <span class=\"number\">1</span>)<span class=\"comment\">//找到第index-1个结点</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)<span class=\"comment\">//不存在第index-1个结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\toldNode = p-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"comment\">//这里需要特别注意，必须判断oldNode是否为NULL</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(oldNode == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\te = oldNode-&gt;data;</span><br><span class=\"line\">\t\tp-&gt;next = oldNode-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(oldNode);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在单链表中元素e首次出现的位置 ，若不存在，则返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(LinkedList * <span class=\"built_in\">list</span>,ElemType e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tLinkedList * p = <span class=\"built_in\">list</span>-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p != <span class=\"literal\">NULL</span> &amp;&amp; p-&gt;data != e)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//销毁单链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">(LinkedList * &amp;<span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tLinkedList * pre = <span class=\"built_in\">list</span>,* p = <span class=\"built_in\">list</span>-&gt;next;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(pre);</span><br><span class=\"line\">\t\tpre = p;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(pre);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试程序：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> ElemType;<span class=\"comment\">//声明LinkedList.h中的ElemType为int类型</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"LinkedList.h\"</span><span class=\"comment\">//包含头文件时，尖括号用于引入系统库，自己定义的头文件，需要使用引号引入</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tLinkedList * <span class=\"built_in\">list</span>;</span><br><span class=\"line\">\tinit(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">\tadd(<span class=\"built_in\">list</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">\tadd(<span class=\"built_in\">list</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">\tadd(<span class=\"built_in\">list</span>,<span class=\"number\">21</span>);</span><br><span class=\"line\">\tadd(<span class=\"built_in\">list</span>,<span class=\"number\">22</span>);</span><br><span class=\"line\">\tadd(<span class=\"built_in\">list</span>,<span class=\"number\">23</span>);</span><br><span class=\"line\">\tadd(<span class=\"built_in\">list</span>,<span class=\"number\">2</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"长度：%d\\n\"</span>,length(<span class=\"built_in\">list</span>));</span><br><span class=\"line\">\tprint(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">\tElemType e;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(get(<span class=\"built_in\">list</span>,<span class=\"number\">4</span>,e))</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"第4个结点的值为：%d\\n\"</span>,e);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"100首次出现的位置为：%d\\n\"</span>,indexOf(<span class=\"built_in\">list</span>,<span class=\"number\">100</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(remove(<span class=\"built_in\">list</span>,<span class=\"number\">3</span>,e))</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"第3个结点的值为：%d\\n\"</span>,e);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(remove(<span class=\"built_in\">list</span>,e))</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"最后一个结点的值为：%d\\n\"</span>,e);</span><br><span class=\"line\">\tprint(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">\tdestroy(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">长度：<span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">20</span> <span class=\"number\">100</span> <span class=\"number\">20</span> <span class=\"number\">21</span> <span class=\"number\">22</span> <span class=\"number\">23</span> </span><br><span class=\"line\">第<span class=\"number\">4</span>个结点的值为：<span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"number\">100</span>首次出现的位置为：<span class=\"number\">2</span></span><br><span class=\"line\">第<span class=\"number\">3</span>个结点的值为：<span class=\"number\">20</span></span><br><span class=\"line\">最后一个结点的值为：<span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">20</span> <span class=\"number\">100</span> <span class=\"number\">21</span> <span class=\"number\">22</span></span><br></pre></td></tr></table></figure>"},{"title":"数据结构(C/C++版)之动态顺序表的实现","date":"2018-06-03T14:35:32.000Z","updated":"2018-06-03T14:35:32.000Z","_content":"\n>**写在前面的话**：类似如下函数：bool add(SqList &list, int i, ElemType e)\n>**c语言没有bool关键字**，c++才有，若需要在c语言中使用，需要引入**&lt;stdbool.h&gt;（或者自己定义）.**\n>另外，**函数参数中&符号，表示引用，c语言也没有**（c语言中的&表示取地址符），这是c++才有的语法，若需要在c语言中实现类似功能，即改变实参的值，只能采用指针实现\n\n用C/C++实现的动态顺序表\n\n<!--more-->\n\n```c\n#include <stdlib.h>\n\n#define DEFAULT_CAPACITY 10 //默认容量\n#define DEFAULT_INCREMENT_SIZE 1 //默认扩容大小\n\ntypedef struct {\n\tElemType * data;//存储元素的一维数组\n\tint length; //顺序表当前的长度\n\tint size; //顺序表的容量\n\tint incrementSize; //增补空间大小\n} SqList;\n\n//初始化，需要注意的是：给参数设置默认值，c语言没有这种语法\nvoid init(SqList &list, int capacity = DEFAULT_CAPACITY, int incrementSize = DEFAULT_INCREMENT_SIZE) {\n\tlist.data = (ElemType *) malloc(capacity * sizeof(ElemType));\n\tif (!list.data) {\n\t\texit(1);\n\t}\n\tlist.length = 0;\n\tlist.size = capacity;\n\tlist.incrementSize = incrementSize;\n}\n\nbool isEmpty(SqList list) {\n\treturn list.length == 0;\n}\n\n//求顺序表的长度\nint length(SqList list) {\n\treturn list.length;\n}\n//元素首次出现的位置\nint indexOf(SqList list, ElemType e) {\n\tfor (int i = 0; i < list.length; i++) {\n\t\tif (list.data[i] == e) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n//元素最后一次出现的位置\nint lastIndexOf(SqList list, ElemType e) {\n\tfor (int i = list.length - 1; i >= 0; i--) {\n\t\tif (list.data[i] == e) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/*\n * static关键字的作用类似于Java中private，声明为内部函数，只能在本文件中使用\n * 另外需要注意的是，该函数必须放在引用之前，否则，编译时会报错\n */\nstatic bool isElementIndex(SqList list, int i) {\n\treturn (i >= 0 && i < list.length) ? true : false;\n}\n\nstatic bool isPositionIndex(SqList list, int i) {\n\treturn (i >= 0 && i <= list.length) ? true : false;\n}\n\nstatic void ensureCapacity(SqList &list) {\n\t//扩容\n\tif (list.length >= list.size) {\n\t\tlist.data = (ElemType *) realloc(list.data,\n\t\t\t\t(list.size + list.incrementSize) * sizeof(ElemType));\n\t\t//判断存储空间是否分配成功\n\t\tif (!list.data) {\n\t\t\texit(1);\n\t\t}\n\t\tlist.size += list.incrementSize; //增加当前存储容量\n\t}\n}\n//在顺序表中指定索引处插入元素\nbool add(SqList &list, int i, ElemType e) {\n\tif (!isPositionIndex(list, i)) {\n\t\treturn false;\n\t}\n\tensureCapacity(list);\n\tfor (int j = list.length; j > i; j--) {\n\t\tlist.data[j] = list.data[j - 1];\n\t}\n\tlist.data[i] = e; //???\n\tlist.length++;\n\treturn true;\n}\n//在顺序表的最后面添加元素\nbool add(SqList &list, ElemType e) {\n\t//扩容\n\tensureCapacity(list);\n\tlist.data[list.length] = e;\n\tlist.length++;\n\treturn true;\n}\n//删除最后一个元素\nbool remove(SqList &list, ElemType &e) {\n\tif (isEmpty(list)) {\n\t\treturn false;\n\t}\n\te = list.data[list.length - 1];\n\tlist.length--;\n\treturn true;\n}\n//删除指定索引处的元素\nbool remove(SqList &list, int i, ElemType &e) {\n\tif (!isElementIndex(list, i) || isEmpty(list)) {\n\t\treturn false;\n\t}\n\te = list.data[i];\n\tfor (int j = i + 1; j <= list.length - 1; j++) {\n\t\tlist.data[j - 1] = list.data[j];\n\t}\n\tlist.length--;\n\treturn true;\n}\n//取元素\nbool get(SqList list, int i, ElemType &e) {\n\tif (!isElementIndex(list, i)) {\n\t\treturn false;\n\t}\n\te = list.data[i];\n\treturn true;\n}\n//遍历输出\nvoid print(SqList list) {\n\tfor (int i = 0; i < list.length; i++) {\n\t\tprintf(\"%d\\n\", list.data[i]);\n\t}\n}\n//销毁\nvoid destroy(SqList &list) {\n\tfree(list.data);\n\tlist.length = 0;\n\tlist.incrementSize = 0;\n}\n```\n\n","source":"_posts/data-structure-sqlist-in-c-or-c++.md","raw":"---\ntitle: 数据结构(C/C++版)之动态顺序表的实现\ndate: 2018-06-03 22:35:32\nupdated: 2018-06-03 22:35:32\ntags: [数据结构,c/c++]\ncategories: 数据结构\n---\n\n>**写在前面的话**：类似如下函数：bool add(SqList &list, int i, ElemType e)\n>**c语言没有bool关键字**，c++才有，若需要在c语言中使用，需要引入**&lt;stdbool.h&gt;（或者自己定义）.**\n>另外，**函数参数中&符号，表示引用，c语言也没有**（c语言中的&表示取地址符），这是c++才有的语法，若需要在c语言中实现类似功能，即改变实参的值，只能采用指针实现\n\n用C/C++实现的动态顺序表\n\n<!--more-->\n\n```c\n#include <stdlib.h>\n\n#define DEFAULT_CAPACITY 10 //默认容量\n#define DEFAULT_INCREMENT_SIZE 1 //默认扩容大小\n\ntypedef struct {\n\tElemType * data;//存储元素的一维数组\n\tint length; //顺序表当前的长度\n\tint size; //顺序表的容量\n\tint incrementSize; //增补空间大小\n} SqList;\n\n//初始化，需要注意的是：给参数设置默认值，c语言没有这种语法\nvoid init(SqList &list, int capacity = DEFAULT_CAPACITY, int incrementSize = DEFAULT_INCREMENT_SIZE) {\n\tlist.data = (ElemType *) malloc(capacity * sizeof(ElemType));\n\tif (!list.data) {\n\t\texit(1);\n\t}\n\tlist.length = 0;\n\tlist.size = capacity;\n\tlist.incrementSize = incrementSize;\n}\n\nbool isEmpty(SqList list) {\n\treturn list.length == 0;\n}\n\n//求顺序表的长度\nint length(SqList list) {\n\treturn list.length;\n}\n//元素首次出现的位置\nint indexOf(SqList list, ElemType e) {\n\tfor (int i = 0; i < list.length; i++) {\n\t\tif (list.data[i] == e) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n//元素最后一次出现的位置\nint lastIndexOf(SqList list, ElemType e) {\n\tfor (int i = list.length - 1; i >= 0; i--) {\n\t\tif (list.data[i] == e) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/*\n * static关键字的作用类似于Java中private，声明为内部函数，只能在本文件中使用\n * 另外需要注意的是，该函数必须放在引用之前，否则，编译时会报错\n */\nstatic bool isElementIndex(SqList list, int i) {\n\treturn (i >= 0 && i < list.length) ? true : false;\n}\n\nstatic bool isPositionIndex(SqList list, int i) {\n\treturn (i >= 0 && i <= list.length) ? true : false;\n}\n\nstatic void ensureCapacity(SqList &list) {\n\t//扩容\n\tif (list.length >= list.size) {\n\t\tlist.data = (ElemType *) realloc(list.data,\n\t\t\t\t(list.size + list.incrementSize) * sizeof(ElemType));\n\t\t//判断存储空间是否分配成功\n\t\tif (!list.data) {\n\t\t\texit(1);\n\t\t}\n\t\tlist.size += list.incrementSize; //增加当前存储容量\n\t}\n}\n//在顺序表中指定索引处插入元素\nbool add(SqList &list, int i, ElemType e) {\n\tif (!isPositionIndex(list, i)) {\n\t\treturn false;\n\t}\n\tensureCapacity(list);\n\tfor (int j = list.length; j > i; j--) {\n\t\tlist.data[j] = list.data[j - 1];\n\t}\n\tlist.data[i] = e; //???\n\tlist.length++;\n\treturn true;\n}\n//在顺序表的最后面添加元素\nbool add(SqList &list, ElemType e) {\n\t//扩容\n\tensureCapacity(list);\n\tlist.data[list.length] = e;\n\tlist.length++;\n\treturn true;\n}\n//删除最后一个元素\nbool remove(SqList &list, ElemType &e) {\n\tif (isEmpty(list)) {\n\t\treturn false;\n\t}\n\te = list.data[list.length - 1];\n\tlist.length--;\n\treturn true;\n}\n//删除指定索引处的元素\nbool remove(SqList &list, int i, ElemType &e) {\n\tif (!isElementIndex(list, i) || isEmpty(list)) {\n\t\treturn false;\n\t}\n\te = list.data[i];\n\tfor (int j = i + 1; j <= list.length - 1; j++) {\n\t\tlist.data[j - 1] = list.data[j];\n\t}\n\tlist.length--;\n\treturn true;\n}\n//取元素\nbool get(SqList list, int i, ElemType &e) {\n\tif (!isElementIndex(list, i)) {\n\t\treturn false;\n\t}\n\te = list.data[i];\n\treturn true;\n}\n//遍历输出\nvoid print(SqList list) {\n\tfor (int i = 0; i < list.length; i++) {\n\t\tprintf(\"%d\\n\", list.data[i]);\n\t}\n}\n//销毁\nvoid destroy(SqList &list) {\n\tfree(list.data);\n\tlist.length = 0;\n\tlist.incrementSize = 0;\n}\n```\n\n","slug":"data-structure-sqlist-in-c-or-c++","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9apa0013j1q0bqg4hsn9","content":"<blockquote>\n<p><strong>写在前面的话</strong>：类似如下函数：bool add(SqList &amp;list, int i, ElemType e)<br><strong>c语言没有bool关键字</strong>，c++才有，若需要在c语言中使用，需要引入<strong>&lt;stdbool.h&gt;（或者自己定义）.</strong><br>另外，<strong>函数参数中&amp;符号，表示引用，c语言也没有</strong>（c语言中的&amp;表示取地址符），这是c++才有的语法，若需要在c语言中实现类似功能，即改变实参的值，只能采用指针实现</p>\n</blockquote>\n<p>用C/C++实现的动态顺序表</p>\n<a id=\"more\"></a>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEFAULT_CAPACITY 10 <span class=\"comment\">//默认容量</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEFAULT_INCREMENT_SIZE 1 <span class=\"comment\">//默认扩容大小</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">\tElemType * data;<span class=\"comment\">//存储元素的一维数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> length; <span class=\"comment\">//顺序表当前的长度</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> size; <span class=\"comment\">//顺序表的容量</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> incrementSize; <span class=\"comment\">//增补空间大小</span></span><br><span class=\"line\">&#125; SqList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化，需要注意的是：给参数设置默认值，c语言没有这种语法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(SqList &amp;<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> capacity = DEFAULT_CAPACITY, <span class=\"keyword\">int</span> incrementSize = DEFAULT_INCREMENT_SIZE)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.data = (ElemType *) <span class=\"built_in\">malloc</span>(capacity * <span class=\"keyword\">sizeof</span>(ElemType));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">list</span>.data) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.size = capacity;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.incrementSize = incrementSize;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">(SqList <span class=\"built_in\">list</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">list</span>.length == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求顺序表的长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">(SqList <span class=\"built_in\">list</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">list</span>.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//元素首次出现的位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(SqList <span class=\"built_in\">list</span>, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">list</span>.length; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>.data[i] == e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//元素最后一次出现的位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(SqList <span class=\"built_in\">list</span>, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"built_in\">list</span>.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>.data[i] == e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * static关键字的作用类似于Java中private，声明为内部函数，只能在本文件中使用</span></span><br><span class=\"line\"><span class=\"comment\"> * 另外需要注意的是，该函数必须放在引用之前，否则，编译时会报错</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">isElementIndex</span><span class=\"params\">(SqList <span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt; <span class=\"built_in\">list</span>.length) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">isPositionIndex</span><span class=\"params\">(SqList <span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt;= <span class=\"built_in\">list</span>.length) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacity</span><span class=\"params\">(SqList &amp;<span class=\"built_in\">list</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//扩容</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>.length &gt;= <span class=\"built_in\">list</span>.size) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">list</span>.data = (ElemType *) <span class=\"built_in\">realloc</span>(<span class=\"built_in\">list</span>.data,</span><br><span class=\"line\">\t\t\t\t(<span class=\"built_in\">list</span>.size + <span class=\"built_in\">list</span>.incrementSize) * <span class=\"keyword\">sizeof</span>(ElemType));</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断存储空间是否分配成功</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">list</span>.data) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">list</span>.size += <span class=\"built_in\">list</span>.incrementSize; <span class=\"comment\">//增加当前存储容量</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在顺序表中指定索引处插入元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">add</span><span class=\"params\">(SqList &amp;<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!isPositionIndex(<span class=\"built_in\">list</span>, i)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tensureCapacity(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"built_in\">list</span>.length; j &gt; i; j--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">list</span>.data[j] = <span class=\"built_in\">list</span>.data[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.data[i] = e; <span class=\"comment\">//???</span></span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.length++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在顺序表的最后面添加元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">add</span><span class=\"params\">(SqList &amp;<span class=\"built_in\">list</span>, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//扩容</span></span><br><span class=\"line\">\tensureCapacity(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.data[<span class=\"built_in\">list</span>.length] = e;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.length++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除最后一个元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">remove</span><span class=\"params\">(SqList &amp;<span class=\"built_in\">list</span>, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (isEmpty(<span class=\"built_in\">list</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\te = <span class=\"built_in\">list</span>.data[<span class=\"built_in\">list</span>.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.length--;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除指定索引处的元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">remove</span><span class=\"params\">(SqList &amp;<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> i, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!isElementIndex(<span class=\"built_in\">list</span>, i) || isEmpty(<span class=\"built_in\">list</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\te = <span class=\"built_in\">list</span>.data[i];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt;= <span class=\"built_in\">list</span>.length - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">list</span>.data[j - <span class=\"number\">1</span>] = <span class=\"built_in\">list</span>.data[j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.length--;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//取元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">get</span><span class=\"params\">(SqList <span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> i, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!isElementIndex(<span class=\"built_in\">list</span>, i)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\te = <span class=\"built_in\">list</span>.data[i];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//遍历输出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(SqList <span class=\"built_in\">list</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">list</span>.length; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, <span class=\"built_in\">list</span>.data[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//销毁</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">(SqList &amp;<span class=\"built_in\">list</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(<span class=\"built_in\">list</span>.data);</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.incrementSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p><strong>写在前面的话</strong>：类似如下函数：bool add(SqList &amp;list, int i, ElemType e)<br><strong>c语言没有bool关键字</strong>，c++才有，若需要在c语言中使用，需要引入<strong>&lt;stdbool.h&gt;（或者自己定义）.</strong><br>另外，<strong>函数参数中&amp;符号，表示引用，c语言也没有</strong>（c语言中的&amp;表示取地址符），这是c++才有的语法，若需要在c语言中实现类似功能，即改变实参的值，只能采用指针实现</p>\n</blockquote>\n<p>用C/C++实现的动态顺序表</p>","more":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEFAULT_CAPACITY 10 <span class=\"comment\">//默认容量</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEFAULT_INCREMENT_SIZE 1 <span class=\"comment\">//默认扩容大小</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">\tElemType * data;<span class=\"comment\">//存储元素的一维数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> length; <span class=\"comment\">//顺序表当前的长度</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> size; <span class=\"comment\">//顺序表的容量</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> incrementSize; <span class=\"comment\">//增补空间大小</span></span><br><span class=\"line\">&#125; SqList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化，需要注意的是：给参数设置默认值，c语言没有这种语法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(SqList &amp;<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> capacity = DEFAULT_CAPACITY, <span class=\"keyword\">int</span> incrementSize = DEFAULT_INCREMENT_SIZE)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.data = (ElemType *) <span class=\"built_in\">malloc</span>(capacity * <span class=\"keyword\">sizeof</span>(ElemType));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">list</span>.data) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.size = capacity;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.incrementSize = incrementSize;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">(SqList <span class=\"built_in\">list</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">list</span>.length == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求顺序表的长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">(SqList <span class=\"built_in\">list</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">list</span>.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//元素首次出现的位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(SqList <span class=\"built_in\">list</span>, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">list</span>.length; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>.data[i] == e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//元素最后一次出现的位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(SqList <span class=\"built_in\">list</span>, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"built_in\">list</span>.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>.data[i] == e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * static关键字的作用类似于Java中private，声明为内部函数，只能在本文件中使用</span></span><br><span class=\"line\"><span class=\"comment\"> * 另外需要注意的是，该函数必须放在引用之前，否则，编译时会报错</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">isElementIndex</span><span class=\"params\">(SqList <span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt; <span class=\"built_in\">list</span>.length) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">isPositionIndex</span><span class=\"params\">(SqList <span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt;= <span class=\"built_in\">list</span>.length) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacity</span><span class=\"params\">(SqList &amp;<span class=\"built_in\">list</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//扩容</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>.length &gt;= <span class=\"built_in\">list</span>.size) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">list</span>.data = (ElemType *) <span class=\"built_in\">realloc</span>(<span class=\"built_in\">list</span>.data,</span><br><span class=\"line\">\t\t\t\t(<span class=\"built_in\">list</span>.size + <span class=\"built_in\">list</span>.incrementSize) * <span class=\"keyword\">sizeof</span>(ElemType));</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断存储空间是否分配成功</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">list</span>.data) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">list</span>.size += <span class=\"built_in\">list</span>.incrementSize; <span class=\"comment\">//增加当前存储容量</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在顺序表中指定索引处插入元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">add</span><span class=\"params\">(SqList &amp;<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!isPositionIndex(<span class=\"built_in\">list</span>, i)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tensureCapacity(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"built_in\">list</span>.length; j &gt; i; j--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">list</span>.data[j] = <span class=\"built_in\">list</span>.data[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.data[i] = e; <span class=\"comment\">//???</span></span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.length++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在顺序表的最后面添加元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">add</span><span class=\"params\">(SqList &amp;<span class=\"built_in\">list</span>, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//扩容</span></span><br><span class=\"line\">\tensureCapacity(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.data[<span class=\"built_in\">list</span>.length] = e;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.length++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除最后一个元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">remove</span><span class=\"params\">(SqList &amp;<span class=\"built_in\">list</span>, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (isEmpty(<span class=\"built_in\">list</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\te = <span class=\"built_in\">list</span>.data[<span class=\"built_in\">list</span>.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.length--;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除指定索引处的元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">remove</span><span class=\"params\">(SqList &amp;<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> i, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!isElementIndex(<span class=\"built_in\">list</span>, i) || isEmpty(<span class=\"built_in\">list</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\te = <span class=\"built_in\">list</span>.data[i];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt;= <span class=\"built_in\">list</span>.length - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">list</span>.data[j - <span class=\"number\">1</span>] = <span class=\"built_in\">list</span>.data[j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.length--;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//取元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">get</span><span class=\"params\">(SqList <span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> i, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!isElementIndex(<span class=\"built_in\">list</span>, i)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\te = <span class=\"built_in\">list</span>.data[i];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//遍历输出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(SqList <span class=\"built_in\">list</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">list</span>.length; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, <span class=\"built_in\">list</span>.data[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//销毁</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">(SqList &amp;<span class=\"built_in\">list</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(<span class=\"built_in\">list</span>.data);</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>.incrementSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Java中的进制表示","date":"2018-06-10T08:25:39.000Z","mathjax":true,"_content":"\n平时做题也好，写程序或算法也罢，我们经常会见到诸如0Xfff、0b1000等数据，那么它们到底是什么意思呢？\n\n其实0x、0b等是不同进制的前缀，旨在告诉编译器后面的数字是几进制的数据，而非默认的十进制数据。\n\n<!--more-->\n\n**二进制（binary）**：**以0b或者0B为前缀**，例如0b1000，等价于十进制的$1\\*2^3$=8\n\n**需要注意的是**，0b（0B）这种写法是从jdk1.7才有的\n\n**八进制（octal）**：**以0为前缀**，例如：070，等价于十进制的$7\\*8^1+0\\*8$=56\n\n**十进制（decimal）**：没有前缀，默认情况下数字均为十进制表示\n\n**十六进制（hexadecimal）**：**以0x或者0X为前缀**，例如算法中很常见的0xfff\n\n上面的0是数字0，而不是字母o\n\n```java\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tint binary1 = 0b1000;//8\n\t\tSystem.out.println(binary1);\n        \n\t\tint binary2 = 0B111;//7\n\t\tSystem.out.println(binary2);\n        \n\t\tint octal = 070;//56\n\t\tSystem.out.println(octal);\n        \n\t\tint hexadecimal = 0xfff;//4095\n\t\tSystem.out.println(hexadecimal);\n\t}\n}\n```\n\n输出结果：\n\n```java\n8\n7\n56\n4095\n```\n\n","source":"_posts/java-binary-octal-decimal-hexadecimal.md","raw":"---\ntitle: Java中的进制表示\ndate: 2018-06-10 16:25:39\ntags: java\ncategories: java\nmathjax: true\n---\n\n平时做题也好，写程序或算法也罢，我们经常会见到诸如0Xfff、0b1000等数据，那么它们到底是什么意思呢？\n\n其实0x、0b等是不同进制的前缀，旨在告诉编译器后面的数字是几进制的数据，而非默认的十进制数据。\n\n<!--more-->\n\n**二进制（binary）**：**以0b或者0B为前缀**，例如0b1000，等价于十进制的$1\\*2^3$=8\n\n**需要注意的是**，0b（0B）这种写法是从jdk1.7才有的\n\n**八进制（octal）**：**以0为前缀**，例如：070，等价于十进制的$7\\*8^1+0\\*8$=56\n\n**十进制（decimal）**：没有前缀，默认情况下数字均为十进制表示\n\n**十六进制（hexadecimal）**：**以0x或者0X为前缀**，例如算法中很常见的0xfff\n\n上面的0是数字0，而不是字母o\n\n```java\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tint binary1 = 0b1000;//8\n\t\tSystem.out.println(binary1);\n        \n\t\tint binary2 = 0B111;//7\n\t\tSystem.out.println(binary2);\n        \n\t\tint octal = 070;//56\n\t\tSystem.out.println(octal);\n        \n\t\tint hexadecimal = 0xfff;//4095\n\t\tSystem.out.println(hexadecimal);\n\t}\n}\n```\n\n输出结果：\n\n```java\n8\n7\n56\n4095\n```\n\n","slug":"java-binary-octal-decimal-hexadecimal","published":1,"updated":"2019-01-19T07:23:57.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9apb0016j1q0tilori4y","content":"<p>平时做题也好，写程序或算法也罢，我们经常会见到诸如0Xfff、0b1000等数据，那么它们到底是什么意思呢？</p>\n<p>其实0x、0b等是不同进制的前缀，旨在告诉编译器后面的数字是几进制的数据，而非默认的十进制数据。</p>\n<a id=\"more\"></a>\n<p><strong>二进制（binary）</strong>：<strong>以0b或者0B为前缀</strong>，例如0b1000，等价于十进制的$1*2^3$=8</p>\n<p><strong>需要注意的是</strong>，0b（0B）这种写法是从jdk1.7才有的</p>\n<p><strong>八进制（octal）</strong>：<strong>以0为前缀</strong>，例如：070，等价于十进制的$7*8^1+0*8$=56</p>\n<p><strong>十进制（decimal）</strong>：没有前缀，默认情况下数字均为十进制表示</p>\n<p><strong>十六进制（hexadecimal）</strong>：<strong>以0x或者0X为前缀</strong>，例如算法中很常见的0xfff</p>\n<p>上面的0是数字0，而不是字母o</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> binary1 = <span class=\"number\">0b1000</span>;<span class=\"comment\">//8</span></span><br><span class=\"line\">\t\tSystem.out.println(binary1);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> binary2 = <span class=\"number\">0B111</span>;<span class=\"comment\">//7</span></span><br><span class=\"line\">\t\tSystem.out.println(binary2);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> octal = <span class=\"number\">070</span>;<span class=\"comment\">//56</span></span><br><span class=\"line\">\t\tSystem.out.println(octal);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> hexadecimal = <span class=\"number\">0xfff</span>;<span class=\"comment\">//4095</span></span><br><span class=\"line\">\t\tSystem.out.println(hexadecimal);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">56</span></span><br><span class=\"line\"><span class=\"number\">4095</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>平时做题也好，写程序或算法也罢，我们经常会见到诸如0Xfff、0b1000等数据，那么它们到底是什么意思呢？</p>\n<p>其实0x、0b等是不同进制的前缀，旨在告诉编译器后面的数字是几进制的数据，而非默认的十进制数据。</p>","more":"<p><strong>二进制（binary）</strong>：<strong>以0b或者0B为前缀</strong>，例如0b1000，等价于十进制的$1*2^3$=8</p>\n<p><strong>需要注意的是</strong>，0b（0B）这种写法是从jdk1.7才有的</p>\n<p><strong>八进制（octal）</strong>：<strong>以0为前缀</strong>，例如：070，等价于十进制的$7*8^1+0*8$=56</p>\n<p><strong>十进制（decimal）</strong>：没有前缀，默认情况下数字均为十进制表示</p>\n<p><strong>十六进制（hexadecimal）</strong>：<strong>以0x或者0X为前缀</strong>，例如算法中很常见的0xfff</p>\n<p>上面的0是数字0，而不是字母o</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> binary1 = <span class=\"number\">0b1000</span>;<span class=\"comment\">//8</span></span><br><span class=\"line\">\t\tSystem.out.println(binary1);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> binary2 = <span class=\"number\">0B111</span>;<span class=\"comment\">//7</span></span><br><span class=\"line\">\t\tSystem.out.println(binary2);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> octal = <span class=\"number\">070</span>;<span class=\"comment\">//56</span></span><br><span class=\"line\">\t\tSystem.out.println(octal);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> hexadecimal = <span class=\"number\">0xfff</span>;<span class=\"comment\">//4095</span></span><br><span class=\"line\">\t\tSystem.out.println(hexadecimal);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">56</span></span><br><span class=\"line\"><span class=\"number\">4095</span></span><br></pre></td></tr></table></figure>"},{"title":"Java集合框架源码阅读之顺序表ArrayList","date":"2018-03-30T13:40:42.000Z","updated":"2018-03-30T13:40:42.000Z","_content":"今天是《Java集合框架源码阅读》的第一篇，我们来讲讲Java中的顺序表ArrayList\n首先来看下ArrayList的继承结构\n```java\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable\n```\n<!--more-->\n\t\n构造方法：   \n```java\npublic ArrayList(int initialCapacity)\npublic ArrayList()\npublic ArrayList(Collection<? extends E> c)\n```\n\n成员属性：\n```java\nprivate static final int DEFAULT_CAPACITY = 10;//ArrayList的默认容量\nprivate static final Object[] EMPTY_ELEMENTDATA = {};//空数组\nprivate static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};//默认容量的空数组\ntransient Object[] elementData;\nprivate int size;//ArrayList中实际存储的元素个数\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n```\n\n### 问题一：ArrayList的底层是采用什么实现的？\n查看ArrayList的源码可以发现如下代码:\n```java\ntransient Object[] elementData;\n```\n不难看出，ArrayList是采用数组实现的，事实上，ArrayList就是一个动态数组。\n\n\n### 问题二：ArrayList是带泛型的，为什么不直接申明泛型数组T[]，而要采用Object型数组存储数据？\njava中不能直接实例化泛型数组，即不能new T[capacity];\n如果硬要申明泛型数组T[]，需创建一个泛型类型限界的数组，然后使用一个数组进行类型转换。这将产生一个编译器警告，但在泛型集合的实现中这是不可避免的。\n```java\nT[] elementData;\n...\nelementData = (T[]) Object[capacity];\n```\n\n我们都知道数组的长度是不变的，那么ArrayList是如何实现动态扩容的呢？\n\n### 问题三：ArrayList采用什么方式实现动态扩容？\n下面举个很简单的例子，大家就能明白了\n```java\nstatic final DEFAULT_CAPACITY = 10;\n...\nint arr = new int[DEFAULT_CAPACITY];\n...\n//下面扩大arr容量\nint newCapacity = arr.length + arr.length / 2;\nint[] newArr = new int[newCapacity];\nfor(int i = 0; i< arr.length;i++) {\n\tnewArr[i] = arr[i];\n}\narr = newArr;\n```\n事实上，ArrayList内部也是采用的复制数组的方式实现动态扩容。至于其到底是如何做到的，请看下一个问题。\n\n### 问题四：ArrayList的扩容机制？\n要回答这个问题，我们先得弄明白：当我们使用add(E e)时，ArrayList都干了什么\n```java\n//在尾部添加\npublic boolean add(E e) {\n\tensureCapacityInternal(size + 1);  // Increments modCount!!\n\telementData[size++] = e;\n\treturn true;\n}```\n可以看到，当我们调用add(E e)方法时，先执行的ensureCapacityInternal(size+1),然后将e加入elementData，size加1。ensureCapacityInternal直译为“确保内部容量”，它又是怎么实现的呢？\n​```java\n//@param   minCapacity   需要的最小容量\nprivate void ensureCapacityInternal(int minCapacity) {\n\t//判断elementData是否为默认长度的空数组，\n\t//若是，则minCapacity取默认容量和原minCapacity的最大值\n\tif (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n\t\tminCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n\t}\n\tensureExplicitCapacity(minCapacity);\n}```\n\n看到这里，又出现了一个新的方法ensureExplicitCapacity(int minCapacity)，ensureExplicitCapacity直译为“确保明确的容量”，接着往下挖\n​```java\nprivate void ensureExplicitCapacity(int minCapacity) {\n\t//modCount是ArrayList的父类AbstractList中定义的局部变量，\n\t//用于表示List的结构修改次数\n\tmodCount++;\n\t// 如果minCapacity超过了ArrayList的容量，则对其扩容\n\tif (minCapacity - elementData.length > 0)\n\t\tgrow(minCapacity);\n}```\n这里出现了一个新的方法grow(int minCapacity)，grow意为“成长”，这就是**ArrayList动态扩容的秘密**吗？我们接着往下看\n\n​```java \nprivate void grow(int minCapacity) {\n\tint oldCapacity = elementData.length;\n\t//每次扩容后，新的容量为原来容量的1.5倍，oldCapacity >> 1等价于 oldCapacity / 2\n\tint newCapacity = oldCapacity + (oldCapacity >> 1);\n\tif (newCapacity - minCapacity < 0)\n\t\tnewCapacity = minCapacity;\n\tif (newCapacity - MAX_ARRAY_SIZE > 0)\n\t\tnewCapacity = hugeCapacity(minCapacity);\n\t//通过复制数组的方式，将数组扩容\n\telementData = Arrays.copyOf(elementData, newCapacity);\n}\n```\n其中出现了一个新的变量MAX_ARRAY_SIZE，ArrayList中对它的定义如下：<br>\n```java\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n```\n为什么这么定义？\n\n源代码中的注释如下：\nThe maximum size of array to allocate. Some VMs reserve some header words in an array.\nAttempts to allocate larger arrays may result in OutOfMemoryError: Requested array size exceeds VM limit<br>\n翻译：可分配的最大的数组大小。一些虚拟机在数组中保留了一些头部信息。\n试图给数组分配更大的空间可能导致内存溢出错误：请求的数组大小超过了虚拟机的限制\n\n```java\n//给定需要的最小容量，如果所给最小容量小于0，抛出内存溢出错误，\n//如果最小容量大于ArrayList定义的最大数组长度，则返回Integer的最大值，\n//否则，返回ArrayList定义的最大数组长度\nprivate static int hugeCapacity(int minCapacity) {\n\tif (minCapacity < 0) // overflow\n\t\tthrow new OutOfMemoryError();\n\treturn (minCapacity > MAX_ARRAY_SIZE) ?\n\t\tInteger.MAX_VALUE :\n\t\tMAX_ARRAY_SIZE;\n}\n```\n\n>作业：自己动手实现简单的ArrayList\n>下回预告：数据结构与算法分析之Java中的双链表LinkedList","source":"_posts/java-collections-api-arraylist.md","raw":"---\ntitle: Java集合框架源码阅读之顺序表ArrayList\ndate: 2018-03-30 21:40:42\nupdated: 2018-03-30 21:40:42\ntags: java collections api\ncategories: java\n---\n今天是《Java集合框架源码阅读》的第一篇，我们来讲讲Java中的顺序表ArrayList\n首先来看下ArrayList的继承结构\n```java\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable\n```\n<!--more-->\n\t\n构造方法：   \n```java\npublic ArrayList(int initialCapacity)\npublic ArrayList()\npublic ArrayList(Collection<? extends E> c)\n```\n\n成员属性：\n```java\nprivate static final int DEFAULT_CAPACITY = 10;//ArrayList的默认容量\nprivate static final Object[] EMPTY_ELEMENTDATA = {};//空数组\nprivate static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};//默认容量的空数组\ntransient Object[] elementData;\nprivate int size;//ArrayList中实际存储的元素个数\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n```\n\n### 问题一：ArrayList的底层是采用什么实现的？\n查看ArrayList的源码可以发现如下代码:\n```java\ntransient Object[] elementData;\n```\n不难看出，ArrayList是采用数组实现的，事实上，ArrayList就是一个动态数组。\n\n\n### 问题二：ArrayList是带泛型的，为什么不直接申明泛型数组T[]，而要采用Object型数组存储数据？\njava中不能直接实例化泛型数组，即不能new T[capacity];\n如果硬要申明泛型数组T[]，需创建一个泛型类型限界的数组，然后使用一个数组进行类型转换。这将产生一个编译器警告，但在泛型集合的实现中这是不可避免的。\n```java\nT[] elementData;\n...\nelementData = (T[]) Object[capacity];\n```\n\n我们都知道数组的长度是不变的，那么ArrayList是如何实现动态扩容的呢？\n\n### 问题三：ArrayList采用什么方式实现动态扩容？\n下面举个很简单的例子，大家就能明白了\n```java\nstatic final DEFAULT_CAPACITY = 10;\n...\nint arr = new int[DEFAULT_CAPACITY];\n...\n//下面扩大arr容量\nint newCapacity = arr.length + arr.length / 2;\nint[] newArr = new int[newCapacity];\nfor(int i = 0; i< arr.length;i++) {\n\tnewArr[i] = arr[i];\n}\narr = newArr;\n```\n事实上，ArrayList内部也是采用的复制数组的方式实现动态扩容。至于其到底是如何做到的，请看下一个问题。\n\n### 问题四：ArrayList的扩容机制？\n要回答这个问题，我们先得弄明白：当我们使用add(E e)时，ArrayList都干了什么\n```java\n//在尾部添加\npublic boolean add(E e) {\n\tensureCapacityInternal(size + 1);  // Increments modCount!!\n\telementData[size++] = e;\n\treturn true;\n}```\n可以看到，当我们调用add(E e)方法时，先执行的ensureCapacityInternal(size+1),然后将e加入elementData，size加1。ensureCapacityInternal直译为“确保内部容量”，它又是怎么实现的呢？\n​```java\n//@param   minCapacity   需要的最小容量\nprivate void ensureCapacityInternal(int minCapacity) {\n\t//判断elementData是否为默认长度的空数组，\n\t//若是，则minCapacity取默认容量和原minCapacity的最大值\n\tif (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n\t\tminCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n\t}\n\tensureExplicitCapacity(minCapacity);\n}```\n\n看到这里，又出现了一个新的方法ensureExplicitCapacity(int minCapacity)，ensureExplicitCapacity直译为“确保明确的容量”，接着往下挖\n​```java\nprivate void ensureExplicitCapacity(int minCapacity) {\n\t//modCount是ArrayList的父类AbstractList中定义的局部变量，\n\t//用于表示List的结构修改次数\n\tmodCount++;\n\t// 如果minCapacity超过了ArrayList的容量，则对其扩容\n\tif (minCapacity - elementData.length > 0)\n\t\tgrow(minCapacity);\n}```\n这里出现了一个新的方法grow(int minCapacity)，grow意为“成长”，这就是**ArrayList动态扩容的秘密**吗？我们接着往下看\n\n​```java \nprivate void grow(int minCapacity) {\n\tint oldCapacity = elementData.length;\n\t//每次扩容后，新的容量为原来容量的1.5倍，oldCapacity >> 1等价于 oldCapacity / 2\n\tint newCapacity = oldCapacity + (oldCapacity >> 1);\n\tif (newCapacity - minCapacity < 0)\n\t\tnewCapacity = minCapacity;\n\tif (newCapacity - MAX_ARRAY_SIZE > 0)\n\t\tnewCapacity = hugeCapacity(minCapacity);\n\t//通过复制数组的方式，将数组扩容\n\telementData = Arrays.copyOf(elementData, newCapacity);\n}\n```\n其中出现了一个新的变量MAX_ARRAY_SIZE，ArrayList中对它的定义如下：<br>\n```java\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n```\n为什么这么定义？\n\n源代码中的注释如下：\nThe maximum size of array to allocate. Some VMs reserve some header words in an array.\nAttempts to allocate larger arrays may result in OutOfMemoryError: Requested array size exceeds VM limit<br>\n翻译：可分配的最大的数组大小。一些虚拟机在数组中保留了一些头部信息。\n试图给数组分配更大的空间可能导致内存溢出错误：请求的数组大小超过了虚拟机的限制\n\n```java\n//给定需要的最小容量，如果所给最小容量小于0，抛出内存溢出错误，\n//如果最小容量大于ArrayList定义的最大数组长度，则返回Integer的最大值，\n//否则，返回ArrayList定义的最大数组长度\nprivate static int hugeCapacity(int minCapacity) {\n\tif (minCapacity < 0) // overflow\n\t\tthrow new OutOfMemoryError();\n\treturn (minCapacity > MAX_ARRAY_SIZE) ?\n\t\tInteger.MAX_VALUE :\n\t\tMAX_ARRAY_SIZE;\n}\n```\n\n>作业：自己动手实现简单的ArrayList\n>下回预告：数据结构与算法分析之Java中的双链表LinkedList","slug":"java-collections-api-arraylist","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9apc0019j1q03a2m6lsr","content":"<p>今天是《Java集合框架源码阅读》的第一篇，我们来讲讲Java中的顺序表ArrayList<br>首先来看下ArrayList的继承结构<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>构造方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>成员属性：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;<span class=\"comment\">//ArrayList的默认容量</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;<span class=\"comment\">//空数组</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;<span class=\"comment\">//默认容量的空数组</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Object[] elementData;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;<span class=\"comment\">//ArrayList中实际存储的元素个数</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class=\"number\">8</span>;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"问题一：ArrayList的底层是采用什么实现的？\"><a href=\"#问题一：ArrayList的底层是采用什么实现的？\" class=\"headerlink\" title=\"问题一：ArrayList的底层是采用什么实现的？\"></a>问题一：ArrayList的底层是采用什么实现的？</h3><p>查看ArrayList的源码可以发现如下代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">transient</span> Object[] elementData;</span><br></pre></td></tr></table></figure></p>\n<p>不难看出，ArrayList是采用数组实现的，事实上，ArrayList就是一个动态数组。</p>\n<h3 id=\"问题二：ArrayList是带泛型的，为什么不直接申明泛型数组T-，而要采用Object型数组存储数据？\"><a href=\"#问题二：ArrayList是带泛型的，为什么不直接申明泛型数组T-，而要采用Object型数组存储数据？\" class=\"headerlink\" title=\"问题二：ArrayList是带泛型的，为什么不直接申明泛型数组T[]，而要采用Object型数组存储数据？\"></a>问题二：ArrayList是带泛型的，为什么不直接申明泛型数组T[]，而要采用Object型数组存储数据？</h3><p>java中不能直接实例化泛型数组，即不能new T[capacity];<br>如果硬要申明泛型数组T[]，需创建一个泛型类型限界的数组，然后使用一个数组进行类型转换。这将产生一个编译器警告，但在泛型集合的实现中这是不可避免的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T[] elementData;</span><br><span class=\"line\">...</span><br><span class=\"line\">elementData = (T[]) Object[capacity];</span><br></pre></td></tr></table></figure></p>\n<p>我们都知道数组的长度是不变的，那么ArrayList是如何实现动态扩容的呢？</p>\n<h3 id=\"问题三：ArrayList采用什么方式实现动态扩容？\"><a href=\"#问题三：ArrayList采用什么方式实现动态扩容？\" class=\"headerlink\" title=\"问题三：ArrayList采用什么方式实现动态扩容？\"></a>问题三：ArrayList采用什么方式实现动态扩容？</h3><p>下面举个很简单的例子，大家就能明白了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">int</span> arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[DEFAULT_CAPACITY];</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">//下面扩大arr容量</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> newCapacity = arr.length + arr.length / <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] newArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[newCapacity];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt; arr.length;i++) &#123;</span><br><span class=\"line\">\tnewArr[i] = arr[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">arr = newArr;</span><br></pre></td></tr></table></figure></p>\n<p>事实上，ArrayList内部也是采用的复制数组的方式实现动态扩容。至于其到底是如何做到的，请看下一个问题。</p>\n<h3 id=\"问题四：ArrayList的扩容机制？\"><a href=\"#问题四：ArrayList的扩容机制？\" class=\"headerlink\" title=\"问题四：ArrayList的扩容机制？\"></a>问题四：ArrayList的扩容机制？</h3><p>要回答这个问题，我们先得弄明白：当我们使用add(E e)时，ArrayList都干了什么<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在尾部添加</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\tensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">\telementData[size++] = e;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，当我们调用add(E e)方法时，先执行的ensureCapacityInternal(size+1),然后将e加入elementData，size加1。ensureCapacityInternal直译为“确保内部容量”，它又是怎么实现的呢？<br>​<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//@param   minCapacity   需要的最小容量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//判断elementData是否为默认长度的空数组，</span></span><br><span class=\"line\">\t<span class=\"comment\">//若是，则minCapacity取默认容量和原minCapacity的最大值</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">\t\tminCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看到这里，又出现了一个新的方法ensureExplicitCapacity(int minCapacity)，ensureExplicitCapacity直译为“确保明确的容量”，接着往下挖<br>​<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//modCount是ArrayList的父类AbstractList中定义的局部变量，</span></span><br><span class=\"line\">\t<span class=\"comment\">//用于表示List的结构修改次数</span></span><br><span class=\"line\">\tmodCount++;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果minCapacity超过了ArrayList的容量，则对其扩容</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tgrow(minCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里出现了一个新的方法grow(int minCapacity)，grow意为“成长”，这就是<strong>ArrayList动态扩容的秘密</strong>吗？我们接着往下看</p>\n<p>​<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">\t<span class=\"comment\">//每次扩容后，新的容量为原来容量的1.5倍，oldCapacity &gt;&gt; 1等价于 oldCapacity / 2</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tnewCapacity = minCapacity;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tnewCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">\t<span class=\"comment\">//通过复制数组的方式，将数组扩容</span></span><br><span class=\"line\">\telementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中出现了一个新的变量MAX_ARRAY_SIZE，ArrayList中对它的定义如下：<br><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class=\"number\">8</span>;</span><br></pre></td></tr></table></figure></p>\n<p>为什么这么定义？</p>\n<p>源代码中的注释如下：<br>The maximum size of array to allocate. Some VMs reserve some header words in an array.<br>Attempts to allocate larger arrays may result in OutOfMemoryError: Requested array size exceeds VM limit<br><br>翻译：可分配的最大的数组大小。一些虚拟机在数组中保留了一些头部信息。<br>试图给数组分配更大的空间可能导致内存溢出错误：请求的数组大小超过了虚拟机的限制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//给定需要的最小容量，如果所给最小容量小于0，抛出内存溢出错误，</span></span><br><span class=\"line\"><span class=\"comment\">//如果最小容量大于ArrayList定义的最大数组长度，则返回Integer的最大值，</span></span><br><span class=\"line\"><span class=\"comment\">//否则，返回ArrayList定义的最大数组长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class=\"line\">\t\tInteger.MAX_VALUE :</span><br><span class=\"line\">\t\tMAX_ARRAY_SIZE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作业：自己动手实现简单的ArrayList<br>下回预告：数据结构与算法分析之Java中的双链表LinkedList</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>今天是《Java集合框架源码阅读》的第一篇，我们来讲讲Java中的顺序表ArrayList<br>首先来看下ArrayList的继承结构<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br></pre></td></tr></table></figure></p>","more":"<p>构造方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>成员属性：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;<span class=\"comment\">//ArrayList的默认容量</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;<span class=\"comment\">//空数组</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;<span class=\"comment\">//默认容量的空数组</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Object[] elementData;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;<span class=\"comment\">//ArrayList中实际存储的元素个数</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class=\"number\">8</span>;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"问题一：ArrayList的底层是采用什么实现的？\"><a href=\"#问题一：ArrayList的底层是采用什么实现的？\" class=\"headerlink\" title=\"问题一：ArrayList的底层是采用什么实现的？\"></a>问题一：ArrayList的底层是采用什么实现的？</h3><p>查看ArrayList的源码可以发现如下代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">transient</span> Object[] elementData;</span><br></pre></td></tr></table></figure></p>\n<p>不难看出，ArrayList是采用数组实现的，事实上，ArrayList就是一个动态数组。</p>\n<h3 id=\"问题二：ArrayList是带泛型的，为什么不直接申明泛型数组T-，而要采用Object型数组存储数据？\"><a href=\"#问题二：ArrayList是带泛型的，为什么不直接申明泛型数组T-，而要采用Object型数组存储数据？\" class=\"headerlink\" title=\"问题二：ArrayList是带泛型的，为什么不直接申明泛型数组T[]，而要采用Object型数组存储数据？\"></a>问题二：ArrayList是带泛型的，为什么不直接申明泛型数组T[]，而要采用Object型数组存储数据？</h3><p>java中不能直接实例化泛型数组，即不能new T[capacity];<br>如果硬要申明泛型数组T[]，需创建一个泛型类型限界的数组，然后使用一个数组进行类型转换。这将产生一个编译器警告，但在泛型集合的实现中这是不可避免的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T[] elementData;</span><br><span class=\"line\">...</span><br><span class=\"line\">elementData = (T[]) Object[capacity];</span><br></pre></td></tr></table></figure></p>\n<p>我们都知道数组的长度是不变的，那么ArrayList是如何实现动态扩容的呢？</p>\n<h3 id=\"问题三：ArrayList采用什么方式实现动态扩容？\"><a href=\"#问题三：ArrayList采用什么方式实现动态扩容？\" class=\"headerlink\" title=\"问题三：ArrayList采用什么方式实现动态扩容？\"></a>问题三：ArrayList采用什么方式实现动态扩容？</h3><p>下面举个很简单的例子，大家就能明白了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">int</span> arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[DEFAULT_CAPACITY];</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">//下面扩大arr容量</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> newCapacity = arr.length + arr.length / <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] newArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[newCapacity];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt; arr.length;i++) &#123;</span><br><span class=\"line\">\tnewArr[i] = arr[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">arr = newArr;</span><br></pre></td></tr></table></figure></p>\n<p>事实上，ArrayList内部也是采用的复制数组的方式实现动态扩容。至于其到底是如何做到的，请看下一个问题。</p>\n<h3 id=\"问题四：ArrayList的扩容机制？\"><a href=\"#问题四：ArrayList的扩容机制？\" class=\"headerlink\" title=\"问题四：ArrayList的扩容机制？\"></a>问题四：ArrayList的扩容机制？</h3><p>要回答这个问题，我们先得弄明白：当我们使用add(E e)时，ArrayList都干了什么<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在尾部添加</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\tensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">\telementData[size++] = e;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，当我们调用add(E e)方法时，先执行的ensureCapacityInternal(size+1),然后将e加入elementData，size加1。ensureCapacityInternal直译为“确保内部容量”，它又是怎么实现的呢？<br>​<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//@param   minCapacity   需要的最小容量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//判断elementData是否为默认长度的空数组，</span></span><br><span class=\"line\">\t<span class=\"comment\">//若是，则minCapacity取默认容量和原minCapacity的最大值</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">\t\tminCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看到这里，又出现了一个新的方法ensureExplicitCapacity(int minCapacity)，ensureExplicitCapacity直译为“确保明确的容量”，接着往下挖<br>​<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//modCount是ArrayList的父类AbstractList中定义的局部变量，</span></span><br><span class=\"line\">\t<span class=\"comment\">//用于表示List的结构修改次数</span></span><br><span class=\"line\">\tmodCount++;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果minCapacity超过了ArrayList的容量，则对其扩容</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tgrow(minCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里出现了一个新的方法grow(int minCapacity)，grow意为“成长”，这就是<strong>ArrayList动态扩容的秘密</strong>吗？我们接着往下看</p>\n<p>​<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">\t<span class=\"comment\">//每次扩容后，新的容量为原来容量的1.5倍，oldCapacity &gt;&gt; 1等价于 oldCapacity / 2</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tnewCapacity = minCapacity;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tnewCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">\t<span class=\"comment\">//通过复制数组的方式，将数组扩容</span></span><br><span class=\"line\">\telementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中出现了一个新的变量MAX_ARRAY_SIZE，ArrayList中对它的定义如下：<br><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class=\"number\">8</span>;</span><br></pre></td></tr></table></figure></p>\n<p>为什么这么定义？</p>\n<p>源代码中的注释如下：<br>The maximum size of array to allocate. Some VMs reserve some header words in an array.<br>Attempts to allocate larger arrays may result in OutOfMemoryError: Requested array size exceeds VM limit<br><br>翻译：可分配的最大的数组大小。一些虚拟机在数组中保留了一些头部信息。<br>试图给数组分配更大的空间可能导致内存溢出错误：请求的数组大小超过了虚拟机的限制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//给定需要的最小容量，如果所给最小容量小于0，抛出内存溢出错误，</span></span><br><span class=\"line\"><span class=\"comment\">//如果最小容量大于ArrayList定义的最大数组长度，则返回Integer的最大值，</span></span><br><span class=\"line\"><span class=\"comment\">//否则，返回ArrayList定义的最大数组长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class=\"line\">\t\tInteger.MAX_VALUE :</span><br><span class=\"line\">\t\tMAX_ARRAY_SIZE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作业：自己动手实现简单的ArrayList<br>下回预告：数据结构与算法分析之Java中的双链表LinkedList</p>\n</blockquote>"},{"title":"Java位运算符","date":"2018-06-16T08:04:26.000Z","mathjax":true,"_content":"\n在讲位运算符之前，我们先来回顾下本科时学过的一些计算机基础知识。\n\n所谓原码就是二进制定点表示法，即最高位为符号位，正数为0，负数为1，其余位表示数值的大小。\n\n反码：正数的反码与其原码相同，负数的反码是其原码逐位求反（符号位除外）。\n\n补码：正数的补码与其原码相同，负数的补码为其反码加1。\n\n整数在内存中是以补码的形式存储的。\n\n<!--more-->\n\n一个简单的例子：\n\n5的原码、补码、反码为\n$$\n原码：0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0101 \\\\\\\n反码：0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0101 \\\\\\\n补码：0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0101\n$$\n-4的原码、补码、反码为：\n$$\n原码：1000 \\ 0000 \\quad  0000 \\  0000 \\quad   0000 \\  0000 \\quad  0000 \\ 0100 \\\\\\\n反码：1111 \\ 1111 \\quad 1111 \\ 1111 \\quad  1111 \\ 1111 \\quad 1111 \\ 1011 \\\\\\\n补码：1111 \\ 1111 \\quad 1111 \\ 1111 \\quad  1111 \\ 1111 \\quad 1111 \\ 1100\n$$\n\n反过来，已知补码如何求原码呢？\n\n已知补码如下，求其十进制表示？\n$$\n1111 \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1000\n$$\n先通过补码求得反码，即补码减去1\n$$\n\\ 1111 \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1000 \\\\\\\n\\underline{- 0000 \\ 0000  \\quad 0000  \\ 0000  \\quad 0000  \\ 0000  \\quad 0000  \\ 0001} \\\\\\\\\n= 1111 \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 0111\n$$\n除最高位（符号位）外，其他位按位求反，就得到了原码\n$$\n(1000 \\ 0000  \\quad 0000  \\ 0000  \\quad 0000  \\ 0000  \\quad 0000  \\ 1000)_2 = -8\n$$\n有了上面这些知识，位运算就很容易理解了。\n### 按位与&\n\n按位与运算的运算符是“&”，是双目运算符。如果两个操作数对应位都是1，则结果位为1，否则为0。\n\n示例：5 & -4 = 4\n$$\n5的补码\\\\\\\\\n\\overbrace  {0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0101} \\\\\\\\\n\\& \\\\\\\\\n\\underbrace{1111 \\ 1111 \\quad 1111 \\ 1111 \\quad  1111 \\ 1111 \\quad 1111 \\ 1100 } \\\\\\\\\n-4的补码 \\\\\\\\\n\\Downarrow \\\\\\\\\n\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0100} \\\\\\\\\n5\\&-4的结果为十进制整数4\n$$\n\n### 按位或|\n\n按位与运算的运算符是“|”，是双目运算符。如果两个操作数对应位都是0，则结果才是0，否则为1。\n\n示例：3 | 6 = 7\n$$\n3的补码 \\\\\\\n\\overbrace  {0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0011} \\\\\\\n| \\\\\\\n\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0110} \\\\\\\n6的补码  \\\\\\\n\\Downarrow \\\\\\\n\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0111} \\\\\\\n3 | 6的结果为十进制整数7\n$$\n\n### 按位非~\n\n按位非运算，也称“按位取反”运算，运算符为“~”，是单目运算符。\n\n运算法则：将操作数二进制中的1全部修改为0，0全部改为1\n\n示例：~7 = -8\n$$\n7的补码\\\\\\\n\\overbrace  {0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0111} \\\\\\\n\\Downarrow \\\\\\\n\\underbrace{1111 \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1000} \\\\\\\n\\sim7的结果为十进制整数-8\n$$\n\n### 按位异或^\n\n按位异或运算的运算符是“^\"，是双目运算符。\n\n运算法则：当两个操作数的二进制表示相同（同为0或同为1）时，结果为0，否则为1。\n\n示例：7^3 = 4\n$$\n7的补码 \\\\\\\\\n\\overbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0111} \\\\\\\\\n \\wedge \\\\\\\\\n\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0011} \\\\\\\\\n3的补码　\\\\\\\\\n\\Downarrow \\\\\\\\\n\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0100} \\\\\\\\\n7^{\\wedge} 3的结果为十进制整数4\n$$\n\n### 移位运算符\n\nJava语言中的移位运算符有3种，其操作的数据类型只有byte、short、char、int和long5种类型。\n\n* 左移运算符<<。左移空出的位置补0。\n\n如12<<1 = 24：\n\n$$\n\\quad \\quad \\quad \\underline{0 \\quad  0 \\quad  0 \\quad  0 \\quad  1 \\quad  1 \\quad  0 \\quad  0 }\\\\\\\n\\quad 抛弃 \\rightarrow  0 \\quad  \\underline{0 \\quad  0\\quad  0\\quad  1 \\quad   1\\quad  0\\quad  0} \\quad  0 \\leftarrow 补零 \\\\\\\n结果为 2^{4}+2^{3} = 24\n$$\n\n* 右移运算符>>。如果最高位为0，则右移空出的位置补0；如果最高位为1，空出的位置补1。\n\n如12>>1 = 6：\n\n$$\n\\underline{0 \\quad  0\\quad  0\\quad  0\\quad  1\\quad  1\\quad  0 \\quad  0 }\\\\\\\n\\quad 补零\\rightarrow  0 \\quad  \\underline{0 \\quad  0 \\quad 0\\quad  0\\quad  1 \\quad   1\\quad  0}  \\quad 0 \\leftarrow 抛弃\\\\\\\n结果为 2^{2}+2^{1} = 6\n$$\n\n* 无符号右移运算符>>>。不管最高位是0还是1，右移空出的位置都补0。\n\n简单来说，一个数左移n位，相当于这个数乘以2的n次方；右移n位，相当于除以2的n次方。\n\n","source":"_posts/java-bitwise-operation.md","raw":"---\ntitle: Java位运算符\ndate: 2018-06-16 16:04:26\ntags: java\ncategories: java\nmathjax: true\n---\n\n在讲位运算符之前，我们先来回顾下本科时学过的一些计算机基础知识。\n\n所谓原码就是二进制定点表示法，即最高位为符号位，正数为0，负数为1，其余位表示数值的大小。\n\n反码：正数的反码与其原码相同，负数的反码是其原码逐位求反（符号位除外）。\n\n补码：正数的补码与其原码相同，负数的补码为其反码加1。\n\n整数在内存中是以补码的形式存储的。\n\n<!--more-->\n\n一个简单的例子：\n\n5的原码、补码、反码为\n$$\n原码：0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0101 \\\\\\\n反码：0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0101 \\\\\\\n补码：0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0101\n$$\n-4的原码、补码、反码为：\n$$\n原码：1000 \\ 0000 \\quad  0000 \\  0000 \\quad   0000 \\  0000 \\quad  0000 \\ 0100 \\\\\\\n反码：1111 \\ 1111 \\quad 1111 \\ 1111 \\quad  1111 \\ 1111 \\quad 1111 \\ 1011 \\\\\\\n补码：1111 \\ 1111 \\quad 1111 \\ 1111 \\quad  1111 \\ 1111 \\quad 1111 \\ 1100\n$$\n\n反过来，已知补码如何求原码呢？\n\n已知补码如下，求其十进制表示？\n$$\n1111 \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1000\n$$\n先通过补码求得反码，即补码减去1\n$$\n\\ 1111 \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1000 \\\\\\\n\\underline{- 0000 \\ 0000  \\quad 0000  \\ 0000  \\quad 0000  \\ 0000  \\quad 0000  \\ 0001} \\\\\\\\\n= 1111 \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 0111\n$$\n除最高位（符号位）外，其他位按位求反，就得到了原码\n$$\n(1000 \\ 0000  \\quad 0000  \\ 0000  \\quad 0000  \\ 0000  \\quad 0000  \\ 1000)_2 = -8\n$$\n有了上面这些知识，位运算就很容易理解了。\n### 按位与&\n\n按位与运算的运算符是“&”，是双目运算符。如果两个操作数对应位都是1，则结果位为1，否则为0。\n\n示例：5 & -4 = 4\n$$\n5的补码\\\\\\\\\n\\overbrace  {0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0101} \\\\\\\\\n\\& \\\\\\\\\n\\underbrace{1111 \\ 1111 \\quad 1111 \\ 1111 \\quad  1111 \\ 1111 \\quad 1111 \\ 1100 } \\\\\\\\\n-4的补码 \\\\\\\\\n\\Downarrow \\\\\\\\\n\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0100} \\\\\\\\\n5\\&-4的结果为十进制整数4\n$$\n\n### 按位或|\n\n按位与运算的运算符是“|”，是双目运算符。如果两个操作数对应位都是0，则结果才是0，否则为1。\n\n示例：3 | 6 = 7\n$$\n3的补码 \\\\\\\n\\overbrace  {0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0011} \\\\\\\n| \\\\\\\n\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0110} \\\\\\\n6的补码  \\\\\\\n\\Downarrow \\\\\\\n\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0111} \\\\\\\n3 | 6的结果为十进制整数7\n$$\n\n### 按位非~\n\n按位非运算，也称“按位取反”运算，运算符为“~”，是单目运算符。\n\n运算法则：将操作数二进制中的1全部修改为0，0全部改为1\n\n示例：~7 = -8\n$$\n7的补码\\\\\\\n\\overbrace  {0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0111} \\\\\\\n\\Downarrow \\\\\\\n\\underbrace{1111 \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1000} \\\\\\\n\\sim7的结果为十进制整数-8\n$$\n\n### 按位异或^\n\n按位异或运算的运算符是“^\"，是双目运算符。\n\n运算法则：当两个操作数的二进制表示相同（同为0或同为1）时，结果为0，否则为1。\n\n示例：7^3 = 4\n$$\n7的补码 \\\\\\\\\n\\overbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0111} \\\\\\\\\n \\wedge \\\\\\\\\n\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0011} \\\\\\\\\n3的补码　\\\\\\\\\n\\Downarrow \\\\\\\\\n\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0100} \\\\\\\\\n7^{\\wedge} 3的结果为十进制整数4\n$$\n\n### 移位运算符\n\nJava语言中的移位运算符有3种，其操作的数据类型只有byte、short、char、int和long5种类型。\n\n* 左移运算符<<。左移空出的位置补0。\n\n如12<<1 = 24：\n\n$$\n\\quad \\quad \\quad \\underline{0 \\quad  0 \\quad  0 \\quad  0 \\quad  1 \\quad  1 \\quad  0 \\quad  0 }\\\\\\\n\\quad 抛弃 \\rightarrow  0 \\quad  \\underline{0 \\quad  0\\quad  0\\quad  1 \\quad   1\\quad  0\\quad  0} \\quad  0 \\leftarrow 补零 \\\\\\\n结果为 2^{4}+2^{3} = 24\n$$\n\n* 右移运算符>>。如果最高位为0，则右移空出的位置补0；如果最高位为1，空出的位置补1。\n\n如12>>1 = 6：\n\n$$\n\\underline{0 \\quad  0\\quad  0\\quad  0\\quad  1\\quad  1\\quad  0 \\quad  0 }\\\\\\\n\\quad 补零\\rightarrow  0 \\quad  \\underline{0 \\quad  0 \\quad 0\\quad  0\\quad  1 \\quad   1\\quad  0}  \\quad 0 \\leftarrow 抛弃\\\\\\\n结果为 2^{2}+2^{1} = 6\n$$\n\n* 无符号右移运算符>>>。不管最高位是0还是1，右移空出的位置都补0。\n\n简单来说，一个数左移n位，相当于这个数乘以2的n次方；右移n位，相当于除以2的n次方。\n\n","slug":"java-bitwise-operation","published":1,"updated":"2019-01-19T07:23:57.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9ape001cj1q07gfozzcq","content":"<p>在讲位运算符之前，我们先来回顾下本科时学过的一些计算机基础知识。</p>\n<p>所谓原码就是二进制定点表示法，即最高位为符号位，正数为0，负数为1，其余位表示数值的大小。</p>\n<p>反码：正数的反码与其原码相同，负数的反码是其原码逐位求反（符号位除外）。</p>\n<p>补码：正数的补码与其原码相同，负数的补码为其反码加1。</p>\n<p>整数在内存中是以补码的形式存储的。</p>\n<a id=\"more\"></a>\n<p>一个简单的例子：</p>\n<p>5的原码、补码、反码为<br>$$<br>原码：0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0101 \\\\<br>反码：0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0101 \\\\<br>补码：0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0101<br>$$<br>-4的原码、补码、反码为：<br>$$<br>原码：1000 \\ 0000 \\quad  0000 \\  0000 \\quad   0000 \\  0000 \\quad  0000 \\ 0100 \\\\<br>反码：1111 \\ 1111 \\quad 1111 \\ 1111 \\quad  1111 \\ 1111 \\quad 1111 \\ 1011 \\\\<br>补码：1111 \\ 1111 \\quad 1111 \\ 1111 \\quad  1111 \\ 1111 \\quad 1111 \\ 1100<br>$$</p>\n<p>反过来，已知补码如何求原码呢？</p>\n<p>已知补码如下，求其十进制表示？<br>$$<br>1111 \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1000<br>$$<br>先通过补码求得反码，即补码减去1<br>$$<br>\\ 1111 \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1000 \\\\<br>\\underline{- 0000 \\ 0000  \\quad 0000  \\ 0000  \\quad 0000  \\ 0000  \\quad 0000  \\ 0001} \\\\<br>= 1111 \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 0111<br>$$<br>除最高位（符号位）外，其他位按位求反，就得到了原码<br>$$<br>(1000 \\ 0000  \\quad 0000  \\ 0000  \\quad 0000  \\ 0000  \\quad 0000  \\ 1000)_2 = -8<br>$$<br>有了上面这些知识，位运算就很容易理解了。</p>\n<h3 id=\"按位与-amp\"><a href=\"#按位与-amp\" class=\"headerlink\" title=\"按位与&amp;\"></a>按位与&amp;</h3><p>按位与运算的运算符是“&amp;”，是双目运算符。如果两个操作数对应位都是1，则结果位为1，否则为0。</p>\n<p>示例：5 &amp; -4 = 4<br>$$<br>5的补码\\\\<br>\\overbrace  {0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0101} \\\\<br>\\&amp; \\\\<br>\\underbrace{1111 \\ 1111 \\quad 1111 \\ 1111 \\quad  1111 \\ 1111 \\quad 1111 \\ 1100 } \\\\<br>-4的补码 \\\\<br>\\Downarrow \\\\<br>\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0100} \\\\<br>5\\&amp;-4的结果为十进制整数4<br>$$</p>\n<h3 id=\"按位或\"><a href=\"#按位或\" class=\"headerlink\" title=\"按位或|\"></a>按位或|</h3><p>按位与运算的运算符是“|”，是双目运算符。如果两个操作数对应位都是0，则结果才是0，否则为1。</p>\n<p>示例：3 | 6 = 7<br>$$<br>3的补码 \\\\<br>\\overbrace  {0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0011} \\\\<br>| \\\\<br>\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0110} \\\\<br>6的补码  \\\\<br>\\Downarrow \\\\<br>\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0111} \\\\<br>3 | 6的结果为十进制整数7<br>$$</p>\n<h3 id=\"按位非\"><a href=\"#按位非\" class=\"headerlink\" title=\"按位非~\"></a>按位非~</h3><p>按位非运算，也称“按位取反”运算，运算符为“~”，是单目运算符。</p>\n<p>运算法则：将操作数二进制中的1全部修改为0，0全部改为1</p>\n<p>示例：~7 = -8<br>$$<br>7的补码\\\\<br>\\overbrace  {0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0111} \\\\<br>\\Downarrow \\\\<br>\\underbrace{1111 \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1000} \\\\<br>\\sim7的结果为十进制整数-8<br>$$</p>\n<h3 id=\"按位异或\"><a href=\"#按位异或\" class=\"headerlink\" title=\"按位异或^\"></a>按位异或^</h3><p>按位异或运算的运算符是“^”，是双目运算符。</p>\n<p>运算法则：当两个操作数的二进制表示相同（同为0或同为1）时，结果为0，否则为1。</p>\n<p>示例：7^3 = 4<br>$$<br>7的补码 \\\\<br>\\overbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0111} \\\\<br> \\wedge \\\\<br>\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0011} \\\\<br>3的补码　\\\\<br>\\Downarrow \\\\<br>\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0100} \\\\<br>7^{\\wedge} 3的结果为十进制整数4<br>$$</p>\n<h3 id=\"移位运算符\"><a href=\"#移位运算符\" class=\"headerlink\" title=\"移位运算符\"></a>移位运算符</h3><p>Java语言中的移位运算符有3种，其操作的数据类型只有byte、short、char、int和long5种类型。</p>\n<ul>\n<li>左移运算符&lt;&lt;。左移空出的位置补0。</li>\n</ul>\n<p>如12&lt;&lt;1 = 24：</p>\n<p>$$<br>\\quad \\quad \\quad \\underline{0 \\quad  0 \\quad  0 \\quad  0 \\quad  1 \\quad  1 \\quad  0 \\quad  0 }\\\\<br>\\quad 抛弃 \\rightarrow  0 \\quad  \\underline{0 \\quad  0\\quad  0\\quad  1 \\quad   1\\quad  0\\quad  0} \\quad  0 \\leftarrow 补零 \\\\<br>结果为 2^{4}+2^{3} = 24<br>$$</p>\n<ul>\n<li>右移运算符&gt;&gt;。如果最高位为0，则右移空出的位置补0；如果最高位为1，空出的位置补1。</li>\n</ul>\n<p>如12&gt;&gt;1 = 6：</p>\n<p>$$<br>\\underline{0 \\quad  0\\quad  0\\quad  0\\quad  1\\quad  1\\quad  0 \\quad  0 }\\\\<br>\\quad 补零\\rightarrow  0 \\quad  \\underline{0 \\quad  0 \\quad 0\\quad  0\\quad  1 \\quad   1\\quad  0}  \\quad 0 \\leftarrow 抛弃\\\\<br>结果为 2^{2}+2^{1} = 6<br>$$</p>\n<ul>\n<li>无符号右移运算符&gt;&gt;&gt;。不管最高位是0还是1，右移空出的位置都补0。</li>\n</ul>\n<p>简单来说，一个数左移n位，相当于这个数乘以2的n次方；右移n位，相当于除以2的n次方。</p>\n","site":{"data":{}},"excerpt":"<p>在讲位运算符之前，我们先来回顾下本科时学过的一些计算机基础知识。</p>\n<p>所谓原码就是二进制定点表示法，即最高位为符号位，正数为0，负数为1，其余位表示数值的大小。</p>\n<p>反码：正数的反码与其原码相同，负数的反码是其原码逐位求反（符号位除外）。</p>\n<p>补码：正数的补码与其原码相同，负数的补码为其反码加1。</p>\n<p>整数在内存中是以补码的形式存储的。</p>","more":"<p>一个简单的例子：</p>\n<p>5的原码、补码、反码为<br>$$<br>原码：0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0101 \\\\<br>反码：0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0101 \\\\<br>补码：0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0101<br>$$<br>-4的原码、补码、反码为：<br>$$<br>原码：1000 \\ 0000 \\quad  0000 \\  0000 \\quad   0000 \\  0000 \\quad  0000 \\ 0100 \\\\<br>反码：1111 \\ 1111 \\quad 1111 \\ 1111 \\quad  1111 \\ 1111 \\quad 1111 \\ 1011 \\\\<br>补码：1111 \\ 1111 \\quad 1111 \\ 1111 \\quad  1111 \\ 1111 \\quad 1111 \\ 1100<br>$$</p>\n<p>反过来，已知补码如何求原码呢？</p>\n<p>已知补码如下，求其十进制表示？<br>$$<br>1111 \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1000<br>$$<br>先通过补码求得反码，即补码减去1<br>$$<br>\\ 1111 \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1000 \\\\<br>\\underline{- 0000 \\ 0000  \\quad 0000  \\ 0000  \\quad 0000  \\ 0000  \\quad 0000  \\ 0001} \\\\<br>= 1111 \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 0111<br>$$<br>除最高位（符号位）外，其他位按位求反，就得到了原码<br>$$<br>(1000 \\ 0000  \\quad 0000  \\ 0000  \\quad 0000  \\ 0000  \\quad 0000  \\ 1000)_2 = -8<br>$$<br>有了上面这些知识，位运算就很容易理解了。</p>\n<h3 id=\"按位与-amp\"><a href=\"#按位与-amp\" class=\"headerlink\" title=\"按位与&amp;\"></a>按位与&amp;</h3><p>按位与运算的运算符是“&amp;”，是双目运算符。如果两个操作数对应位都是1，则结果位为1，否则为0。</p>\n<p>示例：5 &amp; -4 = 4<br>$$<br>5的补码\\\\<br>\\overbrace  {0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0101} \\\\<br>\\&amp; \\\\<br>\\underbrace{1111 \\ 1111 \\quad 1111 \\ 1111 \\quad  1111 \\ 1111 \\quad 1111 \\ 1100 } \\\\<br>-4的补码 \\\\<br>\\Downarrow \\\\<br>\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0100} \\\\<br>5\\&amp;-4的结果为十进制整数4<br>$$</p>\n<h3 id=\"按位或\"><a href=\"#按位或\" class=\"headerlink\" title=\"按位或|\"></a>按位或|</h3><p>按位与运算的运算符是“|”，是双目运算符。如果两个操作数对应位都是0，则结果才是0，否则为1。</p>\n<p>示例：3 | 6 = 7<br>$$<br>3的补码 \\\\<br>\\overbrace  {0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0011} \\\\<br>| \\\\<br>\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0110} \\\\<br>6的补码  \\\\<br>\\Downarrow \\\\<br>\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0111} \\\\<br>3 | 6的结果为十进制整数7<br>$$</p>\n<h3 id=\"按位非\"><a href=\"#按位非\" class=\"headerlink\" title=\"按位非~\"></a>按位非~</h3><p>按位非运算，也称“按位取反”运算，运算符为“~”，是单目运算符。</p>\n<p>运算法则：将操作数二进制中的1全部修改为0，0全部改为1</p>\n<p>示例：~7 = -8<br>$$<br>7的补码\\\\<br>\\overbrace  {0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0111} \\\\<br>\\Downarrow \\\\<br>\\underbrace{1111 \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1111  \\quad 1111  \\ 1000} \\\\<br>\\sim7的结果为十进制整数-8<br>$$</p>\n<h3 id=\"按位异或\"><a href=\"#按位异或\" class=\"headerlink\" title=\"按位异或^\"></a>按位异或^</h3><p>按位异或运算的运算符是“^”，是双目运算符。</p>\n<p>运算法则：当两个操作数的二进制表示相同（同为0或同为1）时，结果为0，否则为1。</p>\n<p>示例：7^3 = 4<br>$$<br>7的补码 \\\\<br>\\overbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0111} \\\\<br> \\wedge \\\\<br>\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0011} \\\\<br>3的补码　\\\\<br>\\Downarrow \\\\<br>\\underbrace{0000 \\ 0000 \\quad 0000 \\ 0000 \\quad  0000 \\ 0000 \\quad 0000 \\ 0100} \\\\<br>7^{\\wedge} 3的结果为十进制整数4<br>$$</p>\n<h3 id=\"移位运算符\"><a href=\"#移位运算符\" class=\"headerlink\" title=\"移位运算符\"></a>移位运算符</h3><p>Java语言中的移位运算符有3种，其操作的数据类型只有byte、short、char、int和long5种类型。</p>\n<ul>\n<li>左移运算符&lt;&lt;。左移空出的位置补0。</li>\n</ul>\n<p>如12&lt;&lt;1 = 24：</p>\n<p>$$<br>\\quad \\quad \\quad \\underline{0 \\quad  0 \\quad  0 \\quad  0 \\quad  1 \\quad  1 \\quad  0 \\quad  0 }\\\\<br>\\quad 抛弃 \\rightarrow  0 \\quad  \\underline{0 \\quad  0\\quad  0\\quad  1 \\quad   1\\quad  0\\quad  0} \\quad  0 \\leftarrow 补零 \\\\<br>结果为 2^{4}+2^{3} = 24<br>$$</p>\n<ul>\n<li>右移运算符&gt;&gt;。如果最高位为0，则右移空出的位置补0；如果最高位为1，空出的位置补1。</li>\n</ul>\n<p>如12&gt;&gt;1 = 6：</p>\n<p>$$<br>\\underline{0 \\quad  0\\quad  0\\quad  0\\quad  1\\quad  1\\quad  0 \\quad  0 }\\\\<br>\\quad 补零\\rightarrow  0 \\quad  \\underline{0 \\quad  0 \\quad 0\\quad  0\\quad  1 \\quad   1\\quad  0}  \\quad 0 \\leftarrow 抛弃\\\\<br>结果为 2^{2}+2^{1} = 6<br>$$</p>\n<ul>\n<li>无符号右移运算符&gt;&gt;&gt;。不管最高位是0还是1，右移空出的位置都补0。</li>\n</ul>\n<p>简单来说，一个数左移n位，相当于这个数乘以2的n次方；右移n位，相当于除以2的n次方。</p>"},{"title":"Java集合框架源码阅读之双链表LinkedList","date":"2018-04-01T08:33:12.000Z","updated":"2018-04-01T08:33:12.000Z","_content":">本文只分析LinkedList的增(add) 删(remove) 改(set) 查(get)的实现，剩余的部分留给读者自己去浏览吧\n\n本文是《Java集合框架源码阅读》系列的第二篇，我们的主角是java.util.LinkedList\n老规矩，先看LinkedList继承结构\n```java\npublic class LinkedList<E>\n    extends AbstractSequentialList<E>\n    implements List<E>, Deque<E>, Cloneable, java.io.Serializable\n```\n<!--more-->\n构造方法：\n```java\npublic LinkedList()\npublic LinkedList(Collection<? extends E> c)\n```\n成员属性：\n```java\ntransient int size = 0;\ntransient Node<E> first;//头结点\ntransient Node<E> last;//尾结点\n```\n\n### 问题一：LinkedList如何存储结点信息？\n查看源码可以发现，LinkedList内部有一个静态内部类Node&lt;E&gt;，其保存了当前结点的数据信息，以及指向其前驱和后继结点的链（或称指针）\n```java\nprivate static class Node<E> {\n\tE item;\n\tNode<E> next;\n\tNode<E> prev;\n\tNode(Node<E> prev, E element, Node<E> next) {\n\t\tthis.item = element;\n\t\tthis.next = next;\n\t\tthis.prev = prev;\n\t}\n}\n```\n### 问题二：LinkedList是如何实现尾部添加add(E e)方法的？\n源码如下：\n```java\npublic boolean add(E e) {\n\tlinkLast(e);\n\treturn true;\n}\nvoid linkLast(E e) {\n\tfinal Node<E> l = last;\n\tfinal Node<E> newNode = new Node<>(l, e, null);\n\tlast = newNode;\n\tif (l == null)\n\t\tfirst = newNode;\n\telse\n\t\tl.next = newNode;\n\tsize++;\n\tmodCount++;\n}\n```\n解析：每当调用add(E e)方法时，首先调用linkLast(E e)，linkLast顾名思义，链接到尾结点，\n新建一个Node，让当前尾结点l成为其前驱结点，后继结点设为null，继而，新建的Node成为了新\n的尾结点，若原尾结点l尚未初始化，则让头结点指向新建的Node结点，否则，原来的尾节点L已经初始化了，则让新增结点成为原来的尾节点L的后继结点\n\n我们都知道Java中的表List都是可以通过索引号（下标）获取结点值的，即 T get(int index)，ArrayList本身是数组，当然很好实现，而LinkedList却是双链表，它又是如何实现的呢？\n### 问题三：LinkedList是如何实现随机添加add(int index,E e)方法的？\n先来看下原理图：\n![双链表插入](http://p64uw9x5j.bkt.clouddn.com/image/20180401191343.png \"在双链表中插入新的结点\")\n<pre>\n第一步：newNode.prev = succ.prev;\n        newNode.next = succ;\n第二步：succ.prev = newNode;\n第三步：if(pred != null) \n\t\t\tpred.next = newNode;\n\t\telse\n\t\t\tfirst = newNode;\n</pre>\n源码如下：\n```java\npublic void add(int index, E element) {\n\tcheckPositionIndex(index);//判断index是否为可以插入的位置\n\n\tif (index == size)\n\t\tlinkLast(element);\n\telse\n\t\tlinkBefore(element, node(index));\n}\nprivate void checkPositionIndex(int index) {\n\tif (!isPositionIndex(index))\n\t\tthrow new IndexOutOfBoundsException(outOfBoundsMsg(index));\n}\nprivate boolean isPositionIndex(int index) {\n\treturn index >= 0 && index <= size;\n}\n//在给定结点succ的前面插入一个新的结点，结点的值为e\nvoid linkBefore(E e, Node<E> succ) {\n\tfinal Node<E> pred = succ.prev;\n\tfinal Node<E> newNode = new Node<>(pred, e, succ);\n\tsucc.prev = newNode;\n\tif (pred == null)\n\t\tfirst = newNode;\n\telse\n\t\tpred.next = newNode;\n\tsize++;\n\tmodCount++;\n}\n```\n\n### 问题四：LinkedList是如何实现get(int index)方法的？\n源码如下：\n```java\npublic E get(int index) {\n\t//检查是否满足0 <= index < size，不满足则抛出下标越界异常\n\tcheckElementIndex(index);\n\treturn node(index).item;\n}\nprivate void checkElementIndex(int index) {\n\tif (!isElementIndex(index))\n\t\tthrow new IndexOutOfBoundsException(outOfBoundsMsg(index));\n}\nprivate boolean isElementIndex(int index) {\n\treturn index >= 0 && index < size;\n}\nNode<E> node(int index) {\n\tif (index < (size >> 1)) {\n\t\tNode<E> x = first;\n\t\tfor (int i = 0; i < index; i++)\n\t\t\tx = x.next;\n\t\treturn x;\n\t} else {\n\t\tNode<E> x = last;\n\t\tfor (int i = size - 1; i > index; i--)\n\t\t\tx = x.prev;\n\t\treturn x;\n\t}\n}\n```\n可以发现，get(int index)中使用了一个node(int index)来获取指定下标的Node，而node(int index)又采用了二分法——首先判断指定索引位于LinkedList的前半部分，还是后半部分，这么做主要是为了提高效率，减少需要遍历的结点个数，然后依次遍历结点，直至找到指定下标的Node。\n从源码也可以看出来，***LinkedList并不适合随机取数据***，因为每次按照索引号随机取数据时，都需要依次遍历表\n\n### 问题五：LinkedList是如何实现remove(int index)方法的？\n先看原理图：\n![双链表删除](http://p64uw9x5j.bkt.clouddn.com/image/20180401193913.png \"删除双链表中的结点\")\n源码如下：\n```java\npublic E remove(int index) {\n\tcheckElementIndex(index);\n\treturn unlink(node(index));\n}\nE unlink(Node<E> x) {\n\tfinal E element = x.item;\n\tfinal Node<E> next = x.next;\n\tfinal Node<E> prev = x.prev;\n\n\t/* [===] ——>  [===]  ——> [===] \n\t *  ||\t                   ||\n\t * null         ×         first\n\t */\n\tif (prev == null) {\n\t\tfirst = next;\n\t} else {\n\t\tprev.next = next;\n\t\tx.prev = null;\n\t}\t\n\t\n\t/* [===] ——>  [===]  ——> [===] \n\t *  ||                    ||\n\t * last         ×         null  \n\t */\n\tif (next == null) {\n\t\tlast = prev;\n\t} else {\n\t\tnext.prev = prev;\n\t\tx.next = null;\n\t}\n\n\tx.item = null;\n\tsize--;\n\tmodCount++;\n\treturn element;\n}\n```\n\n### 问题六：LinkedList是如何实现set(int index,E element)方法的？\nset方法的实现相对简单，源码如下：\n```java\n//把element设为新的item，返回原来的item\npublic E set(int index, E element) {\n\tcheckElementIndex(index);\n\tNode<E> x = node(index);\n\tE oldVal = x.item;\n\tx.item = element;\n\treturn oldVal;\n}\n```\n>作业：自己实现简单的单链表SingleLinkedList以及循环单/双链表CircularSingleLinkedList/CircularDoubleLinkedList\n>下回预告：数据结构与算法分析之Java中的栈","source":"_posts/java-collections-api-linkedlist.md","raw":"---\ntitle: Java集合框架源码阅读之双链表LinkedList\ndate: 2018-04-01 16:33:12\nupdated: 2018-04-01 16:33:12\ntags: java collections api\ncategories: java\n---\n>本文只分析LinkedList的增(add) 删(remove) 改(set) 查(get)的实现，剩余的部分留给读者自己去浏览吧\n\n本文是《Java集合框架源码阅读》系列的第二篇，我们的主角是java.util.LinkedList\n老规矩，先看LinkedList继承结构\n```java\npublic class LinkedList<E>\n    extends AbstractSequentialList<E>\n    implements List<E>, Deque<E>, Cloneable, java.io.Serializable\n```\n<!--more-->\n构造方法：\n```java\npublic LinkedList()\npublic LinkedList(Collection<? extends E> c)\n```\n成员属性：\n```java\ntransient int size = 0;\ntransient Node<E> first;//头结点\ntransient Node<E> last;//尾结点\n```\n\n### 问题一：LinkedList如何存储结点信息？\n查看源码可以发现，LinkedList内部有一个静态内部类Node&lt;E&gt;，其保存了当前结点的数据信息，以及指向其前驱和后继结点的链（或称指针）\n```java\nprivate static class Node<E> {\n\tE item;\n\tNode<E> next;\n\tNode<E> prev;\n\tNode(Node<E> prev, E element, Node<E> next) {\n\t\tthis.item = element;\n\t\tthis.next = next;\n\t\tthis.prev = prev;\n\t}\n}\n```\n### 问题二：LinkedList是如何实现尾部添加add(E e)方法的？\n源码如下：\n```java\npublic boolean add(E e) {\n\tlinkLast(e);\n\treturn true;\n}\nvoid linkLast(E e) {\n\tfinal Node<E> l = last;\n\tfinal Node<E> newNode = new Node<>(l, e, null);\n\tlast = newNode;\n\tif (l == null)\n\t\tfirst = newNode;\n\telse\n\t\tl.next = newNode;\n\tsize++;\n\tmodCount++;\n}\n```\n解析：每当调用add(E e)方法时，首先调用linkLast(E e)，linkLast顾名思义，链接到尾结点，\n新建一个Node，让当前尾结点l成为其前驱结点，后继结点设为null，继而，新建的Node成为了新\n的尾结点，若原尾结点l尚未初始化，则让头结点指向新建的Node结点，否则，原来的尾节点L已经初始化了，则让新增结点成为原来的尾节点L的后继结点\n\n我们都知道Java中的表List都是可以通过索引号（下标）获取结点值的，即 T get(int index)，ArrayList本身是数组，当然很好实现，而LinkedList却是双链表，它又是如何实现的呢？\n### 问题三：LinkedList是如何实现随机添加add(int index,E e)方法的？\n先来看下原理图：\n![双链表插入](http://p64uw9x5j.bkt.clouddn.com/image/20180401191343.png \"在双链表中插入新的结点\")\n<pre>\n第一步：newNode.prev = succ.prev;\n        newNode.next = succ;\n第二步：succ.prev = newNode;\n第三步：if(pred != null) \n\t\t\tpred.next = newNode;\n\t\telse\n\t\t\tfirst = newNode;\n</pre>\n源码如下：\n```java\npublic void add(int index, E element) {\n\tcheckPositionIndex(index);//判断index是否为可以插入的位置\n\n\tif (index == size)\n\t\tlinkLast(element);\n\telse\n\t\tlinkBefore(element, node(index));\n}\nprivate void checkPositionIndex(int index) {\n\tif (!isPositionIndex(index))\n\t\tthrow new IndexOutOfBoundsException(outOfBoundsMsg(index));\n}\nprivate boolean isPositionIndex(int index) {\n\treturn index >= 0 && index <= size;\n}\n//在给定结点succ的前面插入一个新的结点，结点的值为e\nvoid linkBefore(E e, Node<E> succ) {\n\tfinal Node<E> pred = succ.prev;\n\tfinal Node<E> newNode = new Node<>(pred, e, succ);\n\tsucc.prev = newNode;\n\tif (pred == null)\n\t\tfirst = newNode;\n\telse\n\t\tpred.next = newNode;\n\tsize++;\n\tmodCount++;\n}\n```\n\n### 问题四：LinkedList是如何实现get(int index)方法的？\n源码如下：\n```java\npublic E get(int index) {\n\t//检查是否满足0 <= index < size，不满足则抛出下标越界异常\n\tcheckElementIndex(index);\n\treturn node(index).item;\n}\nprivate void checkElementIndex(int index) {\n\tif (!isElementIndex(index))\n\t\tthrow new IndexOutOfBoundsException(outOfBoundsMsg(index));\n}\nprivate boolean isElementIndex(int index) {\n\treturn index >= 0 && index < size;\n}\nNode<E> node(int index) {\n\tif (index < (size >> 1)) {\n\t\tNode<E> x = first;\n\t\tfor (int i = 0; i < index; i++)\n\t\t\tx = x.next;\n\t\treturn x;\n\t} else {\n\t\tNode<E> x = last;\n\t\tfor (int i = size - 1; i > index; i--)\n\t\t\tx = x.prev;\n\t\treturn x;\n\t}\n}\n```\n可以发现，get(int index)中使用了一个node(int index)来获取指定下标的Node，而node(int index)又采用了二分法——首先判断指定索引位于LinkedList的前半部分，还是后半部分，这么做主要是为了提高效率，减少需要遍历的结点个数，然后依次遍历结点，直至找到指定下标的Node。\n从源码也可以看出来，***LinkedList并不适合随机取数据***，因为每次按照索引号随机取数据时，都需要依次遍历表\n\n### 问题五：LinkedList是如何实现remove(int index)方法的？\n先看原理图：\n![双链表删除](http://p64uw9x5j.bkt.clouddn.com/image/20180401193913.png \"删除双链表中的结点\")\n源码如下：\n```java\npublic E remove(int index) {\n\tcheckElementIndex(index);\n\treturn unlink(node(index));\n}\nE unlink(Node<E> x) {\n\tfinal E element = x.item;\n\tfinal Node<E> next = x.next;\n\tfinal Node<E> prev = x.prev;\n\n\t/* [===] ——>  [===]  ——> [===] \n\t *  ||\t                   ||\n\t * null         ×         first\n\t */\n\tif (prev == null) {\n\t\tfirst = next;\n\t} else {\n\t\tprev.next = next;\n\t\tx.prev = null;\n\t}\t\n\t\n\t/* [===] ——>  [===]  ——> [===] \n\t *  ||                    ||\n\t * last         ×         null  \n\t */\n\tif (next == null) {\n\t\tlast = prev;\n\t} else {\n\t\tnext.prev = prev;\n\t\tx.next = null;\n\t}\n\n\tx.item = null;\n\tsize--;\n\tmodCount++;\n\treturn element;\n}\n```\n\n### 问题六：LinkedList是如何实现set(int index,E element)方法的？\nset方法的实现相对简单，源码如下：\n```java\n//把element设为新的item，返回原来的item\npublic E set(int index, E element) {\n\tcheckElementIndex(index);\n\tNode<E> x = node(index);\n\tE oldVal = x.item;\n\tx.item = element;\n\treturn oldVal;\n}\n```\n>作业：自己实现简单的单链表SingleLinkedList以及循环单/双链表CircularSingleLinkedList/CircularDoubleLinkedList\n>下回预告：数据结构与算法分析之Java中的栈","slug":"java-collections-api-linkedlist","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9ape001ej1q0fq8cuxek","content":"<blockquote>\n<p>本文只分析LinkedList的增(add) 删(remove) 改(set) 查(get)的实现，剩余的部分留给读者自己去浏览吧</p>\n</blockquote>\n<p>本文是《Java集合框架源码阅读》系列的第二篇，我们的主角是java.util.LinkedList<br>老规矩，先看LinkedList继承结构<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSequentialList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Deque</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>构造方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkedList</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkedList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>成员属性：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">transient</span> Node&lt;E&gt; first;<span class=\"comment\">//头结点</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Node&lt;E&gt; last;<span class=\"comment\">//尾结点</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"问题一：LinkedList如何存储结点信息？\"><a href=\"#问题一：LinkedList如何存储结点信息？\" class=\"headerlink\" title=\"问题一：LinkedList如何存储结点信息？\"></a>问题一：LinkedList如何存储结点信息？</h3><p>查看源码可以发现，LinkedList内部有一个静态内部类Node&lt;E&gt;，其保存了当前结点的数据信息，以及指向其前驱和后继结点的链（或称指针）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">\tE item;</span><br><span class=\"line\">\tNode&lt;E&gt; next;</span><br><span class=\"line\">\tNode&lt;E&gt; prev;</span><br><span class=\"line\">\tNode(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.item = element;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.prev = prev;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"问题二：LinkedList是如何实现尾部添加add-E-e-方法的？\"><a href=\"#问题二：LinkedList是如何实现尾部添加add-E-e-方法的？\" class=\"headerlink\" title=\"问题二：LinkedList是如何实现尾部添加add(E e)方法的？\"></a>问题二：LinkedList是如何实现尾部添加add(E e)方法的？</h3><p>源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\tlinkLast(e);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(l, e, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\tlast = newNode;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\tfirst = newNode;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tl.next = newNode;</span><br><span class=\"line\">\tsize++;</span><br><span class=\"line\">\tmodCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>解析：每当调用add(E e)方法时，首先调用linkLast(E e)，linkLast顾名思义，链接到尾结点，<br>新建一个Node，让当前尾结点l成为其前驱结点，后继结点设为null，继而，新建的Node成为了新<br>的尾结点，若原尾结点l尚未初始化，则让头结点指向新建的Node结点，否则，原来的尾节点L已经初始化了，则让新增结点成为原来的尾节点L的后继结点</p>\n<p>我们都知道Java中的表List都是可以通过索引号（下标）获取结点值的，即 T get(int index)，ArrayList本身是数组，当然很好实现，而LinkedList却是双链表，它又是如何实现的呢？</p>\n<h3 id=\"问题三：LinkedList是如何实现随机添加add-int-index-E-e-方法的？\"><a href=\"#问题三：LinkedList是如何实现随机添加add-int-index-E-e-方法的？\" class=\"headerlink\" title=\"问题三：LinkedList是如何实现随机添加add(int index,E e)方法的？\"></a>问题三：LinkedList是如何实现随机添加add(int index,E e)方法的？</h3><p>先来看下原理图：<br><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/20180401191343.png\" alt=\"双链表插入\" title=\"在双链表中插入新的结点\"></p>\n<p><pre><br>第一步：newNode.prev = succ.prev;<br>        newNode.next = succ;<br>第二步：succ.prev = newNode;<br>第三步：if(pred != null)<br>            pred.next = newNode;<br>        else<br>            first = newNode;<br></pre><br>源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">\tcheckPositionIndex(index);<span class=\"comment\">//判断index是否为可以插入的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (index == size)</span><br><span class=\"line\">\t\tlinkLast(element);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tlinkBefore(element, node(index));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkPositionIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!isPositionIndex(index))</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPositionIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt;= size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在给定结点succ的前面插入一个新的结点，结点的值为e</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">linkBefore</span><span class=\"params\">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class=\"line\">\tsucc.prev = newNode;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pred == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\tfirst = newNode;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tpred.next = newNode;</span><br><span class=\"line\">\tsize++;</span><br><span class=\"line\">\tmodCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"问题四：LinkedList是如何实现get-int-index-方法的？\"><a href=\"#问题四：LinkedList是如何实现get-int-index-方法的？\" class=\"headerlink\" title=\"问题四：LinkedList是如何实现get(int index)方法的？\"></a>问题四：LinkedList是如何实现get(int index)方法的？</h3><p>源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//检查是否满足0 &lt;= index &lt; size，不满足则抛出下标越界异常</span></span><br><span class=\"line\">\tcheckElementIndex(index);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> node(index).item;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkElementIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!isElementIndex(index))</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isElementIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">Node&lt;E&gt; <span class=\"title\">node</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (index &lt; (size &gt;&gt; <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t\tNode&lt;E&gt; x = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++)</span><br><span class=\"line\">\t\t\tx = x.next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tNode&lt;E&gt; x = last;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &gt; index; i--)</span><br><span class=\"line\">\t\t\tx = x.prev;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以发现，get(int index)中使用了一个node(int index)来获取指定下标的Node，而node(int index)又采用了二分法——首先判断指定索引位于LinkedList的前半部分，还是后半部分，这么做主要是为了提高效率，减少需要遍历的结点个数，然后依次遍历结点，直至找到指定下标的Node。<br>从源码也可以看出来，<strong><em>LinkedList并不适合随机取数据</em></strong>，因为每次按照索引号随机取数据时，都需要依次遍历表</p>\n<h3 id=\"问题五：LinkedList是如何实现remove-int-index-方法的？\"><a href=\"#问题五：LinkedList是如何实现remove-int-index-方法的？\" class=\"headerlink\" title=\"问题五：LinkedList是如何实现remove(int index)方法的？\"></a>问题五：LinkedList是如何实现remove(int index)方法的？</h3><p>先看原理图：<br><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/20180401193913.png\" alt=\"双链表删除\" title=\"删除双链表中的结点\"><br>源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\tcheckElementIndex(index);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> unlink(node(index));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">unlink</span><span class=\"params\">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> E element = x.item;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Node&lt;E&gt; next = x.next;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* [===] ——&gt;  [===]  ——&gt; [===] </span></span><br><span class=\"line\"><span class=\"comment\">\t *  ||\t                   ||</span></span><br><span class=\"line\"><span class=\"comment\">\t * null         ×         first</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (prev == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tfirst = next;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tprev.next = next;</span><br><span class=\"line\">\t\tx.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/* [===] ——&gt;  [===]  ——&gt; [===] </span></span><br><span class=\"line\"><span class=\"comment\">\t *  ||                    ||</span></span><br><span class=\"line\"><span class=\"comment\">\t * last         ×         null  </span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tlast = prev;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tnext.prev = prev;</span><br><span class=\"line\">\t\tx.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tx.item = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\tsize--;</span><br><span class=\"line\">\tmodCount++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"问题六：LinkedList是如何实现set-int-index-E-element-方法的？\"><a href=\"#问题六：LinkedList是如何实现set-int-index-E-element-方法的？\" class=\"headerlink\" title=\"问题六：LinkedList是如何实现set(int index,E element)方法的？\"></a>问题六：LinkedList是如何实现set(int index,E element)方法的？</h3><p>set方法的实现相对简单，源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//把element设为新的item，返回原来的item</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">\tcheckElementIndex(index);</span><br><span class=\"line\">\tNode&lt;E&gt; x = node(index);</span><br><span class=\"line\">\tE oldVal = x.item;</span><br><span class=\"line\">\tx.item = element;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>作业：自己实现简单的单链表SingleLinkedList以及循环单/双链表CircularSingleLinkedList/CircularDoubleLinkedList<br>下回预告：数据结构与算法分析之Java中的栈</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文只分析LinkedList的增(add) 删(remove) 改(set) 查(get)的实现，剩余的部分留给读者自己去浏览吧</p>\n</blockquote>\n<p>本文是《Java集合框架源码阅读》系列的第二篇，我们的主角是java.util.LinkedList<br>老规矩，先看LinkedList继承结构<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">extends</span> <span class=\"title\">AbstractSequentialList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Deque</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span></span></span><br></pre></td></tr></table></figure></p>","more":"<p>构造方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkedList</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkedList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>成员属性：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">transient</span> Node&lt;E&gt; first;<span class=\"comment\">//头结点</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> Node&lt;E&gt; last;<span class=\"comment\">//尾结点</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"问题一：LinkedList如何存储结点信息？\"><a href=\"#问题一：LinkedList如何存储结点信息？\" class=\"headerlink\" title=\"问题一：LinkedList如何存储结点信息？\"></a>问题一：LinkedList如何存储结点信息？</h3><p>查看源码可以发现，LinkedList内部有一个静态内部类Node&lt;E&gt;，其保存了当前结点的数据信息，以及指向其前驱和后继结点的链（或称指针）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">\tE item;</span><br><span class=\"line\">\tNode&lt;E&gt; next;</span><br><span class=\"line\">\tNode&lt;E&gt; prev;</span><br><span class=\"line\">\tNode(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.item = element;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.prev = prev;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"问题二：LinkedList是如何实现尾部添加add-E-e-方法的？\"><a href=\"#问题二：LinkedList是如何实现尾部添加add-E-e-方法的？\" class=\"headerlink\" title=\"问题二：LinkedList是如何实现尾部添加add(E e)方法的？\"></a>问题二：LinkedList是如何实现尾部添加add(E e)方法的？</h3><p>源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\tlinkLast(e);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(l, e, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\tlast = newNode;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\tfirst = newNode;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tl.next = newNode;</span><br><span class=\"line\">\tsize++;</span><br><span class=\"line\">\tmodCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>解析：每当调用add(E e)方法时，首先调用linkLast(E e)，linkLast顾名思义，链接到尾结点，<br>新建一个Node，让当前尾结点l成为其前驱结点，后继结点设为null，继而，新建的Node成为了新<br>的尾结点，若原尾结点l尚未初始化，则让头结点指向新建的Node结点，否则，原来的尾节点L已经初始化了，则让新增结点成为原来的尾节点L的后继结点</p>\n<p>我们都知道Java中的表List都是可以通过索引号（下标）获取结点值的，即 T get(int index)，ArrayList本身是数组，当然很好实现，而LinkedList却是双链表，它又是如何实现的呢？</p>\n<h3 id=\"问题三：LinkedList是如何实现随机添加add-int-index-E-e-方法的？\"><a href=\"#问题三：LinkedList是如何实现随机添加add-int-index-E-e-方法的？\" class=\"headerlink\" title=\"问题三：LinkedList是如何实现随机添加add(int index,E e)方法的？\"></a>问题三：LinkedList是如何实现随机添加add(int index,E e)方法的？</h3><p>先来看下原理图：<br><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/20180401191343.png\" alt=\"双链表插入\" title=\"在双链表中插入新的结点\"></p>\n<p><pre><br>第一步：newNode.prev = succ.prev;<br>        newNode.next = succ;<br>第二步：succ.prev = newNode;<br>第三步：if(pred != null)<br>            pred.next = newNode;<br>        else<br>            first = newNode;<br></pre><br>源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">\tcheckPositionIndex(index);<span class=\"comment\">//判断index是否为可以插入的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (index == size)</span><br><span class=\"line\">\t\tlinkLast(element);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tlinkBefore(element, node(index));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkPositionIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!isPositionIndex(index))</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPositionIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt;= size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在给定结点succ的前面插入一个新的结点，结点的值为e</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">linkBefore</span><span class=\"params\">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class=\"line\">\tsucc.prev = newNode;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pred == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">\t\tfirst = newNode;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tpred.next = newNode;</span><br><span class=\"line\">\tsize++;</span><br><span class=\"line\">\tmodCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"问题四：LinkedList是如何实现get-int-index-方法的？\"><a href=\"#问题四：LinkedList是如何实现get-int-index-方法的？\" class=\"headerlink\" title=\"问题四：LinkedList是如何实现get(int index)方法的？\"></a>问题四：LinkedList是如何实现get(int index)方法的？</h3><p>源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//检查是否满足0 &lt;= index &lt; size，不满足则抛出下标越界异常</span></span><br><span class=\"line\">\tcheckElementIndex(index);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> node(index).item;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkElementIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!isElementIndex(index))</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isElementIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">Node&lt;E&gt; <span class=\"title\">node</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (index &lt; (size &gt;&gt; <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t\tNode&lt;E&gt; x = first;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++)</span><br><span class=\"line\">\t\t\tx = x.next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tNode&lt;E&gt; x = last;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &gt; index; i--)</span><br><span class=\"line\">\t\t\tx = x.prev;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以发现，get(int index)中使用了一个node(int index)来获取指定下标的Node，而node(int index)又采用了二分法——首先判断指定索引位于LinkedList的前半部分，还是后半部分，这么做主要是为了提高效率，减少需要遍历的结点个数，然后依次遍历结点，直至找到指定下标的Node。<br>从源码也可以看出来，<strong><em>LinkedList并不适合随机取数据</em></strong>，因为每次按照索引号随机取数据时，都需要依次遍历表</p>\n<h3 id=\"问题五：LinkedList是如何实现remove-int-index-方法的？\"><a href=\"#问题五：LinkedList是如何实现remove-int-index-方法的？\" class=\"headerlink\" title=\"问题五：LinkedList是如何实现remove(int index)方法的？\"></a>问题五：LinkedList是如何实现remove(int index)方法的？</h3><p>先看原理图：<br><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/20180401193913.png\" alt=\"双链表删除\" title=\"删除双链表中的结点\"><br>源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\tcheckElementIndex(index);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> unlink(node(index));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">unlink</span><span class=\"params\">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> E element = x.item;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Node&lt;E&gt; next = x.next;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* [===] ——&gt;  [===]  ——&gt; [===] </span></span><br><span class=\"line\"><span class=\"comment\">\t *  ||\t                   ||</span></span><br><span class=\"line\"><span class=\"comment\">\t * null         ×         first</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (prev == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tfirst = next;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tprev.next = next;</span><br><span class=\"line\">\t\tx.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/* [===] ——&gt;  [===]  ——&gt; [===] </span></span><br><span class=\"line\"><span class=\"comment\">\t *  ||                    ||</span></span><br><span class=\"line\"><span class=\"comment\">\t * last         ×         null  </span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tlast = prev;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tnext.prev = prev;</span><br><span class=\"line\">\t\tx.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tx.item = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\tsize--;</span><br><span class=\"line\">\tmodCount++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"问题六：LinkedList是如何实现set-int-index-E-element-方法的？\"><a href=\"#问题六：LinkedList是如何实现set-int-index-E-element-方法的？\" class=\"headerlink\" title=\"问题六：LinkedList是如何实现set(int index,E element)方法的？\"></a>问题六：LinkedList是如何实现set(int index,E element)方法的？</h3><p>set方法的实现相对简单，源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//把element设为新的item，返回原来的item</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">\tcheckElementIndex(index);</span><br><span class=\"line\">\tNode&lt;E&gt; x = node(index);</span><br><span class=\"line\">\tE oldVal = x.item;</span><br><span class=\"line\">\tx.item = element;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>作业：自己实现简单的单链表SingleLinkedList以及循环单/双链表CircularSingleLinkedList/CircularDoubleLinkedList<br>下回预告：数据结构与算法分析之Java中的栈</p>\n</blockquote>"},{"title":"Java集合框架源码阅读之栈Stack","date":"2018-04-02T06:36:12.000Z","updated":"2018-04-02T06:36:12.000Z","_content":">什么是栈？\n>栈是限制插入和删除只能在一个位置上进行的表，它是一个后进先出(last-in-first-out，LIFO)表\n\n本文是《Java集合框架源码阅读》系列的第三篇，我们来说说Java中的栈\n在Java Collections API中有一个类叫做java.util.Stack，它的继承结构如下：\n```java\npublic class Stack<E> extends Vector<E>\n```\n它是在java.util.Vector类的基础上扩展了5个方法而来的\n```java\npublic E push(E item)//进栈\npublic synchronized E pop()//出栈，返回栈顶元素并将其删除\npublic synchronized E peek()//取得栈顶元素（不删除）\npublic boolean empty()//判断是否为空栈\npublic synchronized int search(Object o)//详见问题四\n```\n<!--more-->\nStack本身是扩展Vector而来的，而Vector是一个可增长的对象数组（The Vector class implements a growable array of objects），那么这个数组的哪部分成为了Stack的栈顶和栈底呢？\n\n### 问题一：Stack的栈顶和栈底在哪里？\n我们先来观察peek()方法的源码：\n```java\npublic synchronized E peek() {\n\tint     len = size();\n\n\tif (len == 0)\n\t\tthrow new EmptyStackException();\n\treturn elementAt(len - 1);\n}\n```\n这里调用了父类Vector的elementAt(int index)方法\n```java\npublic synchronized E elementAt(int index) {\n\tif (index >= elementCount) {\n\t\tthrow new ArrayIndexOutOfBoundsException(index + \" >= \" + elementCount);\n\t}\n\n\treturn elementData(index);\n}\n@SuppressWarnings(\"unchecked\")\nE elementData(int index) {\n\treturn (E) elementData[index];\n}\n```\n通过观察以上源码，我们可以发现：调用peek()方法时，实际返回的是数组elementData的最后一位，也就是说，***Stack的栈顶为Vector中数组的末端***，相应的，数组起始端即为栈底\n事实上，在peek()方法的注释中也说明了这一点：return the object at the top of this stack (the last item of the Vector object).\n\n### 问题二：Stack如何实现进栈操作？\n源码如下：\n```java\npublic E push(E item) {\n\taddElement(item);\n\n\treturn item;\n}\n```\n此处调用了其父类Vector的addElement(E item)，源码如下：\n```java\nprotected Object[] elementData;//默认初始化容量为10\nprotected int elementCount;\nprotected int capacityIncrement;\npublic synchronized void addElement(E obj) {\n\tmodCount++;\n\tensureCapacityHelper(elementCount + 1);\n\telementData[elementCount++] = obj;\n}\nprivate void ensureCapacityHelper(int minCapacity) {\n\tif (minCapacity - elementData.length > 0)\n\t\tgrow(minCapacity);\n}\nprivate void grow(int minCapacity) {\n\tint oldCapacity = elementData.length;\n\t//默认的capacityIncrement为0，即默认扩容后新的容量为原来的两倍\n\tint newCapacity = oldCapacity + \n\t((capacityIncrement > 0) ? capacityIncrement : oldCapacity);\n\tif (newCapacity - minCapacity < 0)\n\t\tnewCapacity = minCapacity;\n\tif (newCapacity - MAX_ARRAY_SIZE > 0)\n\t\tnewCapacity = hugeCapacity(minCapacity);\n\telementData = Arrays.copyOf(elementData, newCapacity);\n}\nprivate static int hugeCapacity(int minCapacity) {\n\tif (minCapacity < 0) // overflow\n\t\tthrow new OutOfMemoryError();\n\treturn (minCapacity > MAX_ARRAY_SIZE) ?\n\t\tInteger.MAX_VALUE :\n\t\tMAX_ARRAY_SIZE;\n}\n```\n\n### 问题三：Stack如何实现出栈操作？\n源码如下：\n```java\npublic synchronized E pop() {\n\tE       obj;\n\tint     len = size();\n\n\tobj = peek();\n\tremoveElementAt(len - 1);\n\n\treturn obj;\n}\n```\n\n### 问题四：Stack中的search(Object o)方法返回的值表示什么意思？\n\nsearch(Object o)的源码（下面的注释是我从原方法注释中截取下来的）如下：\n```java\n//The equals method is used to compare o to the items in this stack.\n//return the 1-based position from the top of the stack where the object is located; \n//the return value -1 indicates that the object is not on the stack.\npublic synchronized int search(Object o) {\n\tint i = lastIndexOf(o);\n\n\tif (i >= 0) {\n\t\treturn size() - i;\n\t}\n\treturn -1;\n}\n```\n这里调用了父类Vector的lastIndexOf(Object o)方法，从数组的最后往前找（也即从栈顶往下依次查找），查找第一次出现的位置（因为栈中元素是可以重复的），若没找到该对象，返回-1，否则返回该对象和栈顶元素之间的距离，***返回值从1（表示所要查找的对象就是栈顶元素）开始***\n下面的示例让我们很容易明白search(Object o)到底要返回的是什么？\n```java\nStack<String> s = new Stack<>();\nfor(int i = 0 ;i < 10;i++) \n\ts.push(String.valueOf(i));\nSystem.out.println(\"栈顶元素：\"+s.peek());\nSystem.out.println(\"9到栈顶的距离：\"+s.search(\"9\"));\nSystem.out.println(\"0到栈顶的距离：\"+s.search(\"0\"));\nSystem.out.println(\"10到栈顶的距离：\"+s.search(\"10\"));\n```\n输出：\n```java\n栈顶元素：9\n9到栈顶的距离：1\n0到栈顶的距离：10\n10到栈顶的距离：-1\n\n```\n值得注意的是，***search(Object o)方法的查找是基于对象的equals方法进行，若泛型申明为自定义的类型，需要重写equals方法***\n\n### 栈的应用之配对问题\n***问题：***输入一串字符串，判断其中的括号是否配对（可以引申为判断字符串是否为json串，是否为算数表达式等等），例如，***[( )]***是配对的，而***[( ])]***就不配对\n***算法思想：***先判断输入的字符串是否为空串（null或者\"    \"等均认为是空串），若为空串则直接返回false。否则，实例化一个空栈。如果字符为(，[，{等开放符号，则让其进栈。如果字符为)，]，}等封闭符号，则当栈空时返回false。若栈不空，则判断栈顶字符是否为对应的开放字符，若不是，则返回false，否则继续判断下一个字符\n***代码示例如下：***\n```java\nimport java.util.Stack;\n\npublic class Main {\n\t\n\tpublic static boolean isMatch(String json) {\n\t\tif(isEmpty(json))\n\t\t\treturn false;\n\t\tchar[] charArray = json.toCharArray();\n\t\tStack<Character> s = new Stack<Character>();\n\t\tfor(char c : charArray) {\n\t\t\tif(c == '{' || c == '[' || c == '(')\n\t\t\t\ts.push(c);\n\t\t\telse if(c == '}') {\n\t\t\t\tif(isMatch0(s,'{'))\n\t\t\t\t\ts.pop();\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t\t\t\n\t\t\t} else if(c == ']') {\n\t\t\t\tif(isMatch0(s,'['))\n\t\t\t\t\ts.pop();\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t} else if(c == ')') {\n\t\t\t\tif(isMatch0(s,'('))\n\t\t\t\t\ts.pop();\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\t\n\t}\n\t//当栈空时返回false。\n\t//若栈不空，则判断栈顶字符是否为对应的开放字符，若不是，则返回false\n\tprivate static boolean isMatch0(Stack<?> s,char openChar) {\n\t\tif(s.empty() || (char)s.peek() != openChar)\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\t\n\tpublic static boolean isEmpty(String str) {\n\t\treturn str == null || str.trim().isEmpty();\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(isMatch(\"{[([asdfffffffffff])]}\"));\n\t\tSystem.out.println(isMatch(\"{][])99(}\"));\n\t}\n}\n```\n输出结果\n```java\ntrue\nfalse\n```\n\n> ***结语***\n> ***java.util.Stack的注释中写道：***A more complete and consistent set of LIFO stack operations is provided by the Deque interface and its implementations, which should be used in preference to this class. For example: Deque&lt;Integer&gt; stack = new ArrayDeque&lt;Integer&gt;();\n> 言下之意是相比Stack类，***双端队列Deque和它的实现类***具有更好的完整性和一致性，应该被优先使用\n\n* 下回预告：数据结构与算法分析之Java中的队列Queue\n","source":"_posts/java-collections-api-stack.md","raw":"---\ntitle: Java集合框架源码阅读之栈Stack\ndate: 2018-04-02 14:36:12\nupdated: 2018-04-02 14:36:12\ntags: java collections api\ncategories: java\n---\n>什么是栈？\n>栈是限制插入和删除只能在一个位置上进行的表，它是一个后进先出(last-in-first-out，LIFO)表\n\n本文是《Java集合框架源码阅读》系列的第三篇，我们来说说Java中的栈\n在Java Collections API中有一个类叫做java.util.Stack，它的继承结构如下：\n```java\npublic class Stack<E> extends Vector<E>\n```\n它是在java.util.Vector类的基础上扩展了5个方法而来的\n```java\npublic E push(E item)//进栈\npublic synchronized E pop()//出栈，返回栈顶元素并将其删除\npublic synchronized E peek()//取得栈顶元素（不删除）\npublic boolean empty()//判断是否为空栈\npublic synchronized int search(Object o)//详见问题四\n```\n<!--more-->\nStack本身是扩展Vector而来的，而Vector是一个可增长的对象数组（The Vector class implements a growable array of objects），那么这个数组的哪部分成为了Stack的栈顶和栈底呢？\n\n### 问题一：Stack的栈顶和栈底在哪里？\n我们先来观察peek()方法的源码：\n```java\npublic synchronized E peek() {\n\tint     len = size();\n\n\tif (len == 0)\n\t\tthrow new EmptyStackException();\n\treturn elementAt(len - 1);\n}\n```\n这里调用了父类Vector的elementAt(int index)方法\n```java\npublic synchronized E elementAt(int index) {\n\tif (index >= elementCount) {\n\t\tthrow new ArrayIndexOutOfBoundsException(index + \" >= \" + elementCount);\n\t}\n\n\treturn elementData(index);\n}\n@SuppressWarnings(\"unchecked\")\nE elementData(int index) {\n\treturn (E) elementData[index];\n}\n```\n通过观察以上源码，我们可以发现：调用peek()方法时，实际返回的是数组elementData的最后一位，也就是说，***Stack的栈顶为Vector中数组的末端***，相应的，数组起始端即为栈底\n事实上，在peek()方法的注释中也说明了这一点：return the object at the top of this stack (the last item of the Vector object).\n\n### 问题二：Stack如何实现进栈操作？\n源码如下：\n```java\npublic E push(E item) {\n\taddElement(item);\n\n\treturn item;\n}\n```\n此处调用了其父类Vector的addElement(E item)，源码如下：\n```java\nprotected Object[] elementData;//默认初始化容量为10\nprotected int elementCount;\nprotected int capacityIncrement;\npublic synchronized void addElement(E obj) {\n\tmodCount++;\n\tensureCapacityHelper(elementCount + 1);\n\telementData[elementCount++] = obj;\n}\nprivate void ensureCapacityHelper(int minCapacity) {\n\tif (minCapacity - elementData.length > 0)\n\t\tgrow(minCapacity);\n}\nprivate void grow(int minCapacity) {\n\tint oldCapacity = elementData.length;\n\t//默认的capacityIncrement为0，即默认扩容后新的容量为原来的两倍\n\tint newCapacity = oldCapacity + \n\t((capacityIncrement > 0) ? capacityIncrement : oldCapacity);\n\tif (newCapacity - minCapacity < 0)\n\t\tnewCapacity = minCapacity;\n\tif (newCapacity - MAX_ARRAY_SIZE > 0)\n\t\tnewCapacity = hugeCapacity(minCapacity);\n\telementData = Arrays.copyOf(elementData, newCapacity);\n}\nprivate static int hugeCapacity(int minCapacity) {\n\tif (minCapacity < 0) // overflow\n\t\tthrow new OutOfMemoryError();\n\treturn (minCapacity > MAX_ARRAY_SIZE) ?\n\t\tInteger.MAX_VALUE :\n\t\tMAX_ARRAY_SIZE;\n}\n```\n\n### 问题三：Stack如何实现出栈操作？\n源码如下：\n```java\npublic synchronized E pop() {\n\tE       obj;\n\tint     len = size();\n\n\tobj = peek();\n\tremoveElementAt(len - 1);\n\n\treturn obj;\n}\n```\n\n### 问题四：Stack中的search(Object o)方法返回的值表示什么意思？\n\nsearch(Object o)的源码（下面的注释是我从原方法注释中截取下来的）如下：\n```java\n//The equals method is used to compare o to the items in this stack.\n//return the 1-based position from the top of the stack where the object is located; \n//the return value -1 indicates that the object is not on the stack.\npublic synchronized int search(Object o) {\n\tint i = lastIndexOf(o);\n\n\tif (i >= 0) {\n\t\treturn size() - i;\n\t}\n\treturn -1;\n}\n```\n这里调用了父类Vector的lastIndexOf(Object o)方法，从数组的最后往前找（也即从栈顶往下依次查找），查找第一次出现的位置（因为栈中元素是可以重复的），若没找到该对象，返回-1，否则返回该对象和栈顶元素之间的距离，***返回值从1（表示所要查找的对象就是栈顶元素）开始***\n下面的示例让我们很容易明白search(Object o)到底要返回的是什么？\n```java\nStack<String> s = new Stack<>();\nfor(int i = 0 ;i < 10;i++) \n\ts.push(String.valueOf(i));\nSystem.out.println(\"栈顶元素：\"+s.peek());\nSystem.out.println(\"9到栈顶的距离：\"+s.search(\"9\"));\nSystem.out.println(\"0到栈顶的距离：\"+s.search(\"0\"));\nSystem.out.println(\"10到栈顶的距离：\"+s.search(\"10\"));\n```\n输出：\n```java\n栈顶元素：9\n9到栈顶的距离：1\n0到栈顶的距离：10\n10到栈顶的距离：-1\n\n```\n值得注意的是，***search(Object o)方法的查找是基于对象的equals方法进行，若泛型申明为自定义的类型，需要重写equals方法***\n\n### 栈的应用之配对问题\n***问题：***输入一串字符串，判断其中的括号是否配对（可以引申为判断字符串是否为json串，是否为算数表达式等等），例如，***[( )]***是配对的，而***[( ])]***就不配对\n***算法思想：***先判断输入的字符串是否为空串（null或者\"    \"等均认为是空串），若为空串则直接返回false。否则，实例化一个空栈。如果字符为(，[，{等开放符号，则让其进栈。如果字符为)，]，}等封闭符号，则当栈空时返回false。若栈不空，则判断栈顶字符是否为对应的开放字符，若不是，则返回false，否则继续判断下一个字符\n***代码示例如下：***\n```java\nimport java.util.Stack;\n\npublic class Main {\n\t\n\tpublic static boolean isMatch(String json) {\n\t\tif(isEmpty(json))\n\t\t\treturn false;\n\t\tchar[] charArray = json.toCharArray();\n\t\tStack<Character> s = new Stack<Character>();\n\t\tfor(char c : charArray) {\n\t\t\tif(c == '{' || c == '[' || c == '(')\n\t\t\t\ts.push(c);\n\t\t\telse if(c == '}') {\n\t\t\t\tif(isMatch0(s,'{'))\n\t\t\t\t\ts.pop();\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t\t\t\n\t\t\t} else if(c == ']') {\n\t\t\t\tif(isMatch0(s,'['))\n\t\t\t\t\ts.pop();\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t} else if(c == ')') {\n\t\t\t\tif(isMatch0(s,'('))\n\t\t\t\t\ts.pop();\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\t\n\t}\n\t//当栈空时返回false。\n\t//若栈不空，则判断栈顶字符是否为对应的开放字符，若不是，则返回false\n\tprivate static boolean isMatch0(Stack<?> s,char openChar) {\n\t\tif(s.empty() || (char)s.peek() != openChar)\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\t\n\tpublic static boolean isEmpty(String str) {\n\t\treturn str == null || str.trim().isEmpty();\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(isMatch(\"{[([asdfffffffffff])]}\"));\n\t\tSystem.out.println(isMatch(\"{][])99(}\"));\n\t}\n}\n```\n输出结果\n```java\ntrue\nfalse\n```\n\n> ***结语***\n> ***java.util.Stack的注释中写道：***A more complete and consistent set of LIFO stack operations is provided by the Deque interface and its implementations, which should be used in preference to this class. For example: Deque&lt;Integer&gt; stack = new ArrayDeque&lt;Integer&gt;();\n> 言下之意是相比Stack类，***双端队列Deque和它的实现类***具有更好的完整性和一致性，应该被优先使用\n\n* 下回预告：数据结构与算法分析之Java中的队列Queue\n","slug":"java-collections-api-stack","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9apg001ij1q098fusft2","content":"<blockquote>\n<p>什么是栈？<br>栈是限制插入和删除只能在一个位置上进行的表，它是一个后进先出(last-in-first-out，LIFO)表</p>\n</blockquote>\n<p>本文是《Java集合框架源码阅读》系列的第三篇，我们来说说Java中的栈<br>在Java Collections API中有一个类叫做java.util.Stack，它的继承结构如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Vector</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>它是在java.util.Vector类的基础上扩展了5个方法而来的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">push</span><span class=\"params\">(E item)</span><span class=\"comment\">//进栈</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title\">pop</span><span class=\"params\">()</span><span class=\"comment\">//出栈，返回栈顶元素并将其删除</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title\">peek</span><span class=\"params\">()</span><span class=\"comment\">//取得栈顶元素（不删除）</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">empty</span><span class=\"params\">()</span><span class=\"comment\">//判断是否为空栈</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(Object o)</span><span class=\"comment\">//详见问题四</span></span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>Stack本身是扩展Vector而来的，而Vector是一个可增长的对象数组（The Vector class implements a growable array of objects），那么这个数组的哪部分成为了Stack的栈顶和栈底呢？</p>\n<h3 id=\"问题一：Stack的栈顶和栈底在哪里？\"><a href=\"#问题一：Stack的栈顶和栈底在哪里？\" class=\"headerlink\" title=\"问题一：Stack的栈顶和栈底在哪里？\"></a>问题一：Stack的栈顶和栈底在哪里？</h3><p>我们先来观察peek()方法的源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>     len = size();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EmptyStackException();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> elementAt(len - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里调用了父类Vector的elementAt(int index)方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title\">elementAt</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (index &gt;= elementCount) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArrayIndexOutOfBoundsException(index + <span class=\"string\">\" &gt;= \"</span> + elementCount);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> elementData(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">elementData</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (E) elementData[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过观察以上源码，我们可以发现：调用peek()方法时，实际返回的是数组elementData的最后一位，也就是说，<strong><em>Stack的栈顶为Vector中数组的末端</em></strong>，相应的，数组起始端即为栈底<br>事实上，在peek()方法的注释中也说明了这一点：return the object at the top of this stack (the last item of the Vector object).</p>\n<h3 id=\"问题二：Stack如何实现进栈操作？\"><a href=\"#问题二：Stack如何实现进栈操作？\" class=\"headerlink\" title=\"问题二：Stack如何实现进栈操作？\"></a>问题二：Stack如何实现进栈操作？</h3><p>源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">push</span><span class=\"params\">(E item)</span> </span>&#123;</span><br><span class=\"line\">\taddElement(item);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> item;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此处调用了其父类Vector的addElement(E item)，源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Object[] elementData;<span class=\"comment\">//默认初始化容量为10</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> elementCount;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> capacityIncrement;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addElement</span><span class=\"params\">(E obj)</span> </span>&#123;</span><br><span class=\"line\">\tmodCount++;</span><br><span class=\"line\">\tensureCapacityHelper(elementCount + <span class=\"number\">1</span>);</span><br><span class=\"line\">\telementData[elementCount++] = obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityHelper</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tgrow(minCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">\t<span class=\"comment\">//默认的capacityIncrement为0，即默认扩容后新的容量为原来的两倍</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> newCapacity = oldCapacity + </span><br><span class=\"line\">\t((capacityIncrement &gt; <span class=\"number\">0</span>) ? capacityIncrement : oldCapacity);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tnewCapacity = minCapacity;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tnewCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">\telementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class=\"line\">\t\tInteger.MAX_VALUE :</span><br><span class=\"line\">\t\tMAX_ARRAY_SIZE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"问题三：Stack如何实现出栈操作？\"><a href=\"#问题三：Stack如何实现出栈操作？\" class=\"headerlink\" title=\"问题三：Stack如何实现出栈操作？\"></a>问题三：Stack如何实现出栈操作？</h3><p>源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tE       obj;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>     len = size();</span><br><span class=\"line\"></span><br><span class=\"line\">\tobj = peek();</span><br><span class=\"line\">\tremoveElementAt(len - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"问题四：Stack中的search-Object-o-方法返回的值表示什么意思？\"><a href=\"#问题四：Stack中的search-Object-o-方法返回的值表示什么意思？\" class=\"headerlink\" title=\"问题四：Stack中的search(Object o)方法返回的值表示什么意思？\"></a>问题四：Stack中的search(Object o)方法返回的值表示什么意思？</h3><p>search(Object o)的源码（下面的注释是我从原方法注释中截取下来的）如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//The equals method is used to compare o to the items in this stack.</span></span><br><span class=\"line\"><span class=\"comment\">//return the 1-based position from the top of the stack where the object is located; </span></span><br><span class=\"line\"><span class=\"comment\">//the return value -1 indicates that the object is not on the stack.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = lastIndexOf(o);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size() - i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里调用了父类Vector的lastIndexOf(Object o)方法，从数组的最后往前找（也即从栈顶往下依次查找），查找第一次出现的位置（因为栈中元素是可以重复的），若没找到该对象，返回-1，否则返回该对象和栈顶元素之间的距离，<strong><em>返回值从1（表示所要查找的对象就是栈顶元素）开始</em></strong><br>下面的示例让我们很容易明白search(Object o)到底要返回的是什么？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stack&lt;String&gt; s = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ;i &lt; <span class=\"number\">10</span>;i++) </span><br><span class=\"line\">\ts.push(String.valueOf(i));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"栈顶元素：\"</span>+s.peek());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"9到栈顶的距离：\"</span>+s.search(<span class=\"string\">\"9\"</span>));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"0到栈顶的距离：\"</span>+s.search(<span class=\"string\">\"0\"</span>));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"10到栈顶的距离：\"</span>+s.search(<span class=\"string\">\"10\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">栈顶元素：<span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">9</span>到栈顶的距离：<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0</span>到栈顶的距离：<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">10</span>到栈顶的距离：-<span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>值得注意的是，<strong><em>search(Object o)方法的查找是基于对象的equals方法进行，若泛型申明为自定义的类型，需要重写equals方法</em></strong></p>\n<h3 id=\"栈的应用之配对问题\"><a href=\"#栈的应用之配对问题\" class=\"headerlink\" title=\"栈的应用之配对问题\"></a>栈的应用之配对问题</h3><p><strong><em>问题：</em></strong>输入一串字符串，判断其中的括号是否配对（可以引申为判断字符串是否为json串，是否为算数表达式等等），例如，<strong><em>[( )]</em></strong>是配对的，而<strong><em>[( ])]</em></strong>就不配对<br><strong><em>算法思想：</em></strong>先判断输入的字符串是否为空串（null或者”    “等均认为是空串），若为空串则直接返回false。否则，实例化一个空栈。如果字符为(，[，{等开放符号，则让其进栈。如果字符为)，]，}等封闭符号，则当栈空时返回false。若栈不空，则判断栈顶字符是否为对应的开放字符，若不是，则返回false，否则继续判断下一个字符<br><strong><em>代码示例如下：</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch</span><span class=\"params\">(String json)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty(json))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] charArray = json.toCharArray();</span><br><span class=\"line\">\t\tStack&lt;Character&gt; s = <span class=\"keyword\">new</span> Stack&lt;Character&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> c : charArray) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(c == <span class=\"string\">'&#123;'</span> || c == <span class=\"string\">'['</span> || c == <span class=\"string\">'('</span>)</span><br><span class=\"line\">\t\t\t\ts.push(c);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">'&#125;'</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(isMatch0(s,<span class=\"string\">'&#123;'</span>))</span><br><span class=\"line\">\t\t\t\t\ts.pop();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">']'</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(isMatch0(s,<span class=\"string\">'['</span>))</span><br><span class=\"line\">\t\t\t\t\ts.pop();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(isMatch0(s,<span class=\"string\">'('</span>))</span><br><span class=\"line\">\t\t\t\t\ts.pop();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//当栈空时返回false。</span></span><br><span class=\"line\">\t<span class=\"comment\">//若栈不空，则判断栈顶字符是否为对应的开放字符，若不是，则返回false</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch0</span><span class=\"params\">(Stack&lt;?&gt; s,<span class=\"keyword\">char</span> openChar)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s.empty() || (<span class=\"keyword\">char</span>)s.peek() != openChar)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str == <span class=\"keyword\">null</span> || str.trim().isEmpty();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(isMatch(<span class=\"string\">\"&#123;[([asdfffffffffff])]&#125;\"</span>));</span><br><span class=\"line\">\t\tSystem.out.println(isMatch(<span class=\"string\">\"&#123;][])99(&#125;\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong><em>结语</em></strong><br><strong><em>java.util.Stack的注释中写道：</em></strong>A more complete and consistent set of LIFO stack operations is provided by the Deque interface and its implementations, which should be used in preference to this class. For example: Deque&lt;Integer&gt; stack = new ArrayDeque&lt;Integer&gt;();<br>言下之意是相比Stack类，<strong><em>双端队列Deque和它的实现类</em></strong>具有更好的完整性和一致性，应该被优先使用</p>\n</blockquote>\n<ul>\n<li>下回预告：数据结构与算法分析之Java中的队列Queue</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>什么是栈？<br>栈是限制插入和删除只能在一个位置上进行的表，它是一个后进先出(last-in-first-out，LIFO)表</p>\n</blockquote>\n<p>本文是《Java集合框架源码阅读》系列的第三篇，我们来说说Java中的栈<br>在Java Collections API中有一个类叫做java.util.Stack，它的继承结构如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Vector</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>它是在java.util.Vector类的基础上扩展了5个方法而来的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">push</span><span class=\"params\">(E item)</span><span class=\"comment\">//进栈</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title\">pop</span><span class=\"params\">()</span><span class=\"comment\">//出栈，返回栈顶元素并将其删除</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title\">peek</span><span class=\"params\">()</span><span class=\"comment\">//取得栈顶元素（不删除）</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">empty</span><span class=\"params\">()</span><span class=\"comment\">//判断是否为空栈</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(Object o)</span><span class=\"comment\">//详见问题四</span></span></span><br></pre></td></tr></table></figure></p>","more":"<p>Stack本身是扩展Vector而来的，而Vector是一个可增长的对象数组（The Vector class implements a growable array of objects），那么这个数组的哪部分成为了Stack的栈顶和栈底呢？</p>\n<h3 id=\"问题一：Stack的栈顶和栈底在哪里？\"><a href=\"#问题一：Stack的栈顶和栈底在哪里？\" class=\"headerlink\" title=\"问题一：Stack的栈顶和栈底在哪里？\"></a>问题一：Stack的栈顶和栈底在哪里？</h3><p>我们先来观察peek()方法的源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>     len = size();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EmptyStackException();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> elementAt(len - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里调用了父类Vector的elementAt(int index)方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title\">elementAt</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (index &gt;= elementCount) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArrayIndexOutOfBoundsException(index + <span class=\"string\">\" &gt;= \"</span> + elementCount);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> elementData(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">elementData</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (E) elementData[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过观察以上源码，我们可以发现：调用peek()方法时，实际返回的是数组elementData的最后一位，也就是说，<strong><em>Stack的栈顶为Vector中数组的末端</em></strong>，相应的，数组起始端即为栈底<br>事实上，在peek()方法的注释中也说明了这一点：return the object at the top of this stack (the last item of the Vector object).</p>\n<h3 id=\"问题二：Stack如何实现进栈操作？\"><a href=\"#问题二：Stack如何实现进栈操作？\" class=\"headerlink\" title=\"问题二：Stack如何实现进栈操作？\"></a>问题二：Stack如何实现进栈操作？</h3><p>源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">push</span><span class=\"params\">(E item)</span> </span>&#123;</span><br><span class=\"line\">\taddElement(item);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> item;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此处调用了其父类Vector的addElement(E item)，源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Object[] elementData;<span class=\"comment\">//默认初始化容量为10</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> elementCount;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> capacityIncrement;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addElement</span><span class=\"params\">(E obj)</span> </span>&#123;</span><br><span class=\"line\">\tmodCount++;</span><br><span class=\"line\">\tensureCapacityHelper(elementCount + <span class=\"number\">1</span>);</span><br><span class=\"line\">\telementData[elementCount++] = obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityHelper</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tgrow(minCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">\t<span class=\"comment\">//默认的capacityIncrement为0，即默认扩容后新的容量为原来的两倍</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> newCapacity = oldCapacity + </span><br><span class=\"line\">\t((capacityIncrement &gt; <span class=\"number\">0</span>) ? capacityIncrement : oldCapacity);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tnewCapacity = minCapacity;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tnewCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">\telementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class=\"line\">\t\tInteger.MAX_VALUE :</span><br><span class=\"line\">\t\tMAX_ARRAY_SIZE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"问题三：Stack如何实现出栈操作？\"><a href=\"#问题三：Stack如何实现出栈操作？\" class=\"headerlink\" title=\"问题三：Stack如何实现出栈操作？\"></a>问题三：Stack如何实现出栈操作？</h3><p>源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tE       obj;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>     len = size();</span><br><span class=\"line\"></span><br><span class=\"line\">\tobj = peek();</span><br><span class=\"line\">\tremoveElementAt(len - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"问题四：Stack中的search-Object-o-方法返回的值表示什么意思？\"><a href=\"#问题四：Stack中的search-Object-o-方法返回的值表示什么意思？\" class=\"headerlink\" title=\"问题四：Stack中的search(Object o)方法返回的值表示什么意思？\"></a>问题四：Stack中的search(Object o)方法返回的值表示什么意思？</h3><p>search(Object o)的源码（下面的注释是我从原方法注释中截取下来的）如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//The equals method is used to compare o to the items in this stack.</span></span><br><span class=\"line\"><span class=\"comment\">//return the 1-based position from the top of the stack where the object is located; </span></span><br><span class=\"line\"><span class=\"comment\">//the return value -1 indicates that the object is not on the stack.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = lastIndexOf(o);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> size() - i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里调用了父类Vector的lastIndexOf(Object o)方法，从数组的最后往前找（也即从栈顶往下依次查找），查找第一次出现的位置（因为栈中元素是可以重复的），若没找到该对象，返回-1，否则返回该对象和栈顶元素之间的距离，<strong><em>返回值从1（表示所要查找的对象就是栈顶元素）开始</em></strong><br>下面的示例让我们很容易明白search(Object o)到底要返回的是什么？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stack&lt;String&gt; s = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ;i &lt; <span class=\"number\">10</span>;i++) </span><br><span class=\"line\">\ts.push(String.valueOf(i));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"栈顶元素：\"</span>+s.peek());</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"9到栈顶的距离：\"</span>+s.search(<span class=\"string\">\"9\"</span>));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"0到栈顶的距离：\"</span>+s.search(<span class=\"string\">\"0\"</span>));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"10到栈顶的距离：\"</span>+s.search(<span class=\"string\">\"10\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">栈顶元素：<span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">9</span>到栈顶的距离：<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0</span>到栈顶的距离：<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">10</span>到栈顶的距离：-<span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>值得注意的是，<strong><em>search(Object o)方法的查找是基于对象的equals方法进行，若泛型申明为自定义的类型，需要重写equals方法</em></strong></p>\n<h3 id=\"栈的应用之配对问题\"><a href=\"#栈的应用之配对问题\" class=\"headerlink\" title=\"栈的应用之配对问题\"></a>栈的应用之配对问题</h3><p><strong><em>问题：</em></strong>输入一串字符串，判断其中的括号是否配对（可以引申为判断字符串是否为json串，是否为算数表达式等等），例如，<strong><em>[( )]</em></strong>是配对的，而<strong><em>[( ])]</em></strong>就不配对<br><strong><em>算法思想：</em></strong>先判断输入的字符串是否为空串（null或者”    “等均认为是空串），若为空串则直接返回false。否则，实例化一个空栈。如果字符为(，[，{等开放符号，则让其进栈。如果字符为)，]，}等封闭符号，则当栈空时返回false。若栈不空，则判断栈顶字符是否为对应的开放字符，若不是，则返回false，否则继续判断下一个字符<br><strong><em>代码示例如下：</em></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch</span><span class=\"params\">(String json)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty(json))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] charArray = json.toCharArray();</span><br><span class=\"line\">\t\tStack&lt;Character&gt; s = <span class=\"keyword\">new</span> Stack&lt;Character&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> c : charArray) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(c == <span class=\"string\">'&#123;'</span> || c == <span class=\"string\">'['</span> || c == <span class=\"string\">'('</span>)</span><br><span class=\"line\">\t\t\t\ts.push(c);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">'&#125;'</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(isMatch0(s,<span class=\"string\">'&#123;'</span>))</span><br><span class=\"line\">\t\t\t\t\ts.pop();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">']'</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(isMatch0(s,<span class=\"string\">'['</span>))</span><br><span class=\"line\">\t\t\t\t\ts.pop();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c == <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(isMatch0(s,<span class=\"string\">'('</span>))</span><br><span class=\"line\">\t\t\t\t\ts.pop();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//当栈空时返回false。</span></span><br><span class=\"line\">\t<span class=\"comment\">//若栈不空，则判断栈顶字符是否为对应的开放字符，若不是，则返回false</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch0</span><span class=\"params\">(Stack&lt;?&gt; s,<span class=\"keyword\">char</span> openChar)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s.empty() || (<span class=\"keyword\">char</span>)s.peek() != openChar)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str == <span class=\"keyword\">null</span> || str.trim().isEmpty();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(isMatch(<span class=\"string\">\"&#123;[([asdfffffffffff])]&#125;\"</span>));</span><br><span class=\"line\">\t\tSystem.out.println(isMatch(<span class=\"string\">\"&#123;][])99(&#125;\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong><em>结语</em></strong><br><strong><em>java.util.Stack的注释中写道：</em></strong>A more complete and consistent set of LIFO stack operations is provided by the Deque interface and its implementations, which should be used in preference to this class. For example: Deque&lt;Integer&gt; stack = new ArrayDeque&lt;Integer&gt;();<br>言下之意是相比Stack类，<strong><em>双端队列Deque和它的实现类</em></strong>具有更好的完整性和一致性，应该被优先使用</p>\n</blockquote>\n<ul>\n<li>下回预告：数据结构与算法分析之Java中的队列Queue</li>\n</ul>"},{"title":"Java中的异常处理","date":"2019-01-17T11:24:16.000Z","_content":"\nJava异常处理\n<!--more-->\n\n### 异常分类\n\n​\t在Java中，所有的异常都是继承自Throwable。\n\nJava中的异常层次结构\n\n​\t派生于Error类或RuntimeException类的所有异常称为非受查（unchecked）异常，所有其他异常称为受查（check）异常。\n\n### 声明异常\n\n​\t方法应该在其首部声明所有可能抛出的异常。语法如下：\n\n```java\npublic FileInputStream(String name) throws FileNotFoundException\n```\n\n\n\n### 抛出异常\n\n\n\n### 创建异常\n\n\n\n### 捕获异常\n\n\n\n### finally子句\n\n\n\n### 带资源的try语句\n\n\n\n ","source":"_posts/java-exception-handle.md","raw":"---\ntitle: Java中的异常处理\ndate: 2019-01-17 19:24:16\ntags: java\ncategories: java\n---\n\nJava异常处理\n<!--more-->\n\n### 异常分类\n\n​\t在Java中，所有的异常都是继承自Throwable。\n\nJava中的异常层次结构\n\n​\t派生于Error类或RuntimeException类的所有异常称为非受查（unchecked）异常，所有其他异常称为受查（check）异常。\n\n### 声明异常\n\n​\t方法应该在其首部声明所有可能抛出的异常。语法如下：\n\n```java\npublic FileInputStream(String name) throws FileNotFoundException\n```\n\n\n\n### 抛出异常\n\n\n\n### 创建异常\n\n\n\n### 捕获异常\n\n\n\n### finally子句\n\n\n\n### 带资源的try语句\n\n\n\n ","slug":"java-exception-handle","published":1,"updated":"2019-01-19T07:23:57.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aph001jj1q06ed2etz3","content":"<p>Java异常处理<br><a id=\"more\"></a></p>\n<h3 id=\"异常分类\"><a href=\"#异常分类\" class=\"headerlink\" title=\"异常分类\"></a>异常分类</h3><p>​    在Java中，所有的异常都是继承自Throwable。</p>\n<p>Java中的异常层次结构</p>\n<p>​    派生于Error类或RuntimeException类的所有异常称为非受查（unchecked）异常，所有其他异常称为受查（check）异常。</p>\n<h3 id=\"声明异常\"><a href=\"#声明异常\" class=\"headerlink\" title=\"声明异常\"></a>声明异常</h3><p>​    方法应该在其首部声明所有可能抛出的异常。语法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FileInputStream</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> FileNotFoundException</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a>抛出异常</h3><h3 id=\"创建异常\"><a href=\"#创建异常\" class=\"headerlink\" title=\"创建异常\"></a>创建异常</h3><h3 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h3><h3 id=\"finally子句\"><a href=\"#finally子句\" class=\"headerlink\" title=\"finally子句\"></a>finally子句</h3><h3 id=\"带资源的try语句\"><a href=\"#带资源的try语句\" class=\"headerlink\" title=\"带资源的try语句\"></a>带资源的try语句</h3>","site":{"data":{}},"excerpt":"<p>Java异常处理<br>","more":"</p>\n<h3 id=\"异常分类\"><a href=\"#异常分类\" class=\"headerlink\" title=\"异常分类\"></a>异常分类</h3><p>​    在Java中，所有的异常都是继承自Throwable。</p>\n<p>Java中的异常层次结构</p>\n<p>​    派生于Error类或RuntimeException类的所有异常称为非受查（unchecked）异常，所有其他异常称为受查（check）异常。</p>\n<h3 id=\"声明异常\"><a href=\"#声明异常\" class=\"headerlink\" title=\"声明异常\"></a>声明异常</h3><p>​    方法应该在其首部声明所有可能抛出的异常。语法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FileInputStream</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> FileNotFoundException</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a>抛出异常</h3><h3 id=\"创建异常\"><a href=\"#创建异常\" class=\"headerlink\" title=\"创建异常\"></a>创建异常</h3><h3 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h3><h3 id=\"finally子句\"><a href=\"#finally子句\" class=\"headerlink\" title=\"finally子句\"></a>finally子句</h3><h3 id=\"带资源的try语句\"><a href=\"#带资源的try语句\" class=\"headerlink\" title=\"带资源的try语句\"></a>带资源的try语句</h3>"},{"title":"Java中的枚举类型","date":"2018-08-20T04:15:33.000Z","_content":"\n枚举类的主要作用是便捷地定义静态常量，替代public static final xxx。\n\n所有的枚举类型都是java.lang.Enum类的子类，java.lang.Enum的类结构如下：\n\n```java\npublic abstract class Enum<E extends Enum<E>> \nimplements Comparable<E>, Serializable\n```\n\n方法列表：\n\n```java\npublic final String name();\npublic String toString();\npublic static Enum valueOf(Class enumClass,String name);\npublic final int ordinal();\n```\n\n<!--more-->\n\n枚举类型的一个简单的例子：\n\n```java\nenum Week {\n\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;\n}\n```\n\n事实上，上面定义了一个类，它只有七个实例，这些实例**只能在其他代码之前定义**，并以封号结束。\n\n如果需要的话，可以在枚举类型中添加一些构造器、方法和域。不过，**枚举类型只能包含私有构造**，且构造器只在构造枚举常量的时候被调用。\n\n```java\nenum Week {\n    //只能在其他代码之前定义\n    MONDAY(1),TUESDAY(2),WEDNESDAY(3),\n    THURSDAY(4),FRIDAY(5),SATURDAY(6),SUNDAY(7); \n    private int day;\n    //只在构造枚举常量的时候被调用\n    private Week(int day) {\n        this.day = day;\n    }\n    public int getDay() {\n        return day;\n    }\n}\n```\n\n### name()\n\n方法描述：返回枚举常量名。\n\n```java\nenum Week {\n\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;\n}\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(Week.MONDAY.name());\n    }\n}\n```\n\n输出结果：\n\n```java\nMONDAY\n```\n\n### toString()\n\n方法描述：返回枚举常量名。\n\n```java\nenum Week {\n\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;\n}\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(Week.MONDAY.toString());\n    }\n}\n```\n\n输出结果：\n\n```java\nMONDAY\n```\n\n通过查看源码，可以看到，toString()方法返回的是name属性。\n\n```java\npublic String toString() {\n    return name;\n}\n```\n\n### valueOf()\n\n```java\npublic static Enum valueOf(Class enumClass,String name);\n```\n\n方法描述：返回指定名字、给定类的枚举常量\n\n```java\nenum Week {\n\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;\n}\npublic class Main {\n    public static void main(String[] args) {\n        Week week = Enum.valueOf(Week.class,\"FRIDAY\");\n        System.out.println(week);\n    }\n}\n```\n\n输出结果：\n\n```java\nFRIDAY\n```\n\n### ordinal()\n\n方法描述：返回枚举常量在enum中声明的位置，位置从0开始计数。\n\n```java\nenum Week {\n\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;\n}\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(Week.THURSDAY.ordinal());\n    }\n}\n```\n\n输出结果：\n\n```java\n3\n```\n\n正如这个方法注释中描述的那样，\n\n```html\nMost programmers will have no use for this method. \nIt is designed for use by sophisticated enum-based data structures,\nsuch as java.util.EnumSet and java.util.EnumMap.\n```\n\n大多数程序员**用不到这个方法**，它是为EnumSet和EnumMap这些基于枚举的复杂数据结构设计的。\n\n### values()\n\n每个枚举类都有一个静态方法values()，它返回一个包含全部枚举值的数组。\n\n示例：\n\n```java\nenum Week {\n\tMONDAY(1),TUESDAY(2),WEDNESDAY(3),\n    THURSDAY(4),FRIDAY(5),SATURDAY(6),SUNDAY(7);\n\tprivate int day;\n\tprivate Week(int day) {\n\t\tthis.day = day;\n\t}\n    public int getDay() {\n        return day;\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        Week[] weeks = Week.values();\n        StringBuilder sb = new StringBuilder();\n        for(Week week : weeks) {            \n        \tsb.append(week.getDay()+\" \");\n        }\n        System.out.println(sb);\n    }\n}\n```\n\n输出结果：\n\n```java\n1 2 3 4 5 6 7 \n```\n\n### equals()和==\n\n在比较两个枚举类型的值时，不需要调用equals，可以直接使用“==”。\n\n查看源码，可以知道，Enum类的equals也是直接使用的\"==\"来比较。\n\n```java\npublic final boolean equals(Object other) {\n    return this==other;\n}\n```","source":"_posts/java-enum.md","raw":"---\ntitle: Java中的枚举类型\ndate: 2018-08-20 12:15:33\ntags: java\ncategories: java\n---\n\n枚举类的主要作用是便捷地定义静态常量，替代public static final xxx。\n\n所有的枚举类型都是java.lang.Enum类的子类，java.lang.Enum的类结构如下：\n\n```java\npublic abstract class Enum<E extends Enum<E>> \nimplements Comparable<E>, Serializable\n```\n\n方法列表：\n\n```java\npublic final String name();\npublic String toString();\npublic static Enum valueOf(Class enumClass,String name);\npublic final int ordinal();\n```\n\n<!--more-->\n\n枚举类型的一个简单的例子：\n\n```java\nenum Week {\n\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;\n}\n```\n\n事实上，上面定义了一个类，它只有七个实例，这些实例**只能在其他代码之前定义**，并以封号结束。\n\n如果需要的话，可以在枚举类型中添加一些构造器、方法和域。不过，**枚举类型只能包含私有构造**，且构造器只在构造枚举常量的时候被调用。\n\n```java\nenum Week {\n    //只能在其他代码之前定义\n    MONDAY(1),TUESDAY(2),WEDNESDAY(3),\n    THURSDAY(4),FRIDAY(5),SATURDAY(6),SUNDAY(7); \n    private int day;\n    //只在构造枚举常量的时候被调用\n    private Week(int day) {\n        this.day = day;\n    }\n    public int getDay() {\n        return day;\n    }\n}\n```\n\n### name()\n\n方法描述：返回枚举常量名。\n\n```java\nenum Week {\n\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;\n}\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(Week.MONDAY.name());\n    }\n}\n```\n\n输出结果：\n\n```java\nMONDAY\n```\n\n### toString()\n\n方法描述：返回枚举常量名。\n\n```java\nenum Week {\n\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;\n}\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(Week.MONDAY.toString());\n    }\n}\n```\n\n输出结果：\n\n```java\nMONDAY\n```\n\n通过查看源码，可以看到，toString()方法返回的是name属性。\n\n```java\npublic String toString() {\n    return name;\n}\n```\n\n### valueOf()\n\n```java\npublic static Enum valueOf(Class enumClass,String name);\n```\n\n方法描述：返回指定名字、给定类的枚举常量\n\n```java\nenum Week {\n\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;\n}\npublic class Main {\n    public static void main(String[] args) {\n        Week week = Enum.valueOf(Week.class,\"FRIDAY\");\n        System.out.println(week);\n    }\n}\n```\n\n输出结果：\n\n```java\nFRIDAY\n```\n\n### ordinal()\n\n方法描述：返回枚举常量在enum中声明的位置，位置从0开始计数。\n\n```java\nenum Week {\n\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;\n}\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(Week.THURSDAY.ordinal());\n    }\n}\n```\n\n输出结果：\n\n```java\n3\n```\n\n正如这个方法注释中描述的那样，\n\n```html\nMost programmers will have no use for this method. \nIt is designed for use by sophisticated enum-based data structures,\nsuch as java.util.EnumSet and java.util.EnumMap.\n```\n\n大多数程序员**用不到这个方法**，它是为EnumSet和EnumMap这些基于枚举的复杂数据结构设计的。\n\n### values()\n\n每个枚举类都有一个静态方法values()，它返回一个包含全部枚举值的数组。\n\n示例：\n\n```java\nenum Week {\n\tMONDAY(1),TUESDAY(2),WEDNESDAY(3),\n    THURSDAY(4),FRIDAY(5),SATURDAY(6),SUNDAY(7);\n\tprivate int day;\n\tprivate Week(int day) {\n\t\tthis.day = day;\n\t}\n    public int getDay() {\n        return day;\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        Week[] weeks = Week.values();\n        StringBuilder sb = new StringBuilder();\n        for(Week week : weeks) {            \n        \tsb.append(week.getDay()+\" \");\n        }\n        System.out.println(sb);\n    }\n}\n```\n\n输出结果：\n\n```java\n1 2 3 4 5 6 7 \n```\n\n### equals()和==\n\n在比较两个枚举类型的值时，不需要调用equals，可以直接使用“==”。\n\n查看源码，可以知道，Enum类的equals也是直接使用的\"==\"来比较。\n\n```java\npublic final boolean equals(Object other) {\n    return this==other;\n}\n```","slug":"java-enum","published":1,"updated":"2019-01-19T07:23:57.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9apj001nj1q0l72d6ppj","content":"<p>枚举类的主要作用是便捷地定义静态常量，替代public static final xxx。</p>\n<p>所有的枚举类型都是java.lang.Enum类的子类，java.lang.Enum的类结构如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Enum</span>&lt;<span class=\"title\">E</span> <span class=\"keyword\">extends</span> <span class=\"title\">Enum</span>&lt;<span class=\"title\">E</span>&gt;&gt; </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Serializable</span></span></span><br></pre></td></tr></table></figure>\n<p>方法列表：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">name</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Enum <span class=\"title\">valueOf</span><span class=\"params\">(Class enumClass,String name)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">ordinal</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>枚举类型的一个简单的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Week &#123;</span><br><span class=\"line\">\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事实上，上面定义了一个类，它只有七个实例，这些实例<strong>只能在其他代码之前定义</strong>，并以封号结束。</p>\n<p>如果需要的话，可以在枚举类型中添加一些构造器、方法和域。不过，<strong>枚举类型只能包含私有构造</strong>，且构造器只在构造枚举常量的时候被调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Week &#123;</span><br><span class=\"line\">    <span class=\"comment\">//只能在其他代码之前定义</span></span><br><span class=\"line\">    MONDAY(<span class=\"number\">1</span>),TUESDAY(<span class=\"number\">2</span>),WEDNESDAY(<span class=\"number\">3</span>),</span><br><span class=\"line\">    THURSDAY(<span class=\"number\">4</span>),FRIDAY(<span class=\"number\">5</span>),SATURDAY(<span class=\"number\">6</span>),SUNDAY(<span class=\"number\">7</span>); </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> day;</span><br><span class=\"line\">    <span class=\"comment\">//只在构造枚举常量的时候被调用</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Week</span><span class=\"params\">(<span class=\"keyword\">int</span> day)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.day = day;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getDay</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> day;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name()\"></a>name()</h3><p>方法描述：返回枚举常量名。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Week &#123;</span><br><span class=\"line\">\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(Week.MONDAY.name());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MONDAY</span><br></pre></td></tr></table></figure>\n<h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h3><p>方法描述：返回枚举常量名。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Week &#123;</span><br><span class=\"line\">\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(Week.MONDAY.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MONDAY</span><br></pre></td></tr></table></figure>\n<p>通过查看源码，可以看到，toString()方法返回的是name属性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"valueOf-NaN\"><a href=\"#valueOf-NaN\" class=\"headerlink\" title=\"valueOf()\"></a>valueOf()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Enum <span class=\"title\">valueOf</span><span class=\"params\">(Class enumClass,String name)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>方法描述：返回指定名字、给定类的枚举常量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Week &#123;</span><br><span class=\"line\">\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Week week = Enum.valueOf(Week.class,<span class=\"string\">\"FRIDAY\"</span>);</span><br><span class=\"line\">        System.out.println(week);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FRIDAY</span><br></pre></td></tr></table></figure>\n<h3 id=\"ordinal\"><a href=\"#ordinal\" class=\"headerlink\" title=\"ordinal()\"></a>ordinal()</h3><p>方法描述：返回枚举常量在enum中声明的位置，位置从0开始计数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Week &#123;</span><br><span class=\"line\">\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(Week.THURSDAY.ordinal());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>正如这个方法注释中描述的那样，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Most programmers will have no use for this method. </span><br><span class=\"line\">It is designed for use by sophisticated enum-based data structures,</span><br><span class=\"line\">such as java.util.EnumSet and java.util.EnumMap.</span><br></pre></td></tr></table></figure>\n<p>大多数程序员<strong>用不到这个方法</strong>，它是为EnumSet和EnumMap这些基于枚举的复杂数据结构设计的。</p>\n<h3 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values()\"></a>values()</h3><p>每个枚举类都有一个静态方法values()，它返回一个包含全部枚举值的数组。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Week &#123;</span><br><span class=\"line\">\tMONDAY(<span class=\"number\">1</span>),TUESDAY(<span class=\"number\">2</span>),WEDNESDAY(<span class=\"number\">3</span>),</span><br><span class=\"line\">    THURSDAY(<span class=\"number\">4</span>),FRIDAY(<span class=\"number\">5</span>),SATURDAY(<span class=\"number\">6</span>),SUNDAY(<span class=\"number\">7</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> day;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Week</span><span class=\"params\">(<span class=\"keyword\">int</span> day)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.day = day;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getDay</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> day;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Week[] weeks = Week.values();</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Week week : weeks) &#123;            </span><br><span class=\"line\">        \tsb.append(week.getDay()+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sb);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"equals-和\"><a href=\"#equals-和\" class=\"headerlink\" title=\"equals()和==\"></a>equals()和==</h3><p>在比较两个枚举类型的值时，不需要调用equals，可以直接使用“==”。</p>\n<p>查看源码，可以知道，Enum类的equals也是直接使用的”==”来比较。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object other)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>==other;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>枚举类的主要作用是便捷地定义静态常量，替代public static final xxx。</p>\n<p>所有的枚举类型都是java.lang.Enum类的子类，java.lang.Enum的类结构如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Enum</span>&lt;<span class=\"title\">E</span> <span class=\"keyword\">extends</span> <span class=\"title\">Enum</span>&lt;<span class=\"title\">E</span>&gt;&gt; </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Serializable</span></span></span><br></pre></td></tr></table></figure>\n<p>方法列表：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">name</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Enum <span class=\"title\">valueOf</span><span class=\"params\">(Class enumClass,String name)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">ordinal</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>","more":"<p>枚举类型的一个简单的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Week &#123;</span><br><span class=\"line\">\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事实上，上面定义了一个类，它只有七个实例，这些实例<strong>只能在其他代码之前定义</strong>，并以封号结束。</p>\n<p>如果需要的话，可以在枚举类型中添加一些构造器、方法和域。不过，<strong>枚举类型只能包含私有构造</strong>，且构造器只在构造枚举常量的时候被调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Week &#123;</span><br><span class=\"line\">    <span class=\"comment\">//只能在其他代码之前定义</span></span><br><span class=\"line\">    MONDAY(<span class=\"number\">1</span>),TUESDAY(<span class=\"number\">2</span>),WEDNESDAY(<span class=\"number\">3</span>),</span><br><span class=\"line\">    THURSDAY(<span class=\"number\">4</span>),FRIDAY(<span class=\"number\">5</span>),SATURDAY(<span class=\"number\">6</span>),SUNDAY(<span class=\"number\">7</span>); </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> day;</span><br><span class=\"line\">    <span class=\"comment\">//只在构造枚举常量的时候被调用</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Week</span><span class=\"params\">(<span class=\"keyword\">int</span> day)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.day = day;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getDay</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> day;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name()\"></a>name()</h3><p>方法描述：返回枚举常量名。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Week &#123;</span><br><span class=\"line\">\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(Week.MONDAY.name());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MONDAY</span><br></pre></td></tr></table></figure>\n<h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h3><p>方法描述：返回枚举常量名。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Week &#123;</span><br><span class=\"line\">\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(Week.MONDAY.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MONDAY</span><br></pre></td></tr></table></figure>\n<p>通过查看源码，可以看到，toString()方法返回的是name属性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"valueOf-NaN\"><a href=\"#valueOf-NaN\" class=\"headerlink\" title=\"valueOf()\"></a>valueOf()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Enum <span class=\"title\">valueOf</span><span class=\"params\">(Class enumClass,String name)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>方法描述：返回指定名字、给定类的枚举常量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Week &#123;</span><br><span class=\"line\">\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Week week = Enum.valueOf(Week.class,<span class=\"string\">\"FRIDAY\"</span>);</span><br><span class=\"line\">        System.out.println(week);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FRIDAY</span><br></pre></td></tr></table></figure>\n<h3 id=\"ordinal\"><a href=\"#ordinal\" class=\"headerlink\" title=\"ordinal()\"></a>ordinal()</h3><p>方法描述：返回枚举常量在enum中声明的位置，位置从0开始计数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Week &#123;</span><br><span class=\"line\">\tMONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(Week.THURSDAY.ordinal());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>正如这个方法注释中描述的那样，</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Most programmers will have no use for this method. </span><br><span class=\"line\">It is designed for use by sophisticated enum-based data structures,</span><br><span class=\"line\">such as java.util.EnumSet and java.util.EnumMap.</span><br></pre></td></tr></table></figure>\n<p>大多数程序员<strong>用不到这个方法</strong>，它是为EnumSet和EnumMap这些基于枚举的复杂数据结构设计的。</p>\n<h3 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values()\"></a>values()</h3><p>每个枚举类都有一个静态方法values()，它返回一个包含全部枚举值的数组。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Week &#123;</span><br><span class=\"line\">\tMONDAY(<span class=\"number\">1</span>),TUESDAY(<span class=\"number\">2</span>),WEDNESDAY(<span class=\"number\">3</span>),</span><br><span class=\"line\">    THURSDAY(<span class=\"number\">4</span>),FRIDAY(<span class=\"number\">5</span>),SATURDAY(<span class=\"number\">6</span>),SUNDAY(<span class=\"number\">7</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> day;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Week</span><span class=\"params\">(<span class=\"keyword\">int</span> day)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.day = day;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getDay</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> day;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Week[] weeks = Week.values();</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Week week : weeks) &#123;            </span><br><span class=\"line\">        \tsb.append(week.getDay()+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sb);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"equals-和\"><a href=\"#equals-和\" class=\"headerlink\" title=\"equals()和==\"></a>equals()和==</h3><p>在比较两个枚举类型的值时，不需要调用equals，可以直接使用“==”。</p>\n<p>查看源码，可以知道，Enum类的equals也是直接使用的”==”来比较。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object other)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>==other;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Java中的final关键字","date":"2019-01-10T07:28:13.000Z","updated":"2019-01-10T07:28:13.000Z","Categories":"java","_content":"\n​\t在Java中，final关键字可以用于域、方法和类的声明，所处位置不同，其作用也不同。\n\n<!--more-->\n\n### final域\n\n使用final声明的域，在使用前必须被初始化，且一旦被初始化便无法改变。下面是一个简单的例子：\n\n```java\npublic class Main {\n\tfinal int number = 1;\n\tpublic static void main(String[] args) {\n\t\tMain main = new Main();\n\t\t//main.number = 2; \n\t}\n}\n```\n\n当我们想改变number的值时，产生了如下错误：\n\n```java\nThe final field Main.number cannot be assigned\n```\n\n#### 空白final\n\n空白final是指被声明为final但又未给定初始值的域。必须在构造器中对空白final进行赋值，以确保空白final在使用前被初始化。下面是空白final的一个例子：\n\n```java\npublic class Main {\n\tfinal int x = 20;\n\tfinal int number;//空白final\n\t\n\tpublic Main(int number) {\n\t\tthis.number = number;\n\t}\n\tpublic static void main(String[] args) {\n\t\tMain main = new Main(2);\n\t}\n}\n```\n\n因此，综合空白final和定义时已被初始化的final字段，我们可以说：**final字段必须在域的定义处或者构造器中被初始化。**\n\n#### static final域和final域的区别\n\n当域声明为static final时，表示该字段在类装载时已被初始化，而不是每次创建新对象时都初始化。此外，声明为static final的字段，在该类的所有对象中值是唯一的且不能改变。而final域是在创建对象时才被初始化，每个对象中该字段的值不一定相同，但在同一对象中，该字段的值是唯一的。下面的例子直白地说明了二者的区别：\n\n```java\npublic class Main {\n\tpublic static final int CAPACITY = 10;\n\tprivate final int id;\n\n\tpublic Main(int id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic String toString() {\n\t\treturn \"id=\" + id + \",CAPACITY=\" + CAPACITY;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tMain main = new Main(2);\n\t\tSystem.out.println(main);\n\t\tMain main2 = new Main(3);\n\t\tSystem.out.println(main2);\n\t\tSystem.out.println(main);\n\t}\n}\n```\n\n输出结果：\n\n```java\nid=2,CAPACITY=10\nid=3,CAPACITY=10\nid=2,CAPACITY=10\n```\n\n#### final参数\n\nJava允许在参数列表中以声明的方式将参数指明为final。这一特性主要用来向匿名类传递数据。\n\n```java\npublic class Main {\n\t\n\tpublic void say(final String name) {\n\t\tSystem.out.println(\"hello \"+name);\n\t\t//name = \"new\"+name;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tMain main = new Main();\n\t\tmain.say(\"hgs\");\n\t}\n}\n```\n\n当我们想改变name的值时，将产生如下错误：\n\n```java\nThe final local variable name cannot be assigned. It must be blank and not using a compound assignment\n```\n\n### final方法\n\n使用final声明的方法，表示在子类中不允许被覆盖。下面我们尝试下覆盖父类中的final方法\n\n```java\nclass Parent {\n\tpublic final void say(String word) {\n\t\tSystem.out.println(word);\n\t}\n}\nclass Child extends Parent {\n\t/*public void say(String word) {\n\t\t\n\t}*/\n}\n```\n\n产生了如下错误：\n\n```java\nCannot override the final method from Parent\n```\n\n#### final和private 关键字\n\n类中所有的private方法都隐式地指定为是final的。可以将private方法声明为final，但这并不会给方法增加任何额外的意义。\n\n### final类\n\n当某个类用final声明时，表明这个类不允许被继承。由于final类禁止继承，所以final类中所有的方法都隐式指定为是final的，但类中的域并不会自动地成为final。\n\n```java\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tFinalClass fc = new FinalClass(\"final class\");\n\t\tSystem.out.println(\"number=\"+fc.number);\n\t\tSystem.out.println(\"name=\"+fc.getName());\n\t\tfc.setName(\"name\");\n\t\tSystem.out.println(\"name=\"+fc.getName());\n\t\t//fc.number += 1;\n        //The final field FinalClass.number cannot be assigned\n\t}\n}\nfinal class FinalClass {\n\tprivate String name;\n\tpublic final int number = 1; \n\tpublic FinalClass(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n}\n//class ChildFinalClass extends FinalClass{}\n//The type ChildFinalClass cannot subclass the final class FinalClass\n```\n\n输出结果如下：\n\n```java\nnumber=1\nname=final class\nname=name\n```\n\n在final类中可以给方法添加final修饰符，但这并不会增添任何意义。\n\n","source":"_posts/java-final.md","raw":"---\ntitle: Java中的final关键字\ndate: 2019-01-10 15:28:13\nupdated: 2019-01-10 15:28:13\ntags: java\nCategories: java\n---\n\n​\t在Java中，final关键字可以用于域、方法和类的声明，所处位置不同，其作用也不同。\n\n<!--more-->\n\n### final域\n\n使用final声明的域，在使用前必须被初始化，且一旦被初始化便无法改变。下面是一个简单的例子：\n\n```java\npublic class Main {\n\tfinal int number = 1;\n\tpublic static void main(String[] args) {\n\t\tMain main = new Main();\n\t\t//main.number = 2; \n\t}\n}\n```\n\n当我们想改变number的值时，产生了如下错误：\n\n```java\nThe final field Main.number cannot be assigned\n```\n\n#### 空白final\n\n空白final是指被声明为final但又未给定初始值的域。必须在构造器中对空白final进行赋值，以确保空白final在使用前被初始化。下面是空白final的一个例子：\n\n```java\npublic class Main {\n\tfinal int x = 20;\n\tfinal int number;//空白final\n\t\n\tpublic Main(int number) {\n\t\tthis.number = number;\n\t}\n\tpublic static void main(String[] args) {\n\t\tMain main = new Main(2);\n\t}\n}\n```\n\n因此，综合空白final和定义时已被初始化的final字段，我们可以说：**final字段必须在域的定义处或者构造器中被初始化。**\n\n#### static final域和final域的区别\n\n当域声明为static final时，表示该字段在类装载时已被初始化，而不是每次创建新对象时都初始化。此外，声明为static final的字段，在该类的所有对象中值是唯一的且不能改变。而final域是在创建对象时才被初始化，每个对象中该字段的值不一定相同，但在同一对象中，该字段的值是唯一的。下面的例子直白地说明了二者的区别：\n\n```java\npublic class Main {\n\tpublic static final int CAPACITY = 10;\n\tprivate final int id;\n\n\tpublic Main(int id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic String toString() {\n\t\treturn \"id=\" + id + \",CAPACITY=\" + CAPACITY;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tMain main = new Main(2);\n\t\tSystem.out.println(main);\n\t\tMain main2 = new Main(3);\n\t\tSystem.out.println(main2);\n\t\tSystem.out.println(main);\n\t}\n}\n```\n\n输出结果：\n\n```java\nid=2,CAPACITY=10\nid=3,CAPACITY=10\nid=2,CAPACITY=10\n```\n\n#### final参数\n\nJava允许在参数列表中以声明的方式将参数指明为final。这一特性主要用来向匿名类传递数据。\n\n```java\npublic class Main {\n\t\n\tpublic void say(final String name) {\n\t\tSystem.out.println(\"hello \"+name);\n\t\t//name = \"new\"+name;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tMain main = new Main();\n\t\tmain.say(\"hgs\");\n\t}\n}\n```\n\n当我们想改变name的值时，将产生如下错误：\n\n```java\nThe final local variable name cannot be assigned. It must be blank and not using a compound assignment\n```\n\n### final方法\n\n使用final声明的方法，表示在子类中不允许被覆盖。下面我们尝试下覆盖父类中的final方法\n\n```java\nclass Parent {\n\tpublic final void say(String word) {\n\t\tSystem.out.println(word);\n\t}\n}\nclass Child extends Parent {\n\t/*public void say(String word) {\n\t\t\n\t}*/\n}\n```\n\n产生了如下错误：\n\n```java\nCannot override the final method from Parent\n```\n\n#### final和private 关键字\n\n类中所有的private方法都隐式地指定为是final的。可以将private方法声明为final，但这并不会给方法增加任何额外的意义。\n\n### final类\n\n当某个类用final声明时，表明这个类不允许被继承。由于final类禁止继承，所以final类中所有的方法都隐式指定为是final的，但类中的域并不会自动地成为final。\n\n```java\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tFinalClass fc = new FinalClass(\"final class\");\n\t\tSystem.out.println(\"number=\"+fc.number);\n\t\tSystem.out.println(\"name=\"+fc.getName());\n\t\tfc.setName(\"name\");\n\t\tSystem.out.println(\"name=\"+fc.getName());\n\t\t//fc.number += 1;\n        //The final field FinalClass.number cannot be assigned\n\t}\n}\nfinal class FinalClass {\n\tprivate String name;\n\tpublic final int number = 1; \n\tpublic FinalClass(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n}\n//class ChildFinalClass extends FinalClass{}\n//The type ChildFinalClass cannot subclass the final class FinalClass\n```\n\n输出结果如下：\n\n```java\nnumber=1\nname=final class\nname=name\n```\n\n在final类中可以给方法添加final修饰符，但这并不会增添任何意义。\n\n","slug":"java-final","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9apk001pj1q02s64c4hi","content":"<p>​    在Java中，final关键字可以用于域、方法和类的声明，所处位置不同，其作用也不同。</p>\n<a id=\"more\"></a>\n<h3 id=\"final域\"><a href=\"#final域\" class=\"headerlink\" title=\"final域\"></a>final域</h3><p>使用final声明的域，在使用前必须被初始化，且一旦被初始化便无法改变。下面是一个简单的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> number = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tMain main = <span class=\"keyword\">new</span> Main();</span><br><span class=\"line\">\t\t<span class=\"comment\">//main.number = 2; </span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们想改变number的值时，产生了如下错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The <span class=\"keyword\">final</span> field Main.number cannot be assigned</span><br></pre></td></tr></table></figure>\n<h4 id=\"空白final\"><a href=\"#空白final\" class=\"headerlink\" title=\"空白final\"></a>空白final</h4><p>空白final是指被声明为final但又未给定初始值的域。必须在构造器中对空白final进行赋值，以确保空白final在使用前被初始化。下面是空白final的一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> number;<span class=\"comment\">//空白final</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"keyword\">int</span> number)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.number = number;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tMain main = <span class=\"keyword\">new</span> Main(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因此，综合空白final和定义时已被初始化的final字段，我们可以说：<strong>final字段必须在域的定义处或者构造器中被初始化。</strong></p>\n<h4 id=\"static-final域和final域的区别\"><a href=\"#static-final域和final域的区别\" class=\"headerlink\" title=\"static final域和final域的区别\"></a>static final域和final域的区别</h4><p>当域声明为static final时，表示该字段在类装载时已被初始化，而不是每次创建新对象时都初始化。此外，声明为static final的字段，在该类的所有对象中值是唯一的且不能改变。而final域是在创建对象时才被初始化，每个对象中该字段的值不一定相同，但在同一对象中，该字段的值是唯一的。下面的例子直白地说明了二者的区别：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"id=\"</span> + id + <span class=\"string\">\",CAPACITY=\"</span> + CAPACITY;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tMain main = <span class=\"keyword\">new</span> Main(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tSystem.out.println(main);</span><br><span class=\"line\">\t\tMain main2 = <span class=\"keyword\">new</span> Main(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tSystem.out.println(main2);</span><br><span class=\"line\">\t\tSystem.out.println(main);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=<span class=\"number\">2</span>,CAPACITY=<span class=\"number\">10</span></span><br><span class=\"line\">id=<span class=\"number\">3</span>,CAPACITY=<span class=\"number\">10</span></span><br><span class=\"line\">id=<span class=\"number\">2</span>,CAPACITY=<span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"final参数\"><a href=\"#final参数\" class=\"headerlink\" title=\"final参数\"></a>final参数</h4><p>Java允许在参数列表中以声明的方式将参数指明为final。这一特性主要用来向匿名类传递数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">(<span class=\"keyword\">final</span> String name)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"hello \"</span>+name);</span><br><span class=\"line\">\t\t<span class=\"comment\">//name = \"new\"+name;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tMain main = <span class=\"keyword\">new</span> Main();</span><br><span class=\"line\">\t\tmain.say(<span class=\"string\">\"hgs\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们想改变name的值时，将产生如下错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The <span class=\"keyword\">final</span> local variable name cannot be assigned. It must be blank and not using a compound assignment</span><br></pre></td></tr></table></figure>\n<h3 id=\"final方法\"><a href=\"#final方法\" class=\"headerlink\" title=\"final方法\"></a>final方法</h3><p>使用final声明的方法，表示在子类中不允许被覆盖。下面我们尝试下覆盖父类中的final方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(word);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*public void say(String word) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>产生了如下错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot override the <span class=\"keyword\">final</span> method from Parent</span><br></pre></td></tr></table></figure>\n<h4 id=\"final和private-关键字\"><a href=\"#final和private-关键字\" class=\"headerlink\" title=\"final和private 关键字\"></a>final和private 关键字</h4><p>类中所有的private方法都隐式地指定为是final的。可以将private方法声明为final，但这并不会给方法增加任何额外的意义。</p>\n<h3 id=\"final类\"><a href=\"#final类\" class=\"headerlink\" title=\"final类\"></a>final类</h3><p>当某个类用final声明时，表明这个类不允许被继承。由于final类禁止继承，所以final类中所有的方法都隐式指定为是final的，但类中的域并不会自动地成为final。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tFinalClass fc = <span class=\"keyword\">new</span> FinalClass(<span class=\"string\">\"final class\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"number=\"</span>+fc.number);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"name=\"</span>+fc.getName());</span><br><span class=\"line\">\t\tfc.setName(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"name=\"</span>+fc.getName());</span><br><span class=\"line\">\t\t<span class=\"comment\">//fc.number += 1;</span></span><br><span class=\"line\">        <span class=\"comment\">//The final field FinalClass.number cannot be assigned</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinalClass</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> number = <span class=\"number\">1</span>; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FinalClass</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//class ChildFinalClass extends FinalClass&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//The type ChildFinalClass cannot subclass the final class FinalClass</span></span><br></pre></td></tr></table></figure>\n<p>输出结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number=<span class=\"number\">1</span></span><br><span class=\"line\">name=<span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">name</span></span>=name</span><br></pre></td></tr></table></figure>\n<p>在final类中可以给方法添加final修饰符，但这并不会增添任何意义。</p>\n","site":{"data":{}},"excerpt":"<p>​    在Java中，final关键字可以用于域、方法和类的声明，所处位置不同，其作用也不同。</p>","more":"<h3 id=\"final域\"><a href=\"#final域\" class=\"headerlink\" title=\"final域\"></a>final域</h3><p>使用final声明的域，在使用前必须被初始化，且一旦被初始化便无法改变。下面是一个简单的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> number = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tMain main = <span class=\"keyword\">new</span> Main();</span><br><span class=\"line\">\t\t<span class=\"comment\">//main.number = 2; </span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们想改变number的值时，产生了如下错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The <span class=\"keyword\">final</span> field Main.number cannot be assigned</span><br></pre></td></tr></table></figure>\n<h4 id=\"空白final\"><a href=\"#空白final\" class=\"headerlink\" title=\"空白final\"></a>空白final</h4><p>空白final是指被声明为final但又未给定初始值的域。必须在构造器中对空白final进行赋值，以确保空白final在使用前被初始化。下面是空白final的一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> x = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> number;<span class=\"comment\">//空白final</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"keyword\">int</span> number)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.number = number;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tMain main = <span class=\"keyword\">new</span> Main(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因此，综合空白final和定义时已被初始化的final字段，我们可以说：<strong>final字段必须在域的定义处或者构造器中被初始化。</strong></p>\n<h4 id=\"static-final域和final域的区别\"><a href=\"#static-final域和final域的区别\" class=\"headerlink\" title=\"static final域和final域的区别\"></a>static final域和final域的区别</h4><p>当域声明为static final时，表示该字段在类装载时已被初始化，而不是每次创建新对象时都初始化。此外，声明为static final的字段，在该类的所有对象中值是唯一的且不能改变。而final域是在创建对象时才被初始化，每个对象中该字段的值不一定相同，但在同一对象中，该字段的值是唯一的。下面的例子直白地说明了二者的区别：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"id=\"</span> + id + <span class=\"string\">\",CAPACITY=\"</span> + CAPACITY;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tMain main = <span class=\"keyword\">new</span> Main(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tSystem.out.println(main);</span><br><span class=\"line\">\t\tMain main2 = <span class=\"keyword\">new</span> Main(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tSystem.out.println(main2);</span><br><span class=\"line\">\t\tSystem.out.println(main);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=<span class=\"number\">2</span>,CAPACITY=<span class=\"number\">10</span></span><br><span class=\"line\">id=<span class=\"number\">3</span>,CAPACITY=<span class=\"number\">10</span></span><br><span class=\"line\">id=<span class=\"number\">2</span>,CAPACITY=<span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"final参数\"><a href=\"#final参数\" class=\"headerlink\" title=\"final参数\"></a>final参数</h4><p>Java允许在参数列表中以声明的方式将参数指明为final。这一特性主要用来向匿名类传递数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">(<span class=\"keyword\">final</span> String name)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"hello \"</span>+name);</span><br><span class=\"line\">\t\t<span class=\"comment\">//name = \"new\"+name;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tMain main = <span class=\"keyword\">new</span> Main();</span><br><span class=\"line\">\t\tmain.say(<span class=\"string\">\"hgs\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们想改变name的值时，将产生如下错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The <span class=\"keyword\">final</span> local variable name cannot be assigned. It must be blank and not using a compound assignment</span><br></pre></td></tr></table></figure>\n<h3 id=\"final方法\"><a href=\"#final方法\" class=\"headerlink\" title=\"final方法\"></a>final方法</h3><p>使用final声明的方法，表示在子类中不允许被覆盖。下面我们尝试下覆盖父类中的final方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(word);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*public void say(String word) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>产生了如下错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot override the <span class=\"keyword\">final</span> method from Parent</span><br></pre></td></tr></table></figure>\n<h4 id=\"final和private-关键字\"><a href=\"#final和private-关键字\" class=\"headerlink\" title=\"final和private 关键字\"></a>final和private 关键字</h4><p>类中所有的private方法都隐式地指定为是final的。可以将private方法声明为final，但这并不会给方法增加任何额外的意义。</p>\n<h3 id=\"final类\"><a href=\"#final类\" class=\"headerlink\" title=\"final类\"></a>final类</h3><p>当某个类用final声明时，表明这个类不允许被继承。由于final类禁止继承，所以final类中所有的方法都隐式指定为是final的，但类中的域并不会自动地成为final。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tFinalClass fc = <span class=\"keyword\">new</span> FinalClass(<span class=\"string\">\"final class\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"number=\"</span>+fc.number);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"name=\"</span>+fc.getName());</span><br><span class=\"line\">\t\tfc.setName(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"name=\"</span>+fc.getName());</span><br><span class=\"line\">\t\t<span class=\"comment\">//fc.number += 1;</span></span><br><span class=\"line\">        <span class=\"comment\">//The final field FinalClass.number cannot be assigned</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinalClass</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> number = <span class=\"number\">1</span>; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FinalClass</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//class ChildFinalClass extends FinalClass&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//The type ChildFinalClass cannot subclass the final class FinalClass</span></span><br></pre></td></tr></table></figure>\n<p>输出结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number=<span class=\"number\">1</span></span><br><span class=\"line\">name=<span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">name</span></span>=name</span><br></pre></td></tr></table></figure>\n<p>在final类中可以给方法添加final修饰符，但这并不会增添任何意义。</p>"},{"title":"Java中的初始化块","date":"2018-08-23T07:23:11.000Z","_content":"\nJava中的初始化代码块用一对**花括号{}**标明，初始化代码块在构造方法之前执行。\n\n<!--more-->\n\n一个简单的例子：\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Test test = new Test();\n    }\n}\nclass Test {\n    {\n        System.out.println(\"Hello 初始化代码块\");\n    }\n    public Test() {\n        System.out.println(\"执行构造方法\");\n    }\n}\n```\n\n输出结果：\n\n```java\nHello 初始化代码块\n执行构造方法\n```\n\n另外，Java中还有一个静态初始化代码块，用**static{}**来标明。静态初始化代码块在普通代码块之前被调用。\n\n示例：\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Test test = new Test();\n    }\n}\nclass Test {\n    static{\n        System.out.println(\"执行静态代码块\");\n    }\n    {\n        System.out.println(\"执行普通代码块\");\n    }\n    public Test() {\n        System.out.println(\"执行构造方法\");\n    }\n}\n```\n\n输出结果：\n\n```java\n执行静态代码块\n执行普通代码块\n执行构造方法\n```\n\n总的来说，执行顺序：静态初始化代码块>普通初始化代码块>构造方法","source":"_posts/java-initialization-block.md","raw":"---\ntitle: Java中的初始化块\ndate: 2018-08-23 15:23:11\ntags: java\ncategories: java\n---\n\nJava中的初始化代码块用一对**花括号{}**标明，初始化代码块在构造方法之前执行。\n\n<!--more-->\n\n一个简单的例子：\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Test test = new Test();\n    }\n}\nclass Test {\n    {\n        System.out.println(\"Hello 初始化代码块\");\n    }\n    public Test() {\n        System.out.println(\"执行构造方法\");\n    }\n}\n```\n\n输出结果：\n\n```java\nHello 初始化代码块\n执行构造方法\n```\n\n另外，Java中还有一个静态初始化代码块，用**static{}**来标明。静态初始化代码块在普通代码块之前被调用。\n\n示例：\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Test test = new Test();\n    }\n}\nclass Test {\n    static{\n        System.out.println(\"执行静态代码块\");\n    }\n    {\n        System.out.println(\"执行普通代码块\");\n    }\n    public Test() {\n        System.out.println(\"执行构造方法\");\n    }\n}\n```\n\n输出结果：\n\n```java\n执行静态代码块\n执行普通代码块\n执行构造方法\n```\n\n总的来说，执行顺序：静态初始化代码块>普通初始化代码块>构造方法","slug":"java-initialization-block","published":1,"updated":"2019-01-19T07:23:57.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9apm001tj1q0ewf9tnpv","content":"<p>Java中的初始化代码块用一对<strong>花括号{}</strong>标明，初始化代码块在构造方法之前执行。</p>\n<a id=\"more\"></a>\n<p>一个简单的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Test test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello 初始化代码块\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行构造方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello 初始化代码块</span><br><span class=\"line\">执行构造方法</span><br></pre></td></tr></table></figure>\n<p>另外，Java中还有一个静态初始化代码块，用<strong>static{}</strong>来标明。静态初始化代码块在普通代码块之前被调用。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Test test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行静态代码块\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行普通代码块\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行构造方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行静态代码块</span><br><span class=\"line\">执行普通代码块</span><br><span class=\"line\">执行构造方法</span><br></pre></td></tr></table></figure>\n<p>总的来说，执行顺序：静态初始化代码块&gt;普通初始化代码块&gt;构造方法</p>\n","site":{"data":{}},"excerpt":"<p>Java中的初始化代码块用一对<strong>花括号{}</strong>标明，初始化代码块在构造方法之前执行。</p>","more":"<p>一个简单的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Test test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello 初始化代码块\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行构造方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello 初始化代码块</span><br><span class=\"line\">执行构造方法</span><br></pre></td></tr></table></figure>\n<p>另外，Java中还有一个静态初始化代码块，用<strong>static{}</strong>来标明。静态初始化代码块在普通代码块之前被调用。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Test test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行静态代码块\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行普通代码块\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行构造方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行静态代码块</span><br><span class=\"line\">执行普通代码块</span><br><span class=\"line\">执行构造方法</span><br></pre></td></tr></table></figure>\n<p>总的来说，执行顺序：静态初始化代码块&gt;普通初始化代码块&gt;构造方法</p>"},{"title":"Java内部类实现原理分析","date":"2019-01-14T10:09:12.000Z","updated":"2019-01-14T10:09:12.000Z","_content":"\n​\t本文通过分析编译后的class文件，来揭秘Java中内部类的实现原理。\n\n<!--more-->\n\n在解开内部类的神秘面纱之前，让我们先来看如下代码：\n\n```java\npublic class OuterClass {\n\tprivate String name;\n\tpublic OuterClass(String name) {\n\t\tthis.name = name;\n\t\tSystem.out.println(\"OuterClass初始化\");\n\t\tSystem.out.println(\"name：\"+this.name);\n\t}\n    class InnerClass {\n    \tpublic InnerClass() {\n    \t\tSystem.out.println(\"InnerClass初始化\");\n    \t}\n    \tpublic void print() {\n    \t\tif(name.equals(\"hegongshan.com\")) {\n    \t\t\tname = \"software engineering\";\n    \t\t\tSystem.out.println(\"InnerClass.print()\");\n    \t\t\tSystem.out.println(\"更新后的name：\"+name);\n    \t\t}\n    \t}\n    }\n    public static void main(String[] args) {\n\t\tOuterClass outer = new OuterClass(\"hegongshan.com\");\n\t\tOuterClass.InnerClass inner = outer.new InnerClass();\n\t\tinner.print();\n\t}\n}\n输出结果：\nOuterClass初始化\nname：hegongshan.com\nInnerClass初始化\nInnerClass.print()\n更新后的name：software engineering\n```\n\n上述程序编译之后生成了如下两个class文件：\n\n```java\nOuterClass$InnerClass.class\nOuterClass.class\n```\n\n可以看到，编译器将内部类InnerClass翻译成了名为`OuterClass$InnerClass.class`的class文件。\n\n下面我们在命令行中使用`javap`命令来查看下编译之后的OuterClass$InnerClass.class文件（关于`javap`的更多描述请参看[《Java中的命令行工具javap》](https://www.hegongshan.com/2019/01/15/java-command-javap/)）\n\n```java\n//在UNIX中，需要对$转义，其他系统中不需要加\\\njavap -p OuterClass\\$InnerClass.class\n```\n\n输出内容如下：\n\n```java\nCompiled from \"OuterClass.java\"\nclass OuterClass$InnerClass {\n  \tfinal OuterClass this$0;\n\tpublic OuterClass$InnerClass(OuterClass);\n  \tpublic void print();\n}\n```\n\n可以清楚地看到，编译器为了引用外部类，生成了一个使用final修饰的外部类变量，命名为`this$0`（名字`this$0`是由编译器合成的，在自己编写的代码中不能够引用它）。\n\n另外，可以看到构造器的参数，在InnerClass中，我们并没有写构造方法，编译器为InnerClass自动生成了一个带参数的构造方法，传入一个外部类对象的引用。\n\n开篇提到，内部类可以访问外围类中的所有方法和变量，即使这些方法和变量声明为private。既然内部类可以被编译器翻译为名字古怪的普通类（虚拟机对此一无所知），内部类如何管理那些额外的访问特权呢？\n\n再次使用**javap**命令查看生成的`Outerclass.class`,结果如下：\n\n```java\nCompiled from \"OuterClass.java\"\npublic class OuterClass {\n  private java.lang.String name;\n  public OuterClass(java.lang.String);\n  public static void main(java.lang.String[]);\n  static java.lang.String access$0(OuterClass);\n  static void access$1(OuterClass, java.lang.String);\n}\n```\n\n我们注意到，编译器在外围类中添加了两个静态方法`access$0`和`access$1`，它们均需要传入一个外围类对象的引用。此外，`access$1`还需要传入一个字符串变量。（方法名可能稍有不同，如`access$00`，这取决于你的编译器。）\n\n内部类通过调用`access$0`方法，从而实现对外围类的私有属性name的访问；通过调用`access$1`方法，从而实现对外围类的私有属性name的修改。\n\n如果编译器能够自动地进行转换，那么我们能不能编写程序实现这种机制呢？\n\n```java\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tOuter outer = new Outer(\"hegongshan.com\");\n\t\tInner inner = new Inner(outer);\n\t\tinner.print();\n\t}\n}\nclass Inner {\n\tfinal Outer outer;\n\tpublic Inner(Outer outer) {\n\t\tthis.outer = outer;\n\t\tSystem.out.println(\"Inner初始化\");\n\t}\n\tpublic void print() {\n\t\tSystem.out.println(\"name:\"+Outer.getName(outer));\n\t\tif(Outer.getName(outer).equals(\"hegongshan.com\")) {\n\t\t\tOuter.setName(outer, \"software engineering\");\n\t\t\tSystem.out.println(\"更新后的name:\"+Outer.getName(outer));\n\t\t}\n\t}\n}\nclass Outer {\n\tprivate String name;\n\tpublic Outer(String name) {\n\t\tthis.name = name;\n\t\tSystem.out.println(\"Outer初始化\");\n\t\tSystem.out.println(\"name:\"+name);\n\t}\n\tstatic String getName(Outer outer) {\n\t\treturn outer.name;\n\t}\n\tstatic void setName(Outer outer,String name) {\n\t\touter.name = name;\n\t}\n}\n```\n\n输出结果：\n\n```java\nOuter初始化\nname:hegongshan.com\nInner初始化\nname:hegongshan.com\n更新后的name:software engineering\n```\n\n可以看到，通过模仿编译后的class文件中的代码，在Outer中添加一些特殊的方法，在Inner类中添加特殊的构造器，我们在Inner类中访问和修改了Outer类中的私有属性。","source":"_posts/java-inner-class-implementation-principle.md","raw":"---\ntitle: Java内部类实现原理分析\ndate: 2019-01-14 18:09:12\nupdated: 2019-01-14 18:09:12\ntags: java\ncategories: java\n---\n\n​\t本文通过分析编译后的class文件，来揭秘Java中内部类的实现原理。\n\n<!--more-->\n\n在解开内部类的神秘面纱之前，让我们先来看如下代码：\n\n```java\npublic class OuterClass {\n\tprivate String name;\n\tpublic OuterClass(String name) {\n\t\tthis.name = name;\n\t\tSystem.out.println(\"OuterClass初始化\");\n\t\tSystem.out.println(\"name：\"+this.name);\n\t}\n    class InnerClass {\n    \tpublic InnerClass() {\n    \t\tSystem.out.println(\"InnerClass初始化\");\n    \t}\n    \tpublic void print() {\n    \t\tif(name.equals(\"hegongshan.com\")) {\n    \t\t\tname = \"software engineering\";\n    \t\t\tSystem.out.println(\"InnerClass.print()\");\n    \t\t\tSystem.out.println(\"更新后的name：\"+name);\n    \t\t}\n    \t}\n    }\n    public static void main(String[] args) {\n\t\tOuterClass outer = new OuterClass(\"hegongshan.com\");\n\t\tOuterClass.InnerClass inner = outer.new InnerClass();\n\t\tinner.print();\n\t}\n}\n输出结果：\nOuterClass初始化\nname：hegongshan.com\nInnerClass初始化\nInnerClass.print()\n更新后的name：software engineering\n```\n\n上述程序编译之后生成了如下两个class文件：\n\n```java\nOuterClass$InnerClass.class\nOuterClass.class\n```\n\n可以看到，编译器将内部类InnerClass翻译成了名为`OuterClass$InnerClass.class`的class文件。\n\n下面我们在命令行中使用`javap`命令来查看下编译之后的OuterClass$InnerClass.class文件（关于`javap`的更多描述请参看[《Java中的命令行工具javap》](https://www.hegongshan.com/2019/01/15/java-command-javap/)）\n\n```java\n//在UNIX中，需要对$转义，其他系统中不需要加\\\njavap -p OuterClass\\$InnerClass.class\n```\n\n输出内容如下：\n\n```java\nCompiled from \"OuterClass.java\"\nclass OuterClass$InnerClass {\n  \tfinal OuterClass this$0;\n\tpublic OuterClass$InnerClass(OuterClass);\n  \tpublic void print();\n}\n```\n\n可以清楚地看到，编译器为了引用外部类，生成了一个使用final修饰的外部类变量，命名为`this$0`（名字`this$0`是由编译器合成的，在自己编写的代码中不能够引用它）。\n\n另外，可以看到构造器的参数，在InnerClass中，我们并没有写构造方法，编译器为InnerClass自动生成了一个带参数的构造方法，传入一个外部类对象的引用。\n\n开篇提到，内部类可以访问外围类中的所有方法和变量，即使这些方法和变量声明为private。既然内部类可以被编译器翻译为名字古怪的普通类（虚拟机对此一无所知），内部类如何管理那些额外的访问特权呢？\n\n再次使用**javap**命令查看生成的`Outerclass.class`,结果如下：\n\n```java\nCompiled from \"OuterClass.java\"\npublic class OuterClass {\n  private java.lang.String name;\n  public OuterClass(java.lang.String);\n  public static void main(java.lang.String[]);\n  static java.lang.String access$0(OuterClass);\n  static void access$1(OuterClass, java.lang.String);\n}\n```\n\n我们注意到，编译器在外围类中添加了两个静态方法`access$0`和`access$1`，它们均需要传入一个外围类对象的引用。此外，`access$1`还需要传入一个字符串变量。（方法名可能稍有不同，如`access$00`，这取决于你的编译器。）\n\n内部类通过调用`access$0`方法，从而实现对外围类的私有属性name的访问；通过调用`access$1`方法，从而实现对外围类的私有属性name的修改。\n\n如果编译器能够自动地进行转换，那么我们能不能编写程序实现这种机制呢？\n\n```java\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tOuter outer = new Outer(\"hegongshan.com\");\n\t\tInner inner = new Inner(outer);\n\t\tinner.print();\n\t}\n}\nclass Inner {\n\tfinal Outer outer;\n\tpublic Inner(Outer outer) {\n\t\tthis.outer = outer;\n\t\tSystem.out.println(\"Inner初始化\");\n\t}\n\tpublic void print() {\n\t\tSystem.out.println(\"name:\"+Outer.getName(outer));\n\t\tif(Outer.getName(outer).equals(\"hegongshan.com\")) {\n\t\t\tOuter.setName(outer, \"software engineering\");\n\t\t\tSystem.out.println(\"更新后的name:\"+Outer.getName(outer));\n\t\t}\n\t}\n}\nclass Outer {\n\tprivate String name;\n\tpublic Outer(String name) {\n\t\tthis.name = name;\n\t\tSystem.out.println(\"Outer初始化\");\n\t\tSystem.out.println(\"name:\"+name);\n\t}\n\tstatic String getName(Outer outer) {\n\t\treturn outer.name;\n\t}\n\tstatic void setName(Outer outer,String name) {\n\t\touter.name = name;\n\t}\n}\n```\n\n输出结果：\n\n```java\nOuter初始化\nname:hegongshan.com\nInner初始化\nname:hegongshan.com\n更新后的name:software engineering\n```\n\n可以看到，通过模仿编译后的class文件中的代码，在Outer中添加一些特殊的方法，在Inner类中添加特殊的构造器，我们在Inner类中访问和修改了Outer类中的私有属性。","slug":"java-inner-class-implementation-principle","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9apn001vj1q0mz0z7g6p","content":"<p>​    本文通过分析编译后的class文件，来揭秘Java中内部类的实现原理。</p>\n<a id=\"more\"></a>\n<p>在解开内部类的神秘面纱之前，让我们先来看如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OuterClass</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"OuterClass初始化\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"name：\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InnerClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t\tSystem.out.println(<span class=\"string\">\"InnerClass初始化\"</span>);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(name.equals(<span class=\"string\">\"hegongshan.com\"</span>)) &#123;</span><br><span class=\"line\">    \t\t\tname = <span class=\"string\">\"software engineering\"</span>;</span><br><span class=\"line\">    \t\t\tSystem.out.println(<span class=\"string\">\"InnerClass.print()\"</span>);</span><br><span class=\"line\">    \t\t\tSystem.out.println(<span class=\"string\">\"更新后的name：\"</span>+name);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tOuterClass outer = <span class=\"keyword\">new</span> OuterClass(<span class=\"string\">\"hegongshan.com\"</span>);</span><br><span class=\"line\">\t\tOuterClass.InnerClass inner = outer.new InnerClass();</span><br><span class=\"line\">\t\tinner.print();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">OuterClass初始化</span><br><span class=\"line\">name：hegongshan.com</span><br><span class=\"line\">InnerClass初始化</span><br><span class=\"line\">InnerClass.print()</span><br><span class=\"line\">更新后的name：software engineering</span><br></pre></td></tr></table></figure>\n<p>上述程序编译之后生成了如下两个class文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OuterClass$InnerClass.class</span><br><span class=\"line\">OuterClass.class</span><br></pre></td></tr></table></figure>\n<p>可以看到，编译器将内部类InnerClass翻译成了名为<code>OuterClass$InnerClass.class</code>的class文件。</p>\n<p>下面我们在命令行中使用<code>javap</code>命令来查看下编译之后的OuterClass$InnerClass.class文件（关于<code>javap</code>的更多描述请参看<a href=\"https://www.hegongshan.com/2019/01/15/java-command-javap/\">《Java中的命令行工具javap》</a>）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在UNIX中，需要对$转义，其他系统中不需要加\\</span></span><br><span class=\"line\">javap -p OuterClass\\$InnerClass.class</span><br></pre></td></tr></table></figure>\n<p>输出内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiled from <span class=\"string\">\"OuterClass.java\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span>$<span class=\"title\">InnerClass</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">final</span> OuterClass <span class=\"keyword\">this</span>$<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> OuterClass$InnerClass(OuterClass);</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以清楚地看到，编译器为了引用外部类，生成了一个使用final修饰的外部类变量，命名为<code>this$0</code>（名字<code>this$0</code>是由编译器合成的，在自己编写的代码中不能够引用它）。</p>\n<p>另外，可以看到构造器的参数，在InnerClass中，我们并没有写构造方法，编译器为InnerClass自动生成了一个带参数的构造方法，传入一个外部类对象的引用。</p>\n<p>开篇提到，内部类可以访问外围类中的所有方法和变量，即使这些方法和变量声明为private。既然内部类可以被编译器翻译为名字古怪的普通类（虚拟机对此一无所知），内部类如何管理那些额外的访问特权呢？</p>\n<p>再次使用<strong>javap</strong>命令查看生成的<code>Outerclass.class</code>,结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiled from <span class=\"string\">\"OuterClass.java\"</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> java.lang.String name;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OuterClass</span><span class=\"params\">(java.lang.String)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(java.lang.String[])</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> java.lang.String access$<span class=\"number\">0</span>(OuterClass);</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> access$<span class=\"number\">1</span>(OuterClass, java.lang.String);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们注意到，编译器在外围类中添加了两个静态方法<code>access$0</code>和<code>access$1</code>，它们均需要传入一个外围类对象的引用。此外，<code>access$1</code>还需要传入一个字符串变量。（方法名可能稍有不同，如<code>access$00</code>，这取决于你的编译器。）</p>\n<p>内部类通过调用<code>access$0</code>方法，从而实现对外围类的私有属性name的访问；通过调用<code>access$1</code>方法，从而实现对外围类的私有属性name的修改。</p>\n<p>如果编译器能够自动地进行转换，那么我们能不能编写程序实现这种机制呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tOuter outer = <span class=\"keyword\">new</span> Outer(<span class=\"string\">\"hegongshan.com\"</span>);</span><br><span class=\"line\">\t\tInner inner = <span class=\"keyword\">new</span> Inner(outer);</span><br><span class=\"line\">\t\tinner.print();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Outer outer;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Inner</span><span class=\"params\">(Outer outer)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.outer = outer;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Inner初始化\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"name:\"</span>+Outer.getName(outer));</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(Outer.getName(outer).equals(<span class=\"string\">\"hegongshan.com\"</span>)) &#123;</span><br><span class=\"line\">\t\t\tOuter.setName(outer, <span class=\"string\">\"software engineering\"</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"更新后的name:\"</span>+Outer.getName(outer));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Outer</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Outer初始化\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"name:\"</span>+name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">getName</span><span class=\"params\">(Outer outer)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> outer.name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(Outer outer,String name)</span> </span>&#123;</span><br><span class=\"line\">\t\touter.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Outer初始化</span><br><span class=\"line\">name:hegongshan.com</span><br><span class=\"line\">Inner初始化</span><br><span class=\"line\">name:hegongshan.com</span><br><span class=\"line\">更新后的name:software engineering</span><br></pre></td></tr></table></figure>\n<p>可以看到，通过模仿编译后的class文件中的代码，在Outer中添加一些特殊的方法，在Inner类中添加特殊的构造器，我们在Inner类中访问和修改了Outer类中的私有属性。</p>\n","site":{"data":{}},"excerpt":"<p>​    本文通过分析编译后的class文件，来揭秘Java中内部类的实现原理。</p>","more":"<p>在解开内部类的神秘面纱之前，让我们先来看如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OuterClass</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"OuterClass初始化\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"name：\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InnerClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t\tSystem.out.println(<span class=\"string\">\"InnerClass初始化\"</span>);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(name.equals(<span class=\"string\">\"hegongshan.com\"</span>)) &#123;</span><br><span class=\"line\">    \t\t\tname = <span class=\"string\">\"software engineering\"</span>;</span><br><span class=\"line\">    \t\t\tSystem.out.println(<span class=\"string\">\"InnerClass.print()\"</span>);</span><br><span class=\"line\">    \t\t\tSystem.out.println(<span class=\"string\">\"更新后的name：\"</span>+name);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tOuterClass outer = <span class=\"keyword\">new</span> OuterClass(<span class=\"string\">\"hegongshan.com\"</span>);</span><br><span class=\"line\">\t\tOuterClass.InnerClass inner = outer.new InnerClass();</span><br><span class=\"line\">\t\tinner.print();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">OuterClass初始化</span><br><span class=\"line\">name：hegongshan.com</span><br><span class=\"line\">InnerClass初始化</span><br><span class=\"line\">InnerClass.print()</span><br><span class=\"line\">更新后的name：software engineering</span><br></pre></td></tr></table></figure>\n<p>上述程序编译之后生成了如下两个class文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OuterClass$InnerClass.class</span><br><span class=\"line\">OuterClass.class</span><br></pre></td></tr></table></figure>\n<p>可以看到，编译器将内部类InnerClass翻译成了名为<code>OuterClass$InnerClass.class</code>的class文件。</p>\n<p>下面我们在命令行中使用<code>javap</code>命令来查看下编译之后的OuterClass$InnerClass.class文件（关于<code>javap</code>的更多描述请参看<a href=\"https://www.hegongshan.com/2019/01/15/java-command-javap/\">《Java中的命令行工具javap》</a>）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在UNIX中，需要对$转义，其他系统中不需要加\\</span></span><br><span class=\"line\">javap -p OuterClass\\$InnerClass.class</span><br></pre></td></tr></table></figure>\n<p>输出内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiled from <span class=\"string\">\"OuterClass.java\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span>$<span class=\"title\">InnerClass</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">final</span> OuterClass <span class=\"keyword\">this</span>$<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> OuterClass$InnerClass(OuterClass);</span><br><span class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以清楚地看到，编译器为了引用外部类，生成了一个使用final修饰的外部类变量，命名为<code>this$0</code>（名字<code>this$0</code>是由编译器合成的，在自己编写的代码中不能够引用它）。</p>\n<p>另外，可以看到构造器的参数，在InnerClass中，我们并没有写构造方法，编译器为InnerClass自动生成了一个带参数的构造方法，传入一个外部类对象的引用。</p>\n<p>开篇提到，内部类可以访问外围类中的所有方法和变量，即使这些方法和变量声明为private。既然内部类可以被编译器翻译为名字古怪的普通类（虚拟机对此一无所知），内部类如何管理那些额外的访问特权呢？</p>\n<p>再次使用<strong>javap</strong>命令查看生成的<code>Outerclass.class</code>,结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiled from <span class=\"string\">\"OuterClass.java\"</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> java.lang.String name;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OuterClass</span><span class=\"params\">(java.lang.String)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(java.lang.String[])</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> java.lang.String access$<span class=\"number\">0</span>(OuterClass);</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> access$<span class=\"number\">1</span>(OuterClass, java.lang.String);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们注意到，编译器在外围类中添加了两个静态方法<code>access$0</code>和<code>access$1</code>，它们均需要传入一个外围类对象的引用。此外，<code>access$1</code>还需要传入一个字符串变量。（方法名可能稍有不同，如<code>access$00</code>，这取决于你的编译器。）</p>\n<p>内部类通过调用<code>access$0</code>方法，从而实现对外围类的私有属性name的访问；通过调用<code>access$1</code>方法，从而实现对外围类的私有属性name的修改。</p>\n<p>如果编译器能够自动地进行转换，那么我们能不能编写程序实现这种机制呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tOuter outer = <span class=\"keyword\">new</span> Outer(<span class=\"string\">\"hegongshan.com\"</span>);</span><br><span class=\"line\">\t\tInner inner = <span class=\"keyword\">new</span> Inner(outer);</span><br><span class=\"line\">\t\tinner.print();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Outer outer;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Inner</span><span class=\"params\">(Outer outer)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.outer = outer;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Inner初始化\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"name:\"</span>+Outer.getName(outer));</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(Outer.getName(outer).equals(<span class=\"string\">\"hegongshan.com\"</span>)) &#123;</span><br><span class=\"line\">\t\t\tOuter.setName(outer, <span class=\"string\">\"software engineering\"</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"更新后的name:\"</span>+Outer.getName(outer));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Outer</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Outer初始化\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"name:\"</span>+name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">getName</span><span class=\"params\">(Outer outer)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> outer.name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(Outer outer,String name)</span> </span>&#123;</span><br><span class=\"line\">\t\touter.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Outer初始化</span><br><span class=\"line\">name:hegongshan.com</span><br><span class=\"line\">Inner初始化</span><br><span class=\"line\">name:hegongshan.com</span><br><span class=\"line\">更新后的name:software engineering</span><br></pre></td></tr></table></figure>\n<p>可以看到，通过模仿编译后的class文件中的代码，在Outer中添加一些特殊的方法，在Inner类中添加特殊的构造器，我们在Inner类中访问和修改了Outer类中的私有属性。</p>"},{"title":"Java中的内部类继承","date":"2019-01-13T10:09:54.000Z","_content":"\n由于Java中的匿名内部类不能被继承，而局部内部类和静态内部类的继承，与普通类继承没有区别。故本文主要描述成员内部类的继承问题。\n\n<!--more-->\n\n成员内部类的继承可分为以下三种情况：\n\n* 内部类及其子类在同一个外围类中\n* 内部类及其子类在不同的外围类中\n* 内部类的子类不是内部类\n\n下面对这三种情况逐一分析\n\n#### 内部类及其子类在同一个外围类中\n\n在这种情况下，内部类和子类都是同一个外围类的内部类，此时成员内部类的继承与普通类的继承没有区别。下面通过一个示例来说明这个问题：\n\n```java\nclass WithInner {\n\tclass Inner{\n\t\tpublic Inner() {\n\t\t\tSystem.out.println(\"Inner\");\n\t\t}\t\t\n\t}\n\t\n\tclass InheritInner extends Inner {\n\t\tpublic InheritInner() {\n\t\t\tSystem.out.println(\"InheritInner\");\n\t\t}\n\t}\n}\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tWithInner wi = new WithInner();\n\t\tWithInner.InheritInner ii = wi.new InheritInner();\n\t}\n}\n输出如下：\nInner\nInheritInner\n```\n\n上述程序编译后，生成了如下的class文件\n\n```java\nMain.class\nWithInner$InheritInner.class\nWithInner$Inner.class\nWithInner.class\n```\n\n在[《Java内部类实现原理分析》](https://www.hegongshan.com/2019/01/14/java-inner-class-implementation-principle/)中，我们已经知道编译器会为内部类自动添加一个声明为final的外围类字段，并为内部类自动生成一个带参数的构造方法，就像下面这样：\n\n```java\nCompiled from \"Main.java\"\nclass WithInner$InheritInner extends WithInner$Inner {\n\tfinal WithInner this$0;\n\tpublic WithInner$InheritInner(WithInner);\n}\n```\n\n由于`WithInner$InheritInner`类和`WithInner$Inner`类都在`WithInner`类中，编译器会为`WithInner$InheritInner`类自动添加声明为final的WithInner，故`WithInner$InheritInner`类继承`WithInner$Inner`类时，我们并不需要做什么额外的工作，就像普通类继承一样。\n\n#### 内部类及其子类在不同的外围类中\n\n先来看下面的程序\n\n```java\nclass WithInner {\n\tclass Inner{\n\t\tpublic Inner() {\n\t\t\tSystem.out.println(\"Inner\");\n\t\t}\t\t\n\t}\n}\nclass Outer {\n\tclass InheritInner extends WithInner.Inner {\n\t\tpublic InheritInner(WithInner wi) {\n\t\t\twi.super();\n\t\t\tSystem.out.println(\"InheritInner\");\n\t\t}\n\t}\n}\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tWithInner wi = new WithInner();\n\t\tOuter outer = new Outer();\n\t\tOuter.InheritInner ii = outer.new InheritInner(wi);\n\t}\n}\n输出如下：\nInner\nInheritInner\n```\n\nInheritInner继承自内部类WithInner.Inner，由于InheritInner不在WithInner中，编译器不会为其自动添加具有WithInner参数的构造器，当要生成一个构造器时，必须传入一个指向外围类对象的引用。此外，还必须在构造器内使用如下语法，显式地调用其父类WithInner.Inner的构造器：\n\n```java\nenclosingClassReference.super();\n```\n\n否则，将会产生如下错误：\n\n```java\nNo enclosing instance of type WithInner is accessible to invoke the super constructor. \nMust define a constructor and explicitly qualify its super constructor invocation\nwith an instance of WithInner (e.g. x.super() where x is an instance of WithInner).\n```\n\n翻译过来就是\n\n```java\n没有外围类WithInner的实例，无法调用父类构造器。\n必须定义一个构造器，并且用WithInner的实例显式地调用父类构造器。\n（如，x.super(),其中x是WithInner的一个实例）\n```\n\n上述程序编译后，生成了如下的class文件\n\n```java\nMain.class\nOuter$InheritInner.class\nOuter.class\nWithInner$Inner.class\nWithInner.class\n```\n\n使用`javap -p`查看`Outer$InheritInner.class`,输出内容如下：\n\n```java\nCompiled from \"Main.java\"\nclass Outer$InheritInner extends WithInner$Inner {\n  final Outer this$0;\n  public Outer$InheritInner(Outer, WithInner);\n}\n```\n\n不难想到，编译之后的`Outer$InheritInner`应该是下面这个样子:\n\n```java\nclass Outer$InheritInner extends WithInner$Inner {\n\tfinal Outer this$0;\n  \tpublic Outer$InheritInner(Outer outer, WithInner wi) {\n//先初始化父内部类，从而初始化父内部类中的final WithInner this$0，继而通过继承得到对WithInner的引用\n\t\twi.super(wi);\n\t\tthis$0 = outer;\n        ...\n \t}\n}\n```\n\n#### 内部类的子类不是内部类\n\n下面通过一个示例来说明这个问题：\n\n```java\nclass WithInner {\n\tclass Inner{}\n}\nclass InheritInner extends WithInner.Inner{\n\tpublic InheritInner(WithInner wi) {\n\t\twi.super();\n\t}\n}\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tWithInner wi = new WithInner();\n\t\tInheritInner ii = new InheritInner(wi);\n\t}\n}\n```\n\n和“内部类及其子类在不同的外围类中”的情况一样，当内部类的子类不是一个内部类时，我们也必须显式地添加一个带外围类对象的构造器，并在构造器内使用如下语法：\n\n```java\nenclosingClassReference.super();\n```\n\n否则，会产生如下错误：\n\n```java\nNo enclosing instance of type WithInner is available due to some intermediate constructor invocation\n```\n\n翻译过来就是\n\n```java\n由于一些中间构造器的调用，没有外围类WithInner的实例可用\n```\n\n","source":"_posts/java-inner-class-extends.md","raw":"---\ntitle: Java中的内部类继承\ndate: 2019-01-13 18:09:54\ntags: java\ncategories: java\n---\n\n由于Java中的匿名内部类不能被继承，而局部内部类和静态内部类的继承，与普通类继承没有区别。故本文主要描述成员内部类的继承问题。\n\n<!--more-->\n\n成员内部类的继承可分为以下三种情况：\n\n* 内部类及其子类在同一个外围类中\n* 内部类及其子类在不同的外围类中\n* 内部类的子类不是内部类\n\n下面对这三种情况逐一分析\n\n#### 内部类及其子类在同一个外围类中\n\n在这种情况下，内部类和子类都是同一个外围类的内部类，此时成员内部类的继承与普通类的继承没有区别。下面通过一个示例来说明这个问题：\n\n```java\nclass WithInner {\n\tclass Inner{\n\t\tpublic Inner() {\n\t\t\tSystem.out.println(\"Inner\");\n\t\t}\t\t\n\t}\n\t\n\tclass InheritInner extends Inner {\n\t\tpublic InheritInner() {\n\t\t\tSystem.out.println(\"InheritInner\");\n\t\t}\n\t}\n}\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tWithInner wi = new WithInner();\n\t\tWithInner.InheritInner ii = wi.new InheritInner();\n\t}\n}\n输出如下：\nInner\nInheritInner\n```\n\n上述程序编译后，生成了如下的class文件\n\n```java\nMain.class\nWithInner$InheritInner.class\nWithInner$Inner.class\nWithInner.class\n```\n\n在[《Java内部类实现原理分析》](https://www.hegongshan.com/2019/01/14/java-inner-class-implementation-principle/)中，我们已经知道编译器会为内部类自动添加一个声明为final的外围类字段，并为内部类自动生成一个带参数的构造方法，就像下面这样：\n\n```java\nCompiled from \"Main.java\"\nclass WithInner$InheritInner extends WithInner$Inner {\n\tfinal WithInner this$0;\n\tpublic WithInner$InheritInner(WithInner);\n}\n```\n\n由于`WithInner$InheritInner`类和`WithInner$Inner`类都在`WithInner`类中，编译器会为`WithInner$InheritInner`类自动添加声明为final的WithInner，故`WithInner$InheritInner`类继承`WithInner$Inner`类时，我们并不需要做什么额外的工作，就像普通类继承一样。\n\n#### 内部类及其子类在不同的外围类中\n\n先来看下面的程序\n\n```java\nclass WithInner {\n\tclass Inner{\n\t\tpublic Inner() {\n\t\t\tSystem.out.println(\"Inner\");\n\t\t}\t\t\n\t}\n}\nclass Outer {\n\tclass InheritInner extends WithInner.Inner {\n\t\tpublic InheritInner(WithInner wi) {\n\t\t\twi.super();\n\t\t\tSystem.out.println(\"InheritInner\");\n\t\t}\n\t}\n}\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tWithInner wi = new WithInner();\n\t\tOuter outer = new Outer();\n\t\tOuter.InheritInner ii = outer.new InheritInner(wi);\n\t}\n}\n输出如下：\nInner\nInheritInner\n```\n\nInheritInner继承自内部类WithInner.Inner，由于InheritInner不在WithInner中，编译器不会为其自动添加具有WithInner参数的构造器，当要生成一个构造器时，必须传入一个指向外围类对象的引用。此外，还必须在构造器内使用如下语法，显式地调用其父类WithInner.Inner的构造器：\n\n```java\nenclosingClassReference.super();\n```\n\n否则，将会产生如下错误：\n\n```java\nNo enclosing instance of type WithInner is accessible to invoke the super constructor. \nMust define a constructor and explicitly qualify its super constructor invocation\nwith an instance of WithInner (e.g. x.super() where x is an instance of WithInner).\n```\n\n翻译过来就是\n\n```java\n没有外围类WithInner的实例，无法调用父类构造器。\n必须定义一个构造器，并且用WithInner的实例显式地调用父类构造器。\n（如，x.super(),其中x是WithInner的一个实例）\n```\n\n上述程序编译后，生成了如下的class文件\n\n```java\nMain.class\nOuter$InheritInner.class\nOuter.class\nWithInner$Inner.class\nWithInner.class\n```\n\n使用`javap -p`查看`Outer$InheritInner.class`,输出内容如下：\n\n```java\nCompiled from \"Main.java\"\nclass Outer$InheritInner extends WithInner$Inner {\n  final Outer this$0;\n  public Outer$InheritInner(Outer, WithInner);\n}\n```\n\n不难想到，编译之后的`Outer$InheritInner`应该是下面这个样子:\n\n```java\nclass Outer$InheritInner extends WithInner$Inner {\n\tfinal Outer this$0;\n  \tpublic Outer$InheritInner(Outer outer, WithInner wi) {\n//先初始化父内部类，从而初始化父内部类中的final WithInner this$0，继而通过继承得到对WithInner的引用\n\t\twi.super(wi);\n\t\tthis$0 = outer;\n        ...\n \t}\n}\n```\n\n#### 内部类的子类不是内部类\n\n下面通过一个示例来说明这个问题：\n\n```java\nclass WithInner {\n\tclass Inner{}\n}\nclass InheritInner extends WithInner.Inner{\n\tpublic InheritInner(WithInner wi) {\n\t\twi.super();\n\t}\n}\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tWithInner wi = new WithInner();\n\t\tInheritInner ii = new InheritInner(wi);\n\t}\n}\n```\n\n和“内部类及其子类在不同的外围类中”的情况一样，当内部类的子类不是一个内部类时，我们也必须显式地添加一个带外围类对象的构造器，并在构造器内使用如下语法：\n\n```java\nenclosingClassReference.super();\n```\n\n否则，会产生如下错误：\n\n```java\nNo enclosing instance of type WithInner is available due to some intermediate constructor invocation\n```\n\n翻译过来就是\n\n```java\n由于一些中间构造器的调用，没有外围类WithInner的实例可用\n```\n\n","slug":"java-inner-class-extends","published":1,"updated":"2019-01-25T12:54:18.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9app001zj1q0nt0pg7ey","content":"<p>由于Java中的匿名内部类不能被继承，而局部内部类和静态内部类的继承，与普通类继承没有区别。故本文主要描述成员内部类的继承问题。</p>\n<a id=\"more\"></a>\n<p>成员内部类的继承可分为以下三种情况：</p>\n<ul>\n<li>内部类及其子类在同一个外围类中</li>\n<li>内部类及其子类在不同的外围类中</li>\n<li>内部类的子类不是内部类</li>\n</ul>\n<p>下面对这三种情况逐一分析</p>\n<h4 id=\"内部类及其子类在同一个外围类中\"><a href=\"#内部类及其子类在同一个外围类中\" class=\"headerlink\" title=\"内部类及其子类在同一个外围类中\"></a>内部类及其子类在同一个外围类中</h4><p>在这种情况下，内部类和子类都是同一个外围类的内部类，此时成员内部类的继承与普通类的继承没有区别。下面通过一个示例来说明这个问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WithInner</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Inner</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Inner\"</span>);</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InheritInner</span> <span class=\"keyword\">extends</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InheritInner</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"InheritInner\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tWithInner wi = <span class=\"keyword\">new</span> WithInner();</span><br><span class=\"line\">\t\tWithInner.InheritInner ii = wi.new InheritInner();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出如下：</span><br><span class=\"line\">Inner</span><br><span class=\"line\">InheritInner</span><br></pre></td></tr></table></figure>\n<p>上述程序编译后，生成了如下的class文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Main.class</span><br><span class=\"line\">WithInner$InheritInner.class</span><br><span class=\"line\">WithInner$Inner.class</span><br><span class=\"line\">WithInner.class</span><br></pre></td></tr></table></figure>\n<p>在<a href=\"https://www.hegongshan.com/2019/01/14/java-inner-class-implementation-principle/\">《Java内部类实现原理分析》</a>中，我们已经知道编译器会为内部类自动添加一个声明为final的外围类字段，并为内部类自动生成一个带参数的构造方法，就像下面这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiled from <span class=\"string\">\"Main.java\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WithInner</span>$<span class=\"title\">InheritInner</span> <span class=\"keyword\">extends</span> <span class=\"title\">WithInner</span>$<span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> WithInner <span class=\"keyword\">this</span>$<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> WithInner$InheritInner(WithInner);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于<code>WithInner$InheritInner</code>类和<code>WithInner$Inner</code>类都在<code>WithInner</code>类中，编译器会为<code>WithInner$InheritInner</code>类自动添加声明为final的WithInner，故<code>WithInner$InheritInner</code>类继承<code>WithInner$Inner</code>类时，我们并不需要做什么额外的工作，就像普通类继承一样。</p>\n<h4 id=\"内部类及其子类在不同的外围类中\"><a href=\"#内部类及其子类在不同的外围类中\" class=\"headerlink\" title=\"内部类及其子类在不同的外围类中\"></a>内部类及其子类在不同的外围类中</h4><p>先来看下面的程序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WithInner</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Inner</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Inner\"</span>);</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InheritInner</span> <span class=\"keyword\">extends</span> <span class=\"title\">WithInner</span>.<span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InheritInner</span><span class=\"params\">(WithInner wi)</span> </span>&#123;</span><br><span class=\"line\">\t\t\twi.<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"InheritInner\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tWithInner wi = <span class=\"keyword\">new</span> WithInner();</span><br><span class=\"line\">\t\tOuter outer = <span class=\"keyword\">new</span> Outer();</span><br><span class=\"line\">\t\tOuter.InheritInner ii = outer.new InheritInner(wi);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出如下：</span><br><span class=\"line\">Inner</span><br><span class=\"line\">InheritInner</span><br></pre></td></tr></table></figure>\n<p>InheritInner继承自内部类WithInner.Inner，由于InheritInner不在WithInner中，编译器不会为其自动添加具有WithInner参数的构造器，当要生成一个构造器时，必须传入一个指向外围类对象的引用。此外，还必须在构造器内使用如下语法，显式地调用其父类WithInner.Inner的构造器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enclosingClassReference.<span class=\"keyword\">super</span>();</span><br></pre></td></tr></table></figure>\n<p>否则，将会产生如下错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No enclosing instance of type WithInner is accessible to invoke the <span class=\"keyword\">super</span> constructor. </span><br><span class=\"line\">Must define a constructor and explicitly qualify its <span class=\"keyword\">super</span> constructor invocation</span><br><span class=\"line\"><span class=\"function\">with an instance of <span class=\"title\">WithInner</span> <span class=\"params\">(e.g. x.<span class=\"keyword\">super</span>()</span> where x is an instance of WithInner).</span></span><br></pre></td></tr></table></figure>\n<p>翻译过来就是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">没有外围类WithInner的实例，无法调用父类构造器。</span><br><span class=\"line\">必须定义一个构造器，并且用WithInner的实例显式地调用父类构造器。</span><br><span class=\"line\">（如，x.<span class=\"keyword\">super</span>(),其中x是WithInner的一个实例）</span><br></pre></td></tr></table></figure>\n<p>上述程序编译后，生成了如下的class文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Main.class</span><br><span class=\"line\">Outer$InheritInner.class</span><br><span class=\"line\">Outer.class</span><br><span class=\"line\">WithInner$Inner.class</span><br><span class=\"line\">WithInner.class</span><br></pre></td></tr></table></figure>\n<p>使用<code>javap -p</code>查看<code>Outer$InheritInner.class</code>,输出内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiled from <span class=\"string\">\"Main.java\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span>$<span class=\"title\">InheritInner</span> <span class=\"keyword\">extends</span> <span class=\"title\">WithInner</span>$<span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Outer <span class=\"keyword\">this</span>$<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Outer$InheritInner(Outer, WithInner);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不难想到，编译之后的<code>Outer$InheritInner</code>应该是下面这个样子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span>$<span class=\"title\">InheritInner</span> <span class=\"keyword\">extends</span> <span class=\"title\">WithInner</span>$<span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Outer <span class=\"keyword\">this</span>$<span class=\"number\">0</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">public</span> Outer$InheritInner(Outer outer, WithInner wi) &#123;</span><br><span class=\"line\"><span class=\"comment\">//先初始化父内部类，从而初始化父内部类中的final WithInner this$0，继而通过继承得到对WithInner的引用</span></span><br><span class=\"line\">\t\twi.<span class=\"keyword\">super</span>(wi);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>$<span class=\"number\">0</span> = outer;</span><br><span class=\"line\">        ...</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"内部类的子类不是内部类\"><a href=\"#内部类的子类不是内部类\" class=\"headerlink\" title=\"内部类的子类不是内部类\"></a>内部类的子类不是内部类</h4><p>下面通过一个示例来说明这个问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WithInner</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InheritInner</span> <span class=\"keyword\">extends</span> <span class=\"title\">WithInner</span>.<span class=\"title\">Inner</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InheritInner</span><span class=\"params\">(WithInner wi)</span> </span>&#123;</span><br><span class=\"line\">\t\twi.<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tWithInner wi = <span class=\"keyword\">new</span> WithInner();</span><br><span class=\"line\">\t\tInheritInner ii = <span class=\"keyword\">new</span> InheritInner(wi);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和“内部类及其子类在不同的外围类中”的情况一样，当内部类的子类不是一个内部类时，我们也必须显式地添加一个带外围类对象的构造器，并在构造器内使用如下语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enclosingClassReference.<span class=\"keyword\">super</span>();</span><br></pre></td></tr></table></figure>\n<p>否则，会产生如下错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No enclosing instance of type WithInner is available due to some intermediate constructor invocation</span><br></pre></td></tr></table></figure>\n<p>翻译过来就是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由于一些中间构造器的调用，没有外围类WithInner的实例可用</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>由于Java中的匿名内部类不能被继承，而局部内部类和静态内部类的继承，与普通类继承没有区别。故本文主要描述成员内部类的继承问题。</p>","more":"<p>成员内部类的继承可分为以下三种情况：</p>\n<ul>\n<li>内部类及其子类在同一个外围类中</li>\n<li>内部类及其子类在不同的外围类中</li>\n<li>内部类的子类不是内部类</li>\n</ul>\n<p>下面对这三种情况逐一分析</p>\n<h4 id=\"内部类及其子类在同一个外围类中\"><a href=\"#内部类及其子类在同一个外围类中\" class=\"headerlink\" title=\"内部类及其子类在同一个外围类中\"></a>内部类及其子类在同一个外围类中</h4><p>在这种情况下，内部类和子类都是同一个外围类的内部类，此时成员内部类的继承与普通类的继承没有区别。下面通过一个示例来说明这个问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WithInner</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Inner</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Inner\"</span>);</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InheritInner</span> <span class=\"keyword\">extends</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InheritInner</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"InheritInner\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tWithInner wi = <span class=\"keyword\">new</span> WithInner();</span><br><span class=\"line\">\t\tWithInner.InheritInner ii = wi.new InheritInner();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出如下：</span><br><span class=\"line\">Inner</span><br><span class=\"line\">InheritInner</span><br></pre></td></tr></table></figure>\n<p>上述程序编译后，生成了如下的class文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Main.class</span><br><span class=\"line\">WithInner$InheritInner.class</span><br><span class=\"line\">WithInner$Inner.class</span><br><span class=\"line\">WithInner.class</span><br></pre></td></tr></table></figure>\n<p>在<a href=\"https://www.hegongshan.com/2019/01/14/java-inner-class-implementation-principle/\">《Java内部类实现原理分析》</a>中，我们已经知道编译器会为内部类自动添加一个声明为final的外围类字段，并为内部类自动生成一个带参数的构造方法，就像下面这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiled from <span class=\"string\">\"Main.java\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WithInner</span>$<span class=\"title\">InheritInner</span> <span class=\"keyword\">extends</span> <span class=\"title\">WithInner</span>$<span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> WithInner <span class=\"keyword\">this</span>$<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> WithInner$InheritInner(WithInner);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于<code>WithInner$InheritInner</code>类和<code>WithInner$Inner</code>类都在<code>WithInner</code>类中，编译器会为<code>WithInner$InheritInner</code>类自动添加声明为final的WithInner，故<code>WithInner$InheritInner</code>类继承<code>WithInner$Inner</code>类时，我们并不需要做什么额外的工作，就像普通类继承一样。</p>\n<h4 id=\"内部类及其子类在不同的外围类中\"><a href=\"#内部类及其子类在不同的外围类中\" class=\"headerlink\" title=\"内部类及其子类在不同的外围类中\"></a>内部类及其子类在不同的外围类中</h4><p>先来看下面的程序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WithInner</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Inner</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Inner\"</span>);</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InheritInner</span> <span class=\"keyword\">extends</span> <span class=\"title\">WithInner</span>.<span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InheritInner</span><span class=\"params\">(WithInner wi)</span> </span>&#123;</span><br><span class=\"line\">\t\t\twi.<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"InheritInner\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tWithInner wi = <span class=\"keyword\">new</span> WithInner();</span><br><span class=\"line\">\t\tOuter outer = <span class=\"keyword\">new</span> Outer();</span><br><span class=\"line\">\t\tOuter.InheritInner ii = outer.new InheritInner(wi);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出如下：</span><br><span class=\"line\">Inner</span><br><span class=\"line\">InheritInner</span><br></pre></td></tr></table></figure>\n<p>InheritInner继承自内部类WithInner.Inner，由于InheritInner不在WithInner中，编译器不会为其自动添加具有WithInner参数的构造器，当要生成一个构造器时，必须传入一个指向外围类对象的引用。此外，还必须在构造器内使用如下语法，显式地调用其父类WithInner.Inner的构造器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enclosingClassReference.<span class=\"keyword\">super</span>();</span><br></pre></td></tr></table></figure>\n<p>否则，将会产生如下错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No enclosing instance of type WithInner is accessible to invoke the <span class=\"keyword\">super</span> constructor. </span><br><span class=\"line\">Must define a constructor and explicitly qualify its <span class=\"keyword\">super</span> constructor invocation</span><br><span class=\"line\"><span class=\"function\">with an instance of <span class=\"title\">WithInner</span> <span class=\"params\">(e.g. x.<span class=\"keyword\">super</span>()</span> where x is an instance of WithInner).</span></span><br></pre></td></tr></table></figure>\n<p>翻译过来就是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">没有外围类WithInner的实例，无法调用父类构造器。</span><br><span class=\"line\">必须定义一个构造器，并且用WithInner的实例显式地调用父类构造器。</span><br><span class=\"line\">（如，x.<span class=\"keyword\">super</span>(),其中x是WithInner的一个实例）</span><br></pre></td></tr></table></figure>\n<p>上述程序编译后，生成了如下的class文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Main.class</span><br><span class=\"line\">Outer$InheritInner.class</span><br><span class=\"line\">Outer.class</span><br><span class=\"line\">WithInner$Inner.class</span><br><span class=\"line\">WithInner.class</span><br></pre></td></tr></table></figure>\n<p>使用<code>javap -p</code>查看<code>Outer$InheritInner.class</code>,输出内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiled from <span class=\"string\">\"Main.java\"</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span>$<span class=\"title\">InheritInner</span> <span class=\"keyword\">extends</span> <span class=\"title\">WithInner</span>$<span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Outer <span class=\"keyword\">this</span>$<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Outer$InheritInner(Outer, WithInner);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不难想到，编译之后的<code>Outer$InheritInner</code>应该是下面这个样子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span>$<span class=\"title\">InheritInner</span> <span class=\"keyword\">extends</span> <span class=\"title\">WithInner</span>$<span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Outer <span class=\"keyword\">this</span>$<span class=\"number\">0</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">public</span> Outer$InheritInner(Outer outer, WithInner wi) &#123;</span><br><span class=\"line\"><span class=\"comment\">//先初始化父内部类，从而初始化父内部类中的final WithInner this$0，继而通过继承得到对WithInner的引用</span></span><br><span class=\"line\">\t\twi.<span class=\"keyword\">super</span>(wi);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>$<span class=\"number\">0</span> = outer;</span><br><span class=\"line\">        ...</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"内部类的子类不是内部类\"><a href=\"#内部类的子类不是内部类\" class=\"headerlink\" title=\"内部类的子类不是内部类\"></a>内部类的子类不是内部类</h4><p>下面通过一个示例来说明这个问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WithInner</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InheritInner</span> <span class=\"keyword\">extends</span> <span class=\"title\">WithInner</span>.<span class=\"title\">Inner</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InheritInner</span><span class=\"params\">(WithInner wi)</span> </span>&#123;</span><br><span class=\"line\">\t\twi.<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tWithInner wi = <span class=\"keyword\">new</span> WithInner();</span><br><span class=\"line\">\t\tInheritInner ii = <span class=\"keyword\">new</span> InheritInner(wi);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和“内部类及其子类在不同的外围类中”的情况一样，当内部类的子类不是一个内部类时，我们也必须显式地添加一个带外围类对象的构造器，并在构造器内使用如下语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enclosingClassReference.<span class=\"keyword\">super</span>();</span><br></pre></td></tr></table></figure>\n<p>否则，会产生如下错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No enclosing instance of type WithInner is available due to some intermediate constructor invocation</span><br></pre></td></tr></table></figure>\n<p>翻译过来就是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由于一些中间构造器的调用，没有外围类WithInner的实例可用</span><br></pre></td></tr></table></figure>"},{"title":"Java中的内部类","date":"2019-01-12T07:52:48.000Z","updated":"2019-01-12T07:52:48.000Z","_content":"\n将一个类的定义放在另一个类的定义内部，这就是内部类。如下所示\n\n```java\nclass OuterClass {\n    ...\n    class InnerClass {\n        ...\n    }\n}\n```\n\n从总体上来讲，Java中的内部类可以分为：\n\n* 静态内部类（static inner class）：声明为static的内部类\n* 非静态内部类（non-static inner class）\n\n```java\nclass OuterClass {\n    ...\n    static class StaticInnerClass {\n        ...\n    }\n    class InnerClass {\n        ...\n    }\n}\n```\n\n其中，非静态内部类又可细分为以下三种：\n\n* 成员内部类：作为外部类的成员定义\n* 局部内部类（local inner class）：在外部类的方法中定义\n* 匿名内部类（anonymous inner class）：没有名字的内部类\n\n内部类是一种编译器现象，与虚拟机无关。它可以访问外部类中定义的所有方法和域，即使这些方法和域声明为private。此外，内部类可以使用访问说明符public、protected和private修饰。\n\n<!--more-->\n\n### 非静态内部类\n\n**非静态内部类中不能声明static方法，声明的所有静态域都必须是final**。\n\n#### 内部类的特殊语法\n\n要想实例化一个非静态内部类，需要使用一种特殊的语法`.new`，就像下面这样：\n\n```java\npublic class OuterClass {\n    class InnerClass {}\n    public static void main(String[] args) {\n\t\tOuterClass outer = new OuterClass();\n\t\tInnerClass inner = outer.new InnerClass();\n\t}\n}\n```\n\n在外部类的作用域之外，可以这样引用内部类：\n\n```java\nOuterClass.InnerClass\n```\n\n下面是示例展示了如何在外部类的作用域之外，实例化它的内部类。\n\n```java\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tOuterClass outer = new OuterClass();\n\t\tOuterClass.InnerClass inner = outer.new InnerClass();\n\t}\n}\nclass OuterClass {\n\tclass InnerClass {\n\t\tpublic InnerClass() {\n\t\t\tSystem.out.println(\"InnerClass实例化\");\n\t\t}\n\t}\n}\n输出结果：\nInnerClass实例化\n```\n\n在内部类中，如果需要使用外部类对象的引用，可以使用外部类的名字后紧跟圆点和***this***，就像这样`OuterClass.this​`,下面是一个简单的示例：\n\n```java\npublic class OuterClass {\n\tpublic void print() {\n\t\tSystem.out.println(\"OuterClass.print()\");\n\t}\n    class InnerClass {\n    \tpublic OuterClass getOuter() {\n    \t\treturn OuterClass.this;\n    \t}\n\t}\n    public static void main(String[] args) {\n\t\tOuterClass outer = new OuterClass();\n\t\tInnerClass inner = outer.new InnerClass();\n\t\tinner.getOuter().print();\n\t}\n}\n输出结果：\nOuterClass.print()\n```\n\n#### 成员内部类\n\n成员内部类是最常见的内部类，也称为普通内部类。成员内部类作为外部类的成员来定义，如下所示：\n\n```java\npublic class OuterClass {\n\tclass InnerClass {\n\t\t\n\t}\n}\n```\n\n#### 局部内部类\n\n在外围类的方法中声明的类，称为局部内部类。下面是一个简单的例子\n\n```java\npublic class Outer {\n\tprivate int count = 0;\n\n\tpublic void start() {\n\t\tclass LocalInnerClass {\n\t\t\tpublic void service() {\n\t\t\t\tSystem.out.println(count);\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tLocalInnerClass inner = new LocalInnerClass();\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tinner.service();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tOuter main = new Outer();\n\t\tmain.start();\n\t}\n}\n输出结果：\n0\n1\n2\n3\n4\n```\n\n**局部内部类不能用public、protected或private访问说明符声明**。它的优势是对外部世界可以完全地隐藏起来，除了start方法之外，Outer的其他地方均不能访问它。\n\n#### 匿名内部类\n\n匿名内部类，顾名思义，就是没有命名的内部类。语法格式如下\n\n```java\nnew SuperType(construction parameters) {\n    方法和属性\n}\n```\n\n下面是匿名内部类的一个示例。\n\n```java\ninterface Counter {\n\tint next();\n}\npublic class Outer {\n\tprivate int count = 0;\n\tCounter getCounter(final String name) {\n        return new Counter() {\n            {\n                System.out.println(\"Counter()\");\n            }\n            public int next() {\n                System.out.print(name);\n                return count++;\n            }\n        };\n    }\n    public static void main(String[] args) {\n    \tOuter outer = new Outer();\n        Counter c = outer.getCounter();\n        for (int i = 0; i < 5; i++) {\n\t\t\tSystem.out.println(c.next());\n        }\n    }\n}\n输出结果：\nCounter()\n0\n1\n2\n3\n4\n```\n\n在上面的程序中，由于getCounter方法中的name这个变量不是外围类中定义的属性，所以必须声明为final类型，才能在匿名内部类中使用（对于局部内部类，情况也是一样的），否则，将产生如下的语法错误：\n\n```java\nCannot refer to the non-final local variable name defined in an enclosing scope\n```\n\n由于构造器的名字必须与类名相同，而匿名类没有类名，所以匿名类不能有构造器。因此，将参数传递给超类（父类）构造器。在匿名内部类实现接口的时候，不能有任何构造参数。\n\n### 静态内部类\n\n静态内部类，就是声明为static的内部类。**实例化静态内部类，不需要其外围类对象**。下面是一个静态内部类的示例：\n\n```java\npublic class Outer {\n\tprivate int count = 0;\n\tprivate static String className = \"OUTER\";\n\t\n\tpublic static class StaticInnerClass {\n\t\tpublic StaticInnerClass(String name) {\n\t\t\tSystem.out.println(name);\n\t\t\tSystem.out.println(\"outer class name:\"+className);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tOuter main = new Outer();\n        //下面两种实例化方法是等价的\n\t\tStaticInnerClass inner = new StaticInnerClass(\"inner\");\n\t\tOuter.StaticInnerClass inner2 = new Outer.StaticInnerClass(\"inner2\");\n\t}\n}\n输出结果：\ninner\nouter class name:OUTER\ninner2\nouter class name:OUTER\n```\n\n值得一提的是，**静态内部类不能访问外围类中的非静态的域和方法**。以上面的程序为例，StaticInnerClass类可以访问到Outer类的className属性，因为className声明为static，但StaticInnerClass类不能访问count。\n\n**什么时候使用静态内部类？**在内部类不需要访问外围类对象的时候，应该使用静态内部类。\n\n### 内部类标识符\n\n对于成员内部类和静态内部类，编译器将会把它编译成文件名为`外围类名$内部类名.class`的class文件。\n\n对于匿名内部类，编译器会将它编译名为`外围类名$n.class`的class文件；对于局部内部类，则被编译为`外围类名$n内部类名`的class文件。（n是由编译器简单生成的一个数字）\n\n下面通过一个简单的例子来展示这四种内部类的字节码文件的命名规则\n\n```java\ninterface Counter {\n\tint next();\n}\npublic class Outer {\n\tprivate int count = 0;\n    class NormalCounter implements Counter {\n        public int next() {\n            return count++;\n        }\n    }\n\tCounter getCounter(final String name) {\n\t\tclass LocalCounter implements Counter {\n\t\t\tstatic final String name = \"\";\n\t\t\tpublic LocalCounter() {\n\t\t\t\tSystem.out.println(\"LocalCounter()\");\n\t\t\t}\n\n\t\t\tpublic int next() {\n\t\t\t\tSystem.out.print(name);\n\t\t\t\treturn count++;\n\t\t\t}\n\n\t\t}\n\t\treturn new LocalCounter();\n\t}\n\n\tCounter getCounter2(final String name) {\n\t\treturn new Counter() {\n\t\t\t{\n\t\t\t\tSystem.out.println(\"Counter()\");\n\t\t\t}\n\t\t\tpublic int next() {\n\t\t\t\tSystem.out.print(name);\n\t\t\t\treturn count++;\n\t\t\t}\n\t\t};\n\t}\n\tstatic class StaticInnerClass{\n\t\t\n\t}\n\tpublic static void main(String[] args) {\n\t\tOuter lic = new Outer();\n\t\tCounter c1 = lic.getCounter(\"Local inner class \");\n\t\tCounter c2 = lic.getCounter2(\"Anonymous inner class \");\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tSystem.out.println(c1.next());\n\t\t}\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tSystem.out.println(c2.next());\n\t\t}\n\t}\n}\n```\n\nOuter.java编译之后，生成了如下几个class文件：\n\n```java\nCounter.class\nOuter$1.class\nOuter$1LocalCounter.class\nOuter$NormalCounter.class\nOuter$StaticInnerClass.class\nOuter.class\n```\n","source":"_posts/java-inner-class.md","raw":"---\ntitle: Java中的内部类\ndate: 2019-01-12 15:52:48\nupdated: 2019-01-12 15:52:48\ntags: java\ncategories: java\n---\n\n将一个类的定义放在另一个类的定义内部，这就是内部类。如下所示\n\n```java\nclass OuterClass {\n    ...\n    class InnerClass {\n        ...\n    }\n}\n```\n\n从总体上来讲，Java中的内部类可以分为：\n\n* 静态内部类（static inner class）：声明为static的内部类\n* 非静态内部类（non-static inner class）\n\n```java\nclass OuterClass {\n    ...\n    static class StaticInnerClass {\n        ...\n    }\n    class InnerClass {\n        ...\n    }\n}\n```\n\n其中，非静态内部类又可细分为以下三种：\n\n* 成员内部类：作为外部类的成员定义\n* 局部内部类（local inner class）：在外部类的方法中定义\n* 匿名内部类（anonymous inner class）：没有名字的内部类\n\n内部类是一种编译器现象，与虚拟机无关。它可以访问外部类中定义的所有方法和域，即使这些方法和域声明为private。此外，内部类可以使用访问说明符public、protected和private修饰。\n\n<!--more-->\n\n### 非静态内部类\n\n**非静态内部类中不能声明static方法，声明的所有静态域都必须是final**。\n\n#### 内部类的特殊语法\n\n要想实例化一个非静态内部类，需要使用一种特殊的语法`.new`，就像下面这样：\n\n```java\npublic class OuterClass {\n    class InnerClass {}\n    public static void main(String[] args) {\n\t\tOuterClass outer = new OuterClass();\n\t\tInnerClass inner = outer.new InnerClass();\n\t}\n}\n```\n\n在外部类的作用域之外，可以这样引用内部类：\n\n```java\nOuterClass.InnerClass\n```\n\n下面是示例展示了如何在外部类的作用域之外，实例化它的内部类。\n\n```java\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tOuterClass outer = new OuterClass();\n\t\tOuterClass.InnerClass inner = outer.new InnerClass();\n\t}\n}\nclass OuterClass {\n\tclass InnerClass {\n\t\tpublic InnerClass() {\n\t\t\tSystem.out.println(\"InnerClass实例化\");\n\t\t}\n\t}\n}\n输出结果：\nInnerClass实例化\n```\n\n在内部类中，如果需要使用外部类对象的引用，可以使用外部类的名字后紧跟圆点和***this***，就像这样`OuterClass.this​`,下面是一个简单的示例：\n\n```java\npublic class OuterClass {\n\tpublic void print() {\n\t\tSystem.out.println(\"OuterClass.print()\");\n\t}\n    class InnerClass {\n    \tpublic OuterClass getOuter() {\n    \t\treturn OuterClass.this;\n    \t}\n\t}\n    public static void main(String[] args) {\n\t\tOuterClass outer = new OuterClass();\n\t\tInnerClass inner = outer.new InnerClass();\n\t\tinner.getOuter().print();\n\t}\n}\n输出结果：\nOuterClass.print()\n```\n\n#### 成员内部类\n\n成员内部类是最常见的内部类，也称为普通内部类。成员内部类作为外部类的成员来定义，如下所示：\n\n```java\npublic class OuterClass {\n\tclass InnerClass {\n\t\t\n\t}\n}\n```\n\n#### 局部内部类\n\n在外围类的方法中声明的类，称为局部内部类。下面是一个简单的例子\n\n```java\npublic class Outer {\n\tprivate int count = 0;\n\n\tpublic void start() {\n\t\tclass LocalInnerClass {\n\t\t\tpublic void service() {\n\t\t\t\tSystem.out.println(count);\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tLocalInnerClass inner = new LocalInnerClass();\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tinner.service();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tOuter main = new Outer();\n\t\tmain.start();\n\t}\n}\n输出结果：\n0\n1\n2\n3\n4\n```\n\n**局部内部类不能用public、protected或private访问说明符声明**。它的优势是对外部世界可以完全地隐藏起来，除了start方法之外，Outer的其他地方均不能访问它。\n\n#### 匿名内部类\n\n匿名内部类，顾名思义，就是没有命名的内部类。语法格式如下\n\n```java\nnew SuperType(construction parameters) {\n    方法和属性\n}\n```\n\n下面是匿名内部类的一个示例。\n\n```java\ninterface Counter {\n\tint next();\n}\npublic class Outer {\n\tprivate int count = 0;\n\tCounter getCounter(final String name) {\n        return new Counter() {\n            {\n                System.out.println(\"Counter()\");\n            }\n            public int next() {\n                System.out.print(name);\n                return count++;\n            }\n        };\n    }\n    public static void main(String[] args) {\n    \tOuter outer = new Outer();\n        Counter c = outer.getCounter();\n        for (int i = 0; i < 5; i++) {\n\t\t\tSystem.out.println(c.next());\n        }\n    }\n}\n输出结果：\nCounter()\n0\n1\n2\n3\n4\n```\n\n在上面的程序中，由于getCounter方法中的name这个变量不是外围类中定义的属性，所以必须声明为final类型，才能在匿名内部类中使用（对于局部内部类，情况也是一样的），否则，将产生如下的语法错误：\n\n```java\nCannot refer to the non-final local variable name defined in an enclosing scope\n```\n\n由于构造器的名字必须与类名相同，而匿名类没有类名，所以匿名类不能有构造器。因此，将参数传递给超类（父类）构造器。在匿名内部类实现接口的时候，不能有任何构造参数。\n\n### 静态内部类\n\n静态内部类，就是声明为static的内部类。**实例化静态内部类，不需要其外围类对象**。下面是一个静态内部类的示例：\n\n```java\npublic class Outer {\n\tprivate int count = 0;\n\tprivate static String className = \"OUTER\";\n\t\n\tpublic static class StaticInnerClass {\n\t\tpublic StaticInnerClass(String name) {\n\t\t\tSystem.out.println(name);\n\t\t\tSystem.out.println(\"outer class name:\"+className);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tOuter main = new Outer();\n        //下面两种实例化方法是等价的\n\t\tStaticInnerClass inner = new StaticInnerClass(\"inner\");\n\t\tOuter.StaticInnerClass inner2 = new Outer.StaticInnerClass(\"inner2\");\n\t}\n}\n输出结果：\ninner\nouter class name:OUTER\ninner2\nouter class name:OUTER\n```\n\n值得一提的是，**静态内部类不能访问外围类中的非静态的域和方法**。以上面的程序为例，StaticInnerClass类可以访问到Outer类的className属性，因为className声明为static，但StaticInnerClass类不能访问count。\n\n**什么时候使用静态内部类？**在内部类不需要访问外围类对象的时候，应该使用静态内部类。\n\n### 内部类标识符\n\n对于成员内部类和静态内部类，编译器将会把它编译成文件名为`外围类名$内部类名.class`的class文件。\n\n对于匿名内部类，编译器会将它编译名为`外围类名$n.class`的class文件；对于局部内部类，则被编译为`外围类名$n内部类名`的class文件。（n是由编译器简单生成的一个数字）\n\n下面通过一个简单的例子来展示这四种内部类的字节码文件的命名规则\n\n```java\ninterface Counter {\n\tint next();\n}\npublic class Outer {\n\tprivate int count = 0;\n    class NormalCounter implements Counter {\n        public int next() {\n            return count++;\n        }\n    }\n\tCounter getCounter(final String name) {\n\t\tclass LocalCounter implements Counter {\n\t\t\tstatic final String name = \"\";\n\t\t\tpublic LocalCounter() {\n\t\t\t\tSystem.out.println(\"LocalCounter()\");\n\t\t\t}\n\n\t\t\tpublic int next() {\n\t\t\t\tSystem.out.print(name);\n\t\t\t\treturn count++;\n\t\t\t}\n\n\t\t}\n\t\treturn new LocalCounter();\n\t}\n\n\tCounter getCounter2(final String name) {\n\t\treturn new Counter() {\n\t\t\t{\n\t\t\t\tSystem.out.println(\"Counter()\");\n\t\t\t}\n\t\t\tpublic int next() {\n\t\t\t\tSystem.out.print(name);\n\t\t\t\treturn count++;\n\t\t\t}\n\t\t};\n\t}\n\tstatic class StaticInnerClass{\n\t\t\n\t}\n\tpublic static void main(String[] args) {\n\t\tOuter lic = new Outer();\n\t\tCounter c1 = lic.getCounter(\"Local inner class \");\n\t\tCounter c2 = lic.getCounter2(\"Anonymous inner class \");\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tSystem.out.println(c1.next());\n\t\t}\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tSystem.out.println(c2.next());\n\t\t}\n\t}\n}\n```\n\nOuter.java编译之后，生成了如下几个class文件：\n\n```java\nCounter.class\nOuter$1.class\nOuter$1LocalCounter.class\nOuter$NormalCounter.class\nOuter$StaticInnerClass.class\nOuter.class\n```\n","slug":"java-inner-class","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9apq0020j1q03bortal4","content":"<p>将一个类的定义放在另一个类的定义内部，这就是内部类。如下所示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从总体上来讲，Java中的内部类可以分为：</p>\n<ul>\n<li>静态内部类（static inner class）：声明为static的内部类</li>\n<li>非静态内部类（non-static inner class）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticInnerClass</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，非静态内部类又可细分为以下三种：</p>\n<ul>\n<li>成员内部类：作为外部类的成员定义</li>\n<li>局部内部类（local inner class）：在外部类的方法中定义</li>\n<li>匿名内部类（anonymous inner class）：没有名字的内部类</li>\n</ul>\n<p>内部类是一种编译器现象，与虚拟机无关。它可以访问外部类中定义的所有方法和域，即使这些方法和域声明为private。此外，内部类可以使用访问说明符public、protected和private修饰。</p>\n<a id=\"more\"></a>\n<h3 id=\"非静态内部类\"><a href=\"#非静态内部类\" class=\"headerlink\" title=\"非静态内部类\"></a>非静态内部类</h3><p><strong>非静态内部类中不能声明static方法，声明的所有静态域都必须是final</strong>。</p>\n<h4 id=\"内部类的特殊语法\"><a href=\"#内部类的特殊语法\" class=\"headerlink\" title=\"内部类的特殊语法\"></a>内部类的特殊语法</h4><p>要想实例化一个非静态内部类，需要使用一种特殊的语法<code>.new</code>，就像下面这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tOuterClass outer = <span class=\"keyword\">new</span> OuterClass();</span><br><span class=\"line\">\t\tInnerClass inner = outer.new InnerClass();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在外部类的作用域之外，可以这样引用内部类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OuterClass.InnerClass</span><br></pre></td></tr></table></figure>\n<p>下面是示例展示了如何在外部类的作用域之外，实例化它的内部类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tOuterClass outer = <span class=\"keyword\">new</span> OuterClass();</span><br><span class=\"line\">\t\tOuterClass.InnerClass inner = outer.new InnerClass();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InnerClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"InnerClass实例化\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">InnerClass实例化</span><br></pre></td></tr></table></figure>\n<p>在内部类中，如果需要使用外部类对象的引用，可以使用外部类的名字后紧跟圆点和<strong><em>this</em></strong>，就像这样<code>OuterClass.this​</code>,下面是一个简单的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"OuterClass.print()\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> OuterClass <span class=\"title\">getOuter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> OuterClass.<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tOuterClass outer = <span class=\"keyword\">new</span> OuterClass();</span><br><span class=\"line\">\t\tInnerClass inner = outer.new InnerClass();</span><br><span class=\"line\">\t\tinner.getOuter().print();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">OuterClass.print()</span><br></pre></td></tr></table></figure>\n<h4 id=\"成员内部类\"><a href=\"#成员内部类\" class=\"headerlink\" title=\"成员内部类\"></a>成员内部类</h4><p>成员内部类是最常见的内部类，也称为普通内部类。成员内部类作为外部类的成员来定义，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"局部内部类\"><a href=\"#局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类</h4><p>在外围类的方法中声明的类，称为局部内部类。下面是一个简单的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalInnerClass</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(count);</span><br><span class=\"line\">\t\t\t\tcount++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tLocalInnerClass inner = <span class=\"keyword\">new</span> LocalInnerClass();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tinner.service();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tOuter main = <span class=\"keyword\">new</span> Outer();</span><br><span class=\"line\">\t\tmain.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p><strong>局部内部类不能用public、protected或private访问说明符声明</strong>。它的优势是对外部世界可以完全地隐藏起来，除了start方法之外，Outer的其他地方均不能访问它。</p>\n<h4 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h4><p>匿名内部类，顾名思义，就是没有命名的内部类。语法格式如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> SuperType(construction parameters) &#123;</span><br><span class=\"line\">    方法和属性</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是匿名内部类的一个示例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"function\">Counter <span class=\"title\">getCounter</span><span class=\"params\">(<span class=\"keyword\">final</span> String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Counter() &#123;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Counter()\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.print(name);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    \tOuter outer = <span class=\"keyword\">new</span> Outer();</span><br><span class=\"line\">        Counter c = outer.getCounter();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(c.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">Counter()</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>在上面的程序中，由于getCounter方法中的name这个变量不是外围类中定义的属性，所以必须声明为final类型，才能在匿名内部类中使用（对于局部内部类，情况也是一样的），否则，将产生如下的语法错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot refer to the non-<span class=\"keyword\">final</span> local variable name defined in an enclosing scope</span><br></pre></td></tr></table></figure>\n<p>由于构造器的名字必须与类名相同，而匿名类没有类名，所以匿名类不能有构造器。因此，将参数传递给超类（父类）构造器。在匿名内部类实现接口的时候，不能有任何构造参数。</p>\n<h3 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h3><p>静态内部类，就是声明为static的内部类。<strong>实例化静态内部类，不需要其外围类对象</strong>。下面是一个静态内部类的示例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String className = <span class=\"string\">\"OUTER\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticInnerClass</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StaticInnerClass</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(name);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"outer class name:\"</span>+className);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tOuter main = <span class=\"keyword\">new</span> Outer();</span><br><span class=\"line\">        <span class=\"comment\">//下面两种实例化方法是等价的</span></span><br><span class=\"line\">\t\tStaticInnerClass inner = <span class=\"keyword\">new</span> StaticInnerClass(<span class=\"string\">\"inner\"</span>);</span><br><span class=\"line\">\t\tOuter.StaticInnerClass inner2 = <span class=\"keyword\">new</span> Outer.StaticInnerClass(<span class=\"string\">\"inner2\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">inner</span><br><span class=\"line\">outer class name:OUTER</span><br><span class=\"line\">inner2</span><br><span class=\"line\">outer class name:OUTER</span><br></pre></td></tr></table></figure>\n<p>值得一提的是，<strong>静态内部类不能访问外围类中的非静态的域和方法</strong>。以上面的程序为例，StaticInnerClass类可以访问到Outer类的className属性，因为className声明为static，但StaticInnerClass类不能访问count。</p>\n<p><strong>什么时候使用静态内部类？</strong>在内部类不需要访问外围类对象的时候，应该使用静态内部类。</p>\n<h3 id=\"内部类标识符\"><a href=\"#内部类标识符\" class=\"headerlink\" title=\"内部类标识符\"></a>内部类标识符</h3><p>对于成员内部类和静态内部类，编译器将会把它编译成文件名为<code>外围类名$内部类名.class</code>的class文件。</p>\n<p>对于匿名内部类，编译器会将它编译名为<code>外围类名$n.class</code>的class文件；对于局部内部类，则被编译为<code>外围类名$n内部类名</code>的class文件。（n是由编译器简单生成的一个数字）</p>\n<p>下面通过一个简单的例子来展示这四种内部类的字节码文件的命名规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NormalCounter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"function\">Counter <span class=\"title\">getCounter</span><span class=\"params\">(<span class=\"keyword\">final</span> String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalCounter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String name = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LocalCounter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"LocalCounter()\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(name);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> count++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LocalCounter();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Counter <span class=\"title\">getCounter2</span><span class=\"params\">(<span class=\"keyword\">final</span> String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Counter() &#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Counter()\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(name);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> count++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticInnerClass</span></span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tOuter lic = <span class=\"keyword\">new</span> Outer();</span><br><span class=\"line\">\t\tCounter c1 = lic.getCounter(<span class=\"string\">\"Local inner class \"</span>);</span><br><span class=\"line\">\t\tCounter c2 = lic.getCounter2(<span class=\"string\">\"Anonymous inner class \"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(c1.next());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(c2.next());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Outer.java编译之后，生成了如下几个class文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Counter.class</span><br><span class=\"line\">Outer$<span class=\"number\">1</span>.class</span><br><span class=\"line\">Outer$<span class=\"number\">1L</span>ocalCounter.class</span><br><span class=\"line\">Outer$NormalCounter.class</span><br><span class=\"line\">Outer$StaticInnerClass.class</span><br><span class=\"line\">Outer.class</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>将一个类的定义放在另一个类的定义内部，这就是内部类。如下所示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从总体上来讲，Java中的内部类可以分为：</p>\n<ul>\n<li>静态内部类（static inner class）：声明为static的内部类</li>\n<li>非静态内部类（non-static inner class）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticInnerClass</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，非静态内部类又可细分为以下三种：</p>\n<ul>\n<li>成员内部类：作为外部类的成员定义</li>\n<li>局部内部类（local inner class）：在外部类的方法中定义</li>\n<li>匿名内部类（anonymous inner class）：没有名字的内部类</li>\n</ul>\n<p>内部类是一种编译器现象，与虚拟机无关。它可以访问外部类中定义的所有方法和域，即使这些方法和域声明为private。此外，内部类可以使用访问说明符public、protected和private修饰。</p>","more":"<h3 id=\"非静态内部类\"><a href=\"#非静态内部类\" class=\"headerlink\" title=\"非静态内部类\"></a>非静态内部类</h3><p><strong>非静态内部类中不能声明static方法，声明的所有静态域都必须是final</strong>。</p>\n<h4 id=\"内部类的特殊语法\"><a href=\"#内部类的特殊语法\" class=\"headerlink\" title=\"内部类的特殊语法\"></a>内部类的特殊语法</h4><p>要想实例化一个非静态内部类，需要使用一种特殊的语法<code>.new</code>，就像下面这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tOuterClass outer = <span class=\"keyword\">new</span> OuterClass();</span><br><span class=\"line\">\t\tInnerClass inner = outer.new InnerClass();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在外部类的作用域之外，可以这样引用内部类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OuterClass.InnerClass</span><br></pre></td></tr></table></figure>\n<p>下面是示例展示了如何在外部类的作用域之外，实例化它的内部类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tOuterClass outer = <span class=\"keyword\">new</span> OuterClass();</span><br><span class=\"line\">\t\tOuterClass.InnerClass inner = outer.new InnerClass();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InnerClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"InnerClass实例化\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">InnerClass实例化</span><br></pre></td></tr></table></figure>\n<p>在内部类中，如果需要使用外部类对象的引用，可以使用外部类的名字后紧跟圆点和<strong><em>this</em></strong>，就像这样<code>OuterClass.this​</code>,下面是一个简单的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"OuterClass.print()\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">public</span> OuterClass <span class=\"title\">getOuter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> OuterClass.<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tOuterClass outer = <span class=\"keyword\">new</span> OuterClass();</span><br><span class=\"line\">\t\tInnerClass inner = outer.new InnerClass();</span><br><span class=\"line\">\t\tinner.getOuter().print();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">OuterClass.print()</span><br></pre></td></tr></table></figure>\n<h4 id=\"成员内部类\"><a href=\"#成员内部类\" class=\"headerlink\" title=\"成员内部类\"></a>成员内部类</h4><p>成员内部类是最常见的内部类，也称为普通内部类。成员内部类作为外部类的成员来定义，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterClass</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"局部内部类\"><a href=\"#局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类</h4><p>在外围类的方法中声明的类，称为局部内部类。下面是一个简单的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalInnerClass</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(count);</span><br><span class=\"line\">\t\t\t\tcount++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tLocalInnerClass inner = <span class=\"keyword\">new</span> LocalInnerClass();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tinner.service();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tOuter main = <span class=\"keyword\">new</span> Outer();</span><br><span class=\"line\">\t\tmain.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p><strong>局部内部类不能用public、protected或private访问说明符声明</strong>。它的优势是对外部世界可以完全地隐藏起来，除了start方法之外，Outer的其他地方均不能访问它。</p>\n<h4 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h4><p>匿名内部类，顾名思义，就是没有命名的内部类。语法格式如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> SuperType(construction parameters) &#123;</span><br><span class=\"line\">    方法和属性</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是匿名内部类的一个示例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"function\">Counter <span class=\"title\">getCounter</span><span class=\"params\">(<span class=\"keyword\">final</span> String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Counter() &#123;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"Counter()\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.print(name);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    \tOuter outer = <span class=\"keyword\">new</span> Outer();</span><br><span class=\"line\">        Counter c = outer.getCounter();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(c.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">Counter()</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>在上面的程序中，由于getCounter方法中的name这个变量不是外围类中定义的属性，所以必须声明为final类型，才能在匿名内部类中使用（对于局部内部类，情况也是一样的），否则，将产生如下的语法错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot refer to the non-<span class=\"keyword\">final</span> local variable name defined in an enclosing scope</span><br></pre></td></tr></table></figure>\n<p>由于构造器的名字必须与类名相同，而匿名类没有类名，所以匿名类不能有构造器。因此，将参数传递给超类（父类）构造器。在匿名内部类实现接口的时候，不能有任何构造参数。</p>\n<h3 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h3><p>静态内部类，就是声明为static的内部类。<strong>实例化静态内部类，不需要其外围类对象</strong>。下面是一个静态内部类的示例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String className = <span class=\"string\">\"OUTER\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticInnerClass</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StaticInnerClass</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(name);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"outer class name:\"</span>+className);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tOuter main = <span class=\"keyword\">new</span> Outer();</span><br><span class=\"line\">        <span class=\"comment\">//下面两种实例化方法是等价的</span></span><br><span class=\"line\">\t\tStaticInnerClass inner = <span class=\"keyword\">new</span> StaticInnerClass(<span class=\"string\">\"inner\"</span>);</span><br><span class=\"line\">\t\tOuter.StaticInnerClass inner2 = <span class=\"keyword\">new</span> Outer.StaticInnerClass(<span class=\"string\">\"inner2\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">inner</span><br><span class=\"line\">outer class name:OUTER</span><br><span class=\"line\">inner2</span><br><span class=\"line\">outer class name:OUTER</span><br></pre></td></tr></table></figure>\n<p>值得一提的是，<strong>静态内部类不能访问外围类中的非静态的域和方法</strong>。以上面的程序为例，StaticInnerClass类可以访问到Outer类的className属性，因为className声明为static，但StaticInnerClass类不能访问count。</p>\n<p><strong>什么时候使用静态内部类？</strong>在内部类不需要访问外围类对象的时候，应该使用静态内部类。</p>\n<h3 id=\"内部类标识符\"><a href=\"#内部类标识符\" class=\"headerlink\" title=\"内部类标识符\"></a>内部类标识符</h3><p>对于成员内部类和静态内部类，编译器将会把它编译成文件名为<code>外围类名$内部类名.class</code>的class文件。</p>\n<p>对于匿名内部类，编译器会将它编译名为<code>外围类名$n.class</code>的class文件；对于局部内部类，则被编译为<code>外围类名$n内部类名</code>的class文件。（n是由编译器简单生成的一个数字）</p>\n<p>下面通过一个简单的例子来展示这四种内部类的字节码文件的命名规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NormalCounter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"function\">Counter <span class=\"title\">getCounter</span><span class=\"params\">(<span class=\"keyword\">final</span> String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalCounter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String name = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LocalCounter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"LocalCounter()\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(name);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> count++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LocalCounter();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Counter <span class=\"title\">getCounter2</span><span class=\"params\">(<span class=\"keyword\">final</span> String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Counter() &#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Counter()\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(name);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> count++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticInnerClass</span></span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tOuter lic = <span class=\"keyword\">new</span> Outer();</span><br><span class=\"line\">\t\tCounter c1 = lic.getCounter(<span class=\"string\">\"Local inner class \"</span>);</span><br><span class=\"line\">\t\tCounter c2 = lic.getCounter2(<span class=\"string\">\"Anonymous inner class \"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(c1.next());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(c2.next());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Outer.java编译之后，生成了如下几个class文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Counter.class</span><br><span class=\"line\">Outer$<span class=\"number\">1</span>.class</span><br><span class=\"line\">Outer$<span class=\"number\">1L</span>ocalCounter.class</span><br><span class=\"line\">Outer$NormalCounter.class</span><br><span class=\"line\">Outer$StaticInnerClass.class</span><br><span class=\"line\">Outer.class</span><br></pre></td></tr></table></figure>"},{"title":"Java中的Object类","date":"2018-08-22T08:30:33.000Z","_content":"\njava.lang.Object是Java中所有类的父类。\n\n```java\npublic class Object {\n\n    private static native void registerNatives();\n    static {\n        registerNatives();\n    }\n\n    public final native Class<?> getClass();\n\n    public native int hashCode();\n\n    public boolean equals(Object obj) {\n        return (this == obj);\n    }\n\n    protected native Object clone() throws CloneNotSupportedException;\n\n    public String toString() {\n        return getClass().getName() + \"@\" + Integer.toHexString(hashCode());\n    }\n\n    public final native void notify();\n\n    public final native void notifyAll();\n\n    public final native void wait(long timeout) throws InterruptedException;\n    \n    public final void wait(long timeout, int nanos) throws InterruptedException {\n        if (timeout < 0) {\n            throw new IllegalArgumentException(\"timeout value is negative\");\n        }\n        if (nanos < 0 || nanos > 999999) {\n            throw new IllegalArgumentException(\n                                \"nanosecond timeout value out of range\");\n        }\n        if (nanos > 0) {\n            timeout++;\n        }\n        wait(timeout);\n    }\n    \n    public final void wait() throws InterruptedException {\n        wait(0);\n    }\n    \n    protected void finalize() throws Throwable { }\n}\n```\n\n","source":"_posts/java-object.md","raw":"---\ntitle: Java中的Object类\ndate: 2018-08-22 16:30:33\ntags: java\ncategories: java\n---\n\njava.lang.Object是Java中所有类的父类。\n\n```java\npublic class Object {\n\n    private static native void registerNatives();\n    static {\n        registerNatives();\n    }\n\n    public final native Class<?> getClass();\n\n    public native int hashCode();\n\n    public boolean equals(Object obj) {\n        return (this == obj);\n    }\n\n    protected native Object clone() throws CloneNotSupportedException;\n\n    public String toString() {\n        return getClass().getName() + \"@\" + Integer.toHexString(hashCode());\n    }\n\n    public final native void notify();\n\n    public final native void notifyAll();\n\n    public final native void wait(long timeout) throws InterruptedException;\n    \n    public final void wait(long timeout, int nanos) throws InterruptedException {\n        if (timeout < 0) {\n            throw new IllegalArgumentException(\"timeout value is negative\");\n        }\n        if (nanos < 0 || nanos > 999999) {\n            throw new IllegalArgumentException(\n                                \"nanosecond timeout value out of range\");\n        }\n        if (nanos > 0) {\n            timeout++;\n        }\n        wait(timeout);\n    }\n    \n    public final void wait() throws InterruptedException {\n        wait(0);\n    }\n    \n    protected void finalize() throws Throwable { }\n}\n```\n\n","slug":"java-object","published":1,"updated":"2019-01-19T07:23:57.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9apr0024j1q0f748a8uz","content":"<p>java.lang.Object是Java中所有类的父类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Object</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">registerNatives</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        registerNatives();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> Class&lt;?&gt; getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">native</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getClass().getName() + <span class=\"string\">\"@\"</span> + Integer.toHexString(hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">wait</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout)</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">wait</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, <span class=\"keyword\">int</span> nanos)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"timeout value is negative\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nanos &lt; <span class=\"number\">0</span> || nanos &gt; <span class=\"number\">999999</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</span><br><span class=\"line\">                                <span class=\"string\">\"nanosecond timeout value out of range\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nanos &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            timeout++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        wait(timeout);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">wait</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        wait(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>java.lang.Object是Java中所有类的父类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Object</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">registerNatives</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        registerNatives();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> Class&lt;?&gt; getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">native</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getClass().getName() + <span class=\"string\">\"@\"</span> + Integer.toHexString(hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">notify</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">wait</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout)</span> <span class=\"keyword\">throws</span> InterruptedException</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">wait</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, <span class=\"keyword\">int</span> nanos)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"timeout value is negative\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nanos &lt; <span class=\"number\">0</span> || nanos &gt; <span class=\"number\">999999</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</span><br><span class=\"line\">                                <span class=\"string\">\"nanosecond timeout value out of range\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nanos &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            timeout++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        wait(timeout);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">wait</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        wait(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"正则表达式及Java对其的支持","date":"2018-04-11T07:19:46.000Z","updated":"2018-04-11T07:19:46.000Z","_content":"\n### 简述正则表达式\n\n​\t今天我们来讲下正则表达式，先来看下正则表达式中的数量表示\n\n| 字符  |                         说明                          |             举例              |\n| :---: | :---------------------------------------------------: | :---------------------------: |\n|   ?   | 零次或一次匹配？前的字符或子表达式，***等价于{0,1}*** | gong(shan)?匹配gong或gongshan |\n|   *   | 零次或多次匹配*前的字符或子表达式，****等价于{0,}**** |        sm*匹配sm或者s         |\n|   +   | 一次或多次匹配*前的字符或子表达式，****等价于{1,}**** |     zoo+匹配zoo或者zooo等     |\n|  {n}  |               n为非负整数，正好匹配n次                |         zo{2}匹配zoo          |\n| {n,}  |               n为非负整数，至少匹配n次                |  zo{1,}可匹配zo，zoo，zooo等  |\n| {n,m} |    n和m均为非负整数，表示至少匹配n次，至多匹配m次     |   zo{1,2}则只匹配zo或者zoo    |\n\n<!--more-->\n\n常用特殊字符\n\n|  字符  |                          说明                          |             举例              |\n| :----: | :----------------------------------------------------: | :---------------------------: |\n| [xyz]  |               字符集。匹配包含的任一字符               |     [abc] 匹配 java 中的a     |\n| [^xyz] |            反字符集。匹配未被包含的任一字符            |  [^abc] 匹配 java 中的 j和v   |\n| [x-y]  |      字符范围。匹配从x到y（指定范围内）的所有字符      | [a-z]匹配从a到z的所有小写字母 |\n|   \\d   |            匹配一个数字，***等价于[0-9]***             |       he\\d{2} 匹配 he33       |\n|   \\D   |          匹配一个非数字，***等价于\\[^0-9]***           |      he\\D{4} 匹配 heyang      |\n|   \\s   |                    匹配任何空白字符                    |                               |\n|   \\S   |                   匹配任何非空白字符                   |                               |\n|   \\w   | 匹配任何字类字符，包括下划线，***等价于[a-zA-Z0-9_]*** |                               |\n|   \\W   |     匹配任何非字类字符，***等价于\\[^a-zA-Z0-9_]***     |                               |\n\n常用逻辑操作\n\n| 字符 |      说明       |        举例        |\n| :--: | :-------------: | :----------------: |\n|  xy  |      x并y       |       [xy]         |\n| x&#124;y |      x或y   |      [x&#124;y]|\n| (X)  | 将X定义为一个组 | [xy(bc)]，(x&#124;y)|\n\n其他预定义字符以及不是特别常用的字符，详见 [java正则表达式](https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html  \"正则表达式\")\n\n### java对正则表达式的支持\n\n在java中要想使用正则表达式，有三种方式：\n\n* String类对正则表达式的支持\n\n```java\npublic boolean matches(String regex)\n```\n\n* 单独使用java.util.regex.Pattern\n\n```java\npublic static boolean matches(String regex, CharSequence input)\n```\n\n* java.util.regex包下的Pattern类配合Matcher类使用（***推荐采用此方式***）\n\n下面我们依次来使用这三种方式：\n\n第一种：String类对正则表达式的支持 matches(String regex)\n\n```java\npublic void testString() {\n    String str = \"Java\";\n    boolean flag = str.matches(\"(J|x)ava\");\n    System.out.println(flag);\n}\n输出结果：true\n```\n\n这种方式虽然也能实现正则匹配，但是功能单一，只能返回是否匹配，而且字符串必须***整体匹配***才能返回true，以下面的代码来说明这个问题\n\n```java\npublic void testString2() {\n    String str = \"Java is a programming language.\";\n    boolean flag = str.matches(\"Java\");\n    System.out.println(flag);\n}\n输出结果：false\n```\n查看String类的源码可以发现，String类的matches方法实际上就是调用的下面要讲的第二种方式Pattern.matches(String regex,CharSequence input)\n\n```java\npublic boolean matches(String regex) {\n\treturn Pattern.matches(regex, this);\n}\n```\n\n第二种：单独使用Pattern进行正则匹配\n\n```java\npublic void testPattern() {\n    String str = \"Java is a programming language.\";\n    String regex = \"Java\";\n    boolean flag = Pattern.matches(regex, str);\n    System.out.println(flag);\n}\n输出结果：false\n```\n\n这里为什么也返回了false？原因和第一种方式一样，因为Pattern的静态方法matches(String regex,CharSequence input)也是***整体匹配***。\n实际上，如果我们去查看Pattern的源码的话，可以发现：\n```java\npublic static boolean matches(String regex, CharSequence input) {\n    Pattern p = Pattern.compile(regex);\n    Matcher m = p.matcher(input);\n    return m.matches();\n}\n```\n这种方式实际上使用的是下面的第三种方式\n\n第三种：Pattern和Matcher的结合使用\n\n```java\npublic void testPatternAndMatcher() {\n    String str = \"I love Java and xava.\";\n    String regex = \"(J|x)ava\";\n    Pattern p = Pattern.compile(regex);\n    Matcher m = p.matcher(str);\n    System.out.println(m.matches());\n    while(m.find()) {\n        System.out.println(m.group());\n\t}\n}\n输出结果：\nfalse\nJava\nxava\n```\n\n通过以上分析，我们可以发现，第一种方式是对第二种方式的调用，而第二种方式的实现又是采用的第三种方式。\n\n因此，在以后的使用中，推荐直接使用第三种方式，其功能远强于第一种和第二种方式。\n\n### 详解Pattern和Matcher\n\nPattern的常用方法如下：\n\n```java\npublic static Pattern compile(String regex)\npublic Matcher matcher(CharSequence input)\n```\n\n由于Pattern只有私有构造方法，我们不能直接实例化它，故每次必须通过其compile方法取得Pattern对象，继而通过matcher方法获取Matcher对象。\n\nMatcher的常用方法\n\n①索引方法：\n\n```java\npublic int start()//返回之前匹配的起始索引\npublic int start(int group)\npublic int end()//返回最后匹配字符之后的偏移量，例如用\\d{4}匹配he2018，则end()返回6\npublic int end(int group)\n```\n\n实例如下：\n\n```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class RegexTest {\n\tpublic static void main(String[] args) {\n\t\tString regex = \"\\\\d{4}\";\n\t\tString str = \"he2018shan0423yang11gong456shan\";\n\t\tPattern pattern = Pattern.compile(regex);\n\t\tMatcher matcher = pattern.matcher(str);\n\t\twhile(matcher.find()) {\n\t\t\tSystem.out.println(\"匹配字段：\"+matcher.group());\n\t\t\tSystem.out.println(\"开始索引：\"+matcher.start());\n\t\t\tSystem.out.println(\"结束索引：\"+matcher.end());\n\t\t}\n\t}\n}\n```\n\n输出结果：\n\n```java\n匹配字段：2018\n开始索引：2\n结束索引：6\n匹配字段：0423\n开始索引：10\n结束索引：14\n```\n\n②研究方法\n\n```java\npublic boolean find()\npublic boolean find(int start)\npublic boolean lookingAt()\npublic boolean matches()\n```\n\n③替换方法\n\n```java\npublic static String quoteReplacement(String s)\npublic Matcher appendReplacement(StringBuffer sb, String replacement)\npublic StringBuffer appendTail(StringBuffer sb)\npublic String replaceAll(String replacement)\npublic String replaceFirst(String replacement)\n```\n\n### 附录\n\n常用的正则表达式\n\n| 规则     | 正则表达式语法                                               |\n| :------- | :----------------------------------------------------------- |\n| 电子邮箱 | [\\\\w!#$%^&`+=/(&#124;)'?,~*-]+@([a-z0-9]+\\\\.)+[a-z]+         |\n| 中文字符 | [\\u4e00-\\u9fa5]                                              |\n| QQ号     | \\[1-9\\]\\[0-9\\]{4,}                                           |\n| 身份证号 | \\\\d{6}(19&#124;20)\\\\d{2}((0[1-9])&#124;(1[0-2]))(([0-2]\\\\d)&#124;(3[0-1]))\\\\d{3}(\\\\d&#124;x&#124;X){1} |\n\n","source":"_posts/java-regular-expression.md","raw":"---\ntitle: 正则表达式及Java对其的支持\ndate: 2018-04-11 15:19:46\nupdated: 2018-04-11 15:19:46\ntags: java\ncategories: 正则表达式\n---\n\n### 简述正则表达式\n\n​\t今天我们来讲下正则表达式，先来看下正则表达式中的数量表示\n\n| 字符  |                         说明                          |             举例              |\n| :---: | :---------------------------------------------------: | :---------------------------: |\n|   ?   | 零次或一次匹配？前的字符或子表达式，***等价于{0,1}*** | gong(shan)?匹配gong或gongshan |\n|   *   | 零次或多次匹配*前的字符或子表达式，****等价于{0,}**** |        sm*匹配sm或者s         |\n|   +   | 一次或多次匹配*前的字符或子表达式，****等价于{1,}**** |     zoo+匹配zoo或者zooo等     |\n|  {n}  |               n为非负整数，正好匹配n次                |         zo{2}匹配zoo          |\n| {n,}  |               n为非负整数，至少匹配n次                |  zo{1,}可匹配zo，zoo，zooo等  |\n| {n,m} |    n和m均为非负整数，表示至少匹配n次，至多匹配m次     |   zo{1,2}则只匹配zo或者zoo    |\n\n<!--more-->\n\n常用特殊字符\n\n|  字符  |                          说明                          |             举例              |\n| :----: | :----------------------------------------------------: | :---------------------------: |\n| [xyz]  |               字符集。匹配包含的任一字符               |     [abc] 匹配 java 中的a     |\n| [^xyz] |            反字符集。匹配未被包含的任一字符            |  [^abc] 匹配 java 中的 j和v   |\n| [x-y]  |      字符范围。匹配从x到y（指定范围内）的所有字符      | [a-z]匹配从a到z的所有小写字母 |\n|   \\d   |            匹配一个数字，***等价于[0-9]***             |       he\\d{2} 匹配 he33       |\n|   \\D   |          匹配一个非数字，***等价于\\[^0-9]***           |      he\\D{4} 匹配 heyang      |\n|   \\s   |                    匹配任何空白字符                    |                               |\n|   \\S   |                   匹配任何非空白字符                   |                               |\n|   \\w   | 匹配任何字类字符，包括下划线，***等价于[a-zA-Z0-9_]*** |                               |\n|   \\W   |     匹配任何非字类字符，***等价于\\[^a-zA-Z0-9_]***     |                               |\n\n常用逻辑操作\n\n| 字符 |      说明       |        举例        |\n| :--: | :-------------: | :----------------: |\n|  xy  |      x并y       |       [xy]         |\n| x&#124;y |      x或y   |      [x&#124;y]|\n| (X)  | 将X定义为一个组 | [xy(bc)]，(x&#124;y)|\n\n其他预定义字符以及不是特别常用的字符，详见 [java正则表达式](https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html  \"正则表达式\")\n\n### java对正则表达式的支持\n\n在java中要想使用正则表达式，有三种方式：\n\n* String类对正则表达式的支持\n\n```java\npublic boolean matches(String regex)\n```\n\n* 单独使用java.util.regex.Pattern\n\n```java\npublic static boolean matches(String regex, CharSequence input)\n```\n\n* java.util.regex包下的Pattern类配合Matcher类使用（***推荐采用此方式***）\n\n下面我们依次来使用这三种方式：\n\n第一种：String类对正则表达式的支持 matches(String regex)\n\n```java\npublic void testString() {\n    String str = \"Java\";\n    boolean flag = str.matches(\"(J|x)ava\");\n    System.out.println(flag);\n}\n输出结果：true\n```\n\n这种方式虽然也能实现正则匹配，但是功能单一，只能返回是否匹配，而且字符串必须***整体匹配***才能返回true，以下面的代码来说明这个问题\n\n```java\npublic void testString2() {\n    String str = \"Java is a programming language.\";\n    boolean flag = str.matches(\"Java\");\n    System.out.println(flag);\n}\n输出结果：false\n```\n查看String类的源码可以发现，String类的matches方法实际上就是调用的下面要讲的第二种方式Pattern.matches(String regex,CharSequence input)\n\n```java\npublic boolean matches(String regex) {\n\treturn Pattern.matches(regex, this);\n}\n```\n\n第二种：单独使用Pattern进行正则匹配\n\n```java\npublic void testPattern() {\n    String str = \"Java is a programming language.\";\n    String regex = \"Java\";\n    boolean flag = Pattern.matches(regex, str);\n    System.out.println(flag);\n}\n输出结果：false\n```\n\n这里为什么也返回了false？原因和第一种方式一样，因为Pattern的静态方法matches(String regex,CharSequence input)也是***整体匹配***。\n实际上，如果我们去查看Pattern的源码的话，可以发现：\n```java\npublic static boolean matches(String regex, CharSequence input) {\n    Pattern p = Pattern.compile(regex);\n    Matcher m = p.matcher(input);\n    return m.matches();\n}\n```\n这种方式实际上使用的是下面的第三种方式\n\n第三种：Pattern和Matcher的结合使用\n\n```java\npublic void testPatternAndMatcher() {\n    String str = \"I love Java and xava.\";\n    String regex = \"(J|x)ava\";\n    Pattern p = Pattern.compile(regex);\n    Matcher m = p.matcher(str);\n    System.out.println(m.matches());\n    while(m.find()) {\n        System.out.println(m.group());\n\t}\n}\n输出结果：\nfalse\nJava\nxava\n```\n\n通过以上分析，我们可以发现，第一种方式是对第二种方式的调用，而第二种方式的实现又是采用的第三种方式。\n\n因此，在以后的使用中，推荐直接使用第三种方式，其功能远强于第一种和第二种方式。\n\n### 详解Pattern和Matcher\n\nPattern的常用方法如下：\n\n```java\npublic static Pattern compile(String regex)\npublic Matcher matcher(CharSequence input)\n```\n\n由于Pattern只有私有构造方法，我们不能直接实例化它，故每次必须通过其compile方法取得Pattern对象，继而通过matcher方法获取Matcher对象。\n\nMatcher的常用方法\n\n①索引方法：\n\n```java\npublic int start()//返回之前匹配的起始索引\npublic int start(int group)\npublic int end()//返回最后匹配字符之后的偏移量，例如用\\d{4}匹配he2018，则end()返回6\npublic int end(int group)\n```\n\n实例如下：\n\n```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class RegexTest {\n\tpublic static void main(String[] args) {\n\t\tString regex = \"\\\\d{4}\";\n\t\tString str = \"he2018shan0423yang11gong456shan\";\n\t\tPattern pattern = Pattern.compile(regex);\n\t\tMatcher matcher = pattern.matcher(str);\n\t\twhile(matcher.find()) {\n\t\t\tSystem.out.println(\"匹配字段：\"+matcher.group());\n\t\t\tSystem.out.println(\"开始索引：\"+matcher.start());\n\t\t\tSystem.out.println(\"结束索引：\"+matcher.end());\n\t\t}\n\t}\n}\n```\n\n输出结果：\n\n```java\n匹配字段：2018\n开始索引：2\n结束索引：6\n匹配字段：0423\n开始索引：10\n结束索引：14\n```\n\n②研究方法\n\n```java\npublic boolean find()\npublic boolean find(int start)\npublic boolean lookingAt()\npublic boolean matches()\n```\n\n③替换方法\n\n```java\npublic static String quoteReplacement(String s)\npublic Matcher appendReplacement(StringBuffer sb, String replacement)\npublic StringBuffer appendTail(StringBuffer sb)\npublic String replaceAll(String replacement)\npublic String replaceFirst(String replacement)\n```\n\n### 附录\n\n常用的正则表达式\n\n| 规则     | 正则表达式语法                                               |\n| :------- | :----------------------------------------------------------- |\n| 电子邮箱 | [\\\\w!#$%^&`+=/(&#124;)'?,~*-]+@([a-z0-9]+\\\\.)+[a-z]+         |\n| 中文字符 | [\\u4e00-\\u9fa5]                                              |\n| QQ号     | \\[1-9\\]\\[0-9\\]{4,}                                           |\n| 身份证号 | \\\\d{6}(19&#124;20)\\\\d{2}((0[1-9])&#124;(1[0-2]))(([0-2]\\\\d)&#124;(3[0-1]))\\\\d{3}(\\\\d&#124;x&#124;X){1} |\n\n","slug":"java-regular-expression","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9apt0026j1q0i2a5vma1","content":"<h3 id=\"简述正则表达式\"><a href=\"#简述正则表达式\" class=\"headerlink\" title=\"简述正则表达式\"></a>简述正则表达式</h3><p>​    今天我们来讲下正则表达式，先来看下正则表达式中的数量表示</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:center\">说明</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:center\">零次或一次匹配？前的字符或子表达式，<strong><em>等价于{0,1}</em></strong></td>\n<td style=\"text-align:center\">gong(shan)?匹配gong或gongshan</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">零次或多次匹配*前的字符或子表达式，<strong><strong>等价于{0,}</strong></strong></td>\n<td style=\"text-align:center\">sm*匹配sm或者s</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">一次或多次匹配*前的字符或子表达式，<strong><strong>等价于{1,}</strong></strong></td>\n<td style=\"text-align:center\">zoo+匹配zoo或者zooo等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{n}</td>\n<td style=\"text-align:center\">n为非负整数，正好匹配n次</td>\n<td style=\"text-align:center\">zo{2}匹配zoo</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{n,}</td>\n<td style=\"text-align:center\">n为非负整数，至少匹配n次</td>\n<td style=\"text-align:center\">zo{1,}可匹配zo，zoo，zooo等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{n,m}</td>\n<td style=\"text-align:center\">n和m均为非负整数，表示至少匹配n次，至多匹配m次</td>\n<td style=\"text-align:center\">zo{1,2}则只匹配zo或者zoo</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<p>常用特殊字符</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:center\">说明</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">[xyz]</td>\n<td style=\"text-align:center\">字符集。匹配包含的任一字符</td>\n<td style=\"text-align:center\">[abc] 匹配 java 中的a</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[^xyz]</td>\n<td style=\"text-align:center\">反字符集。匹配未被包含的任一字符</td>\n<td style=\"text-align:center\">[^abc] 匹配 java 中的 j和v</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[x-y]</td>\n<td style=\"text-align:center\">字符范围。匹配从x到y（指定范围内）的所有字符</td>\n<td style=\"text-align:center\">[a-z]匹配从a到z的所有小写字母</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\d</td>\n<td style=\"text-align:center\">匹配一个数字，<strong><em>等价于[0-9]</em></strong></td>\n<td style=\"text-align:center\">he\\d{2} 匹配 he33</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\D</td>\n<td style=\"text-align:center\">匹配一个非数字，<strong><em>等价于[^0-9]</em></strong></td>\n<td style=\"text-align:center\">he\\D{4} 匹配 heyang</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\s</td>\n<td style=\"text-align:center\">匹配任何空白字符</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\S</td>\n<td style=\"text-align:center\">匹配任何非空白字符</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\w</td>\n<td style=\"text-align:center\">匹配任何字类字符，包括下划线，<strong><em>等价于[a-zA-Z0-9_]</em></strong></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\W</td>\n<td style=\"text-align:center\">匹配任何非字类字符，<strong><em>等价于[^a-zA-Z0-9_]</em></strong></td>\n</tr>\n</tbody>\n</table>\n<p>常用逻辑操作</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:center\">说明</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">xy</td>\n<td style=\"text-align:center\">x并y</td>\n<td style=\"text-align:center\">[xy]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">x&#124;y</td>\n<td style=\"text-align:center\">x或y</td>\n<td style=\"text-align:center\">[x&#124;y]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(X)</td>\n<td style=\"text-align:center\">将X定义为一个组</td>\n<td style=\"text-align:center\">[xy(bc)]，(x&#124;y)</td>\n</tr>\n</tbody>\n</table>\n<p>其他预定义字符以及不是特别常用的字符，详见 <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html\" title=\"正则表达式\" target=\"_blank\" rel=\"noopener\">java正则表达式</a></p>\n<h3 id=\"java对正则表达式的支持\"><a href=\"#java对正则表达式的支持\" class=\"headerlink\" title=\"java对正则表达式的支持\"></a>java对正则表达式的支持</h3><p>在java中要想使用正则表达式，有三种方式：</p>\n<ul>\n<li>String类对正则表达式的支持</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(String regex)</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>单独使用java.util.regex.Pattern</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(String regex, CharSequence input)</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>java.util.regex包下的Pattern类配合Matcher类使用（<strong><em>推荐采用此方式</em></strong>）</li>\n</ul>\n<p>下面我们依次来使用这三种方式：</p>\n<p>第一种：String类对正则表达式的支持 matches(String regex)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String str = <span class=\"string\">\"Java\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = str.matches(<span class=\"string\">\"(J|x)ava\"</span>);</span><br><span class=\"line\">    System.out.println(flag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<p>这种方式虽然也能实现正则匹配，但是功能单一，只能返回是否匹配，而且字符串必须<strong><em>整体匹配</em></strong>才能返回true，以下面的代码来说明这个问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testString2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String str = <span class=\"string\">\"Java is a programming language.\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = str.matches(<span class=\"string\">\"Java\"</span>);</span><br><span class=\"line\">    System.out.println(flag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：<span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n<p>查看String类的源码可以发现，String类的matches方法实际上就是调用的下面要讲的第二种方式Pattern.matches(String regex,CharSequence input)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(String regex)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Pattern.matches(regex, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种：单独使用Pattern进行正则匹配</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPattern</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String str = <span class=\"string\">\"Java is a programming language.\"</span>;</span><br><span class=\"line\">    String regex = <span class=\"string\">\"Java\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = Pattern.matches(regex, str);</span><br><span class=\"line\">    System.out.println(flag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：<span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n<p>这里为什么也返回了false？原因和第一种方式一样，因为Pattern的静态方法matches(String regex,CharSequence input)也是<strong><em>整体匹配</em></strong>。<br>实际上，如果我们去查看Pattern的源码的话，可以发现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(String regex, CharSequence input)</span> </span>&#123;</span><br><span class=\"line\">    Pattern p = Pattern.compile(regex);</span><br><span class=\"line\">    Matcher m = p.matcher(input);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m.matches();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方式实际上使用的是下面的第三种方式</p>\n<p>第三种：Pattern和Matcher的结合使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPatternAndMatcher</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String str = <span class=\"string\">\"I love Java and xava.\"</span>;</span><br><span class=\"line\">    String regex = <span class=\"string\">\"(J|x)ava\"</span>;</span><br><span class=\"line\">    Pattern p = Pattern.compile(regex);</span><br><span class=\"line\">    Matcher m = p.matcher(str);</span><br><span class=\"line\">    System.out.println(m.matches());</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m.find()) &#123;</span><br><span class=\"line\">        System.out.println(m.group());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\">Java</span><br><span class=\"line\">xava</span><br></pre></td></tr></table></figure>\n<p>通过以上分析，我们可以发现，第一种方式是对第二种方式的调用，而第二种方式的实现又是采用的第三种方式。</p>\n<p>因此，在以后的使用中，推荐直接使用第三种方式，其功能远强于第一种和第二种方式。</p>\n<h3 id=\"详解Pattern和Matcher\"><a href=\"#详解Pattern和Matcher\" class=\"headerlink\" title=\"详解Pattern和Matcher\"></a>详解Pattern和Matcher</h3><p>Pattern的常用方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Pattern <span class=\"title\">compile</span><span class=\"params\">(String regex)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Matcher <span class=\"title\">matcher</span><span class=\"params\">(CharSequence input)</span></span></span><br></pre></td></tr></table></figure>\n<p>由于Pattern只有私有构造方法，我们不能直接实例化它，故每次必须通过其compile方法取得Pattern对象，继而通过matcher方法获取Matcher对象。</p>\n<p>Matcher的常用方法</p>\n<p>①索引方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">start</span><span class=\"params\">()</span><span class=\"comment\">//返回之前匹配的起始索引</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">start</span><span class=\"params\">(<span class=\"keyword\">int</span> group)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">end</span><span class=\"params\">()</span><span class=\"comment\">//返回最后匹配字符之后的偏移量，例如用\\d&#123;4&#125;匹配he2018，则end()返回6</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">end</span><span class=\"params\">(<span class=\"keyword\">int</span> group)</span></span></span><br></pre></td></tr></table></figure>\n<p>实例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegexTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString regex = <span class=\"string\">\"\\\\d&#123;4&#125;\"</span>;</span><br><span class=\"line\">\t\tString str = <span class=\"string\">\"he2018shan0423yang11gong456shan\"</span>;</span><br><span class=\"line\">\t\tPattern pattern = Pattern.compile(regex);</span><br><span class=\"line\">\t\tMatcher matcher = pattern.matcher(str);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(matcher.find()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"匹配字段：\"</span>+matcher.group());</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"开始索引：\"</span>+matcher.start());</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"结束索引：\"</span>+matcher.end());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">匹配字段：<span class=\"number\">2018</span></span><br><span class=\"line\">开始索引：<span class=\"number\">2</span></span><br><span class=\"line\">结束索引：<span class=\"number\">6</span></span><br><span class=\"line\">匹配字段：<span class=\"number\">0423</span></span><br><span class=\"line\">开始索引：<span class=\"number\">10</span></span><br><span class=\"line\">结束索引：<span class=\"number\">14</span></span><br></pre></td></tr></table></figure>\n<p>②研究方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">find</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> start)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lookingAt</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<p>③替换方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">quoteReplacement</span><span class=\"params\">(String s)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Matcher <span class=\"title\">appendReplacement</span><span class=\"params\">(StringBuffer sb, String replacement)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> StringBuffer <span class=\"title\">appendTail</span><span class=\"params\">(StringBuffer sb)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">replaceAll</span><span class=\"params\">(String replacement)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">replaceFirst</span><span class=\"params\">(String replacement)</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h3><p>常用的正则表达式</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">规则</th>\n<th style=\"text-align:left\">正则表达式语法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">电子邮箱</td>\n<td style=\"text-align:left\">[\\w!#$%^&amp;`+=/(&#124;)’?,~*-]+@([a-z0-9]+\\.)+[a-z]+</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">中文字符</td>\n<td style=\"text-align:left\">[\\u4e00-\\u9fa5]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QQ号</td>\n<td style=\"text-align:left\">[1-9][0-9]{4,}</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">身份证号</td>\n<td style=\"text-align:left\">\\d{6}(19&#124;20)\\d{2}((0[1-9])&#124;(1[0-2]))(([0-2]\\d)&#124;(3[0-1]))\\d{3}(\\d&#124;x&#124;X){1}</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<h3 id=\"简述正则表达式\"><a href=\"#简述正则表达式\" class=\"headerlink\" title=\"简述正则表达式\"></a>简述正则表达式</h3><p>​    今天我们来讲下正则表达式，先来看下正则表达式中的数量表示</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:center\">说明</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:center\">零次或一次匹配？前的字符或子表达式，<strong><em>等价于{0,1}</em></strong></td>\n<td style=\"text-align:center\">gong(shan)?匹配gong或gongshan</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">零次或多次匹配*前的字符或子表达式，<strong><strong>等价于{0,}</strong></strong></td>\n<td style=\"text-align:center\">sm*匹配sm或者s</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">一次或多次匹配*前的字符或子表达式，<strong><strong>等价于{1,}</strong></strong></td>\n<td style=\"text-align:center\">zoo+匹配zoo或者zooo等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{n}</td>\n<td style=\"text-align:center\">n为非负整数，正好匹配n次</td>\n<td style=\"text-align:center\">zo{2}匹配zoo</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{n,}</td>\n<td style=\"text-align:center\">n为非负整数，至少匹配n次</td>\n<td style=\"text-align:center\">zo{1,}可匹配zo，zoo，zooo等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{n,m}</td>\n<td style=\"text-align:center\">n和m均为非负整数，表示至少匹配n次，至多匹配m次</td>\n<td style=\"text-align:center\">zo{1,2}则只匹配zo或者zoo</td>\n</tr>\n</tbody>\n</table>","more":"<p>常用特殊字符</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:center\">说明</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">[xyz]</td>\n<td style=\"text-align:center\">字符集。匹配包含的任一字符</td>\n<td style=\"text-align:center\">[abc] 匹配 java 中的a</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[^xyz]</td>\n<td style=\"text-align:center\">反字符集。匹配未被包含的任一字符</td>\n<td style=\"text-align:center\">[^abc] 匹配 java 中的 j和v</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[x-y]</td>\n<td style=\"text-align:center\">字符范围。匹配从x到y（指定范围内）的所有字符</td>\n<td style=\"text-align:center\">[a-z]匹配从a到z的所有小写字母</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\d</td>\n<td style=\"text-align:center\">匹配一个数字，<strong><em>等价于[0-9]</em></strong></td>\n<td style=\"text-align:center\">he\\d{2} 匹配 he33</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\D</td>\n<td style=\"text-align:center\">匹配一个非数字，<strong><em>等价于[^0-9]</em></strong></td>\n<td style=\"text-align:center\">he\\D{4} 匹配 heyang</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\s</td>\n<td style=\"text-align:center\">匹配任何空白字符</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\S</td>\n<td style=\"text-align:center\">匹配任何非空白字符</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\w</td>\n<td style=\"text-align:center\">匹配任何字类字符，包括下划线，<strong><em>等价于[a-zA-Z0-9_]</em></strong></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\W</td>\n<td style=\"text-align:center\">匹配任何非字类字符，<strong><em>等价于[^a-zA-Z0-9_]</em></strong></td>\n</tr>\n</tbody>\n</table>\n<p>常用逻辑操作</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:center\">说明</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">xy</td>\n<td style=\"text-align:center\">x并y</td>\n<td style=\"text-align:center\">[xy]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">x&#124;y</td>\n<td style=\"text-align:center\">x或y</td>\n<td style=\"text-align:center\">[x&#124;y]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(X)</td>\n<td style=\"text-align:center\">将X定义为一个组</td>\n<td style=\"text-align:center\">[xy(bc)]，(x&#124;y)</td>\n</tr>\n</tbody>\n</table>\n<p>其他预定义字符以及不是特别常用的字符，详见 <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html\" title=\"正则表达式\" target=\"_blank\" rel=\"noopener\">java正则表达式</a></p>\n<h3 id=\"java对正则表达式的支持\"><a href=\"#java对正则表达式的支持\" class=\"headerlink\" title=\"java对正则表达式的支持\"></a>java对正则表达式的支持</h3><p>在java中要想使用正则表达式，有三种方式：</p>\n<ul>\n<li>String类对正则表达式的支持</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(String regex)</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>单独使用java.util.regex.Pattern</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(String regex, CharSequence input)</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>java.util.regex包下的Pattern类配合Matcher类使用（<strong><em>推荐采用此方式</em></strong>）</li>\n</ul>\n<p>下面我们依次来使用这三种方式：</p>\n<p>第一种：String类对正则表达式的支持 matches(String regex)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String str = <span class=\"string\">\"Java\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = str.matches(<span class=\"string\">\"(J|x)ava\"</span>);</span><br><span class=\"line\">    System.out.println(flag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<p>这种方式虽然也能实现正则匹配，但是功能单一，只能返回是否匹配，而且字符串必须<strong><em>整体匹配</em></strong>才能返回true，以下面的代码来说明这个问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testString2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String str = <span class=\"string\">\"Java is a programming language.\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = str.matches(<span class=\"string\">\"Java\"</span>);</span><br><span class=\"line\">    System.out.println(flag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：<span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n<p>查看String类的源码可以发现，String类的matches方法实际上就是调用的下面要讲的第二种方式Pattern.matches(String regex,CharSequence input)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(String regex)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Pattern.matches(regex, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种：单独使用Pattern进行正则匹配</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPattern</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String str = <span class=\"string\">\"Java is a programming language.\"</span>;</span><br><span class=\"line\">    String regex = <span class=\"string\">\"Java\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = Pattern.matches(regex, str);</span><br><span class=\"line\">    System.out.println(flag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：<span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n<p>这里为什么也返回了false？原因和第一种方式一样，因为Pattern的静态方法matches(String regex,CharSequence input)也是<strong><em>整体匹配</em></strong>。<br>实际上，如果我们去查看Pattern的源码的话，可以发现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(String regex, CharSequence input)</span> </span>&#123;</span><br><span class=\"line\">    Pattern p = Pattern.compile(regex);</span><br><span class=\"line\">    Matcher m = p.matcher(input);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m.matches();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方式实际上使用的是下面的第三种方式</p>\n<p>第三种：Pattern和Matcher的结合使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPatternAndMatcher</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String str = <span class=\"string\">\"I love Java and xava.\"</span>;</span><br><span class=\"line\">    String regex = <span class=\"string\">\"(J|x)ava\"</span>;</span><br><span class=\"line\">    Pattern p = Pattern.compile(regex);</span><br><span class=\"line\">    Matcher m = p.matcher(str);</span><br><span class=\"line\">    System.out.println(m.matches());</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m.find()) &#123;</span><br><span class=\"line\">        System.out.println(m.group());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\">Java</span><br><span class=\"line\">xava</span><br></pre></td></tr></table></figure>\n<p>通过以上分析，我们可以发现，第一种方式是对第二种方式的调用，而第二种方式的实现又是采用的第三种方式。</p>\n<p>因此，在以后的使用中，推荐直接使用第三种方式，其功能远强于第一种和第二种方式。</p>\n<h3 id=\"详解Pattern和Matcher\"><a href=\"#详解Pattern和Matcher\" class=\"headerlink\" title=\"详解Pattern和Matcher\"></a>详解Pattern和Matcher</h3><p>Pattern的常用方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Pattern <span class=\"title\">compile</span><span class=\"params\">(String regex)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Matcher <span class=\"title\">matcher</span><span class=\"params\">(CharSequence input)</span></span></span><br></pre></td></tr></table></figure>\n<p>由于Pattern只有私有构造方法，我们不能直接实例化它，故每次必须通过其compile方法取得Pattern对象，继而通过matcher方法获取Matcher对象。</p>\n<p>Matcher的常用方法</p>\n<p>①索引方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">start</span><span class=\"params\">()</span><span class=\"comment\">//返回之前匹配的起始索引</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">start</span><span class=\"params\">(<span class=\"keyword\">int</span> group)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">end</span><span class=\"params\">()</span><span class=\"comment\">//返回最后匹配字符之后的偏移量，例如用\\d&#123;4&#125;匹配he2018，则end()返回6</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">end</span><span class=\"params\">(<span class=\"keyword\">int</span> group)</span></span></span><br></pre></td></tr></table></figure>\n<p>实例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegexTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString regex = <span class=\"string\">\"\\\\d&#123;4&#125;\"</span>;</span><br><span class=\"line\">\t\tString str = <span class=\"string\">\"he2018shan0423yang11gong456shan\"</span>;</span><br><span class=\"line\">\t\tPattern pattern = Pattern.compile(regex);</span><br><span class=\"line\">\t\tMatcher matcher = pattern.matcher(str);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(matcher.find()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"匹配字段：\"</span>+matcher.group());</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"开始索引：\"</span>+matcher.start());</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"结束索引：\"</span>+matcher.end());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">匹配字段：<span class=\"number\">2018</span></span><br><span class=\"line\">开始索引：<span class=\"number\">2</span></span><br><span class=\"line\">结束索引：<span class=\"number\">6</span></span><br><span class=\"line\">匹配字段：<span class=\"number\">0423</span></span><br><span class=\"line\">开始索引：<span class=\"number\">10</span></span><br><span class=\"line\">结束索引：<span class=\"number\">14</span></span><br></pre></td></tr></table></figure>\n<p>②研究方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">find</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> start)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lookingAt</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<p>③替换方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">quoteReplacement</span><span class=\"params\">(String s)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Matcher <span class=\"title\">appendReplacement</span><span class=\"params\">(StringBuffer sb, String replacement)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> StringBuffer <span class=\"title\">appendTail</span><span class=\"params\">(StringBuffer sb)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">replaceAll</span><span class=\"params\">(String replacement)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">replaceFirst</span><span class=\"params\">(String replacement)</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h3><p>常用的正则表达式</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">规则</th>\n<th style=\"text-align:left\">正则表达式语法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">电子邮箱</td>\n<td style=\"text-align:left\">[\\w!#$%^&amp;`+=/(&#124;)’?,~*-]+@([a-z0-9]+\\.)+[a-z]+</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">中文字符</td>\n<td style=\"text-align:left\">[\\u4e00-\\u9fa5]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">QQ号</td>\n<td style=\"text-align:left\">[1-9][0-9]{4,}</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">身份证号</td>\n<td style=\"text-align:left\">\\d{6}(19&#124;20)\\d{2}((0[1-9])&#124;(1[0-2]))(([0-2]\\d)&#124;(3[0-1]))\\d{3}(\\d&#124;x&#124;X){1}</td>\n</tr>\n</tbody>\n</table>"},{"title":"Java网络爬虫之详解HttpURLConnection","date":"2018-05-21T07:14:04.000Z","updated":"2018-05-21T07:14:04.000Z","_content":"\n在Java.net包下有一个类HttpURLConnection，其继承结构如下：\n\n```java\npublic abstract class HttpURLConnection extends URLConnection\n```\n\n它的父类URLConnection也是一个抽象类。要想取得URLConnection对象，只能通过java.net.URL下的如下方法：\n\n```java\npublic URLConnection openConnection() throws java.io.IOException;\npublic URLConnection openConnection(Proxy proxy) throws java.io.IOException;\n```\n\n<!--more-->\n\nURLConnection主要的成员方法：\n\n```java\n//设置建立连接后，产生从服务器读取信息的输入流，默认为true\npublic void setDoInput(boolean doinput);\n//默认情况下，建立连接后不会产生执行写操作的输出流，如果想要获得输出流，\n//则将dooutput设置为true，主要用于post请求\npublic void setDoOutput(boolean dooutput);\npublic void setIfModifiedSince(long ifmodifiedsince);\npublic void setUseCaches(boolean usecaches);\npublic void setAllowUserInteraction(boolean allowuserinteraction);\npublic void setRequestProperty(String key, String value);\npublic void setConnectTimeout(int timeout);\npublic void setReadTimeout(int timeout);\n\npublic String getHeaderField(String name);\npublic String getHeaderField(int n);\npublic String getHeaderFieldKey(int n);\n\npublic int getContentLength();\npublic String getContentType();\npublic String getContentEncoding();\npublic long getExpiration()\npublic long getLastModified();\n\npublic URL getURL();\n\npublic abstract void connect() throws IOException;\n```\n\n\n\n```java\n\n```\n\n\n\n在setRequestProperty()方法中可以设置请求头信息。请求头信息将和请求命令一起被发送到服务器，例如：\n\n```html\nAccept:image/webp,image/apng,image/*,*/*;q=0.8\nAccept-Encoding:gzip, deflate, br\nAccept-Language:zh-CN,zh;q=0.8\nCache-Control:no-cache\nConnection:keep-alive\nCookie:\nHost:sp1.baidu.com\nPragma:no-cache\nReferer:https://www.baidu.com\nUser-Agent:Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\n```\n\n如何查看有哪些头信息可以设置呢？这里以百度首页为例，我用的chrome浏览器（其他浏览器大同小异），按F12打开开发者工具，选择网络（network），然后刷新一下正在浏览的页面，可以看到很多的图片、css、js等，随便点开一个，右侧的Request Headers下的信息，就是请求头信息。\n\n![](http://p64uw9x5j.bkt.clouddn.com//image/2018/05/21/20180521162735.png)\n\nHttpURLConnection主要的扩展方法：\n\n```java\n//method必须写大写字母\npublic void setRequestMethod(String method) throws ProtocolException;\npublic int getResponseCode() throws IOException;\npublic String getResponseMessage() throws IOException;\n\npublic InputStream getErrorStream();\npublic static void setFollowRedirects(boolean set);\npublic void setInstanceFollowRedirects(boolean followRedirects);\n\npublic abstract void disconnect();\n```\n\n值得注意的是，setRequestMethod方法的参数必须写***大写***，以GET请求为例，如果写小写，会报如下错误：\n\n```java\nException in thread \"main\" java.net.ProtocolException: Invalid HTTP method: get\nat java.net.HttpURLConnection.setRequestMethod(Unknown Source)\nat sun.net.www.protocol.http.HttpURLConnection.setRequestMethod(Unknown Source)\n```\n\n支持的HTTP请求为GET、POST、HEAD、OPTIONS、PUT、DELETE、TRACE，默认为GET请求。\n\n若为POST请求，则需要设置setDoOutput(boolean dooutput)为true，否则会报如下错误：\n\n```java\nException in thread \"main\" java.net.ProtocolException: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)\n\tat sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(Unknown Source)\n\tat sun.net.www.protocol.http.HttpURLConnection.getOutputStream(Unknown Source)\n\tat sun.net.www.protocol.https.HttpsURLConnectionImpl.getOutputStream(Unknown Source)\n```\n\n（未完待续）\n\n","source":"_posts/java-spider-httpurlconnection.md","raw":"---\ntitle: Java网络爬虫之详解HttpURLConnection\ndate: 2018-05-21 15:14:04\nupdated: 2018-05-21 15:14:04\ntags: [java,网络爬虫]\ncategories: 网络爬虫\n---\n\n在Java.net包下有一个类HttpURLConnection，其继承结构如下：\n\n```java\npublic abstract class HttpURLConnection extends URLConnection\n```\n\n它的父类URLConnection也是一个抽象类。要想取得URLConnection对象，只能通过java.net.URL下的如下方法：\n\n```java\npublic URLConnection openConnection() throws java.io.IOException;\npublic URLConnection openConnection(Proxy proxy) throws java.io.IOException;\n```\n\n<!--more-->\n\nURLConnection主要的成员方法：\n\n```java\n//设置建立连接后，产生从服务器读取信息的输入流，默认为true\npublic void setDoInput(boolean doinput);\n//默认情况下，建立连接后不会产生执行写操作的输出流，如果想要获得输出流，\n//则将dooutput设置为true，主要用于post请求\npublic void setDoOutput(boolean dooutput);\npublic void setIfModifiedSince(long ifmodifiedsince);\npublic void setUseCaches(boolean usecaches);\npublic void setAllowUserInteraction(boolean allowuserinteraction);\npublic void setRequestProperty(String key, String value);\npublic void setConnectTimeout(int timeout);\npublic void setReadTimeout(int timeout);\n\npublic String getHeaderField(String name);\npublic String getHeaderField(int n);\npublic String getHeaderFieldKey(int n);\n\npublic int getContentLength();\npublic String getContentType();\npublic String getContentEncoding();\npublic long getExpiration()\npublic long getLastModified();\n\npublic URL getURL();\n\npublic abstract void connect() throws IOException;\n```\n\n\n\n```java\n\n```\n\n\n\n在setRequestProperty()方法中可以设置请求头信息。请求头信息将和请求命令一起被发送到服务器，例如：\n\n```html\nAccept:image/webp,image/apng,image/*,*/*;q=0.8\nAccept-Encoding:gzip, deflate, br\nAccept-Language:zh-CN,zh;q=0.8\nCache-Control:no-cache\nConnection:keep-alive\nCookie:\nHost:sp1.baidu.com\nPragma:no-cache\nReferer:https://www.baidu.com\nUser-Agent:Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\n```\n\n如何查看有哪些头信息可以设置呢？这里以百度首页为例，我用的chrome浏览器（其他浏览器大同小异），按F12打开开发者工具，选择网络（network），然后刷新一下正在浏览的页面，可以看到很多的图片、css、js等，随便点开一个，右侧的Request Headers下的信息，就是请求头信息。\n\n![](http://p64uw9x5j.bkt.clouddn.com//image/2018/05/21/20180521162735.png)\n\nHttpURLConnection主要的扩展方法：\n\n```java\n//method必须写大写字母\npublic void setRequestMethod(String method) throws ProtocolException;\npublic int getResponseCode() throws IOException;\npublic String getResponseMessage() throws IOException;\n\npublic InputStream getErrorStream();\npublic static void setFollowRedirects(boolean set);\npublic void setInstanceFollowRedirects(boolean followRedirects);\n\npublic abstract void disconnect();\n```\n\n值得注意的是，setRequestMethod方法的参数必须写***大写***，以GET请求为例，如果写小写，会报如下错误：\n\n```java\nException in thread \"main\" java.net.ProtocolException: Invalid HTTP method: get\nat java.net.HttpURLConnection.setRequestMethod(Unknown Source)\nat sun.net.www.protocol.http.HttpURLConnection.setRequestMethod(Unknown Source)\n```\n\n支持的HTTP请求为GET、POST、HEAD、OPTIONS、PUT、DELETE、TRACE，默认为GET请求。\n\n若为POST请求，则需要设置setDoOutput(boolean dooutput)为true，否则会报如下错误：\n\n```java\nException in thread \"main\" java.net.ProtocolException: cannot write to a URLConnection if doOutput=false - call setDoOutput(true)\n\tat sun.net.www.protocol.http.HttpURLConnection.getOutputStream0(Unknown Source)\n\tat sun.net.www.protocol.http.HttpURLConnection.getOutputStream(Unknown Source)\n\tat sun.net.www.protocol.https.HttpsURLConnectionImpl.getOutputStream(Unknown Source)\n```\n\n（未完待续）\n\n","slug":"java-spider-httpurlconnection","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9apv002aj1q0ef757zn2","content":"<p>在Java.net包下有一个类HttpURLConnection，其继承结构如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpURLConnection</span> <span class=\"keyword\">extends</span> <span class=\"title\">URLConnection</span></span></span><br></pre></td></tr></table></figure>\n<p>它的父类URLConnection也是一个抽象类。要想取得URLConnection对象，只能通过java.net.URL下的如下方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> URLConnection <span class=\"title\">openConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> java.io.IOException</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> URLConnection <span class=\"title\">openConnection</span><span class=\"params\">(Proxy proxy)</span> <span class=\"keyword\">throws</span> java.io.IOException</span>;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>URLConnection主要的成员方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置建立连接后，产生从服务器读取信息的输入流，默认为true</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDoInput</span><span class=\"params\">(<span class=\"keyword\">boolean</span> doinput)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//默认情况下，建立连接后不会产生执行写操作的输出流，如果想要获得输出流，</span></span><br><span class=\"line\"><span class=\"comment\">//则将dooutput设置为true，主要用于post请求</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDoOutput</span><span class=\"params\">(<span class=\"keyword\">boolean</span> dooutput)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setIfModifiedSince</span><span class=\"params\">(<span class=\"keyword\">long</span> ifmodifiedsince)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUseCaches</span><span class=\"params\">(<span class=\"keyword\">boolean</span> usecaches)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAllowUserInteraction</span><span class=\"params\">(<span class=\"keyword\">boolean</span> allowuserinteraction)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRequestProperty</span><span class=\"params\">(String key, String value)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConnectTimeout</span><span class=\"params\">(<span class=\"keyword\">int</span> timeout)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setReadTimeout</span><span class=\"params\">(<span class=\"keyword\">int</span> timeout)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getHeaderField</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getHeaderField</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getHeaderFieldKey</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getContentLength</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getContentType</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getContentEncoding</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getExpiration</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getLastModified</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> URL <span class=\"title\">getURL</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在setRequestProperty()方法中可以设置请求头信息。请求头信息将和请求命令一起被发送到服务器，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept:image/webp,image/apng,image/*,*/*;q=0.8</span><br><span class=\"line\">Accept-Encoding:gzip, deflate, br</span><br><span class=\"line\">Accept-Language:zh-CN,zh;q=0.8</span><br><span class=\"line\">Cache-Control:no-cache</span><br><span class=\"line\">Connection:keep-alive</span><br><span class=\"line\">Cookie:</span><br><span class=\"line\">Host:sp1.baidu.com</span><br><span class=\"line\">Pragma:no-cache</span><br><span class=\"line\">Referer:https://www.baidu.com</span><br><span class=\"line\">User-Agent:Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36</span><br></pre></td></tr></table></figure>\n<p>如何查看有哪些头信息可以设置呢？这里以百度首页为例，我用的chrome浏览器（其他浏览器大同小异），按F12打开开发者工具，选择网络（network），然后刷新一下正在浏览的页面，可以看到很多的图片、css、js等，随便点开一个，右侧的Request Headers下的信息，就是请求头信息。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com//image/2018/05/21/20180521162735.png\" alt=\"\"></p>\n<p>HttpURLConnection主要的扩展方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//method必须写大写字母</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRequestMethod</span><span class=\"params\">(String method)</span> <span class=\"keyword\">throws</span> ProtocolException</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getResponseCode</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getResponseMessage</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> InputStream <span class=\"title\">getErrorStream</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFollowRedirects</span><span class=\"params\">(<span class=\"keyword\">boolean</span> set)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setInstanceFollowRedirects</span><span class=\"params\">(<span class=\"keyword\">boolean</span> followRedirects)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">disconnect</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>值得注意的是，setRequestMethod方法的参数必须写<strong><em>大写</em></strong>，以GET请求为例，如果写小写，会报如下错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.net.ProtocolException: Invalid HTTP method: get</span><br><span class=\"line\">at java.net.HttpURLConnection.setRequestMethod(Unknown Source)</span><br><span class=\"line\">at sun.net.www.protocol.http.HttpURLConnection.setRequestMethod(Unknown Source)</span><br></pre></td></tr></table></figure>\n<p>支持的HTTP请求为GET、POST、HEAD、OPTIONS、PUT、DELETE、TRACE，默认为GET请求。</p>\n<p>若为POST请求，则需要设置setDoOutput(boolean dooutput)为true，否则会报如下错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.net.ProtocolException: cannot write to a URLConnection <span class=\"keyword\">if</span> doOutput=<span class=\"keyword\">false</span> - <span class=\"function\">call <span class=\"title\">setDoOutput</span><span class=\"params\">(<span class=\"keyword\">true</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">\tat sun.net.www.protocol.http.HttpURLConnection.<span class=\"title\">getOutputStream0</span><span class=\"params\">(Unknown Source)</span></span></span><br><span class=\"line\"><span class=\"function\">\tat sun.net.www.protocol.http.HttpURLConnection.<span class=\"title\">getOutputStream</span><span class=\"params\">(Unknown Source)</span></span></span><br><span class=\"line\"><span class=\"function\">\tat sun.net.www.protocol.https.HttpsURLConnectionImpl.<span class=\"title\">getOutputStream</span><span class=\"params\">(Unknown Source)</span></span></span><br></pre></td></tr></table></figure>\n<p>（未完待续）</p>\n","site":{"data":{}},"excerpt":"<p>在Java.net包下有一个类HttpURLConnection，其继承结构如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpURLConnection</span> <span class=\"keyword\">extends</span> <span class=\"title\">URLConnection</span></span></span><br></pre></td></tr></table></figure>\n<p>它的父类URLConnection也是一个抽象类。要想取得URLConnection对象，只能通过java.net.URL下的如下方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> URLConnection <span class=\"title\">openConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> java.io.IOException</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> URLConnection <span class=\"title\">openConnection</span><span class=\"params\">(Proxy proxy)</span> <span class=\"keyword\">throws</span> java.io.IOException</span>;</span><br></pre></td></tr></table></figure>","more":"<p>URLConnection主要的成员方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置建立连接后，产生从服务器读取信息的输入流，默认为true</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDoInput</span><span class=\"params\">(<span class=\"keyword\">boolean</span> doinput)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//默认情况下，建立连接后不会产生执行写操作的输出流，如果想要获得输出流，</span></span><br><span class=\"line\"><span class=\"comment\">//则将dooutput设置为true，主要用于post请求</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDoOutput</span><span class=\"params\">(<span class=\"keyword\">boolean</span> dooutput)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setIfModifiedSince</span><span class=\"params\">(<span class=\"keyword\">long</span> ifmodifiedsince)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUseCaches</span><span class=\"params\">(<span class=\"keyword\">boolean</span> usecaches)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAllowUserInteraction</span><span class=\"params\">(<span class=\"keyword\">boolean</span> allowuserinteraction)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRequestProperty</span><span class=\"params\">(String key, String value)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConnectTimeout</span><span class=\"params\">(<span class=\"keyword\">int</span> timeout)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setReadTimeout</span><span class=\"params\">(<span class=\"keyword\">int</span> timeout)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getHeaderField</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getHeaderField</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getHeaderFieldKey</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getContentLength</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getContentType</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getContentEncoding</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getExpiration</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getLastModified</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> URL <span class=\"title\">getURL</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在setRequestProperty()方法中可以设置请求头信息。请求头信息将和请求命令一起被发送到服务器，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept:image/webp,image/apng,image/*,*/*;q=0.8</span><br><span class=\"line\">Accept-Encoding:gzip, deflate, br</span><br><span class=\"line\">Accept-Language:zh-CN,zh;q=0.8</span><br><span class=\"line\">Cache-Control:no-cache</span><br><span class=\"line\">Connection:keep-alive</span><br><span class=\"line\">Cookie:</span><br><span class=\"line\">Host:sp1.baidu.com</span><br><span class=\"line\">Pragma:no-cache</span><br><span class=\"line\">Referer:https://www.baidu.com</span><br><span class=\"line\">User-Agent:Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36</span><br></pre></td></tr></table></figure>\n<p>如何查看有哪些头信息可以设置呢？这里以百度首页为例，我用的chrome浏览器（其他浏览器大同小异），按F12打开开发者工具，选择网络（network），然后刷新一下正在浏览的页面，可以看到很多的图片、css、js等，随便点开一个，右侧的Request Headers下的信息，就是请求头信息。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com//image/2018/05/21/20180521162735.png\" alt=\"\"></p>\n<p>HttpURLConnection主要的扩展方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//method必须写大写字母</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRequestMethod</span><span class=\"params\">(String method)</span> <span class=\"keyword\">throws</span> ProtocolException</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getResponseCode</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getResponseMessage</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> InputStream <span class=\"title\">getErrorStream</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFollowRedirects</span><span class=\"params\">(<span class=\"keyword\">boolean</span> set)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setInstanceFollowRedirects</span><span class=\"params\">(<span class=\"keyword\">boolean</span> followRedirects)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">disconnect</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>值得注意的是，setRequestMethod方法的参数必须写<strong><em>大写</em></strong>，以GET请求为例，如果写小写，会报如下错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.net.ProtocolException: Invalid HTTP method: get</span><br><span class=\"line\">at java.net.HttpURLConnection.setRequestMethod(Unknown Source)</span><br><span class=\"line\">at sun.net.www.protocol.http.HttpURLConnection.setRequestMethod(Unknown Source)</span><br></pre></td></tr></table></figure>\n<p>支持的HTTP请求为GET、POST、HEAD、OPTIONS、PUT、DELETE、TRACE，默认为GET请求。</p>\n<p>若为POST请求，则需要设置setDoOutput(boolean dooutput)为true，否则会报如下错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">\"main\"</span> java.net.ProtocolException: cannot write to a URLConnection <span class=\"keyword\">if</span> doOutput=<span class=\"keyword\">false</span> - <span class=\"function\">call <span class=\"title\">setDoOutput</span><span class=\"params\">(<span class=\"keyword\">true</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">\tat sun.net.www.protocol.http.HttpURLConnection.<span class=\"title\">getOutputStream0</span><span class=\"params\">(Unknown Source)</span></span></span><br><span class=\"line\"><span class=\"function\">\tat sun.net.www.protocol.http.HttpURLConnection.<span class=\"title\">getOutputStream</span><span class=\"params\">(Unknown Source)</span></span></span><br><span class=\"line\"><span class=\"function\">\tat sun.net.www.protocol.https.HttpsURLConnectionImpl.<span class=\"title\">getOutputStream</span><span class=\"params\">(Unknown Source)</span></span></span><br></pre></td></tr></table></figure>\n<p>（未完待续）</p>"},{"title":"java网络爬虫之HttpURLConnection实战","date":"2018-05-21T10:02:18.000Z","updated":"2018-05-21T10:02:18.000Z","_content":"\n在开始写爬虫之前，我们先来总结一下用HttpURLConnection写爬虫的操作步骤：\n\n1.实例化一个URL，调用URL类的openConnection()方法获得URLConnection对象，并强转为HttpURLConnection对象\n\n```java\nURL url = new URL(\"http://host/path\");\nHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n```\n\n2.设置连接的请求属性，诸如，setRequestProperty、setConnectionTimeout、setReadTimeout等\n\n3.调用connect()方法连接远程资源\n\n```java\nconnection.connect();\n```\n\n4.访问资源数据。使用getInputStream方法获取一个输入流用以读取信息。如果服务器端出现错误，调用getErrorStream()方法获取错误信息。\n\n```java\ntry{\n    connection.getInputStream();\n} catch(Exception e) {\n    connection.getErrorStream();\n}\n```\n\n5.调用disconnect()关闭连接\n\n```java\nconnection.disconnect();\n```\n\n6.解析需要的数据。\n\n<!--more-->\n\n这里以爬取百度首页为例，\n\n### GET请求\n\n#### 爬取百度首页源码\n\n```java\nURL url = new URL(\"https://www.baidu.com\");\nHttpURLConnection connection = (HttpURLConnection) url.openConnection();\nconnection.setConnectTimeout(10000);\nconnection.setRequestMethod(\"GET\");\nconnection.connect();\nInputStream is = connection.getInputStream();\nBufferedReader br = new BufferedReader(new InputStreamReader(is,\"utf-8\"));\nString temp;\nStringBuilder html = new StringBuilder();\nwhile((temp = br.readLine()) != null) {\n    if(temp.trim().isEmpty()) {\n        continue;\n    }\n    //格式化html\n    html.append(temp.replaceAll(\"\\\\s+<\", \"<\").replace(\">\", \">\\n\"));\n}\nbr.close();\nis.close();\nconnection.disconnect();\nSystem.out.println(html);\n```\n\n控制台输出如下信息：[<i class=\"fa fa-folder-open\"></i>](http://p64uw9x5j.bkt.clouddn.com/html/2018/05/21/index.html)\n\n#### 设置用户代理，再爬百度首页\n\n上面的程序，我们稍微改一下，在setRequestProperty方法中设置下User-Agent，看下会出现什么神奇的变化？因为输出的内容有点多，我把它写入到一个html文件中了，而不是直接打印在控制台。\n\n```java\nURL url = new URL(\"https://www.baidu.com\");\nHttpURLConnection connection = (HttpURLConnection) url.openConnection();\nconnection.setConnectTimeout(10000);\nconnection.setRequestMethod(\"GET\");\nconnection.setDoInput(true);\nconnection.setDoOutput(false);\nconnection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\");\nconnection.connect();\nInputStream is = connection.getInputStream();\nBufferedReader br = new BufferedReader(new InputStreamReader(is,\"utf-8\"));\nString temp;\nBufferedWriter bw = new BufferedWriter(new FileWriter(new File(\"c:/Users/hgs/Desktop/baidu_index.html\"),true));\nwhile((temp = br.readLine()) != null) {\n    temp = temp.trim();\n    if(temp.isEmpty()) {\n        continue;\n    }\n    //格式化输出，便于在浏览器中查看\n    temp = temp.replaceAll(\"\\\\s+<\", \"<\")\n        .replace(\"<\", \"&lt;\")\n        .replace(\">\", \"&gt;<br>\")\n        .replace(\"&lt;/\",\"<br>&lt;/\")\n        .replace(\"{\", \"{<br>&nbsp;&nbsp;&nbsp;&nbsp;\")\n        .replace(\"}\", \"<br>}<br>\")\n        .replaceAll(\"[^\\\\&(nbsp|gt|lt)];[^\\\"']\", \";<br>&nbsp;&nbsp;&nbsp;&nbsp;\");\n    bw.write(temp);\n}\nbw.flush();\nbw.close();\nbr.close();\nis.close();\nconnection.disconnect();\n```\n\n响应结果：[<i class=\"fa fa-folder-open\"></i>](http://p64uw9x5j.bkt.clouddn.com/html/2018/05/21/baidu_index2.html)\n\n响应结果似乎与刚才不一样了，多出了很多内容。这是因为，默认情况下，Java程序会发送包含单词Java的通用用户代理字符串，而有些服务器可能存在反爬虫机制，不想为程序自动产生的请求服务。这时候，我们可***在请求头中设置User-Agent，以达到伪装浏览器的目的***。\n\n#### 带参数的get请求\n\n到这里我们已经能爬到完整的百度首页了，但这似乎没有什么用处。\n\n现在我们试试通过程序自动查询百度，并获取第一页的查询结果。。。（未完待续）","source":"_posts/java-spider-httpurlconnection-in-action.md","raw":"---\ntitle: java网络爬虫之HttpURLConnection实战\ndate: 2018-05-21 18:02:18\nupdated: 2018-05-21 18:02:18\ntags: [java,网络爬虫]\ncategories: 网络爬虫\n---\n\n在开始写爬虫之前，我们先来总结一下用HttpURLConnection写爬虫的操作步骤：\n\n1.实例化一个URL，调用URL类的openConnection()方法获得URLConnection对象，并强转为HttpURLConnection对象\n\n```java\nURL url = new URL(\"http://host/path\");\nHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n```\n\n2.设置连接的请求属性，诸如，setRequestProperty、setConnectionTimeout、setReadTimeout等\n\n3.调用connect()方法连接远程资源\n\n```java\nconnection.connect();\n```\n\n4.访问资源数据。使用getInputStream方法获取一个输入流用以读取信息。如果服务器端出现错误，调用getErrorStream()方法获取错误信息。\n\n```java\ntry{\n    connection.getInputStream();\n} catch(Exception e) {\n    connection.getErrorStream();\n}\n```\n\n5.调用disconnect()关闭连接\n\n```java\nconnection.disconnect();\n```\n\n6.解析需要的数据。\n\n<!--more-->\n\n这里以爬取百度首页为例，\n\n### GET请求\n\n#### 爬取百度首页源码\n\n```java\nURL url = new URL(\"https://www.baidu.com\");\nHttpURLConnection connection = (HttpURLConnection) url.openConnection();\nconnection.setConnectTimeout(10000);\nconnection.setRequestMethod(\"GET\");\nconnection.connect();\nInputStream is = connection.getInputStream();\nBufferedReader br = new BufferedReader(new InputStreamReader(is,\"utf-8\"));\nString temp;\nStringBuilder html = new StringBuilder();\nwhile((temp = br.readLine()) != null) {\n    if(temp.trim().isEmpty()) {\n        continue;\n    }\n    //格式化html\n    html.append(temp.replaceAll(\"\\\\s+<\", \"<\").replace(\">\", \">\\n\"));\n}\nbr.close();\nis.close();\nconnection.disconnect();\nSystem.out.println(html);\n```\n\n控制台输出如下信息：[<i class=\"fa fa-folder-open\"></i>](http://p64uw9x5j.bkt.clouddn.com/html/2018/05/21/index.html)\n\n#### 设置用户代理，再爬百度首页\n\n上面的程序，我们稍微改一下，在setRequestProperty方法中设置下User-Agent，看下会出现什么神奇的变化？因为输出的内容有点多，我把它写入到一个html文件中了，而不是直接打印在控制台。\n\n```java\nURL url = new URL(\"https://www.baidu.com\");\nHttpURLConnection connection = (HttpURLConnection) url.openConnection();\nconnection.setConnectTimeout(10000);\nconnection.setRequestMethod(\"GET\");\nconnection.setDoInput(true);\nconnection.setDoOutput(false);\nconnection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\");\nconnection.connect();\nInputStream is = connection.getInputStream();\nBufferedReader br = new BufferedReader(new InputStreamReader(is,\"utf-8\"));\nString temp;\nBufferedWriter bw = new BufferedWriter(new FileWriter(new File(\"c:/Users/hgs/Desktop/baidu_index.html\"),true));\nwhile((temp = br.readLine()) != null) {\n    temp = temp.trim();\n    if(temp.isEmpty()) {\n        continue;\n    }\n    //格式化输出，便于在浏览器中查看\n    temp = temp.replaceAll(\"\\\\s+<\", \"<\")\n        .replace(\"<\", \"&lt;\")\n        .replace(\">\", \"&gt;<br>\")\n        .replace(\"&lt;/\",\"<br>&lt;/\")\n        .replace(\"{\", \"{<br>&nbsp;&nbsp;&nbsp;&nbsp;\")\n        .replace(\"}\", \"<br>}<br>\")\n        .replaceAll(\"[^\\\\&(nbsp|gt|lt)];[^\\\"']\", \";<br>&nbsp;&nbsp;&nbsp;&nbsp;\");\n    bw.write(temp);\n}\nbw.flush();\nbw.close();\nbr.close();\nis.close();\nconnection.disconnect();\n```\n\n响应结果：[<i class=\"fa fa-folder-open\"></i>](http://p64uw9x5j.bkt.clouddn.com/html/2018/05/21/baidu_index2.html)\n\n响应结果似乎与刚才不一样了，多出了很多内容。这是因为，默认情况下，Java程序会发送包含单词Java的通用用户代理字符串，而有些服务器可能存在反爬虫机制，不想为程序自动产生的请求服务。这时候，我们可***在请求头中设置User-Agent，以达到伪装浏览器的目的***。\n\n#### 带参数的get请求\n\n到这里我们已经能爬到完整的百度首页了，但这似乎没有什么用处。\n\n现在我们试试通过程序自动查询百度，并获取第一页的查询结果。。。（未完待续）","slug":"java-spider-httpurlconnection-in-action","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9apx002cj1q0wa2kkoqg","content":"<p>在开始写爬虫之前，我们先来总结一下用HttpURLConnection写爬虫的操作步骤：</p>\n<p>1.实例化一个URL，调用URL类的openConnection()方法获得URLConnection对象，并强转为HttpURLConnection对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"http://host/path\"</span>);</span><br><span class=\"line\">HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br></pre></td></tr></table></figure>\n<p>2.设置连接的请求属性，诸如，setRequestProperty、setConnectionTimeout、setReadTimeout等</p>\n<p>3.调用connect()方法连接远程资源</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connection.connect();</span><br></pre></td></tr></table></figure>\n<p>4.访问资源数据。使用getInputStream方法获取一个输入流用以读取信息。如果服务器端出现错误，调用getErrorStream()方法获取错误信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    connection.getInputStream();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">    connection.getErrorStream();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5.调用disconnect()关闭连接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connection.disconnect();</span><br></pre></td></tr></table></figure>\n<p>6.解析需要的数据。</p>\n<a id=\"more\"></a>\n<p>这里以爬取百度首页为例，</p>\n<h3 id=\"GET请求\"><a href=\"#GET请求\" class=\"headerlink\" title=\"GET请求\"></a>GET请求</h3><h4 id=\"爬取百度首页源码\"><a href=\"#爬取百度首页源码\" class=\"headerlink\" title=\"爬取百度首页源码\"></a>爬取百度首页源码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"https://www.baidu.com\"</span>);</span><br><span class=\"line\">HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class=\"line\">connection.setConnectTimeout(<span class=\"number\">10000</span>);</span><br><span class=\"line\">connection.setRequestMethod(<span class=\"string\">\"GET\"</span>);</span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\">InputStream is = connection.getInputStream();</span><br><span class=\"line\">BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(is,<span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">String temp;</span><br><span class=\"line\">StringBuilder html = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\"><span class=\"keyword\">while</span>((temp = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp.trim().isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//格式化html</span></span><br><span class=\"line\">    html.append(temp.replaceAll(<span class=\"string\">\"\\\\s+&lt;\"</span>, <span class=\"string\">\"&lt;\"</span>).replace(<span class=\"string\">\"&gt;\"</span>, <span class=\"string\">\"&gt;\\n\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">br.close();</span><br><span class=\"line\">is.close();</span><br><span class=\"line\">connection.disconnect();</span><br><span class=\"line\">System.out.println(html);</span><br></pre></td></tr></table></figure>\n<p>控制台输出如下信息：<a href=\"http://p64uw9x5j.bkt.clouddn.com/html/2018/05/21/index.html\" target=\"_blank\" rel=\"noopener\"><i class=\"fa fa-folder-open\"></i></a></p>\n<h4 id=\"设置用户代理，再爬百度首页\"><a href=\"#设置用户代理，再爬百度首页\" class=\"headerlink\" title=\"设置用户代理，再爬百度首页\"></a>设置用户代理，再爬百度首页</h4><p>上面的程序，我们稍微改一下，在setRequestProperty方法中设置下User-Agent，看下会出现什么神奇的变化？因为输出的内容有点多，我把它写入到一个html文件中了，而不是直接打印在控制台。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"https://www.baidu.com\"</span>);</span><br><span class=\"line\">HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class=\"line\">connection.setConnectTimeout(<span class=\"number\">10000</span>);</span><br><span class=\"line\">connection.setRequestMethod(<span class=\"string\">\"GET\"</span>);</span><br><span class=\"line\">connection.setDoInput(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">connection.setDoOutput(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">connection.setRequestProperty(<span class=\"string\">\"User-Agent\"</span>, <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\"</span>);</span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\">InputStream is = connection.getInputStream();</span><br><span class=\"line\">BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(is,<span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">String temp;</span><br><span class=\"line\">BufferedWriter bw = <span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> FileWriter(<span class=\"keyword\">new</span> File(<span class=\"string\">\"c:/Users/hgs/Desktop/baidu_index.html\"</span>),<span class=\"keyword\">true</span>));</span><br><span class=\"line\"><span class=\"keyword\">while</span>((temp = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    temp = temp.trim();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//格式化输出，便于在浏览器中查看</span></span><br><span class=\"line\">    temp = temp.replaceAll(<span class=\"string\">\"\\\\s+&lt;\"</span>, <span class=\"string\">\"&lt;\"</span>)</span><br><span class=\"line\">        .replace(<span class=\"string\">\"&lt;\"</span>, <span class=\"string\">\"&amp;lt;\"</span>)</span><br><span class=\"line\">        .replace(<span class=\"string\">\"&gt;\"</span>, <span class=\"string\">\"&amp;gt;&lt;br&gt;\"</span>)</span><br><span class=\"line\">        .replace(<span class=\"string\">\"&amp;lt;/\"</span>,<span class=\"string\">\"&lt;br&gt;&amp;lt;/\"</span>)</span><br><span class=\"line\">        .replace(<span class=\"string\">\"&#123;\"</span>, <span class=\"string\">\"&#123;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\"</span>)</span><br><span class=\"line\">        .replace(<span class=\"string\">\"&#125;\"</span>, <span class=\"string\">\"&lt;br&gt;&#125;&lt;br&gt;\"</span>)</span><br><span class=\"line\">        .replaceAll(<span class=\"string\">\"[^\\\\&amp;(nbsp|gt|lt)];[^\\\"']\"</span>, <span class=\"string\">\";&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\"</span>);</span><br><span class=\"line\">    bw.write(temp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bw.flush();</span><br><span class=\"line\">bw.close();</span><br><span class=\"line\">br.close();</span><br><span class=\"line\">is.close();</span><br><span class=\"line\">connection.disconnect();</span><br></pre></td></tr></table></figure>\n<p>响应结果：<a href=\"http://p64uw9x5j.bkt.clouddn.com/html/2018/05/21/baidu_index2.html\" target=\"_blank\" rel=\"noopener\"><i class=\"fa fa-folder-open\"></i></a></p>\n<p>响应结果似乎与刚才不一样了，多出了很多内容。这是因为，默认情况下，Java程序会发送包含单词Java的通用用户代理字符串，而有些服务器可能存在反爬虫机制，不想为程序自动产生的请求服务。这时候，我们可<strong><em>在请求头中设置User-Agent，以达到伪装浏览器的目的</em></strong>。</p>\n<h4 id=\"带参数的get请求\"><a href=\"#带参数的get请求\" class=\"headerlink\" title=\"带参数的get请求\"></a>带参数的get请求</h4><p>到这里我们已经能爬到完整的百度首页了，但这似乎没有什么用处。</p>\n<p>现在我们试试通过程序自动查询百度，并获取第一页的查询结果。。。（未完待续）</p>\n","site":{"data":{}},"excerpt":"<p>在开始写爬虫之前，我们先来总结一下用HttpURLConnection写爬虫的操作步骤：</p>\n<p>1.实例化一个URL，调用URL类的openConnection()方法获得URLConnection对象，并强转为HttpURLConnection对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"http://host/path\"</span>);</span><br><span class=\"line\">HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br></pre></td></tr></table></figure>\n<p>2.设置连接的请求属性，诸如，setRequestProperty、setConnectionTimeout、setReadTimeout等</p>\n<p>3.调用connect()方法连接远程资源</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connection.connect();</span><br></pre></td></tr></table></figure>\n<p>4.访问资源数据。使用getInputStream方法获取一个输入流用以读取信息。如果服务器端出现错误，调用getErrorStream()方法获取错误信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    connection.getInputStream();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">    connection.getErrorStream();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5.调用disconnect()关闭连接</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connection.disconnect();</span><br></pre></td></tr></table></figure>\n<p>6.解析需要的数据。</p>","more":"<p>这里以爬取百度首页为例，</p>\n<h3 id=\"GET请求\"><a href=\"#GET请求\" class=\"headerlink\" title=\"GET请求\"></a>GET请求</h3><h4 id=\"爬取百度首页源码\"><a href=\"#爬取百度首页源码\" class=\"headerlink\" title=\"爬取百度首页源码\"></a>爬取百度首页源码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"https://www.baidu.com\"</span>);</span><br><span class=\"line\">HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class=\"line\">connection.setConnectTimeout(<span class=\"number\">10000</span>);</span><br><span class=\"line\">connection.setRequestMethod(<span class=\"string\">\"GET\"</span>);</span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\">InputStream is = connection.getInputStream();</span><br><span class=\"line\">BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(is,<span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">String temp;</span><br><span class=\"line\">StringBuilder html = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\"><span class=\"keyword\">while</span>((temp = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp.trim().isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//格式化html</span></span><br><span class=\"line\">    html.append(temp.replaceAll(<span class=\"string\">\"\\\\s+&lt;\"</span>, <span class=\"string\">\"&lt;\"</span>).replace(<span class=\"string\">\"&gt;\"</span>, <span class=\"string\">\"&gt;\\n\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">br.close();</span><br><span class=\"line\">is.close();</span><br><span class=\"line\">connection.disconnect();</span><br><span class=\"line\">System.out.println(html);</span><br></pre></td></tr></table></figure>\n<p>控制台输出如下信息：<a href=\"http://p64uw9x5j.bkt.clouddn.com/html/2018/05/21/index.html\" target=\"_blank\" rel=\"noopener\"><i class=\"fa fa-folder-open\"></i></a></p>\n<h4 id=\"设置用户代理，再爬百度首页\"><a href=\"#设置用户代理，再爬百度首页\" class=\"headerlink\" title=\"设置用户代理，再爬百度首页\"></a>设置用户代理，再爬百度首页</h4><p>上面的程序，我们稍微改一下，在setRequestProperty方法中设置下User-Agent，看下会出现什么神奇的变化？因为输出的内容有点多，我把它写入到一个html文件中了，而不是直接打印在控制台。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"https://www.baidu.com\"</span>);</span><br><span class=\"line\">HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class=\"line\">connection.setConnectTimeout(<span class=\"number\">10000</span>);</span><br><span class=\"line\">connection.setRequestMethod(<span class=\"string\">\"GET\"</span>);</span><br><span class=\"line\">connection.setDoInput(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">connection.setDoOutput(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">connection.setRequestProperty(<span class=\"string\">\"User-Agent\"</span>, <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\"</span>);</span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\">InputStream is = connection.getInputStream();</span><br><span class=\"line\">BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(is,<span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">String temp;</span><br><span class=\"line\">BufferedWriter bw = <span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> FileWriter(<span class=\"keyword\">new</span> File(<span class=\"string\">\"c:/Users/hgs/Desktop/baidu_index.html\"</span>),<span class=\"keyword\">true</span>));</span><br><span class=\"line\"><span class=\"keyword\">while</span>((temp = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    temp = temp.trim();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//格式化输出，便于在浏览器中查看</span></span><br><span class=\"line\">    temp = temp.replaceAll(<span class=\"string\">\"\\\\s+&lt;\"</span>, <span class=\"string\">\"&lt;\"</span>)</span><br><span class=\"line\">        .replace(<span class=\"string\">\"&lt;\"</span>, <span class=\"string\">\"&amp;lt;\"</span>)</span><br><span class=\"line\">        .replace(<span class=\"string\">\"&gt;\"</span>, <span class=\"string\">\"&amp;gt;&lt;br&gt;\"</span>)</span><br><span class=\"line\">        .replace(<span class=\"string\">\"&amp;lt;/\"</span>,<span class=\"string\">\"&lt;br&gt;&amp;lt;/\"</span>)</span><br><span class=\"line\">        .replace(<span class=\"string\">\"&#123;\"</span>, <span class=\"string\">\"&#123;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\"</span>)</span><br><span class=\"line\">        .replace(<span class=\"string\">\"&#125;\"</span>, <span class=\"string\">\"&lt;br&gt;&#125;&lt;br&gt;\"</span>)</span><br><span class=\"line\">        .replaceAll(<span class=\"string\">\"[^\\\\&amp;(nbsp|gt|lt)];[^\\\"']\"</span>, <span class=\"string\">\";&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\"</span>);</span><br><span class=\"line\">    bw.write(temp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bw.flush();</span><br><span class=\"line\">bw.close();</span><br><span class=\"line\">br.close();</span><br><span class=\"line\">is.close();</span><br><span class=\"line\">connection.disconnect();</span><br></pre></td></tr></table></figure>\n<p>响应结果：<a href=\"http://p64uw9x5j.bkt.clouddn.com/html/2018/05/21/baidu_index2.html\" target=\"_blank\" rel=\"noopener\"><i class=\"fa fa-folder-open\"></i></a></p>\n<p>响应结果似乎与刚才不一样了，多出了很多内容。这是因为，默认情况下，Java程序会发送包含单词Java的通用用户代理字符串，而有些服务器可能存在反爬虫机制，不想为程序自动产生的请求服务。这时候，我们可<strong><em>在请求头中设置User-Agent，以达到伪装浏览器的目的</em></strong>。</p>\n<h4 id=\"带参数的get请求\"><a href=\"#带参数的get请求\" class=\"headerlink\" title=\"带参数的get请求\"></a>带参数的get请求</h4><p>到这里我们已经能爬到完整的百度首页了，但这似乎没有什么用处。</p>\n<p>现在我们试试通过程序自动查询百度，并获取第一页的查询结果。。。（未完待续）</p>"},{"title":"Java中的定时器Timer","date":"2018-08-02T13:11:49.000Z","_content":"\n在Java中，定时任务功能使用的是Timer类，其主要作用是设置计划任务，\n\n最近课题组的项目用到了Java中的定时器Timer类，这里记录下定时器Timer的相关知识。\n\nTimer的构造方法如下：\n\n```java\npublic Timer()\n    \npublic Timer(boolean isDaemon)\n  \npublic Timer(String name)\n    \npublic Timer(String name, boolean isDaemon)\n```\n\n<!--more-->\n\n方法列表如下：\n\n```java\npublic void schedule(TimerTask task, long delay)\n    \npublic void schedule(TimerTask task, Date time)\n    \npublic void schedule(TimerTask task, long delay, long period)\n    \npublic void schedule(TimerTask task, Date firstTime, long period)\n    \npublic void scheduleAtFixedRate(TimerTask task, long delay, long period)\n\npublic void scheduleAtFixedRate(TimerTask task, Date firstTime,long period)\n\npublic void cancel()\n\npublic int purge()\n```\n\n但封装任务的类却是TimerTask类，类结构如下：\n\n```java\npublic abstract class TimerTask implements Runnable\n```\n\n### schedule(TimerTask task, Date time)\n\n执行任务的时间晚于当前时间，即任务在未来执行\n\n```java\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.time.Instant;\nimport java.util.Date;\nimport java.util.Timer;\nimport java.util.TimerTask;\n\npublic class TimerDemo {\n\tprivate static Timer timer = new Timer();\n\tstatic class Task extends TimerTask {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tSystem.out.println(\"成功执行！时间：\"+Date.from(Instant.now()));\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) throws ParseException {\n\t\tString taskTime = \"2018-08-06 20:03:30\";\n\t\tSystem.out.println(\"计划执行任务时间：\" + taskTime);\n\t\tTask task = new Task();\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\t\tSystem.out.println(\"当前时间：\" + sdf.format(Date.from(Instant.now())));\n\t\ttimer.schedule(task, sdf.parse(taskTime));\n\t}\n}\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/08/06/20180806200425.png)\n\n可以看到，任务虽然执行完了，但进程并未销毁。这是为什么呢？\n\n我们先来看下Timer的无参构造，\n\n```java\npublic Timer() {\n    this(\"Timer-\" + serialNumber());\n}\n```\n\n其内部调用的是如下构造方法\n\n```java\npublic Timer(String name) {\n    thread.setName(name);\n    thread.start();\n}\n```\n\n从源代码可以得知，创建一个Timer就是启动一个新线程，这个新启动的线程并不是守护进程，它一直在运行。如果需要Timer执行完任务就结束，可以使用如下构造方法，并将参数isDaemon设置为true\n\n```java\npublic Timer(boolean isDaemon)\n```\n\n### schedule(TimerTask task, long delay, long period)\n\n作用：以执行该方法的当前时间作为参考时间，在此基础上延迟指定的毫秒数，再以指定的时间间隔无限次执行某一任务。\n\n### cancel()\n\n作用：将任务队列中的全部任务清空。\n\n（未完待续）","source":"_posts/java-timer.md","raw":"---\ntitle: Java中的定时器Timer\ndate: 2018-08-02 21:11:49\ntags: java\ncategories: java\n---\n\n在Java中，定时任务功能使用的是Timer类，其主要作用是设置计划任务，\n\n最近课题组的项目用到了Java中的定时器Timer类，这里记录下定时器Timer的相关知识。\n\nTimer的构造方法如下：\n\n```java\npublic Timer()\n    \npublic Timer(boolean isDaemon)\n  \npublic Timer(String name)\n    \npublic Timer(String name, boolean isDaemon)\n```\n\n<!--more-->\n\n方法列表如下：\n\n```java\npublic void schedule(TimerTask task, long delay)\n    \npublic void schedule(TimerTask task, Date time)\n    \npublic void schedule(TimerTask task, long delay, long period)\n    \npublic void schedule(TimerTask task, Date firstTime, long period)\n    \npublic void scheduleAtFixedRate(TimerTask task, long delay, long period)\n\npublic void scheduleAtFixedRate(TimerTask task, Date firstTime,long period)\n\npublic void cancel()\n\npublic int purge()\n```\n\n但封装任务的类却是TimerTask类，类结构如下：\n\n```java\npublic abstract class TimerTask implements Runnable\n```\n\n### schedule(TimerTask task, Date time)\n\n执行任务的时间晚于当前时间，即任务在未来执行\n\n```java\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.time.Instant;\nimport java.util.Date;\nimport java.util.Timer;\nimport java.util.TimerTask;\n\npublic class TimerDemo {\n\tprivate static Timer timer = new Timer();\n\tstatic class Task extends TimerTask {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tSystem.out.println(\"成功执行！时间：\"+Date.from(Instant.now()));\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) throws ParseException {\n\t\tString taskTime = \"2018-08-06 20:03:30\";\n\t\tSystem.out.println(\"计划执行任务时间：\" + taskTime);\n\t\tTask task = new Task();\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\t\tSystem.out.println(\"当前时间：\" + sdf.format(Date.from(Instant.now())));\n\t\ttimer.schedule(task, sdf.parse(taskTime));\n\t}\n}\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/08/06/20180806200425.png)\n\n可以看到，任务虽然执行完了，但进程并未销毁。这是为什么呢？\n\n我们先来看下Timer的无参构造，\n\n```java\npublic Timer() {\n    this(\"Timer-\" + serialNumber());\n}\n```\n\n其内部调用的是如下构造方法\n\n```java\npublic Timer(String name) {\n    thread.setName(name);\n    thread.start();\n}\n```\n\n从源代码可以得知，创建一个Timer就是启动一个新线程，这个新启动的线程并不是守护进程，它一直在运行。如果需要Timer执行完任务就结束，可以使用如下构造方法，并将参数isDaemon设置为true\n\n```java\npublic Timer(boolean isDaemon)\n```\n\n### schedule(TimerTask task, long delay, long period)\n\n作用：以执行该方法的当前时间作为参考时间，在此基础上延迟指定的毫秒数，再以指定的时间间隔无限次执行某一任务。\n\n### cancel()\n\n作用：将任务队列中的全部任务清空。\n\n（未完待续）","slug":"java-timer","published":1,"updated":"2019-01-19T07:23:57.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9apy002fj1q059sh5wwd","content":"<p>在Java中，定时任务功能使用的是Timer类，其主要作用是设置计划任务，</p>\n<p>最近课题组的项目用到了Java中的定时器Timer类，这里记录下定时器Timer的相关知识。</p>\n<p>Timer的构造方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Timer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Timer</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isDaemon)</span></span></span><br><span class=\"line\"><span class=\"function\">  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Timer</span><span class=\"params\">(String name)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Timer</span><span class=\"params\">(String name, <span class=\"keyword\">boolean</span> isDaemon)</span></span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>方法列表如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task, <span class=\"keyword\">long</span> delay)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task, Date time)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task, <span class=\"keyword\">long</span> delay, <span class=\"keyword\">long</span> period)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task, Date firstTime, <span class=\"keyword\">long</span> period)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleAtFixedRate</span><span class=\"params\">(TimerTask task, <span class=\"keyword\">long</span> delay, <span class=\"keyword\">long</span> period)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleAtFixedRate</span><span class=\"params\">(TimerTask task, Date firstTime,<span class=\"keyword\">long</span> period)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cancel</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">purge</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<p>但封装任务的类却是TimerTask类，类结构如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimerTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"schedule-TimerTask-task-Date-time\"><a href=\"#schedule-TimerTask-task-Date-time\" class=\"headerlink\" title=\"schedule(TimerTask task, Date time)\"></a>schedule(TimerTask task, Date time)</h3><p>执行任务的时间晚于当前时间，即任务在未来执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.text.ParseException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.Instant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Timer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TimerTask;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimerDemo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Timer timer = <span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task</span> <span class=\"keyword\">extends</span> <span class=\"title\">TimerTask</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"成功执行！时间：\"</span>+Date.from(Instant.now()));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ParseException </span>&#123;</span><br><span class=\"line\">\t\tString taskTime = <span class=\"string\">\"2018-08-06 20:03:30\"</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"计划执行任务时间：\"</span> + taskTime);</span><br><span class=\"line\">\t\tTask task = <span class=\"keyword\">new</span> Task();</span><br><span class=\"line\">\t\tSimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"当前时间：\"</span> + sdf.format(Date.from(Instant.now())));</span><br><span class=\"line\">\t\ttimer.schedule(task, sdf.parse(taskTime));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/08/06/20180806200425.png\" alt=\"\"></p>\n<p>可以看到，任务虽然执行完了，但进程并未销毁。这是为什么呢？</p>\n<p>我们先来看下Timer的无参构造，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Timer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(<span class=\"string\">\"Timer-\"</span> + serialNumber());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其内部调用的是如下构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Timer</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    thread.setName(name);</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从源代码可以得知，创建一个Timer就是启动一个新线程，这个新启动的线程并不是守护进程，它一直在运行。如果需要Timer执行完任务就结束，可以使用如下构造方法，并将参数isDaemon设置为true</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Timer</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isDaemon)</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"schedule-TimerTask-task-long-delay-long-period\"><a href=\"#schedule-TimerTask-task-long-delay-long-period\" class=\"headerlink\" title=\"schedule(TimerTask task, long delay, long period)\"></a>schedule(TimerTask task, long delay, long period)</h3><p>作用：以执行该方法的当前时间作为参考时间，在此基础上延迟指定的毫秒数，再以指定的时间间隔无限次执行某一任务。</p>\n<h3 id=\"cancel\"><a href=\"#cancel\" class=\"headerlink\" title=\"cancel()\"></a>cancel()</h3><p>作用：将任务队列中的全部任务清空。</p>\n<p>（未完待续）</p>\n","site":{"data":{}},"excerpt":"<p>在Java中，定时任务功能使用的是Timer类，其主要作用是设置计划任务，</p>\n<p>最近课题组的项目用到了Java中的定时器Timer类，这里记录下定时器Timer的相关知识。</p>\n<p>Timer的构造方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Timer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Timer</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isDaemon)</span></span></span><br><span class=\"line\"><span class=\"function\">  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Timer</span><span class=\"params\">(String name)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Timer</span><span class=\"params\">(String name, <span class=\"keyword\">boolean</span> isDaemon)</span></span></span><br></pre></td></tr></table></figure>","more":"<p>方法列表如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task, <span class=\"keyword\">long</span> delay)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task, Date time)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task, <span class=\"keyword\">long</span> delay, <span class=\"keyword\">long</span> period)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">schedule</span><span class=\"params\">(TimerTask task, Date firstTime, <span class=\"keyword\">long</span> period)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleAtFixedRate</span><span class=\"params\">(TimerTask task, <span class=\"keyword\">long</span> delay, <span class=\"keyword\">long</span> period)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleAtFixedRate</span><span class=\"params\">(TimerTask task, Date firstTime,<span class=\"keyword\">long</span> period)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cancel</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">purge</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<p>但封装任务的类却是TimerTask类，类结构如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimerTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"schedule-TimerTask-task-Date-time\"><a href=\"#schedule-TimerTask-task-Date-time\" class=\"headerlink\" title=\"schedule(TimerTask task, Date time)\"></a>schedule(TimerTask task, Date time)</h3><p>执行任务的时间晚于当前时间，即任务在未来执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.text.ParseException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.Instant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Timer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TimerTask;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimerDemo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Timer timer = <span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task</span> <span class=\"keyword\">extends</span> <span class=\"title\">TimerTask</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"成功执行！时间：\"</span>+Date.from(Instant.now()));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ParseException </span>&#123;</span><br><span class=\"line\">\t\tString taskTime = <span class=\"string\">\"2018-08-06 20:03:30\"</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"计划执行任务时间：\"</span> + taskTime);</span><br><span class=\"line\">\t\tTask task = <span class=\"keyword\">new</span> Task();</span><br><span class=\"line\">\t\tSimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"当前时间：\"</span> + sdf.format(Date.from(Instant.now())));</span><br><span class=\"line\">\t\ttimer.schedule(task, sdf.parse(taskTime));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/08/06/20180806200425.png\" alt=\"\"></p>\n<p>可以看到，任务虽然执行完了，但进程并未销毁。这是为什么呢？</p>\n<p>我们先来看下Timer的无参构造，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Timer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(<span class=\"string\">\"Timer-\"</span> + serialNumber());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其内部调用的是如下构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Timer</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    thread.setName(name);</span><br><span class=\"line\">    thread.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从源代码可以得知，创建一个Timer就是启动一个新线程，这个新启动的线程并不是守护进程，它一直在运行。如果需要Timer执行完任务就结束，可以使用如下构造方法，并将参数isDaemon设置为true</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Timer</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isDaemon)</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"schedule-TimerTask-task-long-delay-long-period\"><a href=\"#schedule-TimerTask-task-long-delay-long-period\" class=\"headerlink\" title=\"schedule(TimerTask task, long delay, long period)\"></a>schedule(TimerTask task, long delay, long period)</h3><p>作用：以执行该方法的当前时间作为参考时间，在此基础上延迟指定的毫秒数，再以指定的时间间隔无限次执行某一任务。</p>\n<h3 id=\"cancel\"><a href=\"#cancel\" class=\"headerlink\" title=\"cancel()\"></a>cancel()</h3><p>作用：将任务队列中的全部任务清空。</p>\n<p>（未完待续）</p>"},{"title":"LeetCode 21.合并两个有序链表","date":"2019-04-05T03:16:42.000Z","_content":"\n### 题目描述\n\n将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 \n\n**示例：**\n\n```\n输入：1->2->4, 1->3->4\n输出：1->1->2->3->4->4\n```\n\n<!--more-->\n\n### 算法思想\n\n已知两个有序链表`L1`和`L2`，用p和q分别表示`L1`和`L2`的当前节点，用`L`表示合并后的链表，rear表示合并后的链表的最后一个节点。\n\n当`p != null && q != null`时，循环比较p和q的val值，若p大，则将p添加到新链表的末尾，然后p后移；否则将q添加到新链表的末尾，q后移。\n\n上述循环结束后，p、q至少有一个已经为null。\n\n若`p != null`，则将p添加到新链表的末尾。若`q != null`，则将q添加到新链表的末\n\ng\n\n### 算法实现\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        \n        ListNode l = new ListNode(0);\n        ListNode p = l1,q = l2,r = l;\n        ListNode newNode ;\n        while(p != null && q != null) {\n            \n            if(p.val <= q.val) {\n                newNode = p;\n                p = p.next;\n            } else {\n                newNode = q;\n                q = q.next;\n            }\n            r.next = newNode;\n            r = newNode;\n        }\n        if(p != null) {\n            r.next = p;\n        }\n        if(q != null) {\n            r.next = q;\n        }\n        return l.next;\n    }\n}\n```\n\n### 复杂度分析\n\n设两个有序链表`L1`和`L2`的长度分别为n、m。不妨设 n < m，则\n\n时间复杂度：由于该算法只有一个循环，且循环次数不超过n+m，故时间复杂度为O（n+m）。\n\n空间复杂度：由于该算法只使用了常数的额外空间，故空间复杂度为O（1）。\n\n### 算法效率\n\n执行用时 : 1 ms, 在Merge Two Sorted Lists的Java提交中击败了100.00% 的用户\n\n内存消耗 : 36.8 MB, 在Merge Two Sorted Lists的Java提交中击败了0.97% 的用户","source":"_posts/leetcode-21-merge-two-sorted-lists.md","raw":"---\ntitle: LeetCode 21.合并两个有序链表\ndate: 2019-04-05 11:16:42\ntags: linked-list\ncategories: leetcode\n---\n\n### 题目描述\n\n将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 \n\n**示例：**\n\n```\n输入：1->2->4, 1->3->4\n输出：1->1->2->3->4->4\n```\n\n<!--more-->\n\n### 算法思想\n\n已知两个有序链表`L1`和`L2`，用p和q分别表示`L1`和`L2`的当前节点，用`L`表示合并后的链表，rear表示合并后的链表的最后一个节点。\n\n当`p != null && q != null`时，循环比较p和q的val值，若p大，则将p添加到新链表的末尾，然后p后移；否则将q添加到新链表的末尾，q后移。\n\n上述循环结束后，p、q至少有一个已经为null。\n\n若`p != null`，则将p添加到新链表的末尾。若`q != null`，则将q添加到新链表的末\n\ng\n\n### 算法实现\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        \n        ListNode l = new ListNode(0);\n        ListNode p = l1,q = l2,r = l;\n        ListNode newNode ;\n        while(p != null && q != null) {\n            \n            if(p.val <= q.val) {\n                newNode = p;\n                p = p.next;\n            } else {\n                newNode = q;\n                q = q.next;\n            }\n            r.next = newNode;\n            r = newNode;\n        }\n        if(p != null) {\n            r.next = p;\n        }\n        if(q != null) {\n            r.next = q;\n        }\n        return l.next;\n    }\n}\n```\n\n### 复杂度分析\n\n设两个有序链表`L1`和`L2`的长度分别为n、m。不妨设 n < m，则\n\n时间复杂度：由于该算法只有一个循环，且循环次数不超过n+m，故时间复杂度为O（n+m）。\n\n空间复杂度：由于该算法只使用了常数的额外空间，故空间复杂度为O（1）。\n\n### 算法效率\n\n执行用时 : 1 ms, 在Merge Two Sorted Lists的Java提交中击败了100.00% 的用户\n\n内存消耗 : 36.8 MB, 在Merge Two Sorted Lists的Java提交中击败了0.97% 的用户","slug":"leetcode-21-merge-two-sorted-lists","published":1,"updated":"2019-04-05T03:40:46.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9apz002hj1q0wfdnv04p","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class=\"line\">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"算法思想\"><a href=\"#算法思想\" class=\"headerlink\" title=\"算法思想\"></a>算法思想</h3><p>已知两个有序链表<code>L1</code>和<code>L2</code>，用p和q分别表示<code>L1</code>和<code>L2</code>的当前节点，用<code>L</code>表示合并后的链表，rear表示合并后的链表的最后一个节点。</p>\n<p>当<code>p != null &amp;&amp; q != null</code>时，循环比较p和q的val值，若p大，则将p添加到新链表的末尾，然后p后移；否则将q添加到新链表的末尾，q后移。</p>\n<p>上述循环结束后，p、q至少有一个已经为null。</p>\n<p>若<code>p != null</code>，则将p添加到新链表的末尾。若<code>q != null</code>，则将q添加到新链表的末</p>\n<p>g</p>\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ListNode l = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode p = l1,q = l2,r = l;</span><br><span class=\"line\">        ListNode newNode ;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p != <span class=\"keyword\">null</span> &amp;&amp; q != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.val &lt;= q.val) &#123;</span><br><span class=\"line\">                newNode = p;</span><br><span class=\"line\">                p = p.next;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                newNode = q;</span><br><span class=\"line\">                q = q.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            r.next = newNode;</span><br><span class=\"line\">            r = newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            r.next = p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            r.next = q;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>设两个有序链表<code>L1</code>和<code>L2</code>的长度分别为n、m。不妨设 n &lt; m，则</p>\n<p>时间复杂度：由于该算法只有一个循环，且循环次数不超过n+m，故时间复杂度为O（n+m）。</p>\n<p>空间复杂度：由于该算法只使用了常数的额外空间，故空间复杂度为O（1）。</p>\n<h3 id=\"算法效率\"><a href=\"#算法效率\" class=\"headerlink\" title=\"算法效率\"></a>算法效率</h3><p>执行用时 : 1 ms, 在Merge Two Sorted Lists的Java提交中击败了100.00% 的用户</p>\n<p>内存消耗 : 36.8 MB, 在Merge Two Sorted Lists的Java提交中击败了0.97% 的用户</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class=\"line\">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"算法思想\"><a href=\"#算法思想\" class=\"headerlink\" title=\"算法思想\"></a>算法思想</h3><p>已知两个有序链表<code>L1</code>和<code>L2</code>，用p和q分别表示<code>L1</code>和<code>L2</code>的当前节点，用<code>L</code>表示合并后的链表，rear表示合并后的链表的最后一个节点。</p>\n<p>当<code>p != null &amp;&amp; q != null</code>时，循环比较p和q的val值，若p大，则将p添加到新链表的末尾，然后p后移；否则将q添加到新链表的末尾，q后移。</p>\n<p>上述循环结束后，p、q至少有一个已经为null。</p>\n<p>若<code>p != null</code>，则将p添加到新链表的末尾。若<code>q != null</code>，则将q添加到新链表的末</p>\n<p>g</p>\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ListNode l = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode p = l1,q = l2,r = l;</span><br><span class=\"line\">        ListNode newNode ;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p != <span class=\"keyword\">null</span> &amp;&amp; q != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.val &lt;= q.val) &#123;</span><br><span class=\"line\">                newNode = p;</span><br><span class=\"line\">                p = p.next;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                newNode = q;</span><br><span class=\"line\">                q = q.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            r.next = newNode;</span><br><span class=\"line\">            r = newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            r.next = p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            r.next = q;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>设两个有序链表<code>L1</code>和<code>L2</code>的长度分别为n、m。不妨设 n &lt; m，则</p>\n<p>时间复杂度：由于该算法只有一个循环，且循环次数不超过n+m，故时间复杂度为O（n+m）。</p>\n<p>空间复杂度：由于该算法只使用了常数的额外空间，故空间复杂度为O（1）。</p>\n<h3 id=\"算法效率\"><a href=\"#算法效率\" class=\"headerlink\" title=\"算法效率\"></a>算法效率</h3><p>执行用时 : 1 ms, 在Merge Two Sorted Lists的Java提交中击败了100.00% 的用户</p>\n<p>内存消耗 : 36.8 MB, 在Merge Two Sorted Lists的Java提交中击败了0.97% 的用户</p>"},{"title":"LeetCode 25.k个一组翻转链表","date":"2019-04-04T13:02:05.000Z","_content":"\n### 题目描述\n\n给出一个链表，每 *k* 个节点一组进行翻转，并返回翻转后的链表。\n\n*k* 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 *k* 的整数倍，那么将最后剩余节点保持原有顺序。\n\n**示例 :**\n\n给定这个链表：`1->2->3->4->5`\n\n当 *k* = 2 时，应当返回: `2->1->4->3->5`\n\n当 *k* = 3 时，应当返回: `3->2->1->4->5`\n\n**说明 :**\n\n- 你的算法只能使用常数的额外空间。\n- **你不能只是单纯的改变节点内部的值**，而是需要实际的进行节点交换。\n\n<!--more-->\n\n### 算法思路\n\n首先，为需要返回的链表设置一个头结点list以及尾节点rear。\n\n然后，使用整数count记录链表的节点个数，每当满足条件`count % k == 0`时，翻转这k个节点组成的部分链表。\n\n使用start表示需要翻转的部分链表的第一个节点，用end表示需要翻转的部分链表的最后一个节点。\n\n使用pre表示翻转后的部分链表的第一个节点，采用头插法，翻转部分链表。翻转完毕后，start成为了该部分链表的最后一个节点。\n\n接着，让翻转后的链表成为rear的后继，即`rear.next = pre`，然后让`rear = start`，并将原链表的下一个节点赋给start，开启新一轮的翻转。\n\n最后，待循环执行完毕后，若链表后面还有不足k个节点，即`count % k != 0`，直接让剩余的这部分链表成为rear的后继，即`rear = start`。\n\n### 算法实现\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n\t\tint count = 0;\n        ListNode list = new ListNode(0);\n        ListNode rear = list;\n        rear.next = head;\n\t\t\n        ListNode node = list.next;\n        ListNode start = node,end;\n        ListNode p,q,pre=null;\n        while(node != null) {\n            count++;\n            if(count % k == 0) {\n                end = node;\n                node = node.next;\n                \n                //1.翻转当前的k个节点\n                end.next = null;\n                p = start;\n                while(p != null) {\n                    q = p.next;\n                    \n                    p.next = pre;\n                    pre = p;\n                    \n                    p = q;\n                }\n                //2.将翻转后的部分链表链接到原来的链表尾部\n                rear.next = pre;\n                rear = start;\n               \n                //3.开启下一轮翻转\n                pre=null;\n                start = node;\n            } else {\n                node = node.next; \n            }\n        }\n        if(count % k != 0) {\n            rear.next = start;\n        }\n        return list.next;\n\t}\n}\n```\n\n### 复杂度分析\n\n时间复杂度：该算法只遍历链表一次，故时间复杂度为O(n)。\n\n空间复杂度：该算法只使用了常数的额外空间，故空间复杂度为O(1)\n\n### 算法效率\n\n执行用时 : 2 ms, 在Reverse Nodes in k-Group的Java提交中击败了100.00% 的用户\n\n内存消耗 : 37.6 MB, 在Reverse Nodes in k-Group的Java提交中击败了0.93% 的用户\n\n","source":"_posts/leetcode-25-reverse-nodes-in-k-group.md","raw":"---\ntitle: LeetCode 25.k个一组翻转链表\ndate: 2019-04-04 21:02:05\ntags: linked-list\ncategories: leetcode\n---\n\n### 题目描述\n\n给出一个链表，每 *k* 个节点一组进行翻转，并返回翻转后的链表。\n\n*k* 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 *k* 的整数倍，那么将最后剩余节点保持原有顺序。\n\n**示例 :**\n\n给定这个链表：`1->2->3->4->5`\n\n当 *k* = 2 时，应当返回: `2->1->4->3->5`\n\n当 *k* = 3 时，应当返回: `3->2->1->4->5`\n\n**说明 :**\n\n- 你的算法只能使用常数的额外空间。\n- **你不能只是单纯的改变节点内部的值**，而是需要实际的进行节点交换。\n\n<!--more-->\n\n### 算法思路\n\n首先，为需要返回的链表设置一个头结点list以及尾节点rear。\n\n然后，使用整数count记录链表的节点个数，每当满足条件`count % k == 0`时，翻转这k个节点组成的部分链表。\n\n使用start表示需要翻转的部分链表的第一个节点，用end表示需要翻转的部分链表的最后一个节点。\n\n使用pre表示翻转后的部分链表的第一个节点，采用头插法，翻转部分链表。翻转完毕后，start成为了该部分链表的最后一个节点。\n\n接着，让翻转后的链表成为rear的后继，即`rear.next = pre`，然后让`rear = start`，并将原链表的下一个节点赋给start，开启新一轮的翻转。\n\n最后，待循环执行完毕后，若链表后面还有不足k个节点，即`count % k != 0`，直接让剩余的这部分链表成为rear的后继，即`rear = start`。\n\n### 算法实现\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n\t\tint count = 0;\n        ListNode list = new ListNode(0);\n        ListNode rear = list;\n        rear.next = head;\n\t\t\n        ListNode node = list.next;\n        ListNode start = node,end;\n        ListNode p,q,pre=null;\n        while(node != null) {\n            count++;\n            if(count % k == 0) {\n                end = node;\n                node = node.next;\n                \n                //1.翻转当前的k个节点\n                end.next = null;\n                p = start;\n                while(p != null) {\n                    q = p.next;\n                    \n                    p.next = pre;\n                    pre = p;\n                    \n                    p = q;\n                }\n                //2.将翻转后的部分链表链接到原来的链表尾部\n                rear.next = pre;\n                rear = start;\n               \n                //3.开启下一轮翻转\n                pre=null;\n                start = node;\n            } else {\n                node = node.next; \n            }\n        }\n        if(count % k != 0) {\n            rear.next = start;\n        }\n        return list.next;\n\t}\n}\n```\n\n### 复杂度分析\n\n时间复杂度：该算法只遍历链表一次，故时间复杂度为O(n)。\n\n空间复杂度：该算法只使用了常数的额外空间，故空间复杂度为O(1)\n\n### 算法效率\n\n执行用时 : 2 ms, 在Reverse Nodes in k-Group的Java提交中击败了100.00% 的用户\n\n内存消耗 : 37.6 MB, 在Reverse Nodes in k-Group的Java提交中击败了0.93% 的用户\n\n","slug":"leetcode-25-reverse-nodes-in-k-group","published":1,"updated":"2019-04-05T03:00:21.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aq0002lj1q0049nep4r","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给出一个链表，每 <em>k</em> 个节点一组进行翻转，并返回翻转后的链表。</p>\n<p><em>k</em> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 <em>k</em> 的整数倍，那么将最后剩余节点保持原有顺序。</p>\n<p><strong>示例 :</strong></p>\n<p>给定这个链表：<code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p>\n<p>当 <em>k</em> = 2 时，应当返回: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p>\n<p>当 <em>k</em> = 3 时，应当返回: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p>\n<p><strong>说明 :</strong></p>\n<ul>\n<li>你的算法只能使用常数的额外空间。</li>\n<li><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h3><p>首先，为需要返回的链表设置一个头结点list以及尾节点rear。</p>\n<p>然后，使用整数count记录链表的节点个数，每当满足条件<code>count % k == 0</code>时，翻转这k个节点组成的部分链表。</p>\n<p>使用start表示需要翻转的部分链表的第一个节点，用end表示需要翻转的部分链表的最后一个节点。</p>\n<p>使用pre表示翻转后的部分链表的第一个节点，采用头插法，翻转部分链表。翻转完毕后，start成为了该部分链表的最后一个节点。</p>\n<p>接着，让翻转后的链表成为rear的后继，即<code>rear.next = pre</code>，然后让<code>rear = start</code>，并将原链表的下一个节点赋给start，开启新一轮的翻转。</p>\n<p>最后，待循环执行完毕后，若链表后面还有不足k个节点，即<code>count % k != 0</code>，直接让剩余的这部分链表成为rear的后继，即<code>rear = start</code>。</p>\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseKGroup</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ListNode list = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode rear = list;</span><br><span class=\"line\">        rear.next = head;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        ListNode node = list.next;</span><br><span class=\"line\">        ListNode start = node,end;</span><br><span class=\"line\">        ListNode p,q,pre=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count % k == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                end = node;</span><br><span class=\"line\">                node = node.next;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">//1.翻转当前的k个节点</span></span><br><span class=\"line\">                end.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                p = start;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(p != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    q = p.next;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    p.next = pre;</span><br><span class=\"line\">                    pre = p;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    p = q;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//2.将翻转后的部分链表链接到原来的链表尾部</span></span><br><span class=\"line\">                rear.next = pre;</span><br><span class=\"line\">                rear = start;</span><br><span class=\"line\">               </span><br><span class=\"line\">                <span class=\"comment\">//3.开启下一轮翻转</span></span><br><span class=\"line\">                pre=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">                start = node;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                node = node.next; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count % k != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            rear.next = start;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>时间复杂度：该算法只遍历链表一次，故时间复杂度为O(n)。</p>\n<p>空间复杂度：该算法只使用了常数的额外空间，故空间复杂度为O(1)</p>\n<h3 id=\"算法效率\"><a href=\"#算法效率\" class=\"headerlink\" title=\"算法效率\"></a>算法效率</h3><p>执行用时 : 2 ms, 在Reverse Nodes in k-Group的Java提交中击败了100.00% 的用户</p>\n<p>内存消耗 : 37.6 MB, 在Reverse Nodes in k-Group的Java提交中击败了0.93% 的用户</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给出一个链表，每 <em>k</em> 个节点一组进行翻转，并返回翻转后的链表。</p>\n<p><em>k</em> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 <em>k</em> 的整数倍，那么将最后剩余节点保持原有顺序。</p>\n<p><strong>示例 :</strong></p>\n<p>给定这个链表：<code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p>\n<p>当 <em>k</em> = 2 时，应当返回: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p>\n<p>当 <em>k</em> = 3 时，应当返回: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p>\n<p><strong>说明 :</strong></p>\n<ul>\n<li>你的算法只能使用常数的额外空间。</li>\n<li><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</li>\n</ul>","more":"<h3 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h3><p>首先，为需要返回的链表设置一个头结点list以及尾节点rear。</p>\n<p>然后，使用整数count记录链表的节点个数，每当满足条件<code>count % k == 0</code>时，翻转这k个节点组成的部分链表。</p>\n<p>使用start表示需要翻转的部分链表的第一个节点，用end表示需要翻转的部分链表的最后一个节点。</p>\n<p>使用pre表示翻转后的部分链表的第一个节点，采用头插法，翻转部分链表。翻转完毕后，start成为了该部分链表的最后一个节点。</p>\n<p>接着，让翻转后的链表成为rear的后继，即<code>rear.next = pre</code>，然后让<code>rear = start</code>，并将原链表的下一个节点赋给start，开启新一轮的翻转。</p>\n<p>最后，待循环执行完毕后，若链表后面还有不足k个节点，即<code>count % k != 0</code>，直接让剩余的这部分链表成为rear的后继，即<code>rear = start</code>。</p>\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseKGroup</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ListNode list = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode rear = list;</span><br><span class=\"line\">        rear.next = head;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        ListNode node = list.next;</span><br><span class=\"line\">        ListNode start = node,end;</span><br><span class=\"line\">        ListNode p,q,pre=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count % k == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                end = node;</span><br><span class=\"line\">                node = node.next;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">//1.翻转当前的k个节点</span></span><br><span class=\"line\">                end.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                p = start;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(p != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    q = p.next;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    p.next = pre;</span><br><span class=\"line\">                    pre = p;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    p = q;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//2.将翻转后的部分链表链接到原来的链表尾部</span></span><br><span class=\"line\">                rear.next = pre;</span><br><span class=\"line\">                rear = start;</span><br><span class=\"line\">               </span><br><span class=\"line\">                <span class=\"comment\">//3.开启下一轮翻转</span></span><br><span class=\"line\">                pre=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">                start = node;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                node = node.next; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count % k != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            rear.next = start;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>时间复杂度：该算法只遍历链表一次，故时间复杂度为O(n)。</p>\n<p>空间复杂度：该算法只使用了常数的额外空间，故空间复杂度为O(1)</p>\n<h3 id=\"算法效率\"><a href=\"#算法效率\" class=\"headerlink\" title=\"算法效率\"></a>算法效率</h3><p>执行用时 : 2 ms, 在Reverse Nodes in k-Group的Java提交中击败了100.00% 的用户</p>\n<p>内存消耗 : 37.6 MB, 在Reverse Nodes in k-Group的Java提交中击败了0.93% 的用户</p>"},{"title":"LeetCode 23.合并K个排序链表","date":"2019-02-22T04:31:13.000Z","mathjax":true,"_content":"\n### 题目描述\n\n合并 *k* 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。\n\n**示例:**\n\n```\n输入:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\n输出: 1->1->2->3->4->4->5->6\n```\n\n<!--more-->\n\n### 算法思路\n\n已知K个有序链表，采用二路归并实现两个链表的合并，在此基础上，按照折半查找的思想，递归执行二路归并。\n\n### 算法实现\n\n```java\npublic class MergeKSortedLists23 {\n\tpublic class ListNode {\n    \tint val;\n     \tListNode next;\n     \tListNode(int x) { val = x; }\n    }\n\n    public ListNode mergeKLists(ListNode[] lists) {\n    \tif(lists == null || lists.length == 0) {\n    \t\treturn null;\n    \t}\n    \tif(lists.length == 1) {\n    \t\treturn lists[0];\n    \t}\n\n        return merge(lists,0,lists.length-1);\n    }\n    \n    public ListNode merge(ListNode[] lists,int start,int end) {\n    \tif(start > end) {\n    \t\treturn null;\n    \t}\n    \tif(start == end) {\n    \t\treturn lists[start];\n    \t}\n    \tint mid = (start + end) / 2;\n    \tListNode l1 = merge(lists,start,mid);\n    \tListNode l2 = merge(lists,mid+1,end);\n    \treturn mergeTwoLists(l1,l2);\n    }\n    \n    public ListNode mergeTwoLists(ListNode l1,ListNode l2) {\n    \tListNode head = new ListNode(0);\n    \tListNode p = l1, q=l2,node,rear = head;\n    \twhile(p != null && q != null) {\n    \t\tif(p.val <= q.val) {\n    \t\t\tnode = new ListNode(p.val);\n    \t\t\tp = p.next;\n    \t\t} else {\n    \t\t\tnode = new ListNode(q.val);\n    \t\t\tq = q.next;\n    \t\t}\n    \t\tnode.next = null;\n    \t\trear.next = node;\n\t\t\trear = node;\n    \t}\n    \tif(p != null) {\n    \t\trear.next = p;\n    \t\trear = p;\n    \t}\n    \tif(q != null) {\n    \t\trear.next = q;\n    \t\trear = q;\n    \t}\n    \treturn head.next;\n    }\n}\n```\n\n### 复杂度分析\n\n时间复杂度：O($n\\log_2n​$)\n\n空间复杂度：O($n​$)\n\n### 算法效率\n\n执行用时: 11 ms, 在Merge k Sorted Lists的Java提交中击败了92.02% 的用户\n\n内存消耗: 28.5 MB, 在Merge k Sorted Lists的Java提交中击败了80.66% 的用户","source":"_posts/leetcode-23-merge-k-sorted-lists.md","raw":"---\ntitle: LeetCode 23.合并K个排序链表\ndate: 2019-02-22 12:31:13\ntags: linked-list\ncategories: leetcode\nmathjax: true\n---\n\n### 题目描述\n\n合并 *k* 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。\n\n**示例:**\n\n```\n输入:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\n输出: 1->1->2->3->4->4->5->6\n```\n\n<!--more-->\n\n### 算法思路\n\n已知K个有序链表，采用二路归并实现两个链表的合并，在此基础上，按照折半查找的思想，递归执行二路归并。\n\n### 算法实现\n\n```java\npublic class MergeKSortedLists23 {\n\tpublic class ListNode {\n    \tint val;\n     \tListNode next;\n     \tListNode(int x) { val = x; }\n    }\n\n    public ListNode mergeKLists(ListNode[] lists) {\n    \tif(lists == null || lists.length == 0) {\n    \t\treturn null;\n    \t}\n    \tif(lists.length == 1) {\n    \t\treturn lists[0];\n    \t}\n\n        return merge(lists,0,lists.length-1);\n    }\n    \n    public ListNode merge(ListNode[] lists,int start,int end) {\n    \tif(start > end) {\n    \t\treturn null;\n    \t}\n    \tif(start == end) {\n    \t\treturn lists[start];\n    \t}\n    \tint mid = (start + end) / 2;\n    \tListNode l1 = merge(lists,start,mid);\n    \tListNode l2 = merge(lists,mid+1,end);\n    \treturn mergeTwoLists(l1,l2);\n    }\n    \n    public ListNode mergeTwoLists(ListNode l1,ListNode l2) {\n    \tListNode head = new ListNode(0);\n    \tListNode p = l1, q=l2,node,rear = head;\n    \twhile(p != null && q != null) {\n    \t\tif(p.val <= q.val) {\n    \t\t\tnode = new ListNode(p.val);\n    \t\t\tp = p.next;\n    \t\t} else {\n    \t\t\tnode = new ListNode(q.val);\n    \t\t\tq = q.next;\n    \t\t}\n    \t\tnode.next = null;\n    \t\trear.next = node;\n\t\t\trear = node;\n    \t}\n    \tif(p != null) {\n    \t\trear.next = p;\n    \t\trear = p;\n    \t}\n    \tif(q != null) {\n    \t\trear.next = q;\n    \t\trear = q;\n    \t}\n    \treturn head.next;\n    }\n}\n```\n\n### 复杂度分析\n\n时间复杂度：O($n\\log_2n​$)\n\n空间复杂度：O($n​$)\n\n### 算法效率\n\n执行用时: 11 ms, 在Merge k Sorted Lists的Java提交中击败了92.02% 的用户\n\n内存消耗: 28.5 MB, 在Merge k Sorted Lists的Java提交中击败了80.66% 的用户","slug":"leetcode-23-merge-k-sorted-lists","published":1,"updated":"2019-02-27T13:23:54.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aq2002oj1q0i6c60r3h","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>合并 <em>k</em> 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">[</span><br><span class=\"line\">  1-&gt;4-&gt;5,</span><br><span class=\"line\">  1-&gt;3-&gt;4,</span><br><span class=\"line\">  2-&gt;6</span><br><span class=\"line\">]</span><br><span class=\"line\">输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h3><p>已知K个有序链表，采用二路归并实现两个链表的合并，在此基础上，按照折半查找的思想，递归执行二路归并。</p>\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeKSortedLists23</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">int</span> val;</span><br><span class=\"line\">     \tListNode next;</span><br><span class=\"line\">     \tListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeKLists</span><span class=\"params\">(ListNode[] lists)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(lists == <span class=\"keyword\">null</span> || lists.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(lists.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> lists[<span class=\"number\">0</span>];</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> merge(lists,<span class=\"number\">0</span>,lists.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">merge</span><span class=\"params\">(ListNode[] lists,<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(start &gt; end) &#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(start == end) &#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> lists[start];</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">int</span> mid = (start + end) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    \tListNode l1 = merge(lists,start,mid);</span><br><span class=\"line\">    \tListNode l2 = merge(lists,mid+<span class=\"number\">1</span>,end);</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> mergeTwoLists(l1,l2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1,ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">    \tListNode head = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    \tListNode p = l1, q=l2,node,rear = head;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(p != <span class=\"keyword\">null</span> &amp;&amp; q != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(p.val &lt;= q.val) &#123;</span><br><span class=\"line\">    \t\t\tnode = <span class=\"keyword\">new</span> ListNode(p.val);</span><br><span class=\"line\">    \t\t\tp = p.next;</span><br><span class=\"line\">    \t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    \t\t\tnode = <span class=\"keyword\">new</span> ListNode(q.val);</span><br><span class=\"line\">    \t\t\tq = q.next;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tnode.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    \t\trear.next = node;</span><br><span class=\"line\">\t\t\trear = node;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(p != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    \t\trear.next = p;</span><br><span class=\"line\">    \t\trear = p;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(q != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    \t\trear.next = q;</span><br><span class=\"line\">    \t\trear = q;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>时间复杂度：O($n\\log_2n​$)</p>\n<p>空间复杂度：O($n​$)</p>\n<h3 id=\"算法效率\"><a href=\"#算法效率\" class=\"headerlink\" title=\"算法效率\"></a>算法效率</h3><p>执行用时: 11 ms, 在Merge k Sorted Lists的Java提交中击败了92.02% 的用户</p>\n<p>内存消耗: 28.5 MB, 在Merge k Sorted Lists的Java提交中击败了80.66% 的用户</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>合并 <em>k</em> 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p>\n<p><strong>示例:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">[</span><br><span class=\"line\">  1-&gt;4-&gt;5,</span><br><span class=\"line\">  1-&gt;3-&gt;4,</span><br><span class=\"line\">  2-&gt;6</span><br><span class=\"line\">]</span><br><span class=\"line\">输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h3><p>已知K个有序链表，采用二路归并实现两个链表的合并，在此基础上，按照折半查找的思想，递归执行二路归并。</p>\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeKSortedLists23</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">int</span> val;</span><br><span class=\"line\">     \tListNode next;</span><br><span class=\"line\">     \tListNode(<span class=\"keyword\">int</span> x) &#123; val = x; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeKLists</span><span class=\"params\">(ListNode[] lists)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(lists == <span class=\"keyword\">null</span> || lists.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(lists.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> lists[<span class=\"number\">0</span>];</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> merge(lists,<span class=\"number\">0</span>,lists.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">merge</span><span class=\"params\">(ListNode[] lists,<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(start &gt; end) &#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(start == end) &#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> lists[start];</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">int</span> mid = (start + end) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    \tListNode l1 = merge(lists,start,mid);</span><br><span class=\"line\">    \tListNode l2 = merge(lists,mid+<span class=\"number\">1</span>,end);</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> mergeTwoLists(l1,l2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1,ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">    \tListNode head = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    \tListNode p = l1, q=l2,node,rear = head;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(p != <span class=\"keyword\">null</span> &amp;&amp; q != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(p.val &lt;= q.val) &#123;</span><br><span class=\"line\">    \t\t\tnode = <span class=\"keyword\">new</span> ListNode(p.val);</span><br><span class=\"line\">    \t\t\tp = p.next;</span><br><span class=\"line\">    \t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    \t\t\tnode = <span class=\"keyword\">new</span> ListNode(q.val);</span><br><span class=\"line\">    \t\t\tq = q.next;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tnode.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    \t\trear.next = node;</span><br><span class=\"line\">\t\t\trear = node;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(p != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    \t\trear.next = p;</span><br><span class=\"line\">    \t\trear = p;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(q != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    \t\trear.next = q;</span><br><span class=\"line\">    \t\trear = q;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>时间复杂度：O($n\\log_2n​$)</p>\n<p>空间复杂度：O($n​$)</p>\n<h3 id=\"算法效率\"><a href=\"#算法效率\" class=\"headerlink\" title=\"算法效率\"></a>算法效率</h3><p>执行用时: 11 ms, 在Merge k Sorted Lists的Java提交中击败了92.02% 的用户</p>\n<p>内存消耗: 28.5 MB, 在Merge k Sorted Lists的Java提交中击败了80.66% 的用户</p>"},{"title":"LeetCode 82.删除排序链表中的重复元素 II","date":"2019-02-27T09:42:40.000Z","_content":"\n### 题目描述\n\n给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 *没有重复出现* 的数字。\n\n**示例 1:**\n\n```\n输入: 1->2->3->3->4->4->5\n输出: 1->2->5\n```\n\n**示例 2:**\n\n```\n输入: 1->1->1->2->3\n输出: 2->3\n```\n\n<!--more-->\n\n### 解决方案\n\n#### 方法一：递归法\n\n* 思路\n\n按照递归的思想，该题可以分为以下三种情况：\n\n1）待处理的排序链表为空，或者仅含有一个元素。此时，直接返回排序链表的头节点head即可。\n\n2）待处理的排序链表头部节点head的值为重复元素head.val。此时，依次遍历链表，直至找到第一个值不等于head.val的节点node，对node递归执行deleteDuplicates方法。\n\n3）第一个节点head的值不是重复元素。此时，对第二个节点递归执行deleteDuplicates方法即可，产生的新链表成为head的后继。\n\n* 算法实现\n\n```java\n/*public class ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}*/\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        //1.如果链表为空或者仅含一个节点\n        if(head == null || head.next == null) {\n\t\t\treturn head;\n\t\t}\n\t\t//2.如果链表的头部是重复出现的数字\n\t\tif(head.val == head.next.val) {\n\t\t\twhile(head.next != null && head.val == head.next.val) {\n\t\t\t\thead = head.next;\n\t\t\t}\n\t\t\treturn deleteDuplicates(head.next);\n\t\t}\n        //3.如果链表首部节点不需要删除\n\t\thead.next = deleteDuplicates(head.next);\n\t\treturn head;\n    }\n}\n```\n\n* 复杂度分析\n\n设链表的长度为*L*\n\n时间复杂度：*O*(*L*)，仅对链表执行一次遍历操作\n\n空间复杂度：*O(1)*，没有使用额外的变量\n\n* 算法效率\n\n执行用时：1ms，战胜 98.69 % 的 java 提交记录\n\n内存消耗：38.6 MB\n\n#### 方法二：非递归法\n\n* 思路\n\n首先我们仍将判断待处理的排序链表是否为空，或仅含有一个节点。\n\n然后，我们将添加一个哑结点list作为辅助，该结点位于列表头部。哑结点用来简化某些极端情况，例如，需要删除链表的头部。\n\n在遍历链表的同时，使用while循环寻找与当前节点node值不相等的第一个节点，若while循环得以成功执行，则让得到的新节点成为head的后继；否则，当前节点node与其后继节点值不相等，while循环未被执行，则该节点不需要被删除，head后移。\n\n* 算法实现\n\n```java\n/*public class ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}*/\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        if(head == null || head.next == null) {\n\t\t\treturn head;\n\t\t}\n\t\tListNode list = new ListNode(0);\n\t\tlist.next = head;\n\t\thead = list;\n\t\tListNode pre,node;\n\t\twhile(head.next != null) {\n\t\t\tpre = head.next;\n\t\t\tnode = pre;\n\t\t\twhile(node.next != null && pre.val == node.next.val) {\n\t\t\t\tnode = node.next;\n\t\t\t}\n\t\t\tif(node == pre) {\n\t\t\t\thead = head.next;\n\t\t\t} else {\n\t\t\t\thead.next = node.next;\n\t\t\t}\n\t\t}\n\t\treturn list.next;\n    }\n}\n```\n\n* 复杂度分析\n\n设链表的长度为*L*\n\n时间复杂度：*O(L)*，仅对链表执行一次遍历操作\n\n空间复杂度：*O*(1)，我们只用了常量级的额外空间\n\n- 算法效率\n\n执行用时：1ms，战胜 98.69 % 的 java 提交记录\n\n内存消耗：35.2 MB\n\n\n\n","source":"_posts/leetcode-82-remove-duplicates-from-sorted-list-ii.md","raw":"---\ntitle: LeetCode 82.删除排序链表中的重复元素 II\ndate: 2019-02-27 17:42:40\ntags: linked-list\ncategories: leetcode\n---\n\n### 题目描述\n\n给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 *没有重复出现* 的数字。\n\n**示例 1:**\n\n```\n输入: 1->2->3->3->4->4->5\n输出: 1->2->5\n```\n\n**示例 2:**\n\n```\n输入: 1->1->1->2->3\n输出: 2->3\n```\n\n<!--more-->\n\n### 解决方案\n\n#### 方法一：递归法\n\n* 思路\n\n按照递归的思想，该题可以分为以下三种情况：\n\n1）待处理的排序链表为空，或者仅含有一个元素。此时，直接返回排序链表的头节点head即可。\n\n2）待处理的排序链表头部节点head的值为重复元素head.val。此时，依次遍历链表，直至找到第一个值不等于head.val的节点node，对node递归执行deleteDuplicates方法。\n\n3）第一个节点head的值不是重复元素。此时，对第二个节点递归执行deleteDuplicates方法即可，产生的新链表成为head的后继。\n\n* 算法实现\n\n```java\n/*public class ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}*/\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        //1.如果链表为空或者仅含一个节点\n        if(head == null || head.next == null) {\n\t\t\treturn head;\n\t\t}\n\t\t//2.如果链表的头部是重复出现的数字\n\t\tif(head.val == head.next.val) {\n\t\t\twhile(head.next != null && head.val == head.next.val) {\n\t\t\t\thead = head.next;\n\t\t\t}\n\t\t\treturn deleteDuplicates(head.next);\n\t\t}\n        //3.如果链表首部节点不需要删除\n\t\thead.next = deleteDuplicates(head.next);\n\t\treturn head;\n    }\n}\n```\n\n* 复杂度分析\n\n设链表的长度为*L*\n\n时间复杂度：*O*(*L*)，仅对链表执行一次遍历操作\n\n空间复杂度：*O(1)*，没有使用额外的变量\n\n* 算法效率\n\n执行用时：1ms，战胜 98.69 % 的 java 提交记录\n\n内存消耗：38.6 MB\n\n#### 方法二：非递归法\n\n* 思路\n\n首先我们仍将判断待处理的排序链表是否为空，或仅含有一个节点。\n\n然后，我们将添加一个哑结点list作为辅助，该结点位于列表头部。哑结点用来简化某些极端情况，例如，需要删除链表的头部。\n\n在遍历链表的同时，使用while循环寻找与当前节点node值不相等的第一个节点，若while循环得以成功执行，则让得到的新节点成为head的后继；否则，当前节点node与其后继节点值不相等，while循环未被执行，则该节点不需要被删除，head后移。\n\n* 算法实现\n\n```java\n/*public class ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}*/\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        if(head == null || head.next == null) {\n\t\t\treturn head;\n\t\t}\n\t\tListNode list = new ListNode(0);\n\t\tlist.next = head;\n\t\thead = list;\n\t\tListNode pre,node;\n\t\twhile(head.next != null) {\n\t\t\tpre = head.next;\n\t\t\tnode = pre;\n\t\t\twhile(node.next != null && pre.val == node.next.val) {\n\t\t\t\tnode = node.next;\n\t\t\t}\n\t\t\tif(node == pre) {\n\t\t\t\thead = head.next;\n\t\t\t} else {\n\t\t\t\thead.next = node.next;\n\t\t\t}\n\t\t}\n\t\treturn list.next;\n    }\n}\n```\n\n* 复杂度分析\n\n设链表的长度为*L*\n\n时间复杂度：*O(L)*，仅对链表执行一次遍历操作\n\n空间复杂度：*O*(1)，我们只用了常量级的额外空间\n\n- 算法效率\n\n执行用时：1ms，战胜 98.69 % 的 java 提交记录\n\n内存消耗：35.2 MB\n\n\n\n","slug":"leetcode-82-remove-duplicates-from-sorted-list-ii","published":1,"updated":"2019-02-27T13:28:38.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aq3002rj1q0dxhpnqth","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 <em>没有重复出现</em> 的数字。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</span><br><span class=\"line\">输出: 1-&gt;2-&gt;5</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 1-&gt;1-&gt;1-&gt;2-&gt;3</span><br><span class=\"line\">输出: 2-&gt;3</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h4 id=\"方法一：递归法\"><a href=\"#方法一：递归法\" class=\"headerlink\" title=\"方法一：递归法\"></a>方法一：递归法</h4><ul>\n<li>思路</li>\n</ul>\n<p>按照递归的思想，该题可以分为以下三种情况：</p>\n<p>1）待处理的排序链表为空，或者仅含有一个元素。此时，直接返回排序链表的头节点head即可。</p>\n<p>2）待处理的排序链表头部节点head的值为重复元素head.val。此时，依次遍历链表，直至找到第一个值不等于head.val的节点node，对node递归执行deleteDuplicates方法。</p>\n<p>3）第一个节点head的值不是重复元素。此时，对第二个节点递归执行deleteDuplicates方法即可，产生的新链表成为head的后继。</p>\n<ul>\n<li>算法实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val;</span></span><br><span class=\"line\"><span class=\"comment\">    ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\">    ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.如果链表为空或者仅含一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span> || head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//2.如果链表的头部是重复出现的数字</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head.val == head.next.val) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(head.next != <span class=\"keyword\">null</span> &amp;&amp; head.val == head.next.val) &#123;</span><br><span class=\"line\">\t\t\t\thead = head.next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> deleteDuplicates(head.next);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        <span class=\"comment\">//3.如果链表首部节点不需要删除</span></span><br><span class=\"line\">\t\thead.next = deleteDuplicates(head.next);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>复杂度分析</li>\n</ul>\n<p>设链表的长度为<em>L</em></p>\n<p>时间复杂度：<em>O</em>(<em>L</em>)，仅对链表执行一次遍历操作</p>\n<p>空间复杂度：<em>O(1)</em>，没有使用额外的变量</p>\n<ul>\n<li>算法效率</li>\n</ul>\n<p>执行用时：1ms，战胜 98.69 % 的 java 提交记录</p>\n<p>内存消耗：38.6 MB</p>\n<h4 id=\"方法二：非递归法\"><a href=\"#方法二：非递归法\" class=\"headerlink\" title=\"方法二：非递归法\"></a>方法二：非递归法</h4><ul>\n<li>思路</li>\n</ul>\n<p>首先我们仍将判断待处理的排序链表是否为空，或仅含有一个节点。</p>\n<p>然后，我们将添加一个哑结点list作为辅助，该结点位于列表头部。哑结点用来简化某些极端情况，例如，需要删除链表的头部。</p>\n<p>在遍历链表的同时，使用while循环寻找与当前节点node值不相等的第一个节点，若while循环得以成功执行，则让得到的新节点成为head的后继；否则，当前节点node与其后继节点值不相等，while循环未被执行，则该节点不需要被删除，head后移。</p>\n<ul>\n<li>算法实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val;</span></span><br><span class=\"line\"><span class=\"comment\">    ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\">    ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span> || head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tListNode list = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tlist.next = head;</span><br><span class=\"line\">\t\thead = list;</span><br><span class=\"line\">\t\tListNode pre,node;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(head.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tpre = head.next;</span><br><span class=\"line\">\t\t\tnode = pre;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(node.next != <span class=\"keyword\">null</span> &amp;&amp; pre.val == node.next.val) &#123;</span><br><span class=\"line\">\t\t\t\tnode = node.next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(node == pre) &#123;</span><br><span class=\"line\">\t\t\t\thead = head.next;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\thead.next = node.next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>复杂度分析</li>\n</ul>\n<p>设链表的长度为<em>L</em></p>\n<p>时间复杂度：<em>O(L)</em>，仅对链表执行一次遍历操作</p>\n<p>空间复杂度：<em>O</em>(1)，我们只用了常量级的额外空间</p>\n<ul>\n<li>算法效率</li>\n</ul>\n<p>执行用时：1ms，战胜 98.69 % 的 java 提交记录</p>\n<p>内存消耗：35.2 MB</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 <em>没有重复出现</em> 的数字。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</span><br><span class=\"line\">输出: 1-&gt;2-&gt;5</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 1-&gt;1-&gt;1-&gt;2-&gt;3</span><br><span class=\"line\">输出: 2-&gt;3</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h4 id=\"方法一：递归法\"><a href=\"#方法一：递归法\" class=\"headerlink\" title=\"方法一：递归法\"></a>方法一：递归法</h4><ul>\n<li>思路</li>\n</ul>\n<p>按照递归的思想，该题可以分为以下三种情况：</p>\n<p>1）待处理的排序链表为空，或者仅含有一个元素。此时，直接返回排序链表的头节点head即可。</p>\n<p>2）待处理的排序链表头部节点head的值为重复元素head.val。此时，依次遍历链表，直至找到第一个值不等于head.val的节点node，对node递归执行deleteDuplicates方法。</p>\n<p>3）第一个节点head的值不是重复元素。此时，对第二个节点递归执行deleteDuplicates方法即可，产生的新链表成为head的后继。</p>\n<ul>\n<li>算法实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val;</span></span><br><span class=\"line\"><span class=\"comment\">    ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\">    ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.如果链表为空或者仅含一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span> || head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//2.如果链表的头部是重复出现的数字</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head.val == head.next.val) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(head.next != <span class=\"keyword\">null</span> &amp;&amp; head.val == head.next.val) &#123;</span><br><span class=\"line\">\t\t\t\thead = head.next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> deleteDuplicates(head.next);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        <span class=\"comment\">//3.如果链表首部节点不需要删除</span></span><br><span class=\"line\">\t\thead.next = deleteDuplicates(head.next);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>复杂度分析</li>\n</ul>\n<p>设链表的长度为<em>L</em></p>\n<p>时间复杂度：<em>O</em>(<em>L</em>)，仅对链表执行一次遍历操作</p>\n<p>空间复杂度：<em>O(1)</em>，没有使用额外的变量</p>\n<ul>\n<li>算法效率</li>\n</ul>\n<p>执行用时：1ms，战胜 98.69 % 的 java 提交记录</p>\n<p>内存消耗：38.6 MB</p>\n<h4 id=\"方法二：非递归法\"><a href=\"#方法二：非递归法\" class=\"headerlink\" title=\"方法二：非递归法\"></a>方法二：非递归法</h4><ul>\n<li>思路</li>\n</ul>\n<p>首先我们仍将判断待处理的排序链表是否为空，或仅含有一个节点。</p>\n<p>然后，我们将添加一个哑结点list作为辅助，该结点位于列表头部。哑结点用来简化某些极端情况，例如，需要删除链表的头部。</p>\n<p>在遍历链表的同时，使用while循环寻找与当前节点node值不相等的第一个节点，若while循环得以成功执行，则让得到的新节点成为head的后继；否则，当前节点node与其后继节点值不相等，while循环未被执行，则该节点不需要被删除，head后移。</p>\n<ul>\n<li>算法实现</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val;</span></span><br><span class=\"line\"><span class=\"comment\">    ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\">    ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span> || head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tListNode list = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tlist.next = head;</span><br><span class=\"line\">\t\thead = list;</span><br><span class=\"line\">\t\tListNode pre,node;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(head.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tpre = head.next;</span><br><span class=\"line\">\t\t\tnode = pre;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(node.next != <span class=\"keyword\">null</span> &amp;&amp; pre.val == node.next.val) &#123;</span><br><span class=\"line\">\t\t\t\tnode = node.next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(node == pre) &#123;</span><br><span class=\"line\">\t\t\t\thead = head.next;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\thead.next = node.next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>复杂度分析</li>\n</ul>\n<p>设链表的长度为<em>L</em></p>\n<p>时间复杂度：<em>O(L)</em>，仅对链表执行一次遍历操作</p>\n<p>空间复杂度：<em>O</em>(1)，我们只用了常量级的额外空间</p>\n<ul>\n<li>算法效率</li>\n</ul>\n<p>执行用时：1ms，战胜 98.69 % 的 java 提交记录</p>\n<p>内存消耗：35.2 MB</p>"},{"title":"在Linux中存活下来之ssh和scp命令","date":"2018-08-17T06:06:25.000Z","updated":"2018-08-17T06:06:25.000Z","_content":"\n前面我们讲了如何在Windows系统中登录Linux服务器，以及实现windows和Linux之间的文件传输操作。今天我们来讲下在Linux系统（如ubuntu）中如何登录Linux服务器及实现文件传输。\n\nLinux中使用**ssh命令**登录其他的Linux，使用**scp命令**实现文件传输。\n\n<!--more-->\n\n### ssh\n\nssh，全称Secure Shell，是一种用于远程登录的协议。\n\n语法：\n\n```shell\nssh 用户名@IP地址\n```\n\n示例：\n\n这里以root用户和 IP 地址118.190.95.35（从网上随便找的一个IP）为例\n\n```shell\nssh root@118.190.95.35\n```\n\n### scp\n\nscp，全称secure copy，用于Linux之间复制文件和目录。\n\n语法：\n\n```shell\nscp [options] 源文件路径 目标路径 \n```\n\n参数:\n\n* -r：递归复制目录下的所有文件，包括目录本身\n\n示例：\n\n* 从本地上传文件到服务器\n\n将本地的/home/hegongshan/Desktop/robots.txt文件上传到服务器118.190.95.35的/usr/local/tomcat/目录下\n\n```\nscp /home/hegongshan/Desktop/xxx.txt root@118.190.95.35:/usr/local/tomcat/\n```\n\n* 从服务器下载文件\n\n从118.190.95.35将/usr/local/tomcat/webapps/ROOT.war下载到本机的/home/hegongshan/Desktop/目录下\n\n```shell\nscp root@118.190.95.35:/usr/local/tomcat/webapps/ROOT.war /home/hegongshan/Desktop/\n```\n\n* 从服务器复制目录（文件夹）\n\n从118.190.95.35将/usr/local/tomcat/webapps/ROOT复制到本机的/home/hegongshan/Desktop/目录下\n\n```shell\nscp -r root@118.190.95.35:/usr/local/tomcat/webapps/ROOT /home/hegongshan/Desktop/\n```\n\n结果将是在/home/hegongshan/Desktop/下有一个ROOT文件夹。","source":"_posts/linux-command-ssh-and-scp.md","raw":"---\ntitle: 在Linux中存活下来之ssh和scp命令\ndate: 2018-08-17 14:06:25\nupdated: 2018-08-17 14:06:25\ntags: linux\ncategories: linux\n---\n\n前面我们讲了如何在Windows系统中登录Linux服务器，以及实现windows和Linux之间的文件传输操作。今天我们来讲下在Linux系统（如ubuntu）中如何登录Linux服务器及实现文件传输。\n\nLinux中使用**ssh命令**登录其他的Linux，使用**scp命令**实现文件传输。\n\n<!--more-->\n\n### ssh\n\nssh，全称Secure Shell，是一种用于远程登录的协议。\n\n语法：\n\n```shell\nssh 用户名@IP地址\n```\n\n示例：\n\n这里以root用户和 IP 地址118.190.95.35（从网上随便找的一个IP）为例\n\n```shell\nssh root@118.190.95.35\n```\n\n### scp\n\nscp，全称secure copy，用于Linux之间复制文件和目录。\n\n语法：\n\n```shell\nscp [options] 源文件路径 目标路径 \n```\n\n参数:\n\n* -r：递归复制目录下的所有文件，包括目录本身\n\n示例：\n\n* 从本地上传文件到服务器\n\n将本地的/home/hegongshan/Desktop/robots.txt文件上传到服务器118.190.95.35的/usr/local/tomcat/目录下\n\n```\nscp /home/hegongshan/Desktop/xxx.txt root@118.190.95.35:/usr/local/tomcat/\n```\n\n* 从服务器下载文件\n\n从118.190.95.35将/usr/local/tomcat/webapps/ROOT.war下载到本机的/home/hegongshan/Desktop/目录下\n\n```shell\nscp root@118.190.95.35:/usr/local/tomcat/webapps/ROOT.war /home/hegongshan/Desktop/\n```\n\n* 从服务器复制目录（文件夹）\n\n从118.190.95.35将/usr/local/tomcat/webapps/ROOT复制到本机的/home/hegongshan/Desktop/目录下\n\n```shell\nscp -r root@118.190.95.35:/usr/local/tomcat/webapps/ROOT /home/hegongshan/Desktop/\n```\n\n结果将是在/home/hegongshan/Desktop/下有一个ROOT文件夹。","slug":"linux-command-ssh-and-scp","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aq4002uj1q0559ufdfu","content":"<p>前面我们讲了如何在Windows系统中登录Linux服务器，以及实现windows和Linux之间的文件传输操作。今天我们来讲下在Linux系统（如ubuntu）中如何登录Linux服务器及实现文件传输。</p>\n<p>Linux中使用<strong>ssh命令</strong>登录其他的Linux，使用<strong>scp命令</strong>实现文件传输。</p>\n<a id=\"more\"></a>\n<h3 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h3><p>ssh，全称Secure Shell，是一种用于远程登录的协议。</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh 用户名@IP地址</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<p>这里以root用户和 IP 地址118.190.95.35（从网上随便找的一个IP）为例</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@118.190.95.35</span><br></pre></td></tr></table></figure>\n<h3 id=\"scp\"><a href=\"#scp\" class=\"headerlink\" title=\"scp\"></a>scp</h3><p>scp，全称secure copy，用于Linux之间复制文件和目录。</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp [options] 源文件路径 目标路径</span><br></pre></td></tr></table></figure>\n<p>参数:</p>\n<ul>\n<li>-r：递归复制目录下的所有文件，包括目录本身</li>\n</ul>\n<p>示例：</p>\n<ul>\n<li>从本地上传文件到服务器</li>\n</ul>\n<p>将本地的/home/hegongshan/Desktop/robots.txt文件上传到服务器118.190.95.35的/usr/local/tomcat/目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp /home/hegongshan/Desktop/xxx.txt root@118.190.95.35:/usr/local/tomcat/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>从服务器下载文件</li>\n</ul>\n<p>从118.190.95.35将/usr/local/tomcat/webapps/ROOT.war下载到本机的/home/hegongshan/Desktop/目录下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp root@118.190.95.35:/usr/local/tomcat/webapps/ROOT.war /home/hegongshan/Desktop/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>从服务器复制目录（文件夹）</li>\n</ul>\n<p>从118.190.95.35将/usr/local/tomcat/webapps/ROOT复制到本机的/home/hegongshan/Desktop/目录下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r root@118.190.95.35:/usr/local/tomcat/webapps/ROOT /home/hegongshan/Desktop/</span><br></pre></td></tr></table></figure>\n<p>结果将是在/home/hegongshan/Desktop/下有一个ROOT文件夹。</p>\n","site":{"data":{}},"excerpt":"<p>前面我们讲了如何在Windows系统中登录Linux服务器，以及实现windows和Linux之间的文件传输操作。今天我们来讲下在Linux系统（如ubuntu）中如何登录Linux服务器及实现文件传输。</p>\n<p>Linux中使用<strong>ssh命令</strong>登录其他的Linux，使用<strong>scp命令</strong>实现文件传输。</p>","more":"<h3 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h3><p>ssh，全称Secure Shell，是一种用于远程登录的协议。</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh 用户名@IP地址</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<p>这里以root用户和 IP 地址118.190.95.35（从网上随便找的一个IP）为例</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@118.190.95.35</span><br></pre></td></tr></table></figure>\n<h3 id=\"scp\"><a href=\"#scp\" class=\"headerlink\" title=\"scp\"></a>scp</h3><p>scp，全称secure copy，用于Linux之间复制文件和目录。</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp [options] 源文件路径 目标路径</span><br></pre></td></tr></table></figure>\n<p>参数:</p>\n<ul>\n<li>-r：递归复制目录下的所有文件，包括目录本身</li>\n</ul>\n<p>示例：</p>\n<ul>\n<li>从本地上传文件到服务器</li>\n</ul>\n<p>将本地的/home/hegongshan/Desktop/robots.txt文件上传到服务器118.190.95.35的/usr/local/tomcat/目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp /home/hegongshan/Desktop/xxx.txt root@118.190.95.35:/usr/local/tomcat/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>从服务器下载文件</li>\n</ul>\n<p>从118.190.95.35将/usr/local/tomcat/webapps/ROOT.war下载到本机的/home/hegongshan/Desktop/目录下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp root@118.190.95.35:/usr/local/tomcat/webapps/ROOT.war /home/hegongshan/Desktop/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>从服务器复制目录（文件夹）</li>\n</ul>\n<p>从118.190.95.35将/usr/local/tomcat/webapps/ROOT复制到本机的/home/hegongshan/Desktop/目录下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r root@118.190.95.35:/usr/local/tomcat/webapps/ROOT /home/hegongshan/Desktop/</span><br></pre></td></tr></table></figure>\n<p>结果将是在/home/hegongshan/Desktop/下有一个ROOT文件夹。</p>"},{"title":"在Linux中存活下来之tar压缩和解压缩文件","date":"2018-05-14T13:08:13.000Z","updated":"2018-05-14T13:08:13.000Z","_content":">最近需要在Linux服务器上解压tar.gz文件，于是乎学习了下tar命令的使用。\n\ntar命令参数很多，暂时就只用到以下几个参数，其他的以后用到再补上。\n\n<!--more-->\n\n#### 参数说明：\n\n* -c：全称create，用于创建文件\n* -v：全称verbose，用于显示详细的命令执行信息\n* -f：全称file，用于指定需要压缩或者解压缩的文件名\n* -x：用于解压文件\n* -C：切换到指定目录\n* -z：通过gzip命令处理文件。简单来说，如果需要压缩为\\*.gz文件，或者解压缩\\*.gz文件，就要带上-z\n\n####  示例\n\n1.解压缩tar.gz文件\n\n```shell\ntar -zxvf apache-tomcat-8.5.31.tar.gz\n```\n\n2.解压缩tar.gz文件到指定目录，这里以/usr/local目录为例\n\n```shell\ntar -zxvf apache-tomcat-8.5.31.tar.gz -C /usr/local\n```\n\n3.将某个（些）目录或文件压缩为tar.gz文件\n\n```shell\ntar -zcvf archive.tar.gz file1 file2 ...\n```\n\narchive.tar.gz是生成的压缩文件名，file1、file2等是要压缩的文件和目录列表。","source":"_posts/linux-command-tar.md","raw":"---\ntitle: 在Linux中存活下来之tar压缩和解压缩文件\ndate: 2018-05-14 21:08:13\nupdated: 2018-05-14 21:08:13\ntags: [linux,压缩,解压缩]\ncategories: linux\n---\n>最近需要在Linux服务器上解压tar.gz文件，于是乎学习了下tar命令的使用。\n\ntar命令参数很多，暂时就只用到以下几个参数，其他的以后用到再补上。\n\n<!--more-->\n\n#### 参数说明：\n\n* -c：全称create，用于创建文件\n* -v：全称verbose，用于显示详细的命令执行信息\n* -f：全称file，用于指定需要压缩或者解压缩的文件名\n* -x：用于解压文件\n* -C：切换到指定目录\n* -z：通过gzip命令处理文件。简单来说，如果需要压缩为\\*.gz文件，或者解压缩\\*.gz文件，就要带上-z\n\n####  示例\n\n1.解压缩tar.gz文件\n\n```shell\ntar -zxvf apache-tomcat-8.5.31.tar.gz\n```\n\n2.解压缩tar.gz文件到指定目录，这里以/usr/local目录为例\n\n```shell\ntar -zxvf apache-tomcat-8.5.31.tar.gz -C /usr/local\n```\n\n3.将某个（些）目录或文件压缩为tar.gz文件\n\n```shell\ntar -zcvf archive.tar.gz file1 file2 ...\n```\n\narchive.tar.gz是生成的压缩文件名，file1、file2等是要压缩的文件和目录列表。","slug":"linux-command-tar","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aq5002wj1q0ahfaaz36","content":"<blockquote>\n<p>最近需要在Linux服务器上解压tar.gz文件，于是乎学习了下tar命令的使用。</p>\n</blockquote>\n<p>tar命令参数很多，暂时就只用到以下几个参数，其他的以后用到再补上。</p>\n<a id=\"more\"></a>\n<h4 id=\"参数说明：\"><a href=\"#参数说明：\" class=\"headerlink\" title=\"参数说明：\"></a>参数说明：</h4><ul>\n<li>-c：全称create，用于创建文件</li>\n<li>-v：全称verbose，用于显示详细的命令执行信息</li>\n<li>-f：全称file，用于指定需要压缩或者解压缩的文件名</li>\n<li>-x：用于解压文件</li>\n<li>-C：切换到指定目录</li>\n<li>-z：通过gzip命令处理文件。简单来说，如果需要压缩为*.gz文件，或者解压缩*.gz文件，就要带上-z</li>\n</ul>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>1.解压缩tar.gz文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf apache-tomcat-8.5.31.tar.gz</span><br></pre></td></tr></table></figure>\n<p>2.解压缩tar.gz文件到指定目录，这里以/usr/local目录为例</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf apache-tomcat-8.5.31.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>\n<p>3.将某个（些）目录或文件压缩为tar.gz文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zcvf archive.tar.gz file1 file2 ...</span><br></pre></td></tr></table></figure>\n<p>archive.tar.gz是生成的压缩文件名，file1、file2等是要压缩的文件和目录列表。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近需要在Linux服务器上解压tar.gz文件，于是乎学习了下tar命令的使用。</p>\n</blockquote>\n<p>tar命令参数很多，暂时就只用到以下几个参数，其他的以后用到再补上。</p>","more":"<h4 id=\"参数说明：\"><a href=\"#参数说明：\" class=\"headerlink\" title=\"参数说明：\"></a>参数说明：</h4><ul>\n<li>-c：全称create，用于创建文件</li>\n<li>-v：全称verbose，用于显示详细的命令执行信息</li>\n<li>-f：全称file，用于指定需要压缩或者解压缩的文件名</li>\n<li>-x：用于解压文件</li>\n<li>-C：切换到指定目录</li>\n<li>-z：通过gzip命令处理文件。简单来说，如果需要压缩为*.gz文件，或者解压缩*.gz文件，就要带上-z</li>\n</ul>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>1.解压缩tar.gz文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf apache-tomcat-8.5.31.tar.gz</span><br></pre></td></tr></table></figure>\n<p>2.解压缩tar.gz文件到指定目录，这里以/usr/local目录为例</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf apache-tomcat-8.5.31.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>\n<p>3.将某个（些）目录或文件压缩为tar.gz文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zcvf archive.tar.gz file1 file2 ...</span><br></pre></td></tr></table></figure>\n<p>archive.tar.gz是生成的压缩文件名，file1、file2等是要压缩的文件和目录列表。</p>"},{"title":"在Linux中存活下来之vi编辑器的使用","date":"2018-05-11T12:59:51.000Z","updated":"2018-05-12T12:59:51.000Z","_content":"\n> 前话：学习vi编辑器，是一个循序渐进的过程，本篇是博主自己的学习总结，会持续更新。\n\n### 简介\n\nvi编辑器有三种模式：\n\n* 命令行模式：顾名思义，在这个模式下，所有的键盘操作都会被认为是命令。启动vi编辑器，就会进入命令行模式。\n* 输入模式：除了按下“Esc”外，其他的键盘输入都不会被认为是命令。处于这个模式下，和我们在Windows中用Notepad等编辑文件，几乎没有区别。按下“Esc\"，会退出输入模式，进入命令行模式。\n* 末行模式：在命令模式下，输入“:”就会进入末行模式。\n\n这里，博主总结下最近学习到的且经常使用的一些命令。\n\n<!--more-->\n\n### 启动vi\n\nvi fileName：进入编辑环境并打开或新建文件\n\n### 命令行模式\n\ndd：删除光标所在行，并将当前行内容复制到剪贴板\n\np：全称paste，表示将剪贴板中的数据粘贴到光标当前位置\n\nyy：复制光标所在行\n\n### 进入输入模式\n\n* i：在命令模式下，在当前光标处进入输入模式\n\n### 输入模式\n\n输入模式，类似于我们在Windows中编辑文件\n\n* 方向键进行上下左右方向的光标移动\n* Backspace键：删除光标左侧的字符\n* delete键：删除光标右侧的字符\n\n### 退出输入模式\n\n按下Esc键：从输入模式回到命令行模式\n\n### 进入末行模式\n\n在命令行模式下，按下”:“就会进入末行模式。\n\n### 退出vi\n\nq：退出vi\n\nq!：不保存文件并退出vi\n\nw：保存文件\n\nwq：保存文件并退出vi\n\nwq!：强制保存文件并退出vi（忽略只读）\n\n","source":"_posts/linux-vi.md","raw":"---\ntitle: 在Linux中存活下来之vi编辑器的使用\ndate: 2018-05-11 20:59:51\nupdated: 2018-05-12 20:59:51\ntags: [linux,vi]\ncategories: linux\n---\n\n> 前话：学习vi编辑器，是一个循序渐进的过程，本篇是博主自己的学习总结，会持续更新。\n\n### 简介\n\nvi编辑器有三种模式：\n\n* 命令行模式：顾名思义，在这个模式下，所有的键盘操作都会被认为是命令。启动vi编辑器，就会进入命令行模式。\n* 输入模式：除了按下“Esc”外，其他的键盘输入都不会被认为是命令。处于这个模式下，和我们在Windows中用Notepad等编辑文件，几乎没有区别。按下“Esc\"，会退出输入模式，进入命令行模式。\n* 末行模式：在命令模式下，输入“:”就会进入末行模式。\n\n这里，博主总结下最近学习到的且经常使用的一些命令。\n\n<!--more-->\n\n### 启动vi\n\nvi fileName：进入编辑环境并打开或新建文件\n\n### 命令行模式\n\ndd：删除光标所在行，并将当前行内容复制到剪贴板\n\np：全称paste，表示将剪贴板中的数据粘贴到光标当前位置\n\nyy：复制光标所在行\n\n### 进入输入模式\n\n* i：在命令模式下，在当前光标处进入输入模式\n\n### 输入模式\n\n输入模式，类似于我们在Windows中编辑文件\n\n* 方向键进行上下左右方向的光标移动\n* Backspace键：删除光标左侧的字符\n* delete键：删除光标右侧的字符\n\n### 退出输入模式\n\n按下Esc键：从输入模式回到命令行模式\n\n### 进入末行模式\n\n在命令行模式下，按下”:“就会进入末行模式。\n\n### 退出vi\n\nq：退出vi\n\nq!：不保存文件并退出vi\n\nw：保存文件\n\nwq：保存文件并退出vi\n\nwq!：强制保存文件并退出vi（忽略只读）\n\n","slug":"linux-vi","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aq70031j1q0t00ww7qb","content":"<blockquote>\n<p>前话：学习vi编辑器，是一个循序渐进的过程，本篇是博主自己的学习总结，会持续更新。</p>\n</blockquote>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>vi编辑器有三种模式：</p>\n<ul>\n<li>命令行模式：顾名思义，在这个模式下，所有的键盘操作都会被认为是命令。启动vi编辑器，就会进入命令行模式。</li>\n<li>输入模式：除了按下“Esc”外，其他的键盘输入都不会被认为是命令。处于这个模式下，和我们在Windows中用Notepad等编辑文件，几乎没有区别。按下“Esc”，会退出输入模式，进入命令行模式。</li>\n<li>末行模式：在命令模式下，输入“:”就会进入末行模式。</li>\n</ul>\n<p>这里，博主总结下最近学习到的且经常使用的一些命令。</p>\n<a id=\"more\"></a>\n<h3 id=\"启动vi\"><a href=\"#启动vi\" class=\"headerlink\" title=\"启动vi\"></a>启动vi</h3><p>vi fileName：进入编辑环境并打开或新建文件</p>\n<h3 id=\"命令行模式\"><a href=\"#命令行模式\" class=\"headerlink\" title=\"命令行模式\"></a>命令行模式</h3><p>dd：删除光标所在行，并将当前行内容复制到剪贴板</p>\n<p>p：全称paste，表示将剪贴板中的数据粘贴到光标当前位置</p>\n<p>yy：复制光标所在行</p>\n<h3 id=\"进入输入模式\"><a href=\"#进入输入模式\" class=\"headerlink\" title=\"进入输入模式\"></a>进入输入模式</h3><ul>\n<li>i：在命令模式下，在当前光标处进入输入模式</li>\n</ul>\n<h3 id=\"输入模式\"><a href=\"#输入模式\" class=\"headerlink\" title=\"输入模式\"></a>输入模式</h3><p>输入模式，类似于我们在Windows中编辑文件</p>\n<ul>\n<li>方向键进行上下左右方向的光标移动</li>\n<li>Backspace键：删除光标左侧的字符</li>\n<li>delete键：删除光标右侧的字符</li>\n</ul>\n<h3 id=\"退出输入模式\"><a href=\"#退出输入模式\" class=\"headerlink\" title=\"退出输入模式\"></a>退出输入模式</h3><p>按下Esc键：从输入模式回到命令行模式</p>\n<h3 id=\"进入末行模式\"><a href=\"#进入末行模式\" class=\"headerlink\" title=\"进入末行模式\"></a>进入末行模式</h3><p>在命令行模式下，按下”:“就会进入末行模式。</p>\n<h3 id=\"退出vi\"><a href=\"#退出vi\" class=\"headerlink\" title=\"退出vi\"></a>退出vi</h3><p>q：退出vi</p>\n<p>q!：不保存文件并退出vi</p>\n<p>w：保存文件</p>\n<p>wq：保存文件并退出vi</p>\n<p>wq!：强制保存文件并退出vi（忽略只读）</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>前话：学习vi编辑器，是一个循序渐进的过程，本篇是博主自己的学习总结，会持续更新。</p>\n</blockquote>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>vi编辑器有三种模式：</p>\n<ul>\n<li>命令行模式：顾名思义，在这个模式下，所有的键盘操作都会被认为是命令。启动vi编辑器，就会进入命令行模式。</li>\n<li>输入模式：除了按下“Esc”外，其他的键盘输入都不会被认为是命令。处于这个模式下，和我们在Windows中用Notepad等编辑文件，几乎没有区别。按下“Esc”，会退出输入模式，进入命令行模式。</li>\n<li>末行模式：在命令模式下，输入“:”就会进入末行模式。</li>\n</ul>\n<p>这里，博主总结下最近学习到的且经常使用的一些命令。</p>","more":"<h3 id=\"启动vi\"><a href=\"#启动vi\" class=\"headerlink\" title=\"启动vi\"></a>启动vi</h3><p>vi fileName：进入编辑环境并打开或新建文件</p>\n<h3 id=\"命令行模式\"><a href=\"#命令行模式\" class=\"headerlink\" title=\"命令行模式\"></a>命令行模式</h3><p>dd：删除光标所在行，并将当前行内容复制到剪贴板</p>\n<p>p：全称paste，表示将剪贴板中的数据粘贴到光标当前位置</p>\n<p>yy：复制光标所在行</p>\n<h3 id=\"进入输入模式\"><a href=\"#进入输入模式\" class=\"headerlink\" title=\"进入输入模式\"></a>进入输入模式</h3><ul>\n<li>i：在命令模式下，在当前光标处进入输入模式</li>\n</ul>\n<h3 id=\"输入模式\"><a href=\"#输入模式\" class=\"headerlink\" title=\"输入模式\"></a>输入模式</h3><p>输入模式，类似于我们在Windows中编辑文件</p>\n<ul>\n<li>方向键进行上下左右方向的光标移动</li>\n<li>Backspace键：删除光标左侧的字符</li>\n<li>delete键：删除光标右侧的字符</li>\n</ul>\n<h3 id=\"退出输入模式\"><a href=\"#退出输入模式\" class=\"headerlink\" title=\"退出输入模式\"></a>退出输入模式</h3><p>按下Esc键：从输入模式回到命令行模式</p>\n<h3 id=\"进入末行模式\"><a href=\"#进入末行模式\" class=\"headerlink\" title=\"进入末行模式\"></a>进入末行模式</h3><p>在命令行模式下，按下”:“就会进入末行模式。</p>\n<h3 id=\"退出vi\"><a href=\"#退出vi\" class=\"headerlink\" title=\"退出vi\"></a>退出vi</h3><p>q：退出vi</p>\n<p>q!：不保存文件并退出vi</p>\n<p>w：保存文件</p>\n<p>wq：保存文件并退出vi</p>\n<p>wq!：强制保存文件并退出vi（忽略只读）</p>"},{"title":"在Linux中存活下来之文件与目录管理","date":"2018-05-10T08:06:16.000Z","updated":"2018-05-12T08:06:16.000Z","_content":"\n> 前话：最近接手了导师的一个项目，项目部署在Linux服务器上后，出了点小问题，需要修改一些文件。因为不是自己部署的，加之对linux命令不熟，怎么办？在本地修改完后，重新让别人帮忙部署？还是自己在服务器上手动修改？天生不喜欢求人，哈哈\n\n总结一下最近常用的一些Linux基础命令，主要和文件、目录的操作相关\n\n<!--more-->\n\n### ls\n\nls，全称list，用于列出某个目录下的所有文件和目录。\n\n### cd\n\ncd，全称change directory，用于切换路径。估计大伙对cd这个命令都很熟，因为Windows上的命令行界面也是用的cd命令来切换路径。值得一提的是，\"~\"表示home目录，\"..\"表示回到当前目录的上一级目录\n\n语法：cd [dirName]\n\n### pwd\n\npwd，全称print working directory，用于输出当前的工作目录名。\n\n### rm\n\nrm，全称remove，用于删除文件或目录。\n\n语法：rm [options] name...\n\n参数说明：\n\n* -i 删除前逐一询问确认\n* -f 全称force，删除文件不需要询问\n* -r 全称recurse，递归删除目录下的所有文件\n\n如果嫌上面的麻烦，那么我们简单粗暴点，删除文件用 rm [fileName]，删除目录用 rm -rf [dirName]，哈哈\n\n### cp\n\ncp，全称copy，用于复制文件或目录。\n\n语法：cp [options] source... dest\n\ncp的参数比较多，这里只讲-r，其他的用到再现学。cp中的-r和rm中的-r意思差不多，都表示递归。主要用于目录复制。\n\n简单粗暴版：复制单个文件用 cp source ... dest，复制目录用 cp -r [dirName]&nbsp;[dirName]\n\n### mv\n\nmv，具有rename和move两种功能，用于重命名文件或目录，或者将文件或目录移入另一个目录。\n\n语法：mv source dest\n\n简单来说，如果source和dest同为目录或者文件，且dest不存在，则将source重命名为dest，如果source文件，而dest为目录，则将source移到dest中\n\n* 重命名文件\n\n![文件重命名](http://p64uw9x5j.bkt.clouddn.com/image/2018/05/12/201805122034120.png \"重命名文件\")\n\n* 重命名目录\n\n![目录重命名](http://p64uw9x5j.bkt.clouddn.com/image/2018/05/12/20180512204449.png \"重命名目录\")\n\n* 将文件移动另一个目录中\n\n![将文件移动到指定目录中](http://p64uw9x5j.bkt.clouddn.com/image/2018/05/12/20180512204754.png \"将文件移动到指定目录中\")\n\n* 将目录移动到指定目录中\n\n![将目录移动到指定目录中](http://p64uw9x5j.bkt.clouddn.com//image/2018/05/12/20180512205155.png )\n\n### touch\n\ntouch，用于创建文件。如果文件已经存在，则更新文件的时间戳。\n\n### mkdir\n\nmkdir，全称make directory，用于创建目录。\n\n语法：mkdir [options] dirName\n\nmkdir的参数暂时没用过，等用到了再补上。\n\n### rmdir\n\nrmdir，全称remove directory，用于删除空目录。\n\n语法：rmdir [options] dirName\n\n参数：\n\n* -p：全称parents，删除指定的空目录后，若此时该目录的父目录已变成空目录，则将父目录一并删除。","source":"_posts/linux-file-directory-manage.md","raw":"---\ntitle: 在Linux中存活下来之文件与目录管理\ndate: 2018-05-10 16:06:16\nupdated: 2018-05-12 16:06:16\ncategories: linux\ntags: linux\n---\n\n> 前话：最近接手了导师的一个项目，项目部署在Linux服务器上后，出了点小问题，需要修改一些文件。因为不是自己部署的，加之对linux命令不熟，怎么办？在本地修改完后，重新让别人帮忙部署？还是自己在服务器上手动修改？天生不喜欢求人，哈哈\n\n总结一下最近常用的一些Linux基础命令，主要和文件、目录的操作相关\n\n<!--more-->\n\n### ls\n\nls，全称list，用于列出某个目录下的所有文件和目录。\n\n### cd\n\ncd，全称change directory，用于切换路径。估计大伙对cd这个命令都很熟，因为Windows上的命令行界面也是用的cd命令来切换路径。值得一提的是，\"~\"表示home目录，\"..\"表示回到当前目录的上一级目录\n\n语法：cd [dirName]\n\n### pwd\n\npwd，全称print working directory，用于输出当前的工作目录名。\n\n### rm\n\nrm，全称remove，用于删除文件或目录。\n\n语法：rm [options] name...\n\n参数说明：\n\n* -i 删除前逐一询问确认\n* -f 全称force，删除文件不需要询问\n* -r 全称recurse，递归删除目录下的所有文件\n\n如果嫌上面的麻烦，那么我们简单粗暴点，删除文件用 rm [fileName]，删除目录用 rm -rf [dirName]，哈哈\n\n### cp\n\ncp，全称copy，用于复制文件或目录。\n\n语法：cp [options] source... dest\n\ncp的参数比较多，这里只讲-r，其他的用到再现学。cp中的-r和rm中的-r意思差不多，都表示递归。主要用于目录复制。\n\n简单粗暴版：复制单个文件用 cp source ... dest，复制目录用 cp -r [dirName]&nbsp;[dirName]\n\n### mv\n\nmv，具有rename和move两种功能，用于重命名文件或目录，或者将文件或目录移入另一个目录。\n\n语法：mv source dest\n\n简单来说，如果source和dest同为目录或者文件，且dest不存在，则将source重命名为dest，如果source文件，而dest为目录，则将source移到dest中\n\n* 重命名文件\n\n![文件重命名](http://p64uw9x5j.bkt.clouddn.com/image/2018/05/12/201805122034120.png \"重命名文件\")\n\n* 重命名目录\n\n![目录重命名](http://p64uw9x5j.bkt.clouddn.com/image/2018/05/12/20180512204449.png \"重命名目录\")\n\n* 将文件移动另一个目录中\n\n![将文件移动到指定目录中](http://p64uw9x5j.bkt.clouddn.com/image/2018/05/12/20180512204754.png \"将文件移动到指定目录中\")\n\n* 将目录移动到指定目录中\n\n![将目录移动到指定目录中](http://p64uw9x5j.bkt.clouddn.com//image/2018/05/12/20180512205155.png )\n\n### touch\n\ntouch，用于创建文件。如果文件已经存在，则更新文件的时间戳。\n\n### mkdir\n\nmkdir，全称make directory，用于创建目录。\n\n语法：mkdir [options] dirName\n\nmkdir的参数暂时没用过，等用到了再补上。\n\n### rmdir\n\nrmdir，全称remove directory，用于删除空目录。\n\n语法：rmdir [options] dirName\n\n参数：\n\n* -p：全称parents，删除指定的空目录后，若此时该目录的父目录已变成空目录，则将父目录一并删除。","slug":"linux-file-directory-manage","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aq80032j1q0w36xui5d","content":"<blockquote>\n<p>前话：最近接手了导师的一个项目，项目部署在Linux服务器上后，出了点小问题，需要修改一些文件。因为不是自己部署的，加之对linux命令不熟，怎么办？在本地修改完后，重新让别人帮忙部署？还是自己在服务器上手动修改？天生不喜欢求人，哈哈</p>\n</blockquote>\n<p>总结一下最近常用的一些Linux基础命令，主要和文件、目录的操作相关</p>\n<a id=\"more\"></a>\n<h3 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h3><p>ls，全称list，用于列出某个目录下的所有文件和目录。</p>\n<h3 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h3><p>cd，全称change directory，用于切换路径。估计大伙对cd这个命令都很熟，因为Windows上的命令行界面也是用的cd命令来切换路径。值得一提的是，”~”表示home目录，”..”表示回到当前目录的上一级目录</p>\n<p>语法：cd [dirName]</p>\n<h3 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a>pwd</h3><p>pwd，全称print working directory，用于输出当前的工作目录名。</p>\n<h3 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h3><p>rm，全称remove，用于删除文件或目录。</p>\n<p>语法：rm [options] name…</p>\n<p>参数说明：</p>\n<ul>\n<li>-i 删除前逐一询问确认</li>\n<li>-f 全称force，删除文件不需要询问</li>\n<li>-r 全称recurse，递归删除目录下的所有文件</li>\n</ul>\n<p>如果嫌上面的麻烦，那么我们简单粗暴点，删除文件用 rm [fileName]，删除目录用 rm -rf [dirName]，哈哈</p>\n<h3 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h3><p>cp，全称copy，用于复制文件或目录。</p>\n<p>语法：cp [options] source… dest</p>\n<p>cp的参数比较多，这里只讲-r，其他的用到再现学。cp中的-r和rm中的-r意思差不多，都表示递归。主要用于目录复制。</p>\n<p>简单粗暴版：复制单个文件用 cp source … dest，复制目录用 cp -r [dirName]&nbsp;[dirName]</p>\n<h3 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h3><p>mv，具有rename和move两种功能，用于重命名文件或目录，或者将文件或目录移入另一个目录。</p>\n<p>语法：mv source dest</p>\n<p>简单来说，如果source和dest同为目录或者文件，且dest不存在，则将source重命名为dest，如果source文件，而dest为目录，则将source移到dest中</p>\n<ul>\n<li>重命名文件</li>\n</ul>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/05/12/201805122034120.png\" alt=\"文件重命名\" title=\"重命名文件\"></p>\n<ul>\n<li>重命名目录</li>\n</ul>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/05/12/20180512204449.png\" alt=\"目录重命名\" title=\"重命名目录\"></p>\n<ul>\n<li>将文件移动另一个目录中</li>\n</ul>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/05/12/20180512204754.png\" alt=\"将文件移动到指定目录中\" title=\"将文件移动到指定目录中\"></p>\n<ul>\n<li>将目录移动到指定目录中</li>\n</ul>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com//image/2018/05/12/20180512205155.png\" alt=\"将目录移动到指定目录中\"></p>\n<h3 id=\"touch\"><a href=\"#touch\" class=\"headerlink\" title=\"touch\"></a>touch</h3><p>touch，用于创建文件。如果文件已经存在，则更新文件的时间戳。</p>\n<h3 id=\"mkdir\"><a href=\"#mkdir\" class=\"headerlink\" title=\"mkdir\"></a>mkdir</h3><p>mkdir，全称make directory，用于创建目录。</p>\n<p>语法：mkdir [options] dirName</p>\n<p>mkdir的参数暂时没用过，等用到了再补上。</p>\n<h3 id=\"rmdir\"><a href=\"#rmdir\" class=\"headerlink\" title=\"rmdir\"></a>rmdir</h3><p>rmdir，全称remove directory，用于删除空目录。</p>\n<p>语法：rmdir [options] dirName</p>\n<p>参数：</p>\n<ul>\n<li>-p：全称parents，删除指定的空目录后，若此时该目录的父目录已变成空目录，则将父目录一并删除。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>前话：最近接手了导师的一个项目，项目部署在Linux服务器上后，出了点小问题，需要修改一些文件。因为不是自己部署的，加之对linux命令不熟，怎么办？在本地修改完后，重新让别人帮忙部署？还是自己在服务器上手动修改？天生不喜欢求人，哈哈</p>\n</blockquote>\n<p>总结一下最近常用的一些Linux基础命令，主要和文件、目录的操作相关</p>","more":"<h3 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h3><p>ls，全称list，用于列出某个目录下的所有文件和目录。</p>\n<h3 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h3><p>cd，全称change directory，用于切换路径。估计大伙对cd这个命令都很熟，因为Windows上的命令行界面也是用的cd命令来切换路径。值得一提的是，”~”表示home目录，”..”表示回到当前目录的上一级目录</p>\n<p>语法：cd [dirName]</p>\n<h3 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a>pwd</h3><p>pwd，全称print working directory，用于输出当前的工作目录名。</p>\n<h3 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h3><p>rm，全称remove，用于删除文件或目录。</p>\n<p>语法：rm [options] name…</p>\n<p>参数说明：</p>\n<ul>\n<li>-i 删除前逐一询问确认</li>\n<li>-f 全称force，删除文件不需要询问</li>\n<li>-r 全称recurse，递归删除目录下的所有文件</li>\n</ul>\n<p>如果嫌上面的麻烦，那么我们简单粗暴点，删除文件用 rm [fileName]，删除目录用 rm -rf [dirName]，哈哈</p>\n<h3 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h3><p>cp，全称copy，用于复制文件或目录。</p>\n<p>语法：cp [options] source… dest</p>\n<p>cp的参数比较多，这里只讲-r，其他的用到再现学。cp中的-r和rm中的-r意思差不多，都表示递归。主要用于目录复制。</p>\n<p>简单粗暴版：复制单个文件用 cp source … dest，复制目录用 cp -r [dirName]&nbsp;[dirName]</p>\n<h3 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h3><p>mv，具有rename和move两种功能，用于重命名文件或目录，或者将文件或目录移入另一个目录。</p>\n<p>语法：mv source dest</p>\n<p>简单来说，如果source和dest同为目录或者文件，且dest不存在，则将source重命名为dest，如果source文件，而dest为目录，则将source移到dest中</p>\n<ul>\n<li>重命名文件</li>\n</ul>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/05/12/201805122034120.png\" alt=\"文件重命名\" title=\"重命名文件\"></p>\n<ul>\n<li>重命名目录</li>\n</ul>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/05/12/20180512204449.png\" alt=\"目录重命名\" title=\"重命名目录\"></p>\n<ul>\n<li>将文件移动另一个目录中</li>\n</ul>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/05/12/20180512204754.png\" alt=\"将文件移动到指定目录中\" title=\"将文件移动到指定目录中\"></p>\n<ul>\n<li>将目录移动到指定目录中</li>\n</ul>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com//image/2018/05/12/20180512205155.png\" alt=\"将目录移动到指定目录中\"></p>\n<h3 id=\"touch\"><a href=\"#touch\" class=\"headerlink\" title=\"touch\"></a>touch</h3><p>touch，用于创建文件。如果文件已经存在，则更新文件的时间戳。</p>\n<h3 id=\"mkdir\"><a href=\"#mkdir\" class=\"headerlink\" title=\"mkdir\"></a>mkdir</h3><p>mkdir，全称make directory，用于创建目录。</p>\n<p>语法：mkdir [options] dirName</p>\n<p>mkdir的参数暂时没用过，等用到了再补上。</p>\n<h3 id=\"rmdir\"><a href=\"#rmdir\" class=\"headerlink\" title=\"rmdir\"></a>rmdir</h3><p>rmdir，全称remove directory，用于删除空目录。</p>\n<p>语法：rmdir [options] dirName</p>\n<p>参数：</p>\n<ul>\n<li>-p：全称parents，删除指定的空目录后，若此时该目录的父目录已变成空目录，则将父目录一并删除。</li>\n</ul>"},{"title":"机器学习之AdaBoost","date":"2018-08-02T11:21:02.000Z","mathjax":true,"_content":"\nAdaBoost（adaptive boosting）算法是提升（boosting）方法的一个最流行版本，1995年由Freund和Schapire提出。其基本思想是使用多个弱分类器（即分类器的性能并不好，错误率较高）来构建一个强分类器。\n\n<!--more-->\n\n### 运行过程\n\n训练数据集中的每个样本，并赋予其一个权重，这些权重构成了向量D。一开始，这些权重都初始化成相等值。首先在训练数据集上训练出一个弱分类器并计算该分类器的错误率，然后在同一数据集上再次训练弱分类器。在分类器的第二次训练中，将会重新调整每个样本的权重，其中第一次分对的样本的权重将会降低，而第一次分错的样本的权重将会提高。为了从所有弱分类器中得到最终的分类结果，AdaBoost为每个分类器都分配了一个权重值$\\alpha$，这些$\\alpha$值是基于每个若分类器的错误率进行计算的。\n\n错误率$\\epsilon$的定义如下：\n$$\n\\epsilon = \\frac{未正确分类的样本数目}{所有样本数目}\n$$\n$\\alpha$的计算公式如下：\n$$\n\\alpha = \\frac{1}{2} \\ln (\\frac{1-\\epsilon}{\\epsilon})\n$$\n计算出$\\alpha$值后，需要更新权重向量D，以使得那些正确分类的样本的权重降低而错分样本的权重升高。\n\nD的计算方法如下：\n$$\nD_{i} ^{ ( t+1) } =\n\\begin{cases}\n\\frac { D_{i} ^{ (t) } e^{-\\alpha} } { sum(D) }, & i分类正确 \\\\\\\n\\frac{ D_{i} ^{ (t) } e^{\\alpha} }{ sum(D) }, & i分类错误\n\\end{cases}\n$$\n在计算出D之后，AdaBoost又开始进入下一轮迭代。AdaBoost算法会不断地重复训练分类器和调整权重的过程，直到训练错误率为0或者弱分类器的数目达到用户的指定值为止。\n\n$\\alpha$作为每个分类器分类结果$G_{m}(x)$的权重，对所有分类器的加权分类结果进行累加求和，\n$$\nf(x) = \\sum_{m=1}^{N} \\alpha_{m} G_{m}(x)\n$$\n从而得到最终的分类器\n\n\n$$\nG(x) = sign(f(x)) = sign( \\sum_{m=1}^{N} \\alpha_{m} G_{m}(x) )\n$$\n\n### AdaBoost的例子\n\n| 序号 |  1   |  2   |  3   |  4   |  5   |  6   |  7   |  8   |  9   | 10   |\n| :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | ---- |\n|  x   |  0   |  1   |  2   |  3   |  4   |  5   |  6   |  7   |  8   | 9    |\n|  y   |  1   |  1   |  1   |  -1  |  -1  |  -1  |  1   |  1   |  1   | -1   |\n\n可选的阈值有2.5，5.5和8.5\n\n若阈值为2.5，则7、8、9分类错误，分类错误率为$e = \\frac {3}{10}$\n\n若阈值为5.5，\n\na.\n$$\nG(x) = \n\\begin{cases}\n1, & x < 5.5 \\\\\\\n-1, & x > 5.5\n\\end{cases}\n$$\n此时，4、5、６以及7、８、９分类错误，分类误差率为$e = \\frac {6}{10}$\n\nb.\n$$\nG(x) = \n\\begin{cases}\n1, & x > 5.5 \\\\\\\n-1, & x < 5.5\n\\end{cases}\n$$\n此时，1、2、3和10分类错误，分类误差率为$e = \\frac {4} {10}$\n\n因此，最低误差率为0.4\n\n若阈值为8.5，\n\na.\n$$\nG(x) =\n\\begin{cases}\n1, & x < 8.5 \\\\\\\n-1, & x > 8.5\n\\end{cases}\n$$\n此时，4、5、6分类错误，分类误差率为$e = \\frac {3} {10}$\n\n可以看到当阈值为2.5或8.5时，分类误差率最低，因此，我们可任取其中一个阈值，比如2.5。\n\n基本分类器\n$$\nG(x) =\n\\begin{cases}\n1, & x < 2.5 \\\\\\\n-1, & x > 2.5\n\\end{cases}\n$$\n\n### 算法实现\n\n我们可以选择任一分类器作为AdaBoost算法的弱分类器，这里选择单层决策树（decision stump）作为弱分类器。\n\n```python\n\"\"\"\n基于单层决策树的AdaBoost分类器\n\"\"\"\nimport numpy as np\n\nclass AdaBoost():\n    \n    def loadDataSet(self,filename):\n        \"\"\"\n        从文件中导入数据集\n        filename : 文件名\n        \"\"\"\n        dataMat = []\n        labelMat = []\n        with open(filename) as file:\n            for line in file.readlines():\n                numFeature = len(line.split('\\t'))\n                lineArr = []\n                currentLine = line.strip().split(\"\\t\")\n                for i in range(numFeature-1):\n                    lineArr.append(float(currentLine[i]))\n                dataMat.append(lineArr)\n                labelMat.append(float(currentLine[-1]))\n        return dataMat,labelMat\n    \n    def _stumpClassify(self,dataMatrix,dimension,threshold,thresholdInequality):\n        arr = np.ones((np.shape(dataMatrix)[0],1))\n        if thresholdInequality == 'lt':\n            arr[dataMatrix[:,dimension] <= threshold] = -1.0\n        else:\n            arr[dataMatrix[:,dimension] > threshold] = -1.0\n        return arr\n    \n    def _buildStump(self,dataArr,classLabels,D):\n        dataMatrix = np.mat(dataArr)\n        labelMat = np.mat(classLabels).T\n        m,n = np.shape(dataMatrix)\n        numSteps = 10.0\n        bestStump = {}\n        bestClassEst = np.mat(np.zeros((m,1)))\n        minError = np.inf\n        # 遍历每一个特征\n        for i in range(n):\n            rangeMin = dataMatrix[:,i].min()\n            rangeMax = dataMatrix[:,i].max()\n            stepSize = (rangeMax-rangeMin)/numSteps\n            for j in range(-1,int(numSteps)+1):\n                for inequal in ['lt','gt']:\n                    threshold = (rangeMin + float(j) * stepSize)\n                    predictedVals = self._stumpClassify(dataMatrix,i,threshold,inequal)\n                    errArr = np.mat(np.ones((m,1)))\n                    errArr[predictedVals == labelMat] = 0\n                    weightedError = D.T * errArr\n                    if weightedError < minError:\n                        minError = weightedError\n                        bestClassEst = predictedVals.copy()\n                        bestStump['dimension'] = i\n                        bestStump['threshold'] = threshold\n                        bestStump['inequal'] = inequal\n        return bestStump,minError,bestClassEst\n    \n    def adaBoostTrainDS(self,dataArr,classLabels,numIter=40):\n        \"\"\"AdaBoost训练过程\"\"\"\n        weakClassArr = []\n        m = np.shape(dataArr)[0]\n        D = np.mat(np.ones((m,1))/m)\n        aggClassEst = np.mat(np.zeros((m,1)))\n        for i in range(numIter):\n            bestStump,error,classEst = self._buildStump(dataArr, classLabels, D)\n            print(\"D:\",D.T)\n            alpha = float(0.5*np.log((1.0-error)/max(error,1e-16)))\n            bestStump['alpha'] = alpha\n            weakClassArr.append(bestStump)\n            print(\"classEst:\",classEst.T)\n            expon = np.multiply(-1*alpha*np.mat(classLabels).T,classEst)\n            D = np.multiply(D,np.exp(expon))\n            D = D/D.sum()\n            aggClassEst += alpha*classEst\n            print(\"aggClassEst:\",aggClassEst.T)\n            aggErrors = np.multiply(np.sign(aggClassEst) != np.mat(classLabels).T,np.ones((m,1)))\n            errorRate = aggErrors.sum()/m\n            print(\"total error:\",errorRate,\"\\n\")\n            if errorRate == 0.0:\n                break\n        return weakClassArr,aggClassEst\n    \n    def adaClassify(self,dataToClass,classifierArr):\n        \"\"\"AdaBoost分类函数\"\"\"\n        dataMatrix = np.mat(dataToClass)\n        m = np.shape(dataMatrix)[0]\n        aggClassEstimate = np.mat(np.zeros((m,1)))\n        for i in range(len(classifierArr)):\n            classEstimate = self.stumpClassify(dataMatrix, \n                                          classifierArr[i]['dimension'],\n                                          classifierArr[i]['threshold'],\n                                          classifierArr[i]['inequal'])\n            aggClassEstimate += classifierArr[i]['alpha'] * classEstimate\n            print(aggClassEstimate)\n        return np.sign(aggClassEstimate)\n```\n\n(未完待续)","source":"_posts/machine-learning-adaboost.md","raw":"---\ntitle: 机器学习之AdaBoost\ndate: 2018-08-02 19:21:02\ntags: 机器学习\ncategories: 机器学习\nmathjax: true\n---\n\nAdaBoost（adaptive boosting）算法是提升（boosting）方法的一个最流行版本，1995年由Freund和Schapire提出。其基本思想是使用多个弱分类器（即分类器的性能并不好，错误率较高）来构建一个强分类器。\n\n<!--more-->\n\n### 运行过程\n\n训练数据集中的每个样本，并赋予其一个权重，这些权重构成了向量D。一开始，这些权重都初始化成相等值。首先在训练数据集上训练出一个弱分类器并计算该分类器的错误率，然后在同一数据集上再次训练弱分类器。在分类器的第二次训练中，将会重新调整每个样本的权重，其中第一次分对的样本的权重将会降低，而第一次分错的样本的权重将会提高。为了从所有弱分类器中得到最终的分类结果，AdaBoost为每个分类器都分配了一个权重值$\\alpha$，这些$\\alpha$值是基于每个若分类器的错误率进行计算的。\n\n错误率$\\epsilon$的定义如下：\n$$\n\\epsilon = \\frac{未正确分类的样本数目}{所有样本数目}\n$$\n$\\alpha$的计算公式如下：\n$$\n\\alpha = \\frac{1}{2} \\ln (\\frac{1-\\epsilon}{\\epsilon})\n$$\n计算出$\\alpha$值后，需要更新权重向量D，以使得那些正确分类的样本的权重降低而错分样本的权重升高。\n\nD的计算方法如下：\n$$\nD_{i} ^{ ( t+1) } =\n\\begin{cases}\n\\frac { D_{i} ^{ (t) } e^{-\\alpha} } { sum(D) }, & i分类正确 \\\\\\\n\\frac{ D_{i} ^{ (t) } e^{\\alpha} }{ sum(D) }, & i分类错误\n\\end{cases}\n$$\n在计算出D之后，AdaBoost又开始进入下一轮迭代。AdaBoost算法会不断地重复训练分类器和调整权重的过程，直到训练错误率为0或者弱分类器的数目达到用户的指定值为止。\n\n$\\alpha$作为每个分类器分类结果$G_{m}(x)$的权重，对所有分类器的加权分类结果进行累加求和，\n$$\nf(x) = \\sum_{m=1}^{N} \\alpha_{m} G_{m}(x)\n$$\n从而得到最终的分类器\n\n\n$$\nG(x) = sign(f(x)) = sign( \\sum_{m=1}^{N} \\alpha_{m} G_{m}(x) )\n$$\n\n### AdaBoost的例子\n\n| 序号 |  1   |  2   |  3   |  4   |  5   |  6   |  7   |  8   |  9   | 10   |\n| :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | ---- |\n|  x   |  0   |  1   |  2   |  3   |  4   |  5   |  6   |  7   |  8   | 9    |\n|  y   |  1   |  1   |  1   |  -1  |  -1  |  -1  |  1   |  1   |  1   | -1   |\n\n可选的阈值有2.5，5.5和8.5\n\n若阈值为2.5，则7、8、9分类错误，分类错误率为$e = \\frac {3}{10}$\n\n若阈值为5.5，\n\na.\n$$\nG(x) = \n\\begin{cases}\n1, & x < 5.5 \\\\\\\n-1, & x > 5.5\n\\end{cases}\n$$\n此时，4、5、６以及7、８、９分类错误，分类误差率为$e = \\frac {6}{10}$\n\nb.\n$$\nG(x) = \n\\begin{cases}\n1, & x > 5.5 \\\\\\\n-1, & x < 5.5\n\\end{cases}\n$$\n此时，1、2、3和10分类错误，分类误差率为$e = \\frac {4} {10}$\n\n因此，最低误差率为0.4\n\n若阈值为8.5，\n\na.\n$$\nG(x) =\n\\begin{cases}\n1, & x < 8.5 \\\\\\\n-1, & x > 8.5\n\\end{cases}\n$$\n此时，4、5、6分类错误，分类误差率为$e = \\frac {3} {10}$\n\n可以看到当阈值为2.5或8.5时，分类误差率最低，因此，我们可任取其中一个阈值，比如2.5。\n\n基本分类器\n$$\nG(x) =\n\\begin{cases}\n1, & x < 2.5 \\\\\\\n-1, & x > 2.5\n\\end{cases}\n$$\n\n### 算法实现\n\n我们可以选择任一分类器作为AdaBoost算法的弱分类器，这里选择单层决策树（decision stump）作为弱分类器。\n\n```python\n\"\"\"\n基于单层决策树的AdaBoost分类器\n\"\"\"\nimport numpy as np\n\nclass AdaBoost():\n    \n    def loadDataSet(self,filename):\n        \"\"\"\n        从文件中导入数据集\n        filename : 文件名\n        \"\"\"\n        dataMat = []\n        labelMat = []\n        with open(filename) as file:\n            for line in file.readlines():\n                numFeature = len(line.split('\\t'))\n                lineArr = []\n                currentLine = line.strip().split(\"\\t\")\n                for i in range(numFeature-1):\n                    lineArr.append(float(currentLine[i]))\n                dataMat.append(lineArr)\n                labelMat.append(float(currentLine[-1]))\n        return dataMat,labelMat\n    \n    def _stumpClassify(self,dataMatrix,dimension,threshold,thresholdInequality):\n        arr = np.ones((np.shape(dataMatrix)[0],1))\n        if thresholdInequality == 'lt':\n            arr[dataMatrix[:,dimension] <= threshold] = -1.0\n        else:\n            arr[dataMatrix[:,dimension] > threshold] = -1.0\n        return arr\n    \n    def _buildStump(self,dataArr,classLabels,D):\n        dataMatrix = np.mat(dataArr)\n        labelMat = np.mat(classLabels).T\n        m,n = np.shape(dataMatrix)\n        numSteps = 10.0\n        bestStump = {}\n        bestClassEst = np.mat(np.zeros((m,1)))\n        minError = np.inf\n        # 遍历每一个特征\n        for i in range(n):\n            rangeMin = dataMatrix[:,i].min()\n            rangeMax = dataMatrix[:,i].max()\n            stepSize = (rangeMax-rangeMin)/numSteps\n            for j in range(-1,int(numSteps)+1):\n                for inequal in ['lt','gt']:\n                    threshold = (rangeMin + float(j) * stepSize)\n                    predictedVals = self._stumpClassify(dataMatrix,i,threshold,inequal)\n                    errArr = np.mat(np.ones((m,1)))\n                    errArr[predictedVals == labelMat] = 0\n                    weightedError = D.T * errArr\n                    if weightedError < minError:\n                        minError = weightedError\n                        bestClassEst = predictedVals.copy()\n                        bestStump['dimension'] = i\n                        bestStump['threshold'] = threshold\n                        bestStump['inequal'] = inequal\n        return bestStump,minError,bestClassEst\n    \n    def adaBoostTrainDS(self,dataArr,classLabels,numIter=40):\n        \"\"\"AdaBoost训练过程\"\"\"\n        weakClassArr = []\n        m = np.shape(dataArr)[0]\n        D = np.mat(np.ones((m,1))/m)\n        aggClassEst = np.mat(np.zeros((m,1)))\n        for i in range(numIter):\n            bestStump,error,classEst = self._buildStump(dataArr, classLabels, D)\n            print(\"D:\",D.T)\n            alpha = float(0.5*np.log((1.0-error)/max(error,1e-16)))\n            bestStump['alpha'] = alpha\n            weakClassArr.append(bestStump)\n            print(\"classEst:\",classEst.T)\n            expon = np.multiply(-1*alpha*np.mat(classLabels).T,classEst)\n            D = np.multiply(D,np.exp(expon))\n            D = D/D.sum()\n            aggClassEst += alpha*classEst\n            print(\"aggClassEst:\",aggClassEst.T)\n            aggErrors = np.multiply(np.sign(aggClassEst) != np.mat(classLabels).T,np.ones((m,1)))\n            errorRate = aggErrors.sum()/m\n            print(\"total error:\",errorRate,\"\\n\")\n            if errorRate == 0.0:\n                break\n        return weakClassArr,aggClassEst\n    \n    def adaClassify(self,dataToClass,classifierArr):\n        \"\"\"AdaBoost分类函数\"\"\"\n        dataMatrix = np.mat(dataToClass)\n        m = np.shape(dataMatrix)[0]\n        aggClassEstimate = np.mat(np.zeros((m,1)))\n        for i in range(len(classifierArr)):\n            classEstimate = self.stumpClassify(dataMatrix, \n                                          classifierArr[i]['dimension'],\n                                          classifierArr[i]['threshold'],\n                                          classifierArr[i]['inequal'])\n            aggClassEstimate += classifierArr[i]['alpha'] * classEstimate\n            print(aggClassEstimate)\n        return np.sign(aggClassEstimate)\n```\n\n(未完待续)","slug":"machine-learning-adaboost","published":1,"updated":"2019-01-19T07:23:57.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aqa0036j1q0dkqrjutw","content":"<p>AdaBoost（adaptive boosting）算法是提升（boosting）方法的一个最流行版本，1995年由Freund和Schapire提出。其基本思想是使用多个弱分类器（即分类器的性能并不好，错误率较高）来构建一个强分类器。</p>\n<a id=\"more\"></a>\n<h3 id=\"运行过程\"><a href=\"#运行过程\" class=\"headerlink\" title=\"运行过程\"></a>运行过程</h3><p>训练数据集中的每个样本，并赋予其一个权重，这些权重构成了向量D。一开始，这些权重都初始化成相等值。首先在训练数据集上训练出一个弱分类器并计算该分类器的错误率，然后在同一数据集上再次训练弱分类器。在分类器的第二次训练中，将会重新调整每个样本的权重，其中第一次分对的样本的权重将会降低，而第一次分错的样本的权重将会提高。为了从所有弱分类器中得到最终的分类结果，AdaBoost为每个分类器都分配了一个权重值$\\alpha$，这些$\\alpha$值是基于每个若分类器的错误率进行计算的。</p>\n<p>错误率$\\epsilon$的定义如下：<br>$$<br>\\epsilon = \\frac{未正确分类的样本数目}{所有样本数目}<br>$$<br>$\\alpha$的计算公式如下：<br>$$<br>\\alpha = \\frac{1}{2} \\ln (\\frac{1-\\epsilon}{\\epsilon})<br>$$<br>计算出$\\alpha$值后，需要更新权重向量D，以使得那些正确分类的样本的权重降低而错分样本的权重升高。</p>\n<p>D的计算方法如下：<br>$$<br>D_{i} ^{ ( t+1) } =<br>\\begin{cases}<br>\\frac { D_{i} ^{ (t) } e^{-\\alpha} } { sum(D) }, &amp; i分类正确 \\\\<br>\\frac{ D_{i} ^{ (t) } e^{\\alpha} }{ sum(D) }, &amp; i分类错误<br>\\end{cases}<br>$$<br>在计算出D之后，AdaBoost又开始进入下一轮迭代。AdaBoost算法会不断地重复训练分类器和调整权重的过程，直到训练错误率为0或者弱分类器的数目达到用户的指定值为止。</p>\n<p>$\\alpha$作为每个分类器分类结果$G_{m}(x)$的权重，对所有分类器的加权分类结果进行累加求和，<br>$$<br>f(x) = \\sum_{m=1}^{N} \\alpha_{m} G_{m}(x)<br>$$<br>从而得到最终的分类器</p>\n<p>$$<br>G(x) = sign(f(x)) = sign( \\sum_{m=1}^{N} \\alpha_{m} G_{m}(x) )<br>$$</p>\n<h3 id=\"AdaBoost的例子\"><a href=\"#AdaBoost的例子\" class=\"headerlink\" title=\"AdaBoost的例子\"></a>AdaBoost的例子</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">5</th>\n<th style=\"text-align:center\">6</th>\n<th style=\"text-align:center\">7</th>\n<th style=\"text-align:center\">8</th>\n<th style=\"text-align:center\">9</th>\n<th>10</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">8</td>\n<td>9</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">-1</td>\n<td style=\"text-align:center\">-1</td>\n<td style=\"text-align:center\">-1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td>-1</td>\n</tr>\n</tbody>\n</table>\n<p>可选的阈值有2.5，5.5和8.5</p>\n<p>若阈值为2.5，则7、8、9分类错误，分类错误率为$e = \\frac {3}{10}$</p>\n<p>若阈值为5.5，</p>\n<p>a.<br>$$<br>G(x) =<br>\\begin{cases}<br>1, &amp; x &lt; 5.5 \\\\<br>-1, &amp; x &gt; 5.5<br>\\end{cases}<br>$$<br>此时，4、5、６以及7、８、９分类错误，分类误差率为$e = \\frac {6}{10}$</p>\n<p>b.<br>$$<br>G(x) =<br>\\begin{cases}<br>1, &amp; x &gt; 5.5 \\\\<br>-1, &amp; x &lt; 5.5<br>\\end{cases}<br>$$<br>此时，1、2、3和10分类错误，分类误差率为$e = \\frac {4} {10}$</p>\n<p>因此，最低误差率为0.4</p>\n<p>若阈值为8.5，</p>\n<p>a.<br>$$<br>G(x) =<br>\\begin{cases}<br>1, &amp; x &lt; 8.5 \\\\<br>-1, &amp; x &gt; 8.5<br>\\end{cases}<br>$$<br>此时，4、5、6分类错误，分类误差率为$e = \\frac {3} {10}$</p>\n<p>可以看到当阈值为2.5或8.5时，分类误差率最低，因此，我们可任取其中一个阈值，比如2.5。</p>\n<p>基本分类器<br>$$<br>G(x) =<br>\\begin{cases}<br>1, &amp; x &lt; 2.5 \\\\<br>-1, &amp; x &gt; 2.5<br>\\end{cases}<br>$$</p>\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><p>我们可以选择任一分类器作为AdaBoost算法的弱分类器，这里选择单层决策树（decision stump）作为弱分类器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">基于单层决策树的AdaBoost分类器</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdaBoost</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loadDataSet</span><span class=\"params\">(self,filename)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        从文件中导入数据集</span></span><br><span class=\"line\"><span class=\"string\">        filename : 文件名</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        dataMat = []</span><br><span class=\"line\">        labelMat = []</span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(filename) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file.readlines():</span><br><span class=\"line\">                numFeature = len(line.split(<span class=\"string\">'\\t'</span>))</span><br><span class=\"line\">                lineArr = []</span><br><span class=\"line\">                currentLine = line.strip().split(<span class=\"string\">\"\\t\"</span>)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(numFeature<span class=\"number\">-1</span>):</span><br><span class=\"line\">                    lineArr.append(float(currentLine[i]))</span><br><span class=\"line\">                dataMat.append(lineArr)</span><br><span class=\"line\">                labelMat.append(float(currentLine[<span class=\"number\">-1</span>]))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataMat,labelMat</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_stumpClassify</span><span class=\"params\">(self,dataMatrix,dimension,threshold,thresholdInequality)</span>:</span></span><br><span class=\"line\">        arr = np.ones((np.shape(dataMatrix)[<span class=\"number\">0</span>],<span class=\"number\">1</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thresholdInequality == <span class=\"string\">'lt'</span>:</span><br><span class=\"line\">            arr[dataMatrix[:,dimension] &lt;= threshold] = <span class=\"number\">-1.0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            arr[dataMatrix[:,dimension] &gt; threshold] = <span class=\"number\">-1.0</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_buildStump</span><span class=\"params\">(self,dataArr,classLabels,D)</span>:</span></span><br><span class=\"line\">        dataMatrix = np.mat(dataArr)</span><br><span class=\"line\">        labelMat = np.mat(classLabels).T</span><br><span class=\"line\">        m,n = np.shape(dataMatrix)</span><br><span class=\"line\">        numSteps = <span class=\"number\">10.0</span></span><br><span class=\"line\">        bestStump = &#123;&#125;</span><br><span class=\"line\">        bestClassEst = np.mat(np.zeros((m,<span class=\"number\">1</span>)))</span><br><span class=\"line\">        minError = np.inf</span><br><span class=\"line\">        <span class=\"comment\"># 遍历每一个特征</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            rangeMin = dataMatrix[:,i].min()</span><br><span class=\"line\">            rangeMax = dataMatrix[:,i].max()</span><br><span class=\"line\">            stepSize = (rangeMax-rangeMin)/numSteps</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">-1</span>,int(numSteps)+<span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> inequal <span class=\"keyword\">in</span> [<span class=\"string\">'lt'</span>,<span class=\"string\">'gt'</span>]:</span><br><span class=\"line\">                    threshold = (rangeMin + float(j) * stepSize)</span><br><span class=\"line\">                    predictedVals = self._stumpClassify(dataMatrix,i,threshold,inequal)</span><br><span class=\"line\">                    errArr = np.mat(np.ones((m,<span class=\"number\">1</span>)))</span><br><span class=\"line\">                    errArr[predictedVals == labelMat] = <span class=\"number\">0</span></span><br><span class=\"line\">                    weightedError = D.T * errArr</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> weightedError &lt; minError:</span><br><span class=\"line\">                        minError = weightedError</span><br><span class=\"line\">                        bestClassEst = predictedVals.copy()</span><br><span class=\"line\">                        bestStump[<span class=\"string\">'dimension'</span>] = i</span><br><span class=\"line\">                        bestStump[<span class=\"string\">'threshold'</span>] = threshold</span><br><span class=\"line\">                        bestStump[<span class=\"string\">'inequal'</span>] = inequal</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bestStump,minError,bestClassEst</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">adaBoostTrainDS</span><span class=\"params\">(self,dataArr,classLabels,numIter=<span class=\"number\">40</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"AdaBoost训练过程\"\"\"</span></span><br><span class=\"line\">        weakClassArr = []</span><br><span class=\"line\">        m = np.shape(dataArr)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        D = np.mat(np.ones((m,<span class=\"number\">1</span>))/m)</span><br><span class=\"line\">        aggClassEst = np.mat(np.zeros((m,<span class=\"number\">1</span>)))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(numIter):</span><br><span class=\"line\">            bestStump,error,classEst = self._buildStump(dataArr, classLabels, D)</span><br><span class=\"line\">            print(<span class=\"string\">\"D:\"</span>,D.T)</span><br><span class=\"line\">            alpha = float(<span class=\"number\">0.5</span>*np.log((<span class=\"number\">1.0</span>-error)/max(error,<span class=\"number\">1e-16</span>)))</span><br><span class=\"line\">            bestStump[<span class=\"string\">'alpha'</span>] = alpha</span><br><span class=\"line\">            weakClassArr.append(bestStump)</span><br><span class=\"line\">            print(<span class=\"string\">\"classEst:\"</span>,classEst.T)</span><br><span class=\"line\">            expon = np.multiply(<span class=\"number\">-1</span>*alpha*np.mat(classLabels).T,classEst)</span><br><span class=\"line\">            D = np.multiply(D,np.exp(expon))</span><br><span class=\"line\">            D = D/D.sum()</span><br><span class=\"line\">            aggClassEst += alpha*classEst</span><br><span class=\"line\">            print(<span class=\"string\">\"aggClassEst:\"</span>,aggClassEst.T)</span><br><span class=\"line\">            aggErrors = np.multiply(np.sign(aggClassEst) != np.mat(classLabels).T,np.ones((m,<span class=\"number\">1</span>)))</span><br><span class=\"line\">            errorRate = aggErrors.sum()/m</span><br><span class=\"line\">            print(<span class=\"string\">\"total error:\"</span>,errorRate,<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> errorRate == <span class=\"number\">0.0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> weakClassArr,aggClassEst</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">adaClassify</span><span class=\"params\">(self,dataToClass,classifierArr)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"AdaBoost分类函数\"\"\"</span></span><br><span class=\"line\">        dataMatrix = np.mat(dataToClass)</span><br><span class=\"line\">        m = np.shape(dataMatrix)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        aggClassEstimate = np.mat(np.zeros((m,<span class=\"number\">1</span>)))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(classifierArr)):</span><br><span class=\"line\">            classEstimate = self.stumpClassify(dataMatrix, </span><br><span class=\"line\">                                          classifierArr[i][<span class=\"string\">'dimension'</span>],</span><br><span class=\"line\">                                          classifierArr[i][<span class=\"string\">'threshold'</span>],</span><br><span class=\"line\">                                          classifierArr[i][<span class=\"string\">'inequal'</span>])</span><br><span class=\"line\">            aggClassEstimate += classifierArr[i][<span class=\"string\">'alpha'</span>] * classEstimate</span><br><span class=\"line\">            print(aggClassEstimate)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> np.sign(aggClassEstimate)</span><br></pre></td></tr></table></figure>\n<p>(未完待续)</p>\n","site":{"data":{}},"excerpt":"<p>AdaBoost（adaptive boosting）算法是提升（boosting）方法的一个最流行版本，1995年由Freund和Schapire提出。其基本思想是使用多个弱分类器（即分类器的性能并不好，错误率较高）来构建一个强分类器。</p>","more":"<h3 id=\"运行过程\"><a href=\"#运行过程\" class=\"headerlink\" title=\"运行过程\"></a>运行过程</h3><p>训练数据集中的每个样本，并赋予其一个权重，这些权重构成了向量D。一开始，这些权重都初始化成相等值。首先在训练数据集上训练出一个弱分类器并计算该分类器的错误率，然后在同一数据集上再次训练弱分类器。在分类器的第二次训练中，将会重新调整每个样本的权重，其中第一次分对的样本的权重将会降低，而第一次分错的样本的权重将会提高。为了从所有弱分类器中得到最终的分类结果，AdaBoost为每个分类器都分配了一个权重值$\\alpha$，这些$\\alpha$值是基于每个若分类器的错误率进行计算的。</p>\n<p>错误率$\\epsilon$的定义如下：<br>$$<br>\\epsilon = \\frac{未正确分类的样本数目}{所有样本数目}<br>$$<br>$\\alpha$的计算公式如下：<br>$$<br>\\alpha = \\frac{1}{2} \\ln (\\frac{1-\\epsilon}{\\epsilon})<br>$$<br>计算出$\\alpha$值后，需要更新权重向量D，以使得那些正确分类的样本的权重降低而错分样本的权重升高。</p>\n<p>D的计算方法如下：<br>$$<br>D_{i} ^{ ( t+1) } =<br>\\begin{cases}<br>\\frac { D_{i} ^{ (t) } e^{-\\alpha} } { sum(D) }, &amp; i分类正确 \\\\<br>\\frac{ D_{i} ^{ (t) } e^{\\alpha} }{ sum(D) }, &amp; i分类错误<br>\\end{cases}<br>$$<br>在计算出D之后，AdaBoost又开始进入下一轮迭代。AdaBoost算法会不断地重复训练分类器和调整权重的过程，直到训练错误率为0或者弱分类器的数目达到用户的指定值为止。</p>\n<p>$\\alpha$作为每个分类器分类结果$G_{m}(x)$的权重，对所有分类器的加权分类结果进行累加求和，<br>$$<br>f(x) = \\sum_{m=1}^{N} \\alpha_{m} G_{m}(x)<br>$$<br>从而得到最终的分类器</p>\n<p>$$<br>G(x) = sign(f(x)) = sign( \\sum_{m=1}^{N} \\alpha_{m} G_{m}(x) )<br>$$</p>\n<h3 id=\"AdaBoost的例子\"><a href=\"#AdaBoost的例子\" class=\"headerlink\" title=\"AdaBoost的例子\"></a>AdaBoost的例子</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">序号</th>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">5</th>\n<th style=\"text-align:center\">6</th>\n<th style=\"text-align:center\">7</th>\n<th style=\"text-align:center\">8</th>\n<th style=\"text-align:center\">9</th>\n<th>10</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">8</td>\n<td>9</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">y</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">-1</td>\n<td style=\"text-align:center\">-1</td>\n<td style=\"text-align:center\">-1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td>-1</td>\n</tr>\n</tbody>\n</table>\n<p>可选的阈值有2.5，5.5和8.5</p>\n<p>若阈值为2.5，则7、8、9分类错误，分类错误率为$e = \\frac {3}{10}$</p>\n<p>若阈值为5.5，</p>\n<p>a.<br>$$<br>G(x) =<br>\\begin{cases}<br>1, &amp; x &lt; 5.5 \\\\<br>-1, &amp; x &gt; 5.5<br>\\end{cases}<br>$$<br>此时，4、5、６以及7、８、９分类错误，分类误差率为$e = \\frac {6}{10}$</p>\n<p>b.<br>$$<br>G(x) =<br>\\begin{cases}<br>1, &amp; x &gt; 5.5 \\\\<br>-1, &amp; x &lt; 5.5<br>\\end{cases}<br>$$<br>此时，1、2、3和10分类错误，分类误差率为$e = \\frac {4} {10}$</p>\n<p>因此，最低误差率为0.4</p>\n<p>若阈值为8.5，</p>\n<p>a.<br>$$<br>G(x) =<br>\\begin{cases}<br>1, &amp; x &lt; 8.5 \\\\<br>-1, &amp; x &gt; 8.5<br>\\end{cases}<br>$$<br>此时，4、5、6分类错误，分类误差率为$e = \\frac {3} {10}$</p>\n<p>可以看到当阈值为2.5或8.5时，分类误差率最低，因此，我们可任取其中一个阈值，比如2.5。</p>\n<p>基本分类器<br>$$<br>G(x) =<br>\\begin{cases}<br>1, &amp; x &lt; 2.5 \\\\<br>-1, &amp; x &gt; 2.5<br>\\end{cases}<br>$$</p>\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><p>我们可以选择任一分类器作为AdaBoost算法的弱分类器，这里选择单层决策树（decision stump）作为弱分类器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">基于单层决策树的AdaBoost分类器</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdaBoost</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loadDataSet</span><span class=\"params\">(self,filename)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        从文件中导入数据集</span></span><br><span class=\"line\"><span class=\"string\">        filename : 文件名</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        dataMat = []</span><br><span class=\"line\">        labelMat = []</span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(filename) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file.readlines():</span><br><span class=\"line\">                numFeature = len(line.split(<span class=\"string\">'\\t'</span>))</span><br><span class=\"line\">                lineArr = []</span><br><span class=\"line\">                currentLine = line.strip().split(<span class=\"string\">\"\\t\"</span>)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(numFeature<span class=\"number\">-1</span>):</span><br><span class=\"line\">                    lineArr.append(float(currentLine[i]))</span><br><span class=\"line\">                dataMat.append(lineArr)</span><br><span class=\"line\">                labelMat.append(float(currentLine[<span class=\"number\">-1</span>]))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataMat,labelMat</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_stumpClassify</span><span class=\"params\">(self,dataMatrix,dimension,threshold,thresholdInequality)</span>:</span></span><br><span class=\"line\">        arr = np.ones((np.shape(dataMatrix)[<span class=\"number\">0</span>],<span class=\"number\">1</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thresholdInequality == <span class=\"string\">'lt'</span>:</span><br><span class=\"line\">            arr[dataMatrix[:,dimension] &lt;= threshold] = <span class=\"number\">-1.0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            arr[dataMatrix[:,dimension] &gt; threshold] = <span class=\"number\">-1.0</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_buildStump</span><span class=\"params\">(self,dataArr,classLabels,D)</span>:</span></span><br><span class=\"line\">        dataMatrix = np.mat(dataArr)</span><br><span class=\"line\">        labelMat = np.mat(classLabels).T</span><br><span class=\"line\">        m,n = np.shape(dataMatrix)</span><br><span class=\"line\">        numSteps = <span class=\"number\">10.0</span></span><br><span class=\"line\">        bestStump = &#123;&#125;</span><br><span class=\"line\">        bestClassEst = np.mat(np.zeros((m,<span class=\"number\">1</span>)))</span><br><span class=\"line\">        minError = np.inf</span><br><span class=\"line\">        <span class=\"comment\"># 遍历每一个特征</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            rangeMin = dataMatrix[:,i].min()</span><br><span class=\"line\">            rangeMax = dataMatrix[:,i].max()</span><br><span class=\"line\">            stepSize = (rangeMax-rangeMin)/numSteps</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">-1</span>,int(numSteps)+<span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> inequal <span class=\"keyword\">in</span> [<span class=\"string\">'lt'</span>,<span class=\"string\">'gt'</span>]:</span><br><span class=\"line\">                    threshold = (rangeMin + float(j) * stepSize)</span><br><span class=\"line\">                    predictedVals = self._stumpClassify(dataMatrix,i,threshold,inequal)</span><br><span class=\"line\">                    errArr = np.mat(np.ones((m,<span class=\"number\">1</span>)))</span><br><span class=\"line\">                    errArr[predictedVals == labelMat] = <span class=\"number\">0</span></span><br><span class=\"line\">                    weightedError = D.T * errArr</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> weightedError &lt; minError:</span><br><span class=\"line\">                        minError = weightedError</span><br><span class=\"line\">                        bestClassEst = predictedVals.copy()</span><br><span class=\"line\">                        bestStump[<span class=\"string\">'dimension'</span>] = i</span><br><span class=\"line\">                        bestStump[<span class=\"string\">'threshold'</span>] = threshold</span><br><span class=\"line\">                        bestStump[<span class=\"string\">'inequal'</span>] = inequal</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bestStump,minError,bestClassEst</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">adaBoostTrainDS</span><span class=\"params\">(self,dataArr,classLabels,numIter=<span class=\"number\">40</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"AdaBoost训练过程\"\"\"</span></span><br><span class=\"line\">        weakClassArr = []</span><br><span class=\"line\">        m = np.shape(dataArr)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        D = np.mat(np.ones((m,<span class=\"number\">1</span>))/m)</span><br><span class=\"line\">        aggClassEst = np.mat(np.zeros((m,<span class=\"number\">1</span>)))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(numIter):</span><br><span class=\"line\">            bestStump,error,classEst = self._buildStump(dataArr, classLabels, D)</span><br><span class=\"line\">            print(<span class=\"string\">\"D:\"</span>,D.T)</span><br><span class=\"line\">            alpha = float(<span class=\"number\">0.5</span>*np.log((<span class=\"number\">1.0</span>-error)/max(error,<span class=\"number\">1e-16</span>)))</span><br><span class=\"line\">            bestStump[<span class=\"string\">'alpha'</span>] = alpha</span><br><span class=\"line\">            weakClassArr.append(bestStump)</span><br><span class=\"line\">            print(<span class=\"string\">\"classEst:\"</span>,classEst.T)</span><br><span class=\"line\">            expon = np.multiply(<span class=\"number\">-1</span>*alpha*np.mat(classLabels).T,classEst)</span><br><span class=\"line\">            D = np.multiply(D,np.exp(expon))</span><br><span class=\"line\">            D = D/D.sum()</span><br><span class=\"line\">            aggClassEst += alpha*classEst</span><br><span class=\"line\">            print(<span class=\"string\">\"aggClassEst:\"</span>,aggClassEst.T)</span><br><span class=\"line\">            aggErrors = np.multiply(np.sign(aggClassEst) != np.mat(classLabels).T,np.ones((m,<span class=\"number\">1</span>)))</span><br><span class=\"line\">            errorRate = aggErrors.sum()/m</span><br><span class=\"line\">            print(<span class=\"string\">\"total error:\"</span>,errorRate,<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> errorRate == <span class=\"number\">0.0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> weakClassArr,aggClassEst</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">adaClassify</span><span class=\"params\">(self,dataToClass,classifierArr)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"AdaBoost分类函数\"\"\"</span></span><br><span class=\"line\">        dataMatrix = np.mat(dataToClass)</span><br><span class=\"line\">        m = np.shape(dataMatrix)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        aggClassEstimate = np.mat(np.zeros((m,<span class=\"number\">1</span>)))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(classifierArr)):</span><br><span class=\"line\">            classEstimate = self.stumpClassify(dataMatrix, </span><br><span class=\"line\">                                          classifierArr[i][<span class=\"string\">'dimension'</span>],</span><br><span class=\"line\">                                          classifierArr[i][<span class=\"string\">'threshold'</span>],</span><br><span class=\"line\">                                          classifierArr[i][<span class=\"string\">'inequal'</span>])</span><br><span class=\"line\">            aggClassEstimate += classifierArr[i][<span class=\"string\">'alpha'</span>] * classEstimate</span><br><span class=\"line\">            print(aggClassEstimate)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> np.sign(aggClassEstimate)</span><br></pre></td></tr></table></figure>\n<p>(未完待续)</p>"},{"title":"机器学习之Apriori算法","date":"2018-08-23T10:58:22.000Z","updated":"2018-08-23T13:38:20.000Z","mathjax":true,"_content":"\n支持度(support)：数据集中包含该项集的记录所占的比例。\n\n可信度或置信度（confidence）：\n\n$A \\rightarrow B$的置信度为\n$$\nconfidence（A\\rightarrow B） = \\frac{support(A , B)}{support(A)}\n$$\nApriori原理：如果一个项集是非频繁的，那么它的所有超集也是非频繁的。\n\n<blockquote class=\"blockquote-center\">\n    If an itemset is not frequent, any of its superset is never frequent.     \n</blockquote>\n\nApriori算法\n\n1.从大小为k的频繁项集中生成大小为k+1的候选频繁项集$C_{k+1}$\n\n2.扫描数据库，计算每一个候选频繁项集的支持度\n\n3.将满足最小支持度的频繁项集加到$F_{k+1}$中\n$$\n\\begin{align}\n\\hline \n& 算法\\ Apriori \\\\\\\\\n\\hline \\\\\\\\\n& F_1 = (大小为1的频繁项集); \\\\\\\\\n& for(k = 1; F_k \\neq \\varnothing; k++)\\ do\\ begin \\\\\\\\\n& \\qquad C_{k+1} = apriori-gen(F_k);//新的候选频繁集 \\\\\\\\\n& \\qquad for\\ 所有的交易记录t \\in 数据集\\ do\\ begin \\\\\\\\\n& \\qquad \\qquad C_{t}^{'}= subset(C_{k+1},t);\\ //包含在t中的候选集 \\\\\\\\\n& \\qquad \\qquad for\\ 所有的候选c \\in C_{t}^{'}\\ do \\\\\\\\\n& \\qquad \\qquad \\qquad c.count ++; \\\\\\\\\n& \\qquad \\qquad end \\\\\\\\\n& \\qquad \\qquad F_{k+1} = \\\\{C \\in C_{k+1} |\\ c.count \\geq 最小的支持度 \\\\} \\\\\\\\\n& \\qquad end \\\\\\\\\n& end \\\\\\\\\n& Answer \\cup_{k} F_k;\n\\end{align}\n$$\n算法第三行中的apriori-gen函数经过下面两步，从$F_k$生成$C_{k+1}$\n\n1.连接\n\n通过合并两个大小为k，且前$k-1$项相同的频繁项集$P_k$和$Q_k$，生成大小为k+1的频繁项集$R_{k+1}$\n$$\n\\begin{align}\n& R_{k+1} = P_{k} \\cup Q_{k} = \\\\{items_{1},\\dots ,items_{k-1},items_{k},items_{k^{'}}\\\\} \\\\\\\\\n& P_{k} = \\\\{items_{1},\\dots ,items_{k-1},items_{k}\\\\} \\\\\\\\\n& Q_{k} = \\\\{items_{1},\\dots ,items_{k-1},items_{k^{'}}\\\\}\n\\end{align}\n$$\n其中，$items_1 < \\dots < items_k < items_{k^{'}}$\n\n2.剪枝\n\n检查$R_{k+1}$中的所有大小为的项集中的所有大小为的项集是不是频繁的，删除中的所有大小为的项集中的所有大小为k的项集是不是频繁的，删除$R_{k+1}$中那些非频繁的项集，从而得到中那些非频繁的项集，从而得到$C_{k+1}$。因为$C_{k+1}$中大小为且非频繁的所有子集不是大小为中大小为k且非频繁的所有子集不是大小为k+1的频繁项集的子集。\n\n示例：\n\n假设最小支持度为2\n\n数据库D\n\n| TID  |             Items              |\n| :--: | :----------------------------: |\n| 100  |      $1 \\quad 3 \\quad 4$       |\n| 200  |      $2 \\quad 3 \\quad 5$       |\n| 300  | $1 \\quad 2  \\quad  3 \\quad  5$ |\n| 400  |          $2 \\quad 5$           |\n\n$C_1$\n\n|      |      |\n| :--: | :--: |\n| {1}  |  2   |\n| {2}  |  3   |\n| {3}  |  3   |\n| {4}  |  1   |\n| {5}  |  3   |\n\n$F_1$\n\n| 项集 | 支持度 |\n| :--: | :----: |\n| {1}  |   2    |\n| {2}  |   3    |\n| {3}  |   3    |\n| {5}  |   3    |\n\n$C_2$\n\n|   项集   | 支持度 |\n| :------: | :----: |\n| { 1, 2 } |   1    |\n| { 1, 3 } |   2    |\n| { 1, 5 } |   1    |\n| { 2, 3 } |   2    |\n| { 2, 5 } |   3    |\n| { 3, 5 } |   2    |\n\n$F_2$\n\n|   项集   | 支持度 |\n| :------: | :----: |\n| { 1, 3 } |   2    |\n| { 2, 3 } |   2    |\n| { 2, 5 } |   3    |\n| { 3, 5 } |   2    |\n\n$C_3$\n\n|     项集      | 支持度 |\n| :-----------: | :----: |\n| { 1 , 2 , 3 } |   1    |\n| { 1 , 2 , 5 } |   1    |\n| { 1 , 3 , 5 } |   1    |\n| { 2 , 3 , 5 } |   2    |\n\n$F_3$\n\n|     项集      | 支持度 |\n| :-----------: | :----: |\n| { 2 , 3 , 5 } |   2    |\n\n","source":"_posts/machine-learning-apriori.md","raw":"---\ntitle: 机器学习之Apriori算法\ndate: 2018-08-23 18:58:22\ntags: 关联分析\ncategories: 机器学习\nupdated: 2018-08-23 21:38:20\nmathjax: true\n---\n\n支持度(support)：数据集中包含该项集的记录所占的比例。\n\n可信度或置信度（confidence）：\n\n$A \\rightarrow B$的置信度为\n$$\nconfidence（A\\rightarrow B） = \\frac{support(A , B)}{support(A)}\n$$\nApriori原理：如果一个项集是非频繁的，那么它的所有超集也是非频繁的。\n\n<blockquote class=\"blockquote-center\">\n    If an itemset is not frequent, any of its superset is never frequent.     \n</blockquote>\n\nApriori算法\n\n1.从大小为k的频繁项集中生成大小为k+1的候选频繁项集$C_{k+1}$\n\n2.扫描数据库，计算每一个候选频繁项集的支持度\n\n3.将满足最小支持度的频繁项集加到$F_{k+1}$中\n$$\n\\begin{align}\n\\hline \n& 算法\\ Apriori \\\\\\\\\n\\hline \\\\\\\\\n& F_1 = (大小为1的频繁项集); \\\\\\\\\n& for(k = 1; F_k \\neq \\varnothing; k++)\\ do\\ begin \\\\\\\\\n& \\qquad C_{k+1} = apriori-gen(F_k);//新的候选频繁集 \\\\\\\\\n& \\qquad for\\ 所有的交易记录t \\in 数据集\\ do\\ begin \\\\\\\\\n& \\qquad \\qquad C_{t}^{'}= subset(C_{k+1},t);\\ //包含在t中的候选集 \\\\\\\\\n& \\qquad \\qquad for\\ 所有的候选c \\in C_{t}^{'}\\ do \\\\\\\\\n& \\qquad \\qquad \\qquad c.count ++; \\\\\\\\\n& \\qquad \\qquad end \\\\\\\\\n& \\qquad \\qquad F_{k+1} = \\\\{C \\in C_{k+1} |\\ c.count \\geq 最小的支持度 \\\\} \\\\\\\\\n& \\qquad end \\\\\\\\\n& end \\\\\\\\\n& Answer \\cup_{k} F_k;\n\\end{align}\n$$\n算法第三行中的apriori-gen函数经过下面两步，从$F_k$生成$C_{k+1}$\n\n1.连接\n\n通过合并两个大小为k，且前$k-1$项相同的频繁项集$P_k$和$Q_k$，生成大小为k+1的频繁项集$R_{k+1}$\n$$\n\\begin{align}\n& R_{k+1} = P_{k} \\cup Q_{k} = \\\\{items_{1},\\dots ,items_{k-1},items_{k},items_{k^{'}}\\\\} \\\\\\\\\n& P_{k} = \\\\{items_{1},\\dots ,items_{k-1},items_{k}\\\\} \\\\\\\\\n& Q_{k} = \\\\{items_{1},\\dots ,items_{k-1},items_{k^{'}}\\\\}\n\\end{align}\n$$\n其中，$items_1 < \\dots < items_k < items_{k^{'}}$\n\n2.剪枝\n\n检查$R_{k+1}$中的所有大小为的项集中的所有大小为的项集是不是频繁的，删除中的所有大小为的项集中的所有大小为k的项集是不是频繁的，删除$R_{k+1}$中那些非频繁的项集，从而得到中那些非频繁的项集，从而得到$C_{k+1}$。因为$C_{k+1}$中大小为且非频繁的所有子集不是大小为中大小为k且非频繁的所有子集不是大小为k+1的频繁项集的子集。\n\n示例：\n\n假设最小支持度为2\n\n数据库D\n\n| TID  |             Items              |\n| :--: | :----------------------------: |\n| 100  |      $1 \\quad 3 \\quad 4$       |\n| 200  |      $2 \\quad 3 \\quad 5$       |\n| 300  | $1 \\quad 2  \\quad  3 \\quad  5$ |\n| 400  |          $2 \\quad 5$           |\n\n$C_1$\n\n|      |      |\n| :--: | :--: |\n| {1}  |  2   |\n| {2}  |  3   |\n| {3}  |  3   |\n| {4}  |  1   |\n| {5}  |  3   |\n\n$F_1$\n\n| 项集 | 支持度 |\n| :--: | :----: |\n| {1}  |   2    |\n| {2}  |   3    |\n| {3}  |   3    |\n| {5}  |   3    |\n\n$C_2$\n\n|   项集   | 支持度 |\n| :------: | :----: |\n| { 1, 2 } |   1    |\n| { 1, 3 } |   2    |\n| { 1, 5 } |   1    |\n| { 2, 3 } |   2    |\n| { 2, 5 } |   3    |\n| { 3, 5 } |   2    |\n\n$F_2$\n\n|   项集   | 支持度 |\n| :------: | :----: |\n| { 1, 3 } |   2    |\n| { 2, 3 } |   2    |\n| { 2, 5 } |   3    |\n| { 3, 5 } |   2    |\n\n$C_3$\n\n|     项集      | 支持度 |\n| :-----------: | :----: |\n| { 1 , 2 , 3 } |   1    |\n| { 1 , 2 , 5 } |   1    |\n| { 1 , 3 , 5 } |   1    |\n| { 2 , 3 , 5 } |   2    |\n\n$F_3$\n\n|     项集      | 支持度 |\n| :-----------: | :----: |\n| { 2 , 3 , 5 } |   2    |\n\n","slug":"machine-learning-apriori","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aqc0038j1q0mvlvgbpt","content":"<p>支持度(support)：数据集中包含该项集的记录所占的比例。</p>\n<p>可信度或置信度（confidence）：</p>\n<p>$A \\rightarrow B$的置信度为<br>$$<br>confidence（A\\rightarrow B） = \\frac{support(A , B)}{support(A)}<br>$$<br>Apriori原理：如果一个项集是非频繁的，那么它的所有超集也是非频繁的。</p>\n<blockquote class=\"blockquote-center\"><br>    If an itemset is not frequent, any of its superset is never frequent.<br></blockquote>\n\n<p>Apriori算法</p>\n<p>1.从大小为k的频繁项集中生成大小为k+1的候选频繁项集$C_{k+1}$</p>\n<p>2.扫描数据库，计算每一个候选频繁项集的支持度</p>\n<p>3.将满足最小支持度的频繁项集加到$F_{k+1}$中<br>$$<br>\\begin{align}<br>\\hline<br>&amp; 算法\\ Apriori \\\\<br>\\hline \\\\<br>&amp; F_1 = (大小为1的频繁项集); \\\\<br>&amp; for(k = 1; F_k \\neq \\varnothing; k++)\\ do\\ begin \\\\<br>&amp; \\qquad C_{k+1} = apriori-gen(F_k);//新的候选频繁集 \\\\<br>&amp; \\qquad for\\ 所有的交易记录t \\in 数据集\\ do\\ begin \\\\<br>&amp; \\qquad \\qquad C_{t}^{‘}= subset(C_{k+1},t);\\ //包含在t中的候选集 \\\\<br>&amp; \\qquad \\qquad for\\ 所有的候选c \\in C_{t}^{‘}\\ do \\\\<br>&amp; \\qquad \\qquad \\qquad c.count ++; \\\\<br>&amp; \\qquad \\qquad end \\\\<br>&amp; \\qquad \\qquad F_{k+1} = \\{C \\in C_{k+1} |\\ c.count \\geq 最小的支持度 \\} \\\\<br>&amp; \\qquad end \\\\<br>&amp; end \\\\<br>&amp; Answer \\cup_{k} F_k;<br>\\end{align}<br>$$<br>算法第三行中的apriori-gen函数经过下面两步，从$F_k$生成$C_{k+1}$</p>\n<p>1.连接</p>\n<p>通过合并两个大小为k，且前$k-1$项相同的频繁项集$P_k$和$Q_k$，生成大小为k+1的频繁项集$R_{k+1}$<br>$$<br>\\begin{align}<br>&amp; R_{k+1} = P_{k} \\cup Q_{k} = \\{items_{1},\\dots ,items_{k-1},items_{k},items_{k^{‘}}\\} \\\\<br>&amp; P_{k} = \\{items_{1},\\dots ,items_{k-1},items_{k}\\} \\\\<br>&amp; Q_{k} = \\{items_{1},\\dots ,items_{k-1},items_{k^{‘}}\\}<br>\\end{align}<br>$$<br>其中，$items_1 &lt; \\dots &lt; items_k &lt; items_{k^{‘}}$</p>\n<p>2.剪枝</p>\n<p>检查$R_{k+1}$中的所有大小为的项集中的所有大小为的项集是不是频繁的，删除中的所有大小为的项集中的所有大小为k的项集是不是频繁的，删除$R_{k+1}$中那些非频繁的项集，从而得到中那些非频繁的项集，从而得到$C_{k+1}$。因为$C_{k+1}$中大小为且非频繁的所有子集不是大小为中大小为k且非频繁的所有子集不是大小为k+1的频繁项集的子集。</p>\n<p>示例：</p>\n<p>假设最小支持度为2</p>\n<p>数据库D</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">TID</th>\n<th style=\"text-align:center\">Items</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">100</td>\n<td style=\"text-align:center\">$1 \\quad 3 \\quad 4$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">200</td>\n<td style=\"text-align:center\">$2 \\quad 3 \\quad 5$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">300</td>\n<td style=\"text-align:center\">$1 \\quad 2  \\quad  3 \\quad  5$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">400</td>\n<td style=\"text-align:center\">$2 \\quad 5$</td>\n</tr>\n</tbody>\n</table>\n<p>$C_1$</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">{1}</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{2}</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{3}</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{4}</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{5}</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n</tbody>\n</table>\n<p>$F_1$</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">项集</th>\n<th style=\"text-align:center\">支持度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">{1}</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{2}</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{3}</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{5}</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n</tbody>\n</table>\n<p>$C_2$</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">项集</th>\n<th style=\"text-align:center\">支持度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">{ 1, 2 }</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 1, 3 }</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 1, 5 }</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 2, 3 }</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 2, 5 }</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 3, 5 }</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n</tbody>\n</table>\n<p>$F_2$</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">项集</th>\n<th style=\"text-align:center\">支持度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">{ 1, 3 }</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 2, 3 }</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 2, 5 }</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 3, 5 }</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n</tbody>\n</table>\n<p>$C_3$</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">项集</th>\n<th style=\"text-align:center\">支持度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">{ 1 , 2 , 3 }</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 1 , 2 , 5 }</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 1 , 3 , 5 }</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 2 , 3 , 5 }</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n</tbody>\n</table>\n<p>$F_3$</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">项集</th>\n<th style=\"text-align:center\">支持度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">{ 2 , 3 , 5 }</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>支持度(support)：数据集中包含该项集的记录所占的比例。</p>\n<p>可信度或置信度（confidence）：</p>\n<p>$A \\rightarrow B$的置信度为<br>$$<br>confidence（A\\rightarrow B） = \\frac{support(A , B)}{support(A)}<br>$$<br>Apriori原理：如果一个项集是非频繁的，那么它的所有超集也是非频繁的。</p>\n<blockquote class=\"blockquote-center\"><br>    If an itemset is not frequent, any of its superset is never frequent.<br></blockquote>\n\n<p>Apriori算法</p>\n<p>1.从大小为k的频繁项集中生成大小为k+1的候选频繁项集$C_{k+1}$</p>\n<p>2.扫描数据库，计算每一个候选频繁项集的支持度</p>\n<p>3.将满足最小支持度的频繁项集加到$F_{k+1}$中<br>$$<br>\\begin{align}<br>\\hline<br>&amp; 算法\\ Apriori \\\\<br>\\hline \\\\<br>&amp; F_1 = (大小为1的频繁项集); \\\\<br>&amp; for(k = 1; F_k \\neq \\varnothing; k++)\\ do\\ begin \\\\<br>&amp; \\qquad C_{k+1} = apriori-gen(F_k);//新的候选频繁集 \\\\<br>&amp; \\qquad for\\ 所有的交易记录t \\in 数据集\\ do\\ begin \\\\<br>&amp; \\qquad \\qquad C_{t}^{‘}= subset(C_{k+1},t);\\ //包含在t中的候选集 \\\\<br>&amp; \\qquad \\qquad for\\ 所有的候选c \\in C_{t}^{‘}\\ do \\\\<br>&amp; \\qquad \\qquad \\qquad c.count ++; \\\\<br>&amp; \\qquad \\qquad end \\\\<br>&amp; \\qquad \\qquad F_{k+1} = \\{C \\in C_{k+1} |\\ c.count \\geq 最小的支持度 \\} \\\\<br>&amp; \\qquad end \\\\<br>&amp; end \\\\<br>&amp; Answer \\cup_{k} F_k;<br>\\end{align}<br>$$<br>算法第三行中的apriori-gen函数经过下面两步，从$F_k$生成$C_{k+1}$</p>\n<p>1.连接</p>\n<p>通过合并两个大小为k，且前$k-1$项相同的频繁项集$P_k$和$Q_k$，生成大小为k+1的频繁项集$R_{k+1}$<br>$$<br>\\begin{align}<br>&amp; R_{k+1} = P_{k} \\cup Q_{k} = \\{items_{1},\\dots ,items_{k-1},items_{k},items_{k^{‘}}\\} \\\\<br>&amp; P_{k} = \\{items_{1},\\dots ,items_{k-1},items_{k}\\} \\\\<br>&amp; Q_{k} = \\{items_{1},\\dots ,items_{k-1},items_{k^{‘}}\\}<br>\\end{align}<br>$$<br>其中，$items_1 &lt; \\dots &lt; items_k &lt; items_{k^{‘}}$</p>\n<p>2.剪枝</p>\n<p>检查$R_{k+1}$中的所有大小为的项集中的所有大小为的项集是不是频繁的，删除中的所有大小为的项集中的所有大小为k的项集是不是频繁的，删除$R_{k+1}$中那些非频繁的项集，从而得到中那些非频繁的项集，从而得到$C_{k+1}$。因为$C_{k+1}$中大小为且非频繁的所有子集不是大小为中大小为k且非频繁的所有子集不是大小为k+1的频繁项集的子集。</p>\n<p>示例：</p>\n<p>假设最小支持度为2</p>\n<p>数据库D</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">TID</th>\n<th style=\"text-align:center\">Items</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">100</td>\n<td style=\"text-align:center\">$1 \\quad 3 \\quad 4$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">200</td>\n<td style=\"text-align:center\">$2 \\quad 3 \\quad 5$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">300</td>\n<td style=\"text-align:center\">$1 \\quad 2  \\quad  3 \\quad  5$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">400</td>\n<td style=\"text-align:center\">$2 \\quad 5$</td>\n</tr>\n</tbody>\n</table>\n<p>$C_1$</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">{1}</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{2}</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{3}</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{4}</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{5}</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n</tbody>\n</table>\n<p>$F_1$</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">项集</th>\n<th style=\"text-align:center\">支持度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">{1}</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{2}</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{3}</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{5}</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n</tbody>\n</table>\n<p>$C_2$</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">项集</th>\n<th style=\"text-align:center\">支持度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">{ 1, 2 }</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 1, 3 }</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 1, 5 }</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 2, 3 }</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 2, 5 }</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 3, 5 }</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n</tbody>\n</table>\n<p>$F_2$</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">项集</th>\n<th style=\"text-align:center\">支持度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">{ 1, 3 }</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 2, 3 }</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 2, 5 }</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 3, 5 }</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n</tbody>\n</table>\n<p>$C_3$</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">项集</th>\n<th style=\"text-align:center\">支持度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">{ 1 , 2 , 3 }</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 1 , 2 , 5 }</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 1 , 3 , 5 }</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{ 2 , 3 , 5 }</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n</tbody>\n</table>\n<p>$F_3$</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">项集</th>\n<th style=\"text-align:center\">支持度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">{ 2 , 3 , 5 }</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"机器学习之k-近邻算法","date":"2018-06-27T09:21:04.000Z","mathjax":true,"_content":"\nk-近邻算法（k-Nearest Neighbor，简称kNN）,工作原理：\n\n存在一个样本数据集合，也称作训练样本集，并且样本集中每个数据都存在标签，即我们知道样本集中每一数据与所属分类的对应关系．\n\n输入没有标签的新数据后，将新数据的每个特征与样本集中数据对应的特征进行比较，然后算法提取样本集中特征最相似的数据（最近邻）的分类标签．一般来说，只选择样本数据集中前k个最相似的数据，这就是k-近邻算法中k的出处，通常k是不大于20的整数．\n\n最后，选择k个最相似数据中**出现次数最多的分类**，作为新数据的分类．\n\n<!--more-->\n\n### 算法实现\n\n创建一个kNN.py文件\n\n```python\nfrom numpy import *\nimport operator\n\ndef classify(inputData,dataSet,labels,k):\n    \"\"\"\n    k-近邻算法\n    inputData: 需要预测分类的数据\n    dataSet: 训练样本集\n    labels: 样本集的分类标签\n    k: k-近邻算法中k,选择最近邻居的数目\n    \"\"\"\n    # 取得样本集合中的样本个数，shape是numpy中用于计算矩阵维度的元组，这里的shape[0]可以理解为求二维矩阵dataSet的行数\n    dataSetSize = dataSet.shape[0]\n    # 求输入数据与样本集合的差值，tile()是numpy中用于扩展矩阵的函数，这里是将inputData扩展为dataSize行的矩阵，以确保inputData与dataSize同维度，可以相减\n    differenceMatrix = tile(inputData,(dataSize,1)) - dataSet\n    # 差矩阵的每个元素平方\n    sqDifferenceMatrix = sqDifferenceMatrix**2\n    # 对平方后的差距阵每一行求和\n    sqDistances = sqDifferenceMatrix.sum(axis=1)\n    # 求得输入数据与所有样本的距离\n    distances = sqDistances**0.5\n    # 按照从小到大的顺序对距离列表中的每个距离排序，按排序顺序返回排序之前的索引号\n    sortedDistanceIndicies = distances.argsort()\n    # kClassData 用于存储最相似的k个数据中出现的所有分类及该分类出现的次数，以分类标签作为键，以频度作为值\n    kClassData = {}\n    for i in range(k):\n        label = labels[sortedDistanceIndicies[k]]\n        # 以下三行，书上简写为kClassCount[label] = kClassData.get(label,0) + 1\n        # 其中的get()方法，表示若不存在键label，则执行kClassData[label] = 0\n        if label not in kClassData:\n            kClassData[label] = 0\n        kClassData[label] += 1\n    # 对kClassData　按出现的频度降序排序\n    # 书上这里写的是kClassData.iteritems()，这是python2中字典的方法，python3中只有items()方法\n    sortedkClassData = sorted(kClassData.items(),\n                              key=operator.itemgetter(1),\n                              reverse=True)\n    # 返回k个最相似数据中出现频度最高的分类标签\n    return sortedkClassData[0][0]    \n```\n\n上面的程序使用了**欧式距离公式**，计算两个n维向量A和B之间的距离:\n\n$$d=\\sqrt{\\sum_{i=1}^n{(A_i- B_i)^2}}$$\n\n例如，点(2,1,5)和(1,2,3)之间的距离计算为：\n\n$$d=\\sqrt{(2-1)^2+(1-2)^2+(5-3)^2}$$\n\n### 测试算法\n\n已知6部电影的打斗镜头，接吻镜头及其类型（模拟的数据），判断一部已知打斗镜头和接吻镜头数的新电影，它的类型是动作片，还是爱情片，具体数据如下:\n\n|    电影名称    | 打斗镜头 | 接吻镜头 | 电影类型 |\n| :------------: | :------: | :------: | :------: |\n|     小时代     |    0     |    50    |  爱情片  |\n| 鬼吹灯之寻龙诀 |   100    |    15    |  动作片  |\n|      战狼      |   150    |    5     |  动作片  |\n|    让子弹飞    |    80    |    2     |  动作片  |\n|      左耳      |    6     |    50    |  爱情片  |\n|    心花路放    |    5     |    40    |  爱情片  |\n|       ?        |    18    |    90    |   待定   |\n\n我们当然可以一眼看出来，这部新电影应该是爱情片，但是，如何让程序自动预测它的类别呢？\n\n创建一个test.py，代码如下:\n\n```python\nimport kNN\ndef createDataSet():\n    dataSet = array([0,50],[100,15],[150,5],\n                   [80,2],[6,50],[5,40])\n    labels = ['爱情片','动作片','动作片','动作片','爱情片','爱情片']\n    return dataSet,labels\n\ndef testKNN():\n\tinputData = [18,90]\n\tdataSet,labels = createDataSet()\n\treturn kNN.classify(inputData,dataSet,labels,3)\n\t    \nlabel = testKNN()\nprint(label)\n```\n\n输出结果：\n\n```python\n爱情片\n```\n\n可以看到，kNN算法确实准确的预测了新电影的分类．\n\n### 算法改进\n\n欧式距离中，数字差值越大的属性对计算结果的影响也越大．若想消除这种影响，使各属性权重相等，可以**将数值归一化**，如将取值范围处理为0到1，或者-1到1之间．\n\n下面的公式可以将任意取值范围的特征值转化为0到1区间内的值：\n\n$$newValue = \\frac{oldValue-min}{max-min}$$\n\n其中，min和max分别是数据集中某一特征（属性）的最小值和最大值\n\n在kNN.py中新增如下代码：\n\n```python\ndef autoNorm(dataSet):\n    \"\"\"将训练集中的数据归一化\"\"\"\n    minValues = dataSet.min(0)\n    maxValues = dataSet.max(0)\n    ranges = maxValues - minValues\n    normDataSet = zeros(shape(dataSet))    \n    m = dataSet.shape[0]\n    normDataSet = dataSet - tile(minVals,(m,1))\n    normDataSet = normDataSet/tile(ranges,(m,1))\n    return normDataSet\n```\n\n接着修改classify()函数\n\n```python\ndef classify(inputData,dataSet,labels,k):\n    \"\"\"\n    k-近邻算法\n    inputData: 需要预测分类的数据\n    dataSet: 训练样本集\n    labels: 样本集的分类标签\n    k: k-近邻算法中k,选择最近邻居的数目\n    \"\"\"\n    dataSet = autoNorm(dataSet)# 添加这一行\n    dataSetSize = dataSet.shape[0]\n    differenceMatrix = tile(inputData,(dataSize,1)) - dataSet\n    sqDifferenceMatrix = sqDifferenceMatrix**2\n    sqDistances = sqDifferenceMatrix.sum(axis=1)\n    distances = sqDistances**0.5\n    sortedDistanceIndicies = distances.argsort()\n    kClassData = {}\n    for i in range(k):\n        label = labels[sortedDistanceIndicies[k]]\n        if label not in kClassData:\n            kClassData[label] = 0\n        kClassData[label] += 1\n    sortedkClassData = sorted(kClassData.items(),\n                              key=operator.itemgetter(1),\n                              reverse=True)\n    return sortedkClassData[0][0]    \n```\n\n### 涉及的一些numpy中的函数\n\n","source":"_posts/machine-learning-knn.md","raw":"---\ntitle: 机器学习之k-近邻算法\ndate: 2018-06-27 17:21:04\ntags: 机器学习\ncategories: 机器学习\nmathjax: true\n---\n\nk-近邻算法（k-Nearest Neighbor，简称kNN）,工作原理：\n\n存在一个样本数据集合，也称作训练样本集，并且样本集中每个数据都存在标签，即我们知道样本集中每一数据与所属分类的对应关系．\n\n输入没有标签的新数据后，将新数据的每个特征与样本集中数据对应的特征进行比较，然后算法提取样本集中特征最相似的数据（最近邻）的分类标签．一般来说，只选择样本数据集中前k个最相似的数据，这就是k-近邻算法中k的出处，通常k是不大于20的整数．\n\n最后，选择k个最相似数据中**出现次数最多的分类**，作为新数据的分类．\n\n<!--more-->\n\n### 算法实现\n\n创建一个kNN.py文件\n\n```python\nfrom numpy import *\nimport operator\n\ndef classify(inputData,dataSet,labels,k):\n    \"\"\"\n    k-近邻算法\n    inputData: 需要预测分类的数据\n    dataSet: 训练样本集\n    labels: 样本集的分类标签\n    k: k-近邻算法中k,选择最近邻居的数目\n    \"\"\"\n    # 取得样本集合中的样本个数，shape是numpy中用于计算矩阵维度的元组，这里的shape[0]可以理解为求二维矩阵dataSet的行数\n    dataSetSize = dataSet.shape[0]\n    # 求输入数据与样本集合的差值，tile()是numpy中用于扩展矩阵的函数，这里是将inputData扩展为dataSize行的矩阵，以确保inputData与dataSize同维度，可以相减\n    differenceMatrix = tile(inputData,(dataSize,1)) - dataSet\n    # 差矩阵的每个元素平方\n    sqDifferenceMatrix = sqDifferenceMatrix**2\n    # 对平方后的差距阵每一行求和\n    sqDistances = sqDifferenceMatrix.sum(axis=1)\n    # 求得输入数据与所有样本的距离\n    distances = sqDistances**0.5\n    # 按照从小到大的顺序对距离列表中的每个距离排序，按排序顺序返回排序之前的索引号\n    sortedDistanceIndicies = distances.argsort()\n    # kClassData 用于存储最相似的k个数据中出现的所有分类及该分类出现的次数，以分类标签作为键，以频度作为值\n    kClassData = {}\n    for i in range(k):\n        label = labels[sortedDistanceIndicies[k]]\n        # 以下三行，书上简写为kClassCount[label] = kClassData.get(label,0) + 1\n        # 其中的get()方法，表示若不存在键label，则执行kClassData[label] = 0\n        if label not in kClassData:\n            kClassData[label] = 0\n        kClassData[label] += 1\n    # 对kClassData　按出现的频度降序排序\n    # 书上这里写的是kClassData.iteritems()，这是python2中字典的方法，python3中只有items()方法\n    sortedkClassData = sorted(kClassData.items(),\n                              key=operator.itemgetter(1),\n                              reverse=True)\n    # 返回k个最相似数据中出现频度最高的分类标签\n    return sortedkClassData[0][0]    \n```\n\n上面的程序使用了**欧式距离公式**，计算两个n维向量A和B之间的距离:\n\n$$d=\\sqrt{\\sum_{i=1}^n{(A_i- B_i)^2}}$$\n\n例如，点(2,1,5)和(1,2,3)之间的距离计算为：\n\n$$d=\\sqrt{(2-1)^2+(1-2)^2+(5-3)^2}$$\n\n### 测试算法\n\n已知6部电影的打斗镜头，接吻镜头及其类型（模拟的数据），判断一部已知打斗镜头和接吻镜头数的新电影，它的类型是动作片，还是爱情片，具体数据如下:\n\n|    电影名称    | 打斗镜头 | 接吻镜头 | 电影类型 |\n| :------------: | :------: | :------: | :------: |\n|     小时代     |    0     |    50    |  爱情片  |\n| 鬼吹灯之寻龙诀 |   100    |    15    |  动作片  |\n|      战狼      |   150    |    5     |  动作片  |\n|    让子弹飞    |    80    |    2     |  动作片  |\n|      左耳      |    6     |    50    |  爱情片  |\n|    心花路放    |    5     |    40    |  爱情片  |\n|       ?        |    18    |    90    |   待定   |\n\n我们当然可以一眼看出来，这部新电影应该是爱情片，但是，如何让程序自动预测它的类别呢？\n\n创建一个test.py，代码如下:\n\n```python\nimport kNN\ndef createDataSet():\n    dataSet = array([0,50],[100,15],[150,5],\n                   [80,2],[6,50],[5,40])\n    labels = ['爱情片','动作片','动作片','动作片','爱情片','爱情片']\n    return dataSet,labels\n\ndef testKNN():\n\tinputData = [18,90]\n\tdataSet,labels = createDataSet()\n\treturn kNN.classify(inputData,dataSet,labels,3)\n\t    \nlabel = testKNN()\nprint(label)\n```\n\n输出结果：\n\n```python\n爱情片\n```\n\n可以看到，kNN算法确实准确的预测了新电影的分类．\n\n### 算法改进\n\n欧式距离中，数字差值越大的属性对计算结果的影响也越大．若想消除这种影响，使各属性权重相等，可以**将数值归一化**，如将取值范围处理为0到1，或者-1到1之间．\n\n下面的公式可以将任意取值范围的特征值转化为0到1区间内的值：\n\n$$newValue = \\frac{oldValue-min}{max-min}$$\n\n其中，min和max分别是数据集中某一特征（属性）的最小值和最大值\n\n在kNN.py中新增如下代码：\n\n```python\ndef autoNorm(dataSet):\n    \"\"\"将训练集中的数据归一化\"\"\"\n    minValues = dataSet.min(0)\n    maxValues = dataSet.max(0)\n    ranges = maxValues - minValues\n    normDataSet = zeros(shape(dataSet))    \n    m = dataSet.shape[0]\n    normDataSet = dataSet - tile(minVals,(m,1))\n    normDataSet = normDataSet/tile(ranges,(m,1))\n    return normDataSet\n```\n\n接着修改classify()函数\n\n```python\ndef classify(inputData,dataSet,labels,k):\n    \"\"\"\n    k-近邻算法\n    inputData: 需要预测分类的数据\n    dataSet: 训练样本集\n    labels: 样本集的分类标签\n    k: k-近邻算法中k,选择最近邻居的数目\n    \"\"\"\n    dataSet = autoNorm(dataSet)# 添加这一行\n    dataSetSize = dataSet.shape[0]\n    differenceMatrix = tile(inputData,(dataSize,1)) - dataSet\n    sqDifferenceMatrix = sqDifferenceMatrix**2\n    sqDistances = sqDifferenceMatrix.sum(axis=1)\n    distances = sqDistances**0.5\n    sortedDistanceIndicies = distances.argsort()\n    kClassData = {}\n    for i in range(k):\n        label = labels[sortedDistanceIndicies[k]]\n        if label not in kClassData:\n            kClassData[label] = 0\n        kClassData[label] += 1\n    sortedkClassData = sorted(kClassData.items(),\n                              key=operator.itemgetter(1),\n                              reverse=True)\n    return sortedkClassData[0][0]    \n```\n\n### 涉及的一些numpy中的函数\n\n","slug":"machine-learning-knn","published":1,"updated":"2019-01-19T07:23:57.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aqd003dj1q0h1khf1co","content":"<p>k-近邻算法（k-Nearest Neighbor，简称kNN）,工作原理：</p>\n<p>存在一个样本数据集合，也称作训练样本集，并且样本集中每个数据都存在标签，即我们知道样本集中每一数据与所属分类的对应关系．</p>\n<p>输入没有标签的新数据后，将新数据的每个特征与样本集中数据对应的特征进行比较，然后算法提取样本集中特征最相似的数据（最近邻）的分类标签．一般来说，只选择样本数据集中前k个最相似的数据，这就是k-近邻算法中k的出处，通常k是不大于20的整数．</p>\n<p>最后，选择k个最相似数据中<strong>出现次数最多的分类</strong>，作为新数据的分类．</p>\n<a id=\"more\"></a>\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><p>创建一个kNN.py文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> numpy <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> operator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">classify</span><span class=\"params\">(inputData,dataSet,labels,k)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    k-近邻算法</span></span><br><span class=\"line\"><span class=\"string\">    inputData: 需要预测分类的数据</span></span><br><span class=\"line\"><span class=\"string\">    dataSet: 训练样本集</span></span><br><span class=\"line\"><span class=\"string\">    labels: 样本集的分类标签</span></span><br><span class=\"line\"><span class=\"string\">    k: k-近邻算法中k,选择最近邻居的数目</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 取得样本集合中的样本个数，shape是numpy中用于计算矩阵维度的元组，这里的shape[0]可以理解为求二维矩阵dataSet的行数</span></span><br><span class=\"line\">    dataSetSize = dataSet.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 求输入数据与样本集合的差值，tile()是numpy中用于扩展矩阵的函数，这里是将inputData扩展为dataSize行的矩阵，以确保inputData与dataSize同维度，可以相减</span></span><br><span class=\"line\">    differenceMatrix = tile(inputData,(dataSize,<span class=\"number\">1</span>)) - dataSet</span><br><span class=\"line\">    <span class=\"comment\"># 差矩阵的每个元素平方</span></span><br><span class=\"line\">    sqDifferenceMatrix = sqDifferenceMatrix**<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"comment\"># 对平方后的差距阵每一行求和</span></span><br><span class=\"line\">    sqDistances = sqDifferenceMatrix.sum(axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 求得输入数据与所有样本的距离</span></span><br><span class=\"line\">    distances = sqDistances**<span class=\"number\">0.5</span></span><br><span class=\"line\">    <span class=\"comment\"># 按照从小到大的顺序对距离列表中的每个距离排序，按排序顺序返回排序之前的索引号</span></span><br><span class=\"line\">    sortedDistanceIndicies = distances.argsort()</span><br><span class=\"line\">    <span class=\"comment\"># kClassData 用于存储最相似的k个数据中出现的所有分类及该分类出现的次数，以分类标签作为键，以频度作为值</span></span><br><span class=\"line\">    kClassData = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">        label = labels[sortedDistanceIndicies[k]]</span><br><span class=\"line\">        <span class=\"comment\"># 以下三行，书上简写为kClassCount[label] = kClassData.get(label,0) + 1</span></span><br><span class=\"line\">        <span class=\"comment\"># 其中的get()方法，表示若不存在键label，则执行kClassData[label] = 0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> label <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> kClassData:</span><br><span class=\"line\">            kClassData[label] = <span class=\"number\">0</span></span><br><span class=\"line\">        kClassData[label] += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># 对kClassData　按出现的频度降序排序</span></span><br><span class=\"line\">    <span class=\"comment\"># 书上这里写的是kClassData.iteritems()，这是python2中字典的方法，python3中只有items()方法</span></span><br><span class=\"line\">    sortedkClassData = sorted(kClassData.items(),</span><br><span class=\"line\">                              key=operator.itemgetter(<span class=\"number\">1</span>),</span><br><span class=\"line\">                              reverse=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 返回k个最相似数据中出现频度最高的分类标签</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sortedkClassData[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<p>上面的程序使用了<strong>欧式距离公式</strong>，计算两个n维向量A和B之间的距离:</p>\n<p>$$d=\\sqrt{\\sum_{i=1}^n{(A_i- B_i)^2}}$$</p>\n<p>例如，点(2,1,5)和(1,2,3)之间的距离计算为：</p>\n<p>$$d=\\sqrt{(2-1)^2+(1-2)^2+(5-3)^2}$$</p>\n<h3 id=\"测试算法\"><a href=\"#测试算法\" class=\"headerlink\" title=\"测试算法\"></a>测试算法</h3><p>已知6部电影的打斗镜头，接吻镜头及其类型（模拟的数据），判断一部已知打斗镜头和接吻镜头数的新电影，它的类型是动作片，还是爱情片，具体数据如下:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">电影名称</th>\n<th style=\"text-align:center\">打斗镜头</th>\n<th style=\"text-align:center\">接吻镜头</th>\n<th style=\"text-align:center\">电影类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">小时代</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">50</td>\n<td style=\"text-align:center\">爱情片</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">鬼吹灯之寻龙诀</td>\n<td style=\"text-align:center\">100</td>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\">动作片</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">战狼</td>\n<td style=\"text-align:center\">150</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">动作片</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">让子弹飞</td>\n<td style=\"text-align:center\">80</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">动作片</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">左耳</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">50</td>\n<td style=\"text-align:center\">爱情片</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">心花路放</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">40</td>\n<td style=\"text-align:center\">爱情片</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:center\">90</td>\n<td style=\"text-align:center\">待定</td>\n</tr>\n</tbody>\n</table>\n<p>我们当然可以一眼看出来，这部新电影应该是爱情片，但是，如何让程序自动预测它的类别呢？</p>\n<p>创建一个test.py，代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> kNN</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">createDataSet</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    dataSet = array([<span class=\"number\">0</span>,<span class=\"number\">50</span>],[<span class=\"number\">100</span>,<span class=\"number\">15</span>],[<span class=\"number\">150</span>,<span class=\"number\">5</span>],</span><br><span class=\"line\">                   [<span class=\"number\">80</span>,<span class=\"number\">2</span>],[<span class=\"number\">6</span>,<span class=\"number\">50</span>],[<span class=\"number\">5</span>,<span class=\"number\">40</span>])</span><br><span class=\"line\">    labels = [<span class=\"string\">'爱情片'</span>,<span class=\"string\">'动作片'</span>,<span class=\"string\">'动作片'</span>,<span class=\"string\">'动作片'</span>,<span class=\"string\">'爱情片'</span>,<span class=\"string\">'爱情片'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dataSet,labels</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testKNN</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tinputData = [<span class=\"number\">18</span>,<span class=\"number\">90</span>]</span><br><span class=\"line\">\tdataSet,labels = createDataSet()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> kNN.classify(inputData,dataSet,labels,<span class=\"number\">3</span>)</span><br><span class=\"line\">\t    </span><br><span class=\"line\">label = testKNN()</span><br><span class=\"line\">print(label)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">爱情片</span><br></pre></td></tr></table></figure>\n<p>可以看到，kNN算法确实准确的预测了新电影的分类．</p>\n<h3 id=\"算法改进\"><a href=\"#算法改进\" class=\"headerlink\" title=\"算法改进\"></a>算法改进</h3><p>欧式距离中，数字差值越大的属性对计算结果的影响也越大．若想消除这种影响，使各属性权重相等，可以<strong>将数值归一化</strong>，如将取值范围处理为0到1，或者-1到1之间．</p>\n<p>下面的公式可以将任意取值范围的特征值转化为0到1区间内的值：</p>\n<p>$$newValue = \\frac{oldValue-min}{max-min}$$</p>\n<p>其中，min和max分别是数据集中某一特征（属性）的最小值和最大值</p>\n<p>在kNN.py中新增如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">autoNorm</span><span class=\"params\">(dataSet)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"将训练集中的数据归一化\"\"\"</span></span><br><span class=\"line\">    minValues = dataSet.min(<span class=\"number\">0</span>)</span><br><span class=\"line\">    maxValues = dataSet.max(<span class=\"number\">0</span>)</span><br><span class=\"line\">    ranges = maxValues - minValues</span><br><span class=\"line\">    normDataSet = zeros(shape(dataSet))    </span><br><span class=\"line\">    m = dataSet.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    normDataSet = dataSet - tile(minVals,(m,<span class=\"number\">1</span>))</span><br><span class=\"line\">    normDataSet = normDataSet/tile(ranges,(m,<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> normDataSet</span><br></pre></td></tr></table></figure>\n<p>接着修改classify()函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">classify</span><span class=\"params\">(inputData,dataSet,labels,k)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    k-近邻算法</span></span><br><span class=\"line\"><span class=\"string\">    inputData: 需要预测分类的数据</span></span><br><span class=\"line\"><span class=\"string\">    dataSet: 训练样本集</span></span><br><span class=\"line\"><span class=\"string\">    labels: 样本集的分类标签</span></span><br><span class=\"line\"><span class=\"string\">    k: k-近邻算法中k,选择最近邻居的数目</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    dataSet = autoNorm(dataSet)<span class=\"comment\"># 添加这一行</span></span><br><span class=\"line\">    dataSetSize = dataSet.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    differenceMatrix = tile(inputData,(dataSize,<span class=\"number\">1</span>)) - dataSet</span><br><span class=\"line\">    sqDifferenceMatrix = sqDifferenceMatrix**<span class=\"number\">2</span></span><br><span class=\"line\">    sqDistances = sqDifferenceMatrix.sum(axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">    distances = sqDistances**<span class=\"number\">0.5</span></span><br><span class=\"line\">    sortedDistanceIndicies = distances.argsort()</span><br><span class=\"line\">    kClassData = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">        label = labels[sortedDistanceIndicies[k]]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> label <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> kClassData:</span><br><span class=\"line\">            kClassData[label] = <span class=\"number\">0</span></span><br><span class=\"line\">        kClassData[label] += <span class=\"number\">1</span></span><br><span class=\"line\">    sortedkClassData = sorted(kClassData.items(),</span><br><span class=\"line\">                              key=operator.itemgetter(<span class=\"number\">1</span>),</span><br><span class=\"line\">                              reverse=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sortedkClassData[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"涉及的一些numpy中的函数\"><a href=\"#涉及的一些numpy中的函数\" class=\"headerlink\" title=\"涉及的一些numpy中的函数\"></a>涉及的一些numpy中的函数</h3>","site":{"data":{}},"excerpt":"<p>k-近邻算法（k-Nearest Neighbor，简称kNN）,工作原理：</p>\n<p>存在一个样本数据集合，也称作训练样本集，并且样本集中每个数据都存在标签，即我们知道样本集中每一数据与所属分类的对应关系．</p>\n<p>输入没有标签的新数据后，将新数据的每个特征与样本集中数据对应的特征进行比较，然后算法提取样本集中特征最相似的数据（最近邻）的分类标签．一般来说，只选择样本数据集中前k个最相似的数据，这就是k-近邻算法中k的出处，通常k是不大于20的整数．</p>\n<p>最后，选择k个最相似数据中<strong>出现次数最多的分类</strong>，作为新数据的分类．</p>","more":"<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><p>创建一个kNN.py文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> numpy <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> operator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">classify</span><span class=\"params\">(inputData,dataSet,labels,k)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    k-近邻算法</span></span><br><span class=\"line\"><span class=\"string\">    inputData: 需要预测分类的数据</span></span><br><span class=\"line\"><span class=\"string\">    dataSet: 训练样本集</span></span><br><span class=\"line\"><span class=\"string\">    labels: 样本集的分类标签</span></span><br><span class=\"line\"><span class=\"string\">    k: k-近邻算法中k,选择最近邻居的数目</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 取得样本集合中的样本个数，shape是numpy中用于计算矩阵维度的元组，这里的shape[0]可以理解为求二维矩阵dataSet的行数</span></span><br><span class=\"line\">    dataSetSize = dataSet.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 求输入数据与样本集合的差值，tile()是numpy中用于扩展矩阵的函数，这里是将inputData扩展为dataSize行的矩阵，以确保inputData与dataSize同维度，可以相减</span></span><br><span class=\"line\">    differenceMatrix = tile(inputData,(dataSize,<span class=\"number\">1</span>)) - dataSet</span><br><span class=\"line\">    <span class=\"comment\"># 差矩阵的每个元素平方</span></span><br><span class=\"line\">    sqDifferenceMatrix = sqDifferenceMatrix**<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"comment\"># 对平方后的差距阵每一行求和</span></span><br><span class=\"line\">    sqDistances = sqDifferenceMatrix.sum(axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 求得输入数据与所有样本的距离</span></span><br><span class=\"line\">    distances = sqDistances**<span class=\"number\">0.5</span></span><br><span class=\"line\">    <span class=\"comment\"># 按照从小到大的顺序对距离列表中的每个距离排序，按排序顺序返回排序之前的索引号</span></span><br><span class=\"line\">    sortedDistanceIndicies = distances.argsort()</span><br><span class=\"line\">    <span class=\"comment\"># kClassData 用于存储最相似的k个数据中出现的所有分类及该分类出现的次数，以分类标签作为键，以频度作为值</span></span><br><span class=\"line\">    kClassData = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">        label = labels[sortedDistanceIndicies[k]]</span><br><span class=\"line\">        <span class=\"comment\"># 以下三行，书上简写为kClassCount[label] = kClassData.get(label,0) + 1</span></span><br><span class=\"line\">        <span class=\"comment\"># 其中的get()方法，表示若不存在键label，则执行kClassData[label] = 0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> label <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> kClassData:</span><br><span class=\"line\">            kClassData[label] = <span class=\"number\">0</span></span><br><span class=\"line\">        kClassData[label] += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># 对kClassData　按出现的频度降序排序</span></span><br><span class=\"line\">    <span class=\"comment\"># 书上这里写的是kClassData.iteritems()，这是python2中字典的方法，python3中只有items()方法</span></span><br><span class=\"line\">    sortedkClassData = sorted(kClassData.items(),</span><br><span class=\"line\">                              key=operator.itemgetter(<span class=\"number\">1</span>),</span><br><span class=\"line\">                              reverse=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 返回k个最相似数据中出现频度最高的分类标签</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sortedkClassData[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<p>上面的程序使用了<strong>欧式距离公式</strong>，计算两个n维向量A和B之间的距离:</p>\n<p>$$d=\\sqrt{\\sum_{i=1}^n{(A_i- B_i)^2}}$$</p>\n<p>例如，点(2,1,5)和(1,2,3)之间的距离计算为：</p>\n<p>$$d=\\sqrt{(2-1)^2+(1-2)^2+(5-3)^2}$$</p>\n<h3 id=\"测试算法\"><a href=\"#测试算法\" class=\"headerlink\" title=\"测试算法\"></a>测试算法</h3><p>已知6部电影的打斗镜头，接吻镜头及其类型（模拟的数据），判断一部已知打斗镜头和接吻镜头数的新电影，它的类型是动作片，还是爱情片，具体数据如下:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">电影名称</th>\n<th style=\"text-align:center\">打斗镜头</th>\n<th style=\"text-align:center\">接吻镜头</th>\n<th style=\"text-align:center\">电影类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">小时代</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">50</td>\n<td style=\"text-align:center\">爱情片</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">鬼吹灯之寻龙诀</td>\n<td style=\"text-align:center\">100</td>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\">动作片</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">战狼</td>\n<td style=\"text-align:center\">150</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">动作片</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">让子弹飞</td>\n<td style=\"text-align:center\">80</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">动作片</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">左耳</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">50</td>\n<td style=\"text-align:center\">爱情片</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">心花路放</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">40</td>\n<td style=\"text-align:center\">爱情片</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:center\">90</td>\n<td style=\"text-align:center\">待定</td>\n</tr>\n</tbody>\n</table>\n<p>我们当然可以一眼看出来，这部新电影应该是爱情片，但是，如何让程序自动预测它的类别呢？</p>\n<p>创建一个test.py，代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> kNN</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">createDataSet</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    dataSet = array([<span class=\"number\">0</span>,<span class=\"number\">50</span>],[<span class=\"number\">100</span>,<span class=\"number\">15</span>],[<span class=\"number\">150</span>,<span class=\"number\">5</span>],</span><br><span class=\"line\">                   [<span class=\"number\">80</span>,<span class=\"number\">2</span>],[<span class=\"number\">6</span>,<span class=\"number\">50</span>],[<span class=\"number\">5</span>,<span class=\"number\">40</span>])</span><br><span class=\"line\">    labels = [<span class=\"string\">'爱情片'</span>,<span class=\"string\">'动作片'</span>,<span class=\"string\">'动作片'</span>,<span class=\"string\">'动作片'</span>,<span class=\"string\">'爱情片'</span>,<span class=\"string\">'爱情片'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dataSet,labels</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testKNN</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tinputData = [<span class=\"number\">18</span>,<span class=\"number\">90</span>]</span><br><span class=\"line\">\tdataSet,labels = createDataSet()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> kNN.classify(inputData,dataSet,labels,<span class=\"number\">3</span>)</span><br><span class=\"line\">\t    </span><br><span class=\"line\">label = testKNN()</span><br><span class=\"line\">print(label)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">爱情片</span><br></pre></td></tr></table></figure>\n<p>可以看到，kNN算法确实准确的预测了新电影的分类．</p>\n<h3 id=\"算法改进\"><a href=\"#算法改进\" class=\"headerlink\" title=\"算法改进\"></a>算法改进</h3><p>欧式距离中，数字差值越大的属性对计算结果的影响也越大．若想消除这种影响，使各属性权重相等，可以<strong>将数值归一化</strong>，如将取值范围处理为0到1，或者-1到1之间．</p>\n<p>下面的公式可以将任意取值范围的特征值转化为0到1区间内的值：</p>\n<p>$$newValue = \\frac{oldValue-min}{max-min}$$</p>\n<p>其中，min和max分别是数据集中某一特征（属性）的最小值和最大值</p>\n<p>在kNN.py中新增如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">autoNorm</span><span class=\"params\">(dataSet)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"将训练集中的数据归一化\"\"\"</span></span><br><span class=\"line\">    minValues = dataSet.min(<span class=\"number\">0</span>)</span><br><span class=\"line\">    maxValues = dataSet.max(<span class=\"number\">0</span>)</span><br><span class=\"line\">    ranges = maxValues - minValues</span><br><span class=\"line\">    normDataSet = zeros(shape(dataSet))    </span><br><span class=\"line\">    m = dataSet.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    normDataSet = dataSet - tile(minVals,(m,<span class=\"number\">1</span>))</span><br><span class=\"line\">    normDataSet = normDataSet/tile(ranges,(m,<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> normDataSet</span><br></pre></td></tr></table></figure>\n<p>接着修改classify()函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">classify</span><span class=\"params\">(inputData,dataSet,labels,k)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    k-近邻算法</span></span><br><span class=\"line\"><span class=\"string\">    inputData: 需要预测分类的数据</span></span><br><span class=\"line\"><span class=\"string\">    dataSet: 训练样本集</span></span><br><span class=\"line\"><span class=\"string\">    labels: 样本集的分类标签</span></span><br><span class=\"line\"><span class=\"string\">    k: k-近邻算法中k,选择最近邻居的数目</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    dataSet = autoNorm(dataSet)<span class=\"comment\"># 添加这一行</span></span><br><span class=\"line\">    dataSetSize = dataSet.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    differenceMatrix = tile(inputData,(dataSize,<span class=\"number\">1</span>)) - dataSet</span><br><span class=\"line\">    sqDifferenceMatrix = sqDifferenceMatrix**<span class=\"number\">2</span></span><br><span class=\"line\">    sqDistances = sqDifferenceMatrix.sum(axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">    distances = sqDistances**<span class=\"number\">0.5</span></span><br><span class=\"line\">    sortedDistanceIndicies = distances.argsort()</span><br><span class=\"line\">    kClassData = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">        label = labels[sortedDistanceIndicies[k]]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> label <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> kClassData:</span><br><span class=\"line\">            kClassData[label] = <span class=\"number\">0</span></span><br><span class=\"line\">        kClassData[label] += <span class=\"number\">1</span></span><br><span class=\"line\">    sortedkClassData = sorted(kClassData.items(),</span><br><span class=\"line\">                              key=operator.itemgetter(<span class=\"number\">1</span>),</span><br><span class=\"line\">                              reverse=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sortedkClassData[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"涉及的一些numpy中的函数\"><a href=\"#涉及的一些numpy中的函数\" class=\"headerlink\" title=\"涉及的一些numpy中的函数\"></a>涉及的一些numpy中的函数</h3>"},{"title":"机器学习之线性回归","date":"2018-08-17T07:34:42.000Z","mathjax":true,"_content":"\n线性回归（linear regression），就是将输入项分别乘以一些常量，再将结果加起来得到预测值，而这些常量称之为回归系数。\n\n线性回归可以用如下的等式来表示：\n$$\nY = X^{T} w\n$$\n其中，$Y$为预测值，$X$为输入值，$w$是一个包含回归系数的向量\n\n<!--more-->\n\n已知$X$和对应的$Y$，怎么才能找到$w$呢？一个常用的方法就是找出使误差最小的$w$。这里的误差是指预测Y值和真实Y值之间的差值，使用该误差的简单累加将使得正差值和负差值相互抵消，为了避免这种情况，可以使用平方误差。\n\n平方误差可写为：\n$$\n\\sum_{i=1}^{m} (y_i - x_i ^{T} w) ^2\n$$\n若用矩阵表示，则可写为：\n$$\n(Y - X w)^{T} (Y - Xw)\n$$\n令\n$$\n\\begin{align}\nf(w) &= (Y - X w)^{T} (Y - Xw) \\\\\\\n&= Y^{T} Y - Y^{T} X w - w^{T} X^{T} Y + w^{T} X^{T} X w \\\\\\\n\\end{align}\n$$\nf(w) 对$w$求导，得到\n$$\n\\begin{align}\n\\frac{\\partial f(w)}{\\partial w} &= \\frac{\\partial (Y^{T} Y)} {\\partial w} - \\frac{\\partial ( Y^{T} X w)} {\\partial w} - \\frac{\\partial (w^{T} X^{T} Y)} {\\partial w} + \\frac{\\partial (w^{T} X^{T} X w )} {\\partial w} \\\\\\\n&= 0 - X^{T} Y -  X^{T} Y + 2 X^{T} X w \\\\\\\n&= 2 X^{T} (Xw - Y)\n\\end{align}\n$$\n令$\\frac{\\partial f(w)}{\\partial w} = 0$，则\n$$\nX^{T} (X w - Y) = 0 \\\\\\\n=> X^{T} X w = X^{T} Y \\\\\\\n$$\n两边左乘$(X^{T}X)^{-1}$，得\n$$\n\\hat w = (X^{T} X )^{-1} X^{T} Y\n$$\n\n\n","source":"_posts/machine-learning-linear-regression.md","raw":"---\ntitle: 机器学习之线性回归\ndate: 2018-08-17 15:34:42\ntags: 机器学习\ncategories: 机器学习\nmathjax: true\n---\n\n线性回归（linear regression），就是将输入项分别乘以一些常量，再将结果加起来得到预测值，而这些常量称之为回归系数。\n\n线性回归可以用如下的等式来表示：\n$$\nY = X^{T} w\n$$\n其中，$Y$为预测值，$X$为输入值，$w$是一个包含回归系数的向量\n\n<!--more-->\n\n已知$X$和对应的$Y$，怎么才能找到$w$呢？一个常用的方法就是找出使误差最小的$w$。这里的误差是指预测Y值和真实Y值之间的差值，使用该误差的简单累加将使得正差值和负差值相互抵消，为了避免这种情况，可以使用平方误差。\n\n平方误差可写为：\n$$\n\\sum_{i=1}^{m} (y_i - x_i ^{T} w) ^2\n$$\n若用矩阵表示，则可写为：\n$$\n(Y - X w)^{T} (Y - Xw)\n$$\n令\n$$\n\\begin{align}\nf(w) &= (Y - X w)^{T} (Y - Xw) \\\\\\\n&= Y^{T} Y - Y^{T} X w - w^{T} X^{T} Y + w^{T} X^{T} X w \\\\\\\n\\end{align}\n$$\nf(w) 对$w$求导，得到\n$$\n\\begin{align}\n\\frac{\\partial f(w)}{\\partial w} &= \\frac{\\partial (Y^{T} Y)} {\\partial w} - \\frac{\\partial ( Y^{T} X w)} {\\partial w} - \\frac{\\partial (w^{T} X^{T} Y)} {\\partial w} + \\frac{\\partial (w^{T} X^{T} X w )} {\\partial w} \\\\\\\n&= 0 - X^{T} Y -  X^{T} Y + 2 X^{T} X w \\\\\\\n&= 2 X^{T} (Xw - Y)\n\\end{align}\n$$\n令$\\frac{\\partial f(w)}{\\partial w} = 0$，则\n$$\nX^{T} (X w - Y) = 0 \\\\\\\n=> X^{T} X w = X^{T} Y \\\\\\\n$$\n两边左乘$(X^{T}X)^{-1}$，得\n$$\n\\hat w = (X^{T} X )^{-1} X^{T} Y\n$$\n\n\n","slug":"machine-learning-linear-regression","published":1,"updated":"2019-01-19T07:23:57.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aqe003ej1q0fxqh45un","content":"<p>线性回归（linear regression），就是将输入项分别乘以一些常量，再将结果加起来得到预测值，而这些常量称之为回归系数。</p>\n<p>线性回归可以用如下的等式来表示：<br>$$<br>Y = X^{T} w<br>$$<br>其中，$Y$为预测值，$X$为输入值，$w$是一个包含回归系数的向量</p>\n<a id=\"more\"></a>\n<p>已知$X$和对应的$Y$，怎么才能找到$w$呢？一个常用的方法就是找出使误差最小的$w$。这里的误差是指预测Y值和真实Y值之间的差值，使用该误差的简单累加将使得正差值和负差值相互抵消，为了避免这种情况，可以使用平方误差。</p>\n<p>平方误差可写为：<br>$$<br>\\sum_{i=1}^{m} (y_i - x_i ^{T} w) ^2<br>$$<br>若用矩阵表示，则可写为：<br>$$<br>(Y - X w)^{T} (Y - Xw)<br>$$<br>令<br>$$<br>\\begin{align}<br>f(w) &amp;= (Y - X w)^{T} (Y - Xw) \\\\<br>&amp;= Y^{T} Y - Y^{T} X w - w^{T} X^{T} Y + w^{T} X^{T} X w \\\\<br>\\end{align}<br>$$<br>f(w) 对$w$求导，得到<br>$$<br>\\begin{align}<br>\\frac{\\partial f(w)}{\\partial w} &amp;= \\frac{\\partial (Y^{T} Y)} {\\partial w} - \\frac{\\partial ( Y^{T} X w)} {\\partial w} - \\frac{\\partial (w^{T} X^{T} Y)} {\\partial w} + \\frac{\\partial (w^{T} X^{T} X w )} {\\partial w} \\\\<br>&amp;= 0 - X^{T} Y -  X^{T} Y + 2 X^{T} X w \\\\<br>&amp;= 2 X^{T} (Xw - Y)<br>\\end{align}<br>$$<br>令$\\frac{\\partial f(w)}{\\partial w} = 0$，则<br>$$<br>X^{T} (X w - Y) = 0 \\\\<br>=&gt; X^{T} X w = X^{T} Y \\\\<br>$$<br>两边左乘$(X^{T}X)^{-1}$，得<br>$$<br>\\hat w = (X^{T} X )^{-1} X^{T} Y<br>$$</p>\n","site":{"data":{}},"excerpt":"<p>线性回归（linear regression），就是将输入项分别乘以一些常量，再将结果加起来得到预测值，而这些常量称之为回归系数。</p>\n<p>线性回归可以用如下的等式来表示：<br>$$<br>Y = X^{T} w<br>$$<br>其中，$Y$为预测值，$X$为输入值，$w$是一个包含回归系数的向量</p>","more":"<p>已知$X$和对应的$Y$，怎么才能找到$w$呢？一个常用的方法就是找出使误差最小的$w$。这里的误差是指预测Y值和真实Y值之间的差值，使用该误差的简单累加将使得正差值和负差值相互抵消，为了避免这种情况，可以使用平方误差。</p>\n<p>平方误差可写为：<br>$$<br>\\sum_{i=1}^{m} (y_i - x_i ^{T} w) ^2<br>$$<br>若用矩阵表示，则可写为：<br>$$<br>(Y - X w)^{T} (Y - Xw)<br>$$<br>令<br>$$<br>\\begin{align}<br>f(w) &amp;= (Y - X w)^{T} (Y - Xw) \\\\<br>&amp;= Y^{T} Y - Y^{T} X w - w^{T} X^{T} Y + w^{T} X^{T} X w \\\\<br>\\end{align}<br>$$<br>f(w) 对$w$求导，得到<br>$$<br>\\begin{align}<br>\\frac{\\partial f(w)}{\\partial w} &amp;= \\frac{\\partial (Y^{T} Y)} {\\partial w} - \\frac{\\partial ( Y^{T} X w)} {\\partial w} - \\frac{\\partial (w^{T} X^{T} Y)} {\\partial w} + \\frac{\\partial (w^{T} X^{T} X w )} {\\partial w} \\\\<br>&amp;= 0 - X^{T} Y -  X^{T} Y + 2 X^{T} X w \\\\<br>&amp;= 2 X^{T} (Xw - Y)<br>\\end{align}<br>$$<br>令$\\frac{\\partial f(w)}{\\partial w} = 0$，则<br>$$<br>X^{T} (X w - Y) = 0 \\\\<br>=&gt; X^{T} X w = X^{T} Y \\\\<br>$$<br>两边左乘$(X^{T}X)^{-1}$，得<br>$$<br>\\hat w = (X^{T} X )^{-1} X^{T} Y<br>$$</p>"},{"title":"机器学习之局部加权线性回归","date":"2018-08-17T11:35:13.000Z","_content":"\n局部加权线性回归（Locally Weighted Linear Regression，LWLR）。\n\n在该算法中，给预测点附近的每个点赋予一定的权重，在这个子集上基于最小均方差来进行普通的回归。\n\n局部加权线性回归的均值误差可用下式表示\n$$\n\\sum_{i=1}^{m} w_i (y_i - x_i^{T} \\theta_i)^2\n$$\n其中，$w_i$是权重，$y_i$是真实值，$x_i$是输入值，$\\theta_i$为对应的回归系数。\n\n回归系数$w$为\n$$\n\\hat w = (X^{T} W X )^{-1} X^{T} W y\n$$\n","source":"_posts/machine-learning-locally-weighted-linear-regression.md","raw":"---\ntitle: 机器学习之局部加权线性回归\ndate: 2018-08-17 19:35:13\ntags: 机器学习\ncategories: 机器学习\n---\n\n局部加权线性回归（Locally Weighted Linear Regression，LWLR）。\n\n在该算法中，给预测点附近的每个点赋予一定的权重，在这个子集上基于最小均方差来进行普通的回归。\n\n局部加权线性回归的均值误差可用下式表示\n$$\n\\sum_{i=1}^{m} w_i (y_i - x_i^{T} \\theta_i)^2\n$$\n其中，$w_i$是权重，$y_i$是真实值，$x_i$是输入值，$\\theta_i$为对应的回归系数。\n\n回归系数$w$为\n$$\n\\hat w = (X^{T} W X )^{-1} X^{T} W y\n$$\n","slug":"machine-learning-locally-weighted-linear-regression","published":1,"updated":"2019-01-19T07:23:57.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aqg003ij1q0js7374ue","content":"<p>局部加权线性回归（Locally Weighted Linear Regression，LWLR）。</p>\n<p>在该算法中，给预测点附近的每个点赋予一定的权重，在这个子集上基于最小均方差来进行普通的回归。</p>\n<p>局部加权线性回归的均值误差可用下式表示<br>$$<br>\\sum_{i=1}^{m} w_i (y_i - x_i^{T} \\theta_i)^2<br>$$<br>其中，$w_i$是权重，$y_i$是真实值，$x_i$是输入值，$\\theta_i$为对应的回归系数。</p>\n<p>回归系数$w$为<br>$$<br>\\hat w = (X^{T} W X )^{-1} X^{T} W y<br>$$</p>\n","site":{"data":{}},"excerpt":"","more":"<p>局部加权线性回归（Locally Weighted Linear Regression，LWLR）。</p>\n<p>在该算法中，给预测点附近的每个点赋予一定的权重，在这个子集上基于最小均方差来进行普通的回归。</p>\n<p>局部加权线性回归的均值误差可用下式表示<br>$$<br>\\sum_{i=1}^{m} w_i (y_i - x_i^{T} \\theta_i)^2<br>$$<br>其中，$w_i$是权重，$y_i$是真实值，$x_i$是输入值，$\\theta_i$为对应的回归系数。</p>\n<p>回归系数$w$为<br>$$<br>\\hat w = (X^{T} W X )^{-1} X^{T} W y<br>$$</p>\n"},{"title":"机器学习之logistic回归","date":"2018-07-10T04:34:36.000Z","mathjax":true,"_content":"\n对于二分类任务，其输出标记为y ∈ {0,1}，因此我们需要一个将自变量z转换为0/1值，最理想的是\n\n“单位阶跃函数”（unit-step function），亦称Heaviside函数。\n$$\ny=\n\\begin{cases}\n0,  & \\text{z < 0} \\\\\\\n0.5, & \\text{z = 0} \\\\\\\n1,  & \\text{z > 0} \n\\end{cases}\n$$\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/07/15/heaviside.png)\n\n然而，单位阶跃函数的问题在于：该函数是一个不连续的分段函数，它在x=0处从0瞬间跳跃到了1。\n\n我们希望找到一个近似单位阶跃函数的“替代函数”（surrogate function），并希望它单调可微。对数几率函数正是这样一个替代函数。\n\n对数几率函数：\n$$\ny=\\frac{1}{1+e^{-z}}\n$$\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/07/15/logistic_1.png)\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/07/15/logistic_2.png)\n\n对数几率函数是一种Sigmoid函数（形似S的函数），它将z值转化为一个接近0或1的y值。从上面[-5,5]以及[-60,60]两张局部图可以看出，其在[-5,5]这个区间范围内变化很陡，函数值从0快速跳跃到了1。\n\n<!--more-->\n\n### 算法思想\n\n在每个特征上都乘以一个**回归系数**，然后把所有的结果值相加，将这个总和代入Sigmoid函数中，进而得到一个范围在0~1之间的数值。任何大于0.5的数据被分入1类，小于0.5则被归入0类。\n\n二项logistic回归模型：\n$$\nP(Y=1|x)=\\frac{1}{1+e^{-(w \\cdot x + b)}}=\\frac{e^{w \\cdot x+b}}{1+e^{w \\cdot x+b}}=h(x)\n$$\n\n$$\nP(Y=0|x)=\\frac{1}{1+e^{w \\cdot x+b}}\n$$\n\n其中，x ∈ $R^n$是输入向量，w ∈ $R^n$是权重向量，$w \\cdot x$为w和x的内积。\n\n方便起见，将输入向量和权重向量加以扩充，仍记作w，x，即\n$$\nw = (w^{(1)},w^{(2)},\\dots,w^{(n)},b)^T\n$$\n\n$$\nx=(x^{(1)},x^{(2)},\\dots,x^{(n)},1)^T\n$$\n\n此时，二项logistic回归模型：\n$$\nP(Y=1|x)=\\frac{e^{w \\cdot x}}{1+e^{w \\cdot x}}=h(x)\n$$\n\n$$\nP(Y=0|x)=\\frac{1}{1+e^{w \\cdot x}}\n$$\n\n我们可以通过最大似然估计法（maximum likelihood method）来估计w。\n\n似然函数：\n$$\n\\prod^{n}_{i=1}[{h(x_i)]^{y_i}}[1-h(x_i)]^{1-y_i}\n$$\n对数似然函数：\n$$\nL(w)=\\sum^n_{i=1} [ {y_i \\ln h(x_i)+(1-y_i) \\ln (1-h(x_i))}]\\\\\\\n=\\sum^n_{i=1} [y_i \\ln \\frac{h(x_i)}{1-h(x_i)}+\\ln(1-h(x_i))]\\\\\\\n=\\sum^n_{i=1}[{y_i ( w \\cdot x_i)-\\ln(1+\\rm e^{w \\cdot  x_i})}]\n$$\n从而\n$$\n\\hat w = argmax_w L(w)\n$$\n\n### 求最优回归系数\n\n#### 梯度上升法\n\n##### 算法思想\n\n大学高等数学下册中说，沿梯度方向的方向导数最大，也就是说，梯度方向是函数f(x,y)在某一点(x,y)处增长最快的方向。\n\n要找到某函数的最大值，最好的方法就是沿着该函数的梯度方向探寻。\n\n梯度上升算法的迭代公式：\n\n$$\nw=w+\\alpha \\cdot grad L(w)\n$$\n其中，$\\alpha$为步长，表示每次沿梯度方向移动的距离；grad L(w)表示L(w)的梯度。\n\n梯度公式\n$$\ngrad f(x,y,z) = \\frac{\\partial f}{\\partial x} \\cdot \\vec i + \\frac{\\partial f}{\\partial y} \\cdot \\vec j + \\frac{\\partial f}{\\partial z} \\cdot \\vec k\n$$\n根据之前求得的对数似然函数，对w求偏导数\n$$\n\\frac{\\partial L(w)}{\\partial w}=\\sum^n_{i=1}[{y_i x_{i}} - \\frac{x_{i}e^{w \\cdot x_i}}{1+e^{w \\cdot x_i}}]\\\\\\\n=\\sum^n_{i=1}{x_{i}(y_i-h(x_i))}\n$$\n故\n$$\ngrad L(w_1,w_2,\\dots,w_n)\n=\\sum_{k=1}^n \\frac{\\partial L(w)}{\\partial w_k}\\cdot \\vec{i_k}\\\\\\\n= (  \\sum_{i=1}^{n}x_{i1}(y_i-h(\\vec{x_i})), \\sum_{i=1}^{n}x_{i2}(y_i-h(\\vec{x_i})),\\dots,\\sum_{i=1}^{n}x_{in}(y_i-h(\\vec{x_i})))^T\n$$\n\n##### 代码实现\n\n```python\nimport numpy as np\n\ndef sigmoid(inputVector):\n    return 1.0/(1+np.exp(-inputVector))\n\ndef gradientAscent(dataMatrix,classLabels,iterations=500,alpha=0.001):\n    \"\"\"梯度上升算法\"\"\"\n    dataMatrix = np.mat(dataMatrix)\n    # transpose()将矩阵转置\n    labelMatrix = np.mat(classLabels).transpose()\n    m,n = np.shape(dataMatrix)\n    weights = ones((n,1))\n    for k in range(iterations):\n        h = sigmoid(dataMatrix*weights)\n        error = (labelMatrix-h)\n        weights = weights + alpha * dataMatrix.transpose() * error\n \treturn weights\n\ndef classifyVector(inputVector,weights):\n    \"\"\"logistic回归分类函数\"\"\"\n    p = sigmoid(inputVector*weights)\n    if p > 0.5:\n        return 1\n    else:\n        return 0\n```\n\n##### 随机梯度上升\n\n一次仅用一个样本点来更新回归系数。\n\n```python\ndef randomGradientAscent(dataMatrix,classLabels,alpha=0.001):\n    \"\"\"随机梯度上升算法\"\"\"\n    m,n = np.shape(dataMatrix)\n    weights = np.ones(n)\n    for i in range(m):\n        # dataMatrix[i]*weights 逐元素相乘\n        h = sigmoid(sum(dataMatrix[i]*weights))\n        error = classLabels[i]-h\n        weights = weights + alpha*dataMatrix[i]*error\nreturn weights        \n```\n\n##### 改进的随机梯度上升\n\n改进\n\n* 动态调整alpha\n* 随机选取样本来更新回归系数\n\n代码实现：\n\n```python\ndef improvedRandomGradientAscent(dataMatrix,classLabels,\n                                 iterations=500,alpha=0.001)\n\tm,n = np.shape(dataMatrix)\n    weights = np.ones(n)\n    for j in range(iterations):\n        dataIndex = range(m)\n        for i in range(m):\n            alpha = alpha + 4/(1+i+j)\n            randomIndex = int(np.random.uniform(0,len(dataIndex)))\n            h = sigmoid(sum(dataMatrix[randomIndex]*weights))\n            error = classLabels[randomIndex] - h\n            weights = weights + alpha * error * dataMatrix[randomIndex]\n            del dataIndex[randomIndex]\n    return weights\n```\n\n#### 梯度下降法\n\n梯度下降法与梯度上升法类似，用于求函数的最小值，其迭代公式如下：\n$$\nw=w-\\alpha \\cdot grad L(w)\n$$\n\n\n\n\n\n\n","source":"_posts/machine-learning-logistic-regression.md","raw":"---\ntitle: 机器学习之logistic回归\ndate: 2018-07-10 12:34:36\ntags: 机器学习\ncategories: 机器学习\nmathjax: true\n---\n\n对于二分类任务，其输出标记为y ∈ {0,1}，因此我们需要一个将自变量z转换为0/1值，最理想的是\n\n“单位阶跃函数”（unit-step function），亦称Heaviside函数。\n$$\ny=\n\\begin{cases}\n0,  & \\text{z < 0} \\\\\\\n0.5, & \\text{z = 0} \\\\\\\n1,  & \\text{z > 0} \n\\end{cases}\n$$\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/07/15/heaviside.png)\n\n然而，单位阶跃函数的问题在于：该函数是一个不连续的分段函数，它在x=0处从0瞬间跳跃到了1。\n\n我们希望找到一个近似单位阶跃函数的“替代函数”（surrogate function），并希望它单调可微。对数几率函数正是这样一个替代函数。\n\n对数几率函数：\n$$\ny=\\frac{1}{1+e^{-z}}\n$$\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/07/15/logistic_1.png)\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/07/15/logistic_2.png)\n\n对数几率函数是一种Sigmoid函数（形似S的函数），它将z值转化为一个接近0或1的y值。从上面[-5,5]以及[-60,60]两张局部图可以看出，其在[-5,5]这个区间范围内变化很陡，函数值从0快速跳跃到了1。\n\n<!--more-->\n\n### 算法思想\n\n在每个特征上都乘以一个**回归系数**，然后把所有的结果值相加，将这个总和代入Sigmoid函数中，进而得到一个范围在0~1之间的数值。任何大于0.5的数据被分入1类，小于0.5则被归入0类。\n\n二项logistic回归模型：\n$$\nP(Y=1|x)=\\frac{1}{1+e^{-(w \\cdot x + b)}}=\\frac{e^{w \\cdot x+b}}{1+e^{w \\cdot x+b}}=h(x)\n$$\n\n$$\nP(Y=0|x)=\\frac{1}{1+e^{w \\cdot x+b}}\n$$\n\n其中，x ∈ $R^n$是输入向量，w ∈ $R^n$是权重向量，$w \\cdot x$为w和x的内积。\n\n方便起见，将输入向量和权重向量加以扩充，仍记作w，x，即\n$$\nw = (w^{(1)},w^{(2)},\\dots,w^{(n)},b)^T\n$$\n\n$$\nx=(x^{(1)},x^{(2)},\\dots,x^{(n)},1)^T\n$$\n\n此时，二项logistic回归模型：\n$$\nP(Y=1|x)=\\frac{e^{w \\cdot x}}{1+e^{w \\cdot x}}=h(x)\n$$\n\n$$\nP(Y=0|x)=\\frac{1}{1+e^{w \\cdot x}}\n$$\n\n我们可以通过最大似然估计法（maximum likelihood method）来估计w。\n\n似然函数：\n$$\n\\prod^{n}_{i=1}[{h(x_i)]^{y_i}}[1-h(x_i)]^{1-y_i}\n$$\n对数似然函数：\n$$\nL(w)=\\sum^n_{i=1} [ {y_i \\ln h(x_i)+(1-y_i) \\ln (1-h(x_i))}]\\\\\\\n=\\sum^n_{i=1} [y_i \\ln \\frac{h(x_i)}{1-h(x_i)}+\\ln(1-h(x_i))]\\\\\\\n=\\sum^n_{i=1}[{y_i ( w \\cdot x_i)-\\ln(1+\\rm e^{w \\cdot  x_i})}]\n$$\n从而\n$$\n\\hat w = argmax_w L(w)\n$$\n\n### 求最优回归系数\n\n#### 梯度上升法\n\n##### 算法思想\n\n大学高等数学下册中说，沿梯度方向的方向导数最大，也就是说，梯度方向是函数f(x,y)在某一点(x,y)处增长最快的方向。\n\n要找到某函数的最大值，最好的方法就是沿着该函数的梯度方向探寻。\n\n梯度上升算法的迭代公式：\n\n$$\nw=w+\\alpha \\cdot grad L(w)\n$$\n其中，$\\alpha$为步长，表示每次沿梯度方向移动的距离；grad L(w)表示L(w)的梯度。\n\n梯度公式\n$$\ngrad f(x,y,z) = \\frac{\\partial f}{\\partial x} \\cdot \\vec i + \\frac{\\partial f}{\\partial y} \\cdot \\vec j + \\frac{\\partial f}{\\partial z} \\cdot \\vec k\n$$\n根据之前求得的对数似然函数，对w求偏导数\n$$\n\\frac{\\partial L(w)}{\\partial w}=\\sum^n_{i=1}[{y_i x_{i}} - \\frac{x_{i}e^{w \\cdot x_i}}{1+e^{w \\cdot x_i}}]\\\\\\\n=\\sum^n_{i=1}{x_{i}(y_i-h(x_i))}\n$$\n故\n$$\ngrad L(w_1,w_2,\\dots,w_n)\n=\\sum_{k=1}^n \\frac{\\partial L(w)}{\\partial w_k}\\cdot \\vec{i_k}\\\\\\\n= (  \\sum_{i=1}^{n}x_{i1}(y_i-h(\\vec{x_i})), \\sum_{i=1}^{n}x_{i2}(y_i-h(\\vec{x_i})),\\dots,\\sum_{i=1}^{n}x_{in}(y_i-h(\\vec{x_i})))^T\n$$\n\n##### 代码实现\n\n```python\nimport numpy as np\n\ndef sigmoid(inputVector):\n    return 1.0/(1+np.exp(-inputVector))\n\ndef gradientAscent(dataMatrix,classLabels,iterations=500,alpha=0.001):\n    \"\"\"梯度上升算法\"\"\"\n    dataMatrix = np.mat(dataMatrix)\n    # transpose()将矩阵转置\n    labelMatrix = np.mat(classLabels).transpose()\n    m,n = np.shape(dataMatrix)\n    weights = ones((n,1))\n    for k in range(iterations):\n        h = sigmoid(dataMatrix*weights)\n        error = (labelMatrix-h)\n        weights = weights + alpha * dataMatrix.transpose() * error\n \treturn weights\n\ndef classifyVector(inputVector,weights):\n    \"\"\"logistic回归分类函数\"\"\"\n    p = sigmoid(inputVector*weights)\n    if p > 0.5:\n        return 1\n    else:\n        return 0\n```\n\n##### 随机梯度上升\n\n一次仅用一个样本点来更新回归系数。\n\n```python\ndef randomGradientAscent(dataMatrix,classLabels,alpha=0.001):\n    \"\"\"随机梯度上升算法\"\"\"\n    m,n = np.shape(dataMatrix)\n    weights = np.ones(n)\n    for i in range(m):\n        # dataMatrix[i]*weights 逐元素相乘\n        h = sigmoid(sum(dataMatrix[i]*weights))\n        error = classLabels[i]-h\n        weights = weights + alpha*dataMatrix[i]*error\nreturn weights        \n```\n\n##### 改进的随机梯度上升\n\n改进\n\n* 动态调整alpha\n* 随机选取样本来更新回归系数\n\n代码实现：\n\n```python\ndef improvedRandomGradientAscent(dataMatrix,classLabels,\n                                 iterations=500,alpha=0.001)\n\tm,n = np.shape(dataMatrix)\n    weights = np.ones(n)\n    for j in range(iterations):\n        dataIndex = range(m)\n        for i in range(m):\n            alpha = alpha + 4/(1+i+j)\n            randomIndex = int(np.random.uniform(0,len(dataIndex)))\n            h = sigmoid(sum(dataMatrix[randomIndex]*weights))\n            error = classLabels[randomIndex] - h\n            weights = weights + alpha * error * dataMatrix[randomIndex]\n            del dataIndex[randomIndex]\n    return weights\n```\n\n#### 梯度下降法\n\n梯度下降法与梯度上升法类似，用于求函数的最小值，其迭代公式如下：\n$$\nw=w-\\alpha \\cdot grad L(w)\n$$\n\n\n\n\n\n\n","slug":"machine-learning-logistic-regression","published":1,"updated":"2019-01-19T07:23:57.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aqh003kj1q072jao0mp","content":"<p>对于二分类任务，其输出标记为y ∈ {0,1}，因此我们需要一个将自变量z转换为0/1值，最理想的是</p>\n<p>“单位阶跃函数”（unit-step function），亦称Heaviside函数。<br>$$<br>y=<br>\\begin{cases}<br>0,  &amp; \\text{z &lt; 0} \\\\<br>0.5, &amp; \\text{z = 0} \\\\<br>1,  &amp; \\text{z &gt; 0}<br>\\end{cases}<br>$$<br><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/07/15/heaviside.png\" alt=\"\"></p>\n<p>然而，单位阶跃函数的问题在于：该函数是一个不连续的分段函数，它在x=0处从0瞬间跳跃到了1。</p>\n<p>我们希望找到一个近似单位阶跃函数的“替代函数”（surrogate function），并希望它单调可微。对数几率函数正是这样一个替代函数。</p>\n<p>对数几率函数：<br>$$<br>y=\\frac{1}{1+e^{-z}}<br>$$<br><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/07/15/logistic_1.png\" alt=\"\"></p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/07/15/logistic_2.png\" alt=\"\"></p>\n<p>对数几率函数是一种Sigmoid函数（形似S的函数），它将z值转化为一个接近0或1的y值。从上面[-5,5]以及[-60,60]两张局部图可以看出，其在[-5,5]这个区间范围内变化很陡，函数值从0快速跳跃到了1。</p>\n<a id=\"more\"></a>\n<h3 id=\"算法思想\"><a href=\"#算法思想\" class=\"headerlink\" title=\"算法思想\"></a>算法思想</h3><p>在每个特征上都乘以一个<strong>回归系数</strong>，然后把所有的结果值相加，将这个总和代入Sigmoid函数中，进而得到一个范围在0~1之间的数值。任何大于0.5的数据被分入1类，小于0.5则被归入0类。</p>\n<p>二项logistic回归模型：<br>$$<br>P(Y=1|x)=\\frac{1}{1+e^{-(w \\cdot x + b)}}=\\frac{e^{w \\cdot x+b}}{1+e^{w \\cdot x+b}}=h(x)<br>$$</p>\n<p>$$<br>P(Y=0|x)=\\frac{1}{1+e^{w \\cdot x+b}}<br>$$</p>\n<p>其中，x ∈ $R^n$是输入向量，w ∈ $R^n$是权重向量，$w \\cdot x$为w和x的内积。</p>\n<p>方便起见，将输入向量和权重向量加以扩充，仍记作w，x，即<br>$$<br>w = (w^{(1)},w^{(2)},\\dots,w^{(n)},b)^T<br>$$</p>\n<p>$$<br>x=(x^{(1)},x^{(2)},\\dots,x^{(n)},1)^T<br>$$</p>\n<p>此时，二项logistic回归模型：<br>$$<br>P(Y=1|x)=\\frac{e^{w \\cdot x}}{1+e^{w \\cdot x}}=h(x)<br>$$</p>\n<p>$$<br>P(Y=0|x)=\\frac{1}{1+e^{w \\cdot x}}<br>$$</p>\n<p>我们可以通过最大似然估计法（maximum likelihood method）来估计w。</p>\n<p>似然函数：<br>$$<br>\\prod^{n}_{i=1}[{h(x_i)]^{y_i}}[1-h(x_i)]^{1-y_i}<br>$$<br>对数似然函数：<br>$$<br>L(w)=\\sum^n_{i=1} [ {y_i \\ln h(x_i)+(1-y_i) \\ln (1-h(x_i))}]\\\\<br>=\\sum^n_{i=1} [y_i \\ln \\frac{h(x_i)}{1-h(x_i)}+\\ln(1-h(x_i))]\\\\<br>=\\sum^n_{i=1}[{y_i ( w \\cdot x_i)-\\ln(1+\\rm e^{w \\cdot  x_i})}]<br>$$<br>从而<br>$$<br>\\hat w = argmax_w L(w)<br>$$</p>\n<h3 id=\"求最优回归系数\"><a href=\"#求最优回归系数\" class=\"headerlink\" title=\"求最优回归系数\"></a>求最优回归系数</h3><h4 id=\"梯度上升法\"><a href=\"#梯度上升法\" class=\"headerlink\" title=\"梯度上升法\"></a>梯度上升法</h4><h5 id=\"算法思想-1\"><a href=\"#算法思想-1\" class=\"headerlink\" title=\"算法思想\"></a>算法思想</h5><p>大学高等数学下册中说，沿梯度方向的方向导数最大，也就是说，梯度方向是函数f(x,y)在某一点(x,y)处增长最快的方向。</p>\n<p>要找到某函数的最大值，最好的方法就是沿着该函数的梯度方向探寻。</p>\n<p>梯度上升算法的迭代公式：</p>\n<p>$$<br>w=w+\\alpha \\cdot grad L(w)<br>$$<br>其中，$\\alpha$为步长，表示每次沿梯度方向移动的距离；grad L(w)表示L(w)的梯度。</p>\n<p>梯度公式<br>$$<br>grad f(x,y,z) = \\frac{\\partial f}{\\partial x} \\cdot \\vec i + \\frac{\\partial f}{\\partial y} \\cdot \\vec j + \\frac{\\partial f}{\\partial z} \\cdot \\vec k<br>$$<br>根据之前求得的对数似然函数，对w求偏导数<br>$$<br>\\frac{\\partial L(w)}{\\partial w}=\\sum^n_{i=1}[{y_i x_{i}} - \\frac{x_{i}e^{w \\cdot x_i}}{1+e^{w \\cdot x_i}}]\\\\<br>=\\sum^n_{i=1}{x_{i}(y_i-h(x_i))}<br>$$<br>故<br>$$<br>grad L(w_1,w_2,\\dots,w_n)<br>=\\sum_{k=1}^n \\frac{\\partial L(w)}{\\partial w_k}\\cdot \\vec{i_k}\\\\<br>= (  \\sum_{i=1}^{n}x_{i1}(y_i-h(\\vec{x_i})), \\sum_{i=1}^{n}x_{i2}(y_i-h(\\vec{x_i})),\\dots,\\sum_{i=1}^{n}x_{in}(y_i-h(\\vec{x_i})))^T<br>$$</p>\n<h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sigmoid</span><span class=\"params\">(inputVector)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1.0</span>/(<span class=\"number\">1</span>+np.exp(-inputVector))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gradientAscent</span><span class=\"params\">(dataMatrix,classLabels,iterations=<span class=\"number\">500</span>,alpha=<span class=\"number\">0.001</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"梯度上升算法\"\"\"</span></span><br><span class=\"line\">    dataMatrix = np.mat(dataMatrix)</span><br><span class=\"line\">    <span class=\"comment\"># transpose()将矩阵转置</span></span><br><span class=\"line\">    labelMatrix = np.mat(classLabels).transpose()</span><br><span class=\"line\">    m,n = np.shape(dataMatrix)</span><br><span class=\"line\">    weights = ones((n,<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(iterations):</span><br><span class=\"line\">        h = sigmoid(dataMatrix*weights)</span><br><span class=\"line\">        error = (labelMatrix-h)</span><br><span class=\"line\">        weights = weights + alpha * dataMatrix.transpose() * error</span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> weights</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">classifyVector</span><span class=\"params\">(inputVector,weights)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"logistic回归分类函数\"\"\"</span></span><br><span class=\"line\">    p = sigmoid(inputVector*weights)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> p &gt; <span class=\"number\">0.5</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"随机梯度上升\"><a href=\"#随机梯度上升\" class=\"headerlink\" title=\"随机梯度上升\"></a>随机梯度上升</h5><p>一次仅用一个样本点来更新回归系数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">randomGradientAscent</span><span class=\"params\">(dataMatrix,classLabels,alpha=<span class=\"number\">0.001</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"随机梯度上升算法\"\"\"</span></span><br><span class=\"line\">    m,n = np.shape(dataMatrix)</span><br><span class=\"line\">    weights = np.ones(n)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">        <span class=\"comment\"># dataMatrix[i]*weights 逐元素相乘</span></span><br><span class=\"line\">        h = sigmoid(sum(dataMatrix[i]*weights))</span><br><span class=\"line\">        error = classLabels[i]-h</span><br><span class=\"line\">        weights = weights + alpha*dataMatrix[i]*error</span><br><span class=\"line\"><span class=\"keyword\">return</span> weights</span><br></pre></td></tr></table></figure>\n<h5 id=\"改进的随机梯度上升\"><a href=\"#改进的随机梯度上升\" class=\"headerlink\" title=\"改进的随机梯度上升\"></a>改进的随机梯度上升</h5><p>改进</p>\n<ul>\n<li>动态调整alpha</li>\n<li>随机选取样本来更新回归系数</li>\n</ul>\n<p>代码实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">improvedRandomGradientAscent</span><span class=\"params\">(dataMatrix,classLabels,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                 iterations=<span class=\"number\">500</span>,alpha=<span class=\"number\">0.001</span>)</span></span></span><br><span class=\"line\">\tm,n = np.shape(dataMatrix)</span><br><span class=\"line\">    weights = np.ones(n)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(iterations):</span><br><span class=\"line\">        dataIndex = range(m)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            alpha = alpha + <span class=\"number\">4</span>/(<span class=\"number\">1</span>+i+j)</span><br><span class=\"line\">            randomIndex = int(np.random.uniform(<span class=\"number\">0</span>,len(dataIndex)))</span><br><span class=\"line\">            h = sigmoid(sum(dataMatrix[randomIndex]*weights))</span><br><span class=\"line\">            error = classLabels[randomIndex] - h</span><br><span class=\"line\">            weights = weights + alpha * error * dataMatrix[randomIndex]</span><br><span class=\"line\">            <span class=\"keyword\">del</span> dataIndex[randomIndex]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> weights</span><br></pre></td></tr></table></figure>\n<h4 id=\"梯度下降法\"><a href=\"#梯度下降法\" class=\"headerlink\" title=\"梯度下降法\"></a>梯度下降法</h4><p>梯度下降法与梯度上升法类似，用于求函数的最小值，其迭代公式如下：<br>$$<br>w=w-\\alpha \\cdot grad L(w)<br>$$</p>\n","site":{"data":{}},"excerpt":"<p>对于二分类任务，其输出标记为y ∈ {0,1}，因此我们需要一个将自变量z转换为0/1值，最理想的是</p>\n<p>“单位阶跃函数”（unit-step function），亦称Heaviside函数。<br>$$<br>y=<br>\\begin{cases}<br>0,  &amp; \\text{z &lt; 0} \\\\<br>0.5, &amp; \\text{z = 0} \\\\<br>1,  &amp; \\text{z &gt; 0}<br>\\end{cases}<br>$$<br><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/07/15/heaviside.png\" alt=\"\"></p>\n<p>然而，单位阶跃函数的问题在于：该函数是一个不连续的分段函数，它在x=0处从0瞬间跳跃到了1。</p>\n<p>我们希望找到一个近似单位阶跃函数的“替代函数”（surrogate function），并希望它单调可微。对数几率函数正是这样一个替代函数。</p>\n<p>对数几率函数：<br>$$<br>y=\\frac{1}{1+e^{-z}}<br>$$<br><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/07/15/logistic_1.png\" alt=\"\"></p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/07/15/logistic_2.png\" alt=\"\"></p>\n<p>对数几率函数是一种Sigmoid函数（形似S的函数），它将z值转化为一个接近0或1的y值。从上面[-5,5]以及[-60,60]两张局部图可以看出，其在[-5,5]这个区间范围内变化很陡，函数值从0快速跳跃到了1。</p>","more":"<h3 id=\"算法思想\"><a href=\"#算法思想\" class=\"headerlink\" title=\"算法思想\"></a>算法思想</h3><p>在每个特征上都乘以一个<strong>回归系数</strong>，然后把所有的结果值相加，将这个总和代入Sigmoid函数中，进而得到一个范围在0~1之间的数值。任何大于0.5的数据被分入1类，小于0.5则被归入0类。</p>\n<p>二项logistic回归模型：<br>$$<br>P(Y=1|x)=\\frac{1}{1+e^{-(w \\cdot x + b)}}=\\frac{e^{w \\cdot x+b}}{1+e^{w \\cdot x+b}}=h(x)<br>$$</p>\n<p>$$<br>P(Y=0|x)=\\frac{1}{1+e^{w \\cdot x+b}}<br>$$</p>\n<p>其中，x ∈ $R^n$是输入向量，w ∈ $R^n$是权重向量，$w \\cdot x$为w和x的内积。</p>\n<p>方便起见，将输入向量和权重向量加以扩充，仍记作w，x，即<br>$$<br>w = (w^{(1)},w^{(2)},\\dots,w^{(n)},b)^T<br>$$</p>\n<p>$$<br>x=(x^{(1)},x^{(2)},\\dots,x^{(n)},1)^T<br>$$</p>\n<p>此时，二项logistic回归模型：<br>$$<br>P(Y=1|x)=\\frac{e^{w \\cdot x}}{1+e^{w \\cdot x}}=h(x)<br>$$</p>\n<p>$$<br>P(Y=0|x)=\\frac{1}{1+e^{w \\cdot x}}<br>$$</p>\n<p>我们可以通过最大似然估计法（maximum likelihood method）来估计w。</p>\n<p>似然函数：<br>$$<br>\\prod^{n}_{i=1}[{h(x_i)]^{y_i}}[1-h(x_i)]^{1-y_i}<br>$$<br>对数似然函数：<br>$$<br>L(w)=\\sum^n_{i=1} [ {y_i \\ln h(x_i)+(1-y_i) \\ln (1-h(x_i))}]\\\\<br>=\\sum^n_{i=1} [y_i \\ln \\frac{h(x_i)}{1-h(x_i)}+\\ln(1-h(x_i))]\\\\<br>=\\sum^n_{i=1}[{y_i ( w \\cdot x_i)-\\ln(1+\\rm e^{w \\cdot  x_i})}]<br>$$<br>从而<br>$$<br>\\hat w = argmax_w L(w)<br>$$</p>\n<h3 id=\"求最优回归系数\"><a href=\"#求最优回归系数\" class=\"headerlink\" title=\"求最优回归系数\"></a>求最优回归系数</h3><h4 id=\"梯度上升法\"><a href=\"#梯度上升法\" class=\"headerlink\" title=\"梯度上升法\"></a>梯度上升法</h4><h5 id=\"算法思想-1\"><a href=\"#算法思想-1\" class=\"headerlink\" title=\"算法思想\"></a>算法思想</h5><p>大学高等数学下册中说，沿梯度方向的方向导数最大，也就是说，梯度方向是函数f(x,y)在某一点(x,y)处增长最快的方向。</p>\n<p>要找到某函数的最大值，最好的方法就是沿着该函数的梯度方向探寻。</p>\n<p>梯度上升算法的迭代公式：</p>\n<p>$$<br>w=w+\\alpha \\cdot grad L(w)<br>$$<br>其中，$\\alpha$为步长，表示每次沿梯度方向移动的距离；grad L(w)表示L(w)的梯度。</p>\n<p>梯度公式<br>$$<br>grad f(x,y,z) = \\frac{\\partial f}{\\partial x} \\cdot \\vec i + \\frac{\\partial f}{\\partial y} \\cdot \\vec j + \\frac{\\partial f}{\\partial z} \\cdot \\vec k<br>$$<br>根据之前求得的对数似然函数，对w求偏导数<br>$$<br>\\frac{\\partial L(w)}{\\partial w}=\\sum^n_{i=1}[{y_i x_{i}} - \\frac{x_{i}e^{w \\cdot x_i}}{1+e^{w \\cdot x_i}}]\\\\<br>=\\sum^n_{i=1}{x_{i}(y_i-h(x_i))}<br>$$<br>故<br>$$<br>grad L(w_1,w_2,\\dots,w_n)<br>=\\sum_{k=1}^n \\frac{\\partial L(w)}{\\partial w_k}\\cdot \\vec{i_k}\\\\<br>= (  \\sum_{i=1}^{n}x_{i1}(y_i-h(\\vec{x_i})), \\sum_{i=1}^{n}x_{i2}(y_i-h(\\vec{x_i})),\\dots,\\sum_{i=1}^{n}x_{in}(y_i-h(\\vec{x_i})))^T<br>$$</p>\n<h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sigmoid</span><span class=\"params\">(inputVector)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1.0</span>/(<span class=\"number\">1</span>+np.exp(-inputVector))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gradientAscent</span><span class=\"params\">(dataMatrix,classLabels,iterations=<span class=\"number\">500</span>,alpha=<span class=\"number\">0.001</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"梯度上升算法\"\"\"</span></span><br><span class=\"line\">    dataMatrix = np.mat(dataMatrix)</span><br><span class=\"line\">    <span class=\"comment\"># transpose()将矩阵转置</span></span><br><span class=\"line\">    labelMatrix = np.mat(classLabels).transpose()</span><br><span class=\"line\">    m,n = np.shape(dataMatrix)</span><br><span class=\"line\">    weights = ones((n,<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(iterations):</span><br><span class=\"line\">        h = sigmoid(dataMatrix*weights)</span><br><span class=\"line\">        error = (labelMatrix-h)</span><br><span class=\"line\">        weights = weights + alpha * dataMatrix.transpose() * error</span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> weights</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">classifyVector</span><span class=\"params\">(inputVector,weights)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"logistic回归分类函数\"\"\"</span></span><br><span class=\"line\">    p = sigmoid(inputVector*weights)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> p &gt; <span class=\"number\">0.5</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"随机梯度上升\"><a href=\"#随机梯度上升\" class=\"headerlink\" title=\"随机梯度上升\"></a>随机梯度上升</h5><p>一次仅用一个样本点来更新回归系数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">randomGradientAscent</span><span class=\"params\">(dataMatrix,classLabels,alpha=<span class=\"number\">0.001</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"随机梯度上升算法\"\"\"</span></span><br><span class=\"line\">    m,n = np.shape(dataMatrix)</span><br><span class=\"line\">    weights = np.ones(n)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">        <span class=\"comment\"># dataMatrix[i]*weights 逐元素相乘</span></span><br><span class=\"line\">        h = sigmoid(sum(dataMatrix[i]*weights))</span><br><span class=\"line\">        error = classLabels[i]-h</span><br><span class=\"line\">        weights = weights + alpha*dataMatrix[i]*error</span><br><span class=\"line\"><span class=\"keyword\">return</span> weights</span><br></pre></td></tr></table></figure>\n<h5 id=\"改进的随机梯度上升\"><a href=\"#改进的随机梯度上升\" class=\"headerlink\" title=\"改进的随机梯度上升\"></a>改进的随机梯度上升</h5><p>改进</p>\n<ul>\n<li>动态调整alpha</li>\n<li>随机选取样本来更新回归系数</li>\n</ul>\n<p>代码实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">improvedRandomGradientAscent</span><span class=\"params\">(dataMatrix,classLabels,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                 iterations=<span class=\"number\">500</span>,alpha=<span class=\"number\">0.001</span>)</span></span></span><br><span class=\"line\">\tm,n = np.shape(dataMatrix)</span><br><span class=\"line\">    weights = np.ones(n)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(iterations):</span><br><span class=\"line\">        dataIndex = range(m)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            alpha = alpha + <span class=\"number\">4</span>/(<span class=\"number\">1</span>+i+j)</span><br><span class=\"line\">            randomIndex = int(np.random.uniform(<span class=\"number\">0</span>,len(dataIndex)))</span><br><span class=\"line\">            h = sigmoid(sum(dataMatrix[randomIndex]*weights))</span><br><span class=\"line\">            error = classLabels[randomIndex] - h</span><br><span class=\"line\">            weights = weights + alpha * error * dataMatrix[randomIndex]</span><br><span class=\"line\">            <span class=\"keyword\">del</span> dataIndex[randomIndex]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> weights</span><br></pre></td></tr></table></figure>\n<h4 id=\"梯度下降法\"><a href=\"#梯度下降法\" class=\"headerlink\" title=\"梯度下降法\"></a>梯度下降法</h4><p>梯度下降法与梯度上升法类似，用于求函数的最小值，其迭代公式如下：<br>$$<br>w=w-\\alpha \\cdot grad L(w)<br>$$</p>"},{"title":"机器学习之朴素贝叶斯","date":"2018-07-02T09:11:33.000Z","mathjax":true,"_content":"\n在讲朴素贝叶斯之前，我们先来回顾一下大学二年级概率论中的相关知识．\n\n条件概率公式：\n\n$$P(A|B) = \\frac{P(AB)}{P(B)}$$ \n\n$$=> P(AB) = P(A|B)P(B)$$\n\n全概率公式：\n\n$$P(A)=\\sum_{i=1}^{\\infty}{P(B_i)P(A|B_i)}$$\n\n贝叶斯公式：\n\n$$P(B_i|A)=\\frac{P(AB_i)}{P(A)}=\\frac{P(A|B_i)P(B_i)}{\\sum_{i=1}^{\\infty}{P(B_i)P(A|B_i)}}$$\n\n<!--more-->\n\n### 算法思想\n\n朴素贝叶斯是贝叶斯决策理论的一部分，而贝叶斯决策理论的核心思想是**选择具有最高概率的决策**．\n\n举个很简单的例子，一般网站评论或者游戏聊天都会对侮辱性词汇进行屏蔽过滤．\n\n假设现在存在一条评论，如何判断它是否包含侮辱性词汇？我们用P1(w)表示评论w包含侮辱性词汇的概率，用p2(w)表示评论w不包含侮辱性词汇的概率，那么对于评论w，可以用下面的规则来判断它的类别：\n\n* 如果P1(w) &gt; P2(w) ，那么w为包含侮辱性词汇的评论．\n* 如果P2(w) &gt; P1(w)，那么w为不包含侮辱性词汇的评论．\n\n### 假设前提\n\n朴素贝叶斯是用于文档分类的常用算法，它是基于以下假设对贝叶斯分类器的一个扩展．\n\n* 特征之间相互独立，即一个特征出现的可能性与其他特征没有关系．比如，如果文档中一个词出现的概率不依赖于文档中的其他词，那么文档中词与词之间相互独立．\n* 每个特征同等重要．\n\n我们知道这两个假设过于简单，这也是之所以称之为朴素（navie）贝叶斯的原因．\n\n### 理论模型\n\n$$P(c|\\mathbf{x})=\\frac{P(c)P(\\mathbf{x}|c)}{P(\\mathbf{x})}$$\n\n其中，P(c)是类＂先验＂(prior)概率，$P(\\mathbf{x}|c)$是样本x相对于类标记c的类条件概率，或称为＂似然＂，$P(\\mathbf{x})$是用于归一化的＂证据＂因子．\n\n对于给定样本x，证据因子$P(\\mathbf{x})$与类标记无关，因此估计$P(c|\\mathbf{x})$的问题就转化为如何基于训练数据D来估计先验概率P(c)和条件概率$P(\\mathbf{x}|c)$\n\n根据大数定律，当训练集包含充足的独立同分布样本时，P(c)可通过各类样本出现的频率来进行估计．\n\n对于条件概率$P(\\mathbf{x}|c)$来说，由于假设x的各个属性相互独立，因此\n\n$$P(\\mathbf{x}|c) = P(x_1x_2...x_n|c) = P(x_1|c)P(x_2|c) \\cdot\\cdot\\cdot P(x_n|c) = \\prod_{i=1}^{n}{P(x_i|c)}$$ \n\n其中，n为**x**的属性个数\n\n由于连乘操作易造成下溢出，即太多很小的数相乘导致结果四舍五入后得到0，通常使用对数进行处理，将连乘变为累加，从而避免下溢出．因此，\n\n令$$L = P(c)P(\\mathbf{x}|c)$$\n\n则$$log L = log P(c) + log P(\\mathbf{x}|c) = log P(c) + \\sum_{i=1}^{n}{log P(x_i|c)}$$\n\n### 拉普拉斯修正\n\n为了避免其他属性（特征）携带的信息被训练集中未出现的属性值＂抹去＂，即为了避免多个条件概率相乘时某个概率值为0，导致最后的乘积为0，在估计概率值时通常要进行＂平滑＂，常用＂拉普拉斯修正＂．\n\n具体来说，令N表示训练集D中可能的类别数，$N_i$表示第i个属性可能的取值数，则\n\n$$P(c)=\\frac{|D_c|+1}{|D|+N}$$\n\n$$P(w_i|c)=\\frac{|D_{c,x_i}|+1}{|D_c|+N_i}$$\n\n### 示例：文本分类\n\n朴素贝叶斯分类器通常有以下两种实现方式\n\n- 词集模型：将每个词的出现与否作为一个特征，值为1表示词条出现在文档中，0表示词条未出现\n- 词袋模型：将每个词在文档中出现的次数作为一个特征\n\n下面我们用词集模型，来实现一个区分某一评论是否包含侮辱性词汇的朴素贝叶斯分类器．\n\n创建一个bayes.py文件，\n\n* 将训练集转化为词汇列表\n\n```python\nfrom numpy import *\ndef createVocabularyList(dataset):\n    \"\"\"\n    从数据集中抽取不重复的词汇列表\n    dataset: 给定的数据集\n    \"\"\"\n    vocabularySet = set([])　#　创建一个空集合 \n    for document in dataset:\n        # 操作符｜表示求两个集合的并集\n        vocabularySet = vocabulary | set(document)\n    return list(vocabularySet)\n```\n\n* 将训练集中的某一条数据转化为向量\n\n```python\ndef setOfWords2Vector(vocabularyList,inputSet):\n    \"\"\"\n    根据词汇列表，将输入的数据集转化为与词汇列表维度相同的向量\n    \"\"\"\n    # 创建一个长度为len(vocabularyList)，所含元素都为0的向量\n    # 等价于 \n    # returnVector = []\n    # for i in range(len(vocabularyList)):\n    #     returnVector[i] = 0\n    returnVector = [0]*len(vocabularyList)\n    for word in inputSet:\n        if word in vocabularyList:\n            returnVector[vocabularyList.index(word)] = 1\n    return returnVector\n```\n\n* 创建朴素贝叶斯分类器训练函数\n\n```python\ndef trainNavieBayes(trainMatrix,trainCategory):\n    \"\"\"\n    贝叶斯分类器训练函数\n    trainMatrix: numpy中array类型，是由训练集转化的所有向量组成的矩阵\n    trainCategory: 由矩阵中每一向量的所属类别组成的列表\n    \"\"\"\n    numTrainDocs = len(trainMatrix)\n    numWords = len(trainMatrix[0])\n    # pAbusive = sum(trainCategory)/float(numTrainDocs)\n    # 拉普拉斯修正\n    pAbusive = (sum(trainCategory) + 1)/(float(numTrainDocs) + 2)\n    p0Vector = zeros(numWords);p1Vector = zeros(numWords)\n    # 计算某一类别下的总词数\n    # p0NumWords = 0.0;p1NumWords = 0.0\n    # 使用拉普拉斯修正后\n    p0NumWords = 2.0;p1NumWords = 2.0\n    for i in range(numTrainDocs):\n        if trainCategory[i] == 1:\n            p1Vector += trainMatrix[i]\n            p1NumWords += sum(trainMatrix[i])\n        else:\n            p0Vector += trainMatrix[i]\n            p0NumWords += sum(trainMatrix[i])\n    # 用某个类别下某个词出现的次数除以该类别下的总词数，\n    # 即求得某一类别c在每一个属性上的概率p(ci)\n    # p0Vector = p0Vector/p0NumWords\n    # p1Vector = p1Vector/p1NumWords\n    p0Vector = log(p0Vector/p0NumWords)\n    p1Vector = log(p1Vector/p1NumWords)\n    return p0Vector,p1Vector,pAbusive\n```\n\n* 创建朴素贝叶斯分类函数\n\n```python\ndef classifyNavieBayes(vector2Classify,p0Vector,p1Vector,pc1):\n    p1 = sum(vector2Classify*p1Vector) + log(pc1)\n    p0 = sum(vector2Classify*p0Vector) + log(1.0-pc1)\n    if p1 > p0:\n        return 1\n    else:\n        return 0\n```\n\n上面程序的第2行，就是在求\n\n$$log L = log P(c) + log P(\\mathbf{x}|c) = log P(c) + \\sum_{i=1}^{n}{log P(x_i|c)}$$\n\n接下来我们测试一下刚才的分类器是否有效\n\n```python\ndef loadDataSet():\n    postingList = [['my','dog','has','flea','problems','help','please'],\n                  ['maybe','not','take','him','to','dog','park','stupid'],\n                  ['my','dalmation','is','so','cute','I','love','him'],\n                  ['stop','posting','stupid','worthless','garbage'],\n                  ['mr','licks','ate','my','steak','how','to','stop','him'],\n                  ['quit','buying','worthless','dog','food','stupid']]\n    # 0表示正常言论，１表示包含侮辱性词汇的评论\n    categoryVector = [0,1,0,1,0,1]\n    return postingList,categoryVector\ndef testNavieBayes():\n    listOfPosts,listClasses = loadDataSet()\n    vocabularyList = createVocabularyList(listOfPosts)\n    trainMatrix = []\n    for post in listOfPosts:\n        trainMatrix.append(setOfWords2Vector(vocabularyList,post))\n    p0Vector,p1Vector,pc1 = trainNavieBayes(array(trainMatrix),array(listClaasses))\n    testPost = ['love','my','dalmation']\n    testVector = array(setOfWords2Vector(vocabularyList,testPost))\n    print(str(testPost)+\" 被分类为:\"+\n          classifNavieBayes(testVector,p0Vector,p1Vector,pc1))\n    \n    testPost = ['stupid','garbage']\n    testVector = array(setOfWords2Vector(vocabularyList,testPost))\n    print(str(testPost)+\" 被分类为:\"+\n          classifNavieBayes(testVector,p0Vector,p1Vector,pc1))\n```\n\n<hr>\n\n参考资料\n\n* 机器学习实战, Peter Harrington, 人民邮电出版社\n* 机器学习, 周志华, 清华大学出版社\n\n","source":"_posts/machine-learning-navie-bayes.md","raw":"---\ntitle: 机器学习之朴素贝叶斯\ndate: 2018-07-02 17:11:33\ntags: 机器学习\ncategories: 机器学习\nmathjax: true\n---\n\n在讲朴素贝叶斯之前，我们先来回顾一下大学二年级概率论中的相关知识．\n\n条件概率公式：\n\n$$P(A|B) = \\frac{P(AB)}{P(B)}$$ \n\n$$=> P(AB) = P(A|B)P(B)$$\n\n全概率公式：\n\n$$P(A)=\\sum_{i=1}^{\\infty}{P(B_i)P(A|B_i)}$$\n\n贝叶斯公式：\n\n$$P(B_i|A)=\\frac{P(AB_i)}{P(A)}=\\frac{P(A|B_i)P(B_i)}{\\sum_{i=1}^{\\infty}{P(B_i)P(A|B_i)}}$$\n\n<!--more-->\n\n### 算法思想\n\n朴素贝叶斯是贝叶斯决策理论的一部分，而贝叶斯决策理论的核心思想是**选择具有最高概率的决策**．\n\n举个很简单的例子，一般网站评论或者游戏聊天都会对侮辱性词汇进行屏蔽过滤．\n\n假设现在存在一条评论，如何判断它是否包含侮辱性词汇？我们用P1(w)表示评论w包含侮辱性词汇的概率，用p2(w)表示评论w不包含侮辱性词汇的概率，那么对于评论w，可以用下面的规则来判断它的类别：\n\n* 如果P1(w) &gt; P2(w) ，那么w为包含侮辱性词汇的评论．\n* 如果P2(w) &gt; P1(w)，那么w为不包含侮辱性词汇的评论．\n\n### 假设前提\n\n朴素贝叶斯是用于文档分类的常用算法，它是基于以下假设对贝叶斯分类器的一个扩展．\n\n* 特征之间相互独立，即一个特征出现的可能性与其他特征没有关系．比如，如果文档中一个词出现的概率不依赖于文档中的其他词，那么文档中词与词之间相互独立．\n* 每个特征同等重要．\n\n我们知道这两个假设过于简单，这也是之所以称之为朴素（navie）贝叶斯的原因．\n\n### 理论模型\n\n$$P(c|\\mathbf{x})=\\frac{P(c)P(\\mathbf{x}|c)}{P(\\mathbf{x})}$$\n\n其中，P(c)是类＂先验＂(prior)概率，$P(\\mathbf{x}|c)$是样本x相对于类标记c的类条件概率，或称为＂似然＂，$P(\\mathbf{x})$是用于归一化的＂证据＂因子．\n\n对于给定样本x，证据因子$P(\\mathbf{x})$与类标记无关，因此估计$P(c|\\mathbf{x})$的问题就转化为如何基于训练数据D来估计先验概率P(c)和条件概率$P(\\mathbf{x}|c)$\n\n根据大数定律，当训练集包含充足的独立同分布样本时，P(c)可通过各类样本出现的频率来进行估计．\n\n对于条件概率$P(\\mathbf{x}|c)$来说，由于假设x的各个属性相互独立，因此\n\n$$P(\\mathbf{x}|c) = P(x_1x_2...x_n|c) = P(x_1|c)P(x_2|c) \\cdot\\cdot\\cdot P(x_n|c) = \\prod_{i=1}^{n}{P(x_i|c)}$$ \n\n其中，n为**x**的属性个数\n\n由于连乘操作易造成下溢出，即太多很小的数相乘导致结果四舍五入后得到0，通常使用对数进行处理，将连乘变为累加，从而避免下溢出．因此，\n\n令$$L = P(c)P(\\mathbf{x}|c)$$\n\n则$$log L = log P(c) + log P(\\mathbf{x}|c) = log P(c) + \\sum_{i=1}^{n}{log P(x_i|c)}$$\n\n### 拉普拉斯修正\n\n为了避免其他属性（特征）携带的信息被训练集中未出现的属性值＂抹去＂，即为了避免多个条件概率相乘时某个概率值为0，导致最后的乘积为0，在估计概率值时通常要进行＂平滑＂，常用＂拉普拉斯修正＂．\n\n具体来说，令N表示训练集D中可能的类别数，$N_i$表示第i个属性可能的取值数，则\n\n$$P(c)=\\frac{|D_c|+1}{|D|+N}$$\n\n$$P(w_i|c)=\\frac{|D_{c,x_i}|+1}{|D_c|+N_i}$$\n\n### 示例：文本分类\n\n朴素贝叶斯分类器通常有以下两种实现方式\n\n- 词集模型：将每个词的出现与否作为一个特征，值为1表示词条出现在文档中，0表示词条未出现\n- 词袋模型：将每个词在文档中出现的次数作为一个特征\n\n下面我们用词集模型，来实现一个区分某一评论是否包含侮辱性词汇的朴素贝叶斯分类器．\n\n创建一个bayes.py文件，\n\n* 将训练集转化为词汇列表\n\n```python\nfrom numpy import *\ndef createVocabularyList(dataset):\n    \"\"\"\n    从数据集中抽取不重复的词汇列表\n    dataset: 给定的数据集\n    \"\"\"\n    vocabularySet = set([])　#　创建一个空集合 \n    for document in dataset:\n        # 操作符｜表示求两个集合的并集\n        vocabularySet = vocabulary | set(document)\n    return list(vocabularySet)\n```\n\n* 将训练集中的某一条数据转化为向量\n\n```python\ndef setOfWords2Vector(vocabularyList,inputSet):\n    \"\"\"\n    根据词汇列表，将输入的数据集转化为与词汇列表维度相同的向量\n    \"\"\"\n    # 创建一个长度为len(vocabularyList)，所含元素都为0的向量\n    # 等价于 \n    # returnVector = []\n    # for i in range(len(vocabularyList)):\n    #     returnVector[i] = 0\n    returnVector = [0]*len(vocabularyList)\n    for word in inputSet:\n        if word in vocabularyList:\n            returnVector[vocabularyList.index(word)] = 1\n    return returnVector\n```\n\n* 创建朴素贝叶斯分类器训练函数\n\n```python\ndef trainNavieBayes(trainMatrix,trainCategory):\n    \"\"\"\n    贝叶斯分类器训练函数\n    trainMatrix: numpy中array类型，是由训练集转化的所有向量组成的矩阵\n    trainCategory: 由矩阵中每一向量的所属类别组成的列表\n    \"\"\"\n    numTrainDocs = len(trainMatrix)\n    numWords = len(trainMatrix[0])\n    # pAbusive = sum(trainCategory)/float(numTrainDocs)\n    # 拉普拉斯修正\n    pAbusive = (sum(trainCategory) + 1)/(float(numTrainDocs) + 2)\n    p0Vector = zeros(numWords);p1Vector = zeros(numWords)\n    # 计算某一类别下的总词数\n    # p0NumWords = 0.0;p1NumWords = 0.0\n    # 使用拉普拉斯修正后\n    p0NumWords = 2.0;p1NumWords = 2.0\n    for i in range(numTrainDocs):\n        if trainCategory[i] == 1:\n            p1Vector += trainMatrix[i]\n            p1NumWords += sum(trainMatrix[i])\n        else:\n            p0Vector += trainMatrix[i]\n            p0NumWords += sum(trainMatrix[i])\n    # 用某个类别下某个词出现的次数除以该类别下的总词数，\n    # 即求得某一类别c在每一个属性上的概率p(ci)\n    # p0Vector = p0Vector/p0NumWords\n    # p1Vector = p1Vector/p1NumWords\n    p0Vector = log(p0Vector/p0NumWords)\n    p1Vector = log(p1Vector/p1NumWords)\n    return p0Vector,p1Vector,pAbusive\n```\n\n* 创建朴素贝叶斯分类函数\n\n```python\ndef classifyNavieBayes(vector2Classify,p0Vector,p1Vector,pc1):\n    p1 = sum(vector2Classify*p1Vector) + log(pc1)\n    p0 = sum(vector2Classify*p0Vector) + log(1.0-pc1)\n    if p1 > p0:\n        return 1\n    else:\n        return 0\n```\n\n上面程序的第2行，就是在求\n\n$$log L = log P(c) + log P(\\mathbf{x}|c) = log P(c) + \\sum_{i=1}^{n}{log P(x_i|c)}$$\n\n接下来我们测试一下刚才的分类器是否有效\n\n```python\ndef loadDataSet():\n    postingList = [['my','dog','has','flea','problems','help','please'],\n                  ['maybe','not','take','him','to','dog','park','stupid'],\n                  ['my','dalmation','is','so','cute','I','love','him'],\n                  ['stop','posting','stupid','worthless','garbage'],\n                  ['mr','licks','ate','my','steak','how','to','stop','him'],\n                  ['quit','buying','worthless','dog','food','stupid']]\n    # 0表示正常言论，１表示包含侮辱性词汇的评论\n    categoryVector = [0,1,0,1,0,1]\n    return postingList,categoryVector\ndef testNavieBayes():\n    listOfPosts,listClasses = loadDataSet()\n    vocabularyList = createVocabularyList(listOfPosts)\n    trainMatrix = []\n    for post in listOfPosts:\n        trainMatrix.append(setOfWords2Vector(vocabularyList,post))\n    p0Vector,p1Vector,pc1 = trainNavieBayes(array(trainMatrix),array(listClaasses))\n    testPost = ['love','my','dalmation']\n    testVector = array(setOfWords2Vector(vocabularyList,testPost))\n    print(str(testPost)+\" 被分类为:\"+\n          classifNavieBayes(testVector,p0Vector,p1Vector,pc1))\n    \n    testPost = ['stupid','garbage']\n    testVector = array(setOfWords2Vector(vocabularyList,testPost))\n    print(str(testPost)+\" 被分类为:\"+\n          classifNavieBayes(testVector,p0Vector,p1Vector,pc1))\n```\n\n<hr>\n\n参考资料\n\n* 机器学习实战, Peter Harrington, 人民邮电出版社\n* 机器学习, 周志华, 清华大学出版社\n\n","slug":"machine-learning-navie-bayes","published":1,"updated":"2019-01-19T07:23:57.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aqi003pj1q0ex84t3lj","content":"<p>在讲朴素贝叶斯之前，我们先来回顾一下大学二年级概率论中的相关知识．</p>\n<p>条件概率公式：</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)}$$ </p>\n<p>$$=&gt; P(AB) = P(A|B)P(B)$$</p>\n<p>全概率公式：</p>\n<p>$$P(A)=\\sum_{i=1}^{\\infty}{P(B_i)P(A|B_i)}$$</p>\n<p>贝叶斯公式：</p>\n<p>$$P(B_i|A)=\\frac{P(AB_i)}{P(A)}=\\frac{P(A|B_i)P(B_i)}{\\sum_{i=1}^{\\infty}{P(B_i)P(A|B_i)}}$$</p>\n<a id=\"more\"></a>\n<h3 id=\"算法思想\"><a href=\"#算法思想\" class=\"headerlink\" title=\"算法思想\"></a>算法思想</h3><p>朴素贝叶斯是贝叶斯决策理论的一部分，而贝叶斯决策理论的核心思想是<strong>选择具有最高概率的决策</strong>．</p>\n<p>举个很简单的例子，一般网站评论或者游戏聊天都会对侮辱性词汇进行屏蔽过滤．</p>\n<p>假设现在存在一条评论，如何判断它是否包含侮辱性词汇？我们用P1(w)表示评论w包含侮辱性词汇的概率，用p2(w)表示评论w不包含侮辱性词汇的概率，那么对于评论w，可以用下面的规则来判断它的类别：</p>\n<ul>\n<li>如果P1(w) &gt; P2(w) ，那么w为包含侮辱性词汇的评论．</li>\n<li>如果P2(w) &gt; P1(w)，那么w为不包含侮辱性词汇的评论．</li>\n</ul>\n<h3 id=\"假设前提\"><a href=\"#假设前提\" class=\"headerlink\" title=\"假设前提\"></a>假设前提</h3><p>朴素贝叶斯是用于文档分类的常用算法，它是基于以下假设对贝叶斯分类器的一个扩展．</p>\n<ul>\n<li>特征之间相互独立，即一个特征出现的可能性与其他特征没有关系．比如，如果文档中一个词出现的概率不依赖于文档中的其他词，那么文档中词与词之间相互独立．</li>\n<li>每个特征同等重要．</li>\n</ul>\n<p>我们知道这两个假设过于简单，这也是之所以称之为朴素（navie）贝叶斯的原因．</p>\n<h3 id=\"理论模型\"><a href=\"#理论模型\" class=\"headerlink\" title=\"理论模型\"></a>理论模型</h3><p>$$P(c|\\mathbf{x})=\\frac{P(c)P(\\mathbf{x}|c)}{P(\\mathbf{x})}$$</p>\n<p>其中，P(c)是类＂先验＂(prior)概率，$P(\\mathbf{x}|c)$是样本x相对于类标记c的类条件概率，或称为＂似然＂，$P(\\mathbf{x})$是用于归一化的＂证据＂因子．</p>\n<p>对于给定样本x，证据因子$P(\\mathbf{x})$与类标记无关，因此估计$P(c|\\mathbf{x})$的问题就转化为如何基于训练数据D来估计先验概率P(c)和条件概率$P(\\mathbf{x}|c)$</p>\n<p>根据大数定律，当训练集包含充足的独立同分布样本时，P(c)可通过各类样本出现的频率来进行估计．</p>\n<p>对于条件概率$P(\\mathbf{x}|c)$来说，由于假设x的各个属性相互独立，因此</p>\n<p>$$P(\\mathbf{x}|c) = P(x_1x_2…x_n|c) = P(x_1|c)P(x_2|c) \\cdot\\cdot\\cdot P(x_n|c) = \\prod_{i=1}^{n}{P(x_i|c)}$$ </p>\n<p>其中，n为<strong>x</strong>的属性个数</p>\n<p>由于连乘操作易造成下溢出，即太多很小的数相乘导致结果四舍五入后得到0，通常使用对数进行处理，将连乘变为累加，从而避免下溢出．因此，</p>\n<p>令$$L = P(c)P(\\mathbf{x}|c)$$</p>\n<p>则$$log L = log P(c) + log P(\\mathbf{x}|c) = log P(c) + \\sum_{i=1}^{n}{log P(x_i|c)}$$</p>\n<h3 id=\"拉普拉斯修正\"><a href=\"#拉普拉斯修正\" class=\"headerlink\" title=\"拉普拉斯修正\"></a>拉普拉斯修正</h3><p>为了避免其他属性（特征）携带的信息被训练集中未出现的属性值＂抹去＂，即为了避免多个条件概率相乘时某个概率值为0，导致最后的乘积为0，在估计概率值时通常要进行＂平滑＂，常用＂拉普拉斯修正＂．</p>\n<p>具体来说，令N表示训练集D中可能的类别数，$N_i$表示第i个属性可能的取值数，则</p>\n<p>$$P(c)=\\frac{|D_c|+1}{|D|+N}$$</p>\n<p>$$P(w_i|c)=\\frac{|D_{c,x_i}|+1}{|D_c|+N_i}$$</p>\n<h3 id=\"示例：文本分类\"><a href=\"#示例：文本分类\" class=\"headerlink\" title=\"示例：文本分类\"></a>示例：文本分类</h3><p>朴素贝叶斯分类器通常有以下两种实现方式</p>\n<ul>\n<li>词集模型：将每个词的出现与否作为一个特征，值为1表示词条出现在文档中，0表示词条未出现</li>\n<li>词袋模型：将每个词在文档中出现的次数作为一个特征</li>\n</ul>\n<p>下面我们用词集模型，来实现一个区分某一评论是否包含侮辱性词汇的朴素贝叶斯分类器．</p>\n<p>创建一个bayes.py文件，</p>\n<ul>\n<li>将训练集转化为词汇列表</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> numpy <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">createVocabularyList</span><span class=\"params\">(dataset)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    从数据集中抽取不重复的词汇列表</span></span><br><span class=\"line\"><span class=\"string\">    dataset: 给定的数据集</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    vocabularySet = set([])　<span class=\"comment\">#　创建一个空集合 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> document <span class=\"keyword\">in</span> dataset:</span><br><span class=\"line\">        <span class=\"comment\"># 操作符｜表示求两个集合的并集</span></span><br><span class=\"line\">        vocabularySet = vocabulary | set(document)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list(vocabularySet)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将训练集中的某一条数据转化为向量</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setOfWords2Vector</span><span class=\"params\">(vocabularyList,inputSet)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    根据词汇列表，将输入的数据集转化为与词汇列表维度相同的向量</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建一个长度为len(vocabularyList)，所含元素都为0的向量</span></span><br><span class=\"line\">    <span class=\"comment\"># 等价于 </span></span><br><span class=\"line\">    <span class=\"comment\"># returnVector = []</span></span><br><span class=\"line\">    <span class=\"comment\"># for i in range(len(vocabularyList)):</span></span><br><span class=\"line\">    <span class=\"comment\">#     returnVector[i] = 0</span></span><br><span class=\"line\">    returnVector = [<span class=\"number\">0</span>]*len(vocabularyList)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> inputSet:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> word <span class=\"keyword\">in</span> vocabularyList:</span><br><span class=\"line\">            returnVector[vocabularyList.index(word)] = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> returnVector</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建朴素贝叶斯分类器训练函数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">trainNavieBayes</span><span class=\"params\">(trainMatrix,trainCategory)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    贝叶斯分类器训练函数</span></span><br><span class=\"line\"><span class=\"string\">    trainMatrix: numpy中array类型，是由训练集转化的所有向量组成的矩阵</span></span><br><span class=\"line\"><span class=\"string\">    trainCategory: 由矩阵中每一向量的所属类别组成的列表</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    numTrainDocs = len(trainMatrix)</span><br><span class=\"line\">    numWords = len(trainMatrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">    <span class=\"comment\"># pAbusive = sum(trainCategory)/float(numTrainDocs)</span></span><br><span class=\"line\">    <span class=\"comment\"># 拉普拉斯修正</span></span><br><span class=\"line\">    pAbusive = (sum(trainCategory) + <span class=\"number\">1</span>)/(float(numTrainDocs) + <span class=\"number\">2</span>)</span><br><span class=\"line\">    p0Vector = zeros(numWords);p1Vector = zeros(numWords)</span><br><span class=\"line\">    <span class=\"comment\"># 计算某一类别下的总词数</span></span><br><span class=\"line\">    <span class=\"comment\"># p0NumWords = 0.0;p1NumWords = 0.0</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用拉普拉斯修正后</span></span><br><span class=\"line\">    p0NumWords = <span class=\"number\">2.0</span>;p1NumWords = <span class=\"number\">2.0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(numTrainDocs):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> trainCategory[i] == <span class=\"number\">1</span>:</span><br><span class=\"line\">            p1Vector += trainMatrix[i]</span><br><span class=\"line\">            p1NumWords += sum(trainMatrix[i])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            p0Vector += trainMatrix[i]</span><br><span class=\"line\">            p0NumWords += sum(trainMatrix[i])</span><br><span class=\"line\">    <span class=\"comment\"># 用某个类别下某个词出现的次数除以该类别下的总词数，</span></span><br><span class=\"line\">    <span class=\"comment\"># 即求得某一类别c在每一个属性上的概率p(ci)</span></span><br><span class=\"line\">    <span class=\"comment\"># p0Vector = p0Vector/p0NumWords</span></span><br><span class=\"line\">    <span class=\"comment\"># p1Vector = p1Vector/p1NumWords</span></span><br><span class=\"line\">    p0Vector = log(p0Vector/p0NumWords)</span><br><span class=\"line\">    p1Vector = log(p1Vector/p1NumWords)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p0Vector,p1Vector,pAbusive</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建朴素贝叶斯分类函数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">classifyNavieBayes</span><span class=\"params\">(vector2Classify,p0Vector,p1Vector,pc1)</span>:</span></span><br><span class=\"line\">    p1 = sum(vector2Classify*p1Vector) + log(pc1)</span><br><span class=\"line\">    p0 = sum(vector2Classify*p0Vector) + log(<span class=\"number\">1.0</span>-pc1)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> p1 &gt; p0:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>上面程序的第2行，就是在求</p>\n<p>$$log L = log P(c) + log P(\\mathbf{x}|c) = log P(c) + \\sum_{i=1}^{n}{log P(x_i|c)}$$</p>\n<p>接下来我们测试一下刚才的分类器是否有效</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loadDataSet</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    postingList = [[<span class=\"string\">'my'</span>,<span class=\"string\">'dog'</span>,<span class=\"string\">'has'</span>,<span class=\"string\">'flea'</span>,<span class=\"string\">'problems'</span>,<span class=\"string\">'help'</span>,<span class=\"string\">'please'</span>],</span><br><span class=\"line\">                  [<span class=\"string\">'maybe'</span>,<span class=\"string\">'not'</span>,<span class=\"string\">'take'</span>,<span class=\"string\">'him'</span>,<span class=\"string\">'to'</span>,<span class=\"string\">'dog'</span>,<span class=\"string\">'park'</span>,<span class=\"string\">'stupid'</span>],</span><br><span class=\"line\">                  [<span class=\"string\">'my'</span>,<span class=\"string\">'dalmation'</span>,<span class=\"string\">'is'</span>,<span class=\"string\">'so'</span>,<span class=\"string\">'cute'</span>,<span class=\"string\">'I'</span>,<span class=\"string\">'love'</span>,<span class=\"string\">'him'</span>],</span><br><span class=\"line\">                  [<span class=\"string\">'stop'</span>,<span class=\"string\">'posting'</span>,<span class=\"string\">'stupid'</span>,<span class=\"string\">'worthless'</span>,<span class=\"string\">'garbage'</span>],</span><br><span class=\"line\">                  [<span class=\"string\">'mr'</span>,<span class=\"string\">'licks'</span>,<span class=\"string\">'ate'</span>,<span class=\"string\">'my'</span>,<span class=\"string\">'steak'</span>,<span class=\"string\">'how'</span>,<span class=\"string\">'to'</span>,<span class=\"string\">'stop'</span>,<span class=\"string\">'him'</span>],</span><br><span class=\"line\">                  [<span class=\"string\">'quit'</span>,<span class=\"string\">'buying'</span>,<span class=\"string\">'worthless'</span>,<span class=\"string\">'dog'</span>,<span class=\"string\">'food'</span>,<span class=\"string\">'stupid'</span>]]</span><br><span class=\"line\">    <span class=\"comment\"># 0表示正常言论，１表示包含侮辱性词汇的评论</span></span><br><span class=\"line\">    categoryVector = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> postingList,categoryVector</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testNavieBayes</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    listOfPosts,listClasses = loadDataSet()</span><br><span class=\"line\">    vocabularyList = createVocabularyList(listOfPosts)</span><br><span class=\"line\">    trainMatrix = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> post <span class=\"keyword\">in</span> listOfPosts:</span><br><span class=\"line\">        trainMatrix.append(setOfWords2Vector(vocabularyList,post))</span><br><span class=\"line\">    p0Vector,p1Vector,pc1 = trainNavieBayes(array(trainMatrix),array(listClaasses))</span><br><span class=\"line\">    testPost = [<span class=\"string\">'love'</span>,<span class=\"string\">'my'</span>,<span class=\"string\">'dalmation'</span>]</span><br><span class=\"line\">    testVector = array(setOfWords2Vector(vocabularyList,testPost))</span><br><span class=\"line\">    print(str(testPost)+<span class=\"string\">\" 被分类为:\"</span>+</span><br><span class=\"line\">          classifNavieBayes(testVector,p0Vector,p1Vector,pc1))</span><br><span class=\"line\">    </span><br><span class=\"line\">    testPost = [<span class=\"string\">'stupid'</span>,<span class=\"string\">'garbage'</span>]</span><br><span class=\"line\">    testVector = array(setOfWords2Vector(vocabularyList,testPost))</span><br><span class=\"line\">    print(str(testPost)+<span class=\"string\">\" 被分类为:\"</span>+</span><br><span class=\"line\">          classifNavieBayes(testVector,p0Vector,p1Vector,pc1))</span><br></pre></td></tr></table></figure>\n<hr>\n\n<p>参考资料</p>\n<ul>\n<li>机器学习实战, Peter Harrington, 人民邮电出版社</li>\n<li>机器学习, 周志华, 清华大学出版社</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在讲朴素贝叶斯之前，我们先来回顾一下大学二年级概率论中的相关知识．</p>\n<p>条件概率公式：</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)}$$ </p>\n<p>$$=&gt; P(AB) = P(A|B)P(B)$$</p>\n<p>全概率公式：</p>\n<p>$$P(A)=\\sum_{i=1}^{\\infty}{P(B_i)P(A|B_i)}$$</p>\n<p>贝叶斯公式：</p>\n<p>$$P(B_i|A)=\\frac{P(AB_i)}{P(A)}=\\frac{P(A|B_i)P(B_i)}{\\sum_{i=1}^{\\infty}{P(B_i)P(A|B_i)}}$$</p>","more":"<h3 id=\"算法思想\"><a href=\"#算法思想\" class=\"headerlink\" title=\"算法思想\"></a>算法思想</h3><p>朴素贝叶斯是贝叶斯决策理论的一部分，而贝叶斯决策理论的核心思想是<strong>选择具有最高概率的决策</strong>．</p>\n<p>举个很简单的例子，一般网站评论或者游戏聊天都会对侮辱性词汇进行屏蔽过滤．</p>\n<p>假设现在存在一条评论，如何判断它是否包含侮辱性词汇？我们用P1(w)表示评论w包含侮辱性词汇的概率，用p2(w)表示评论w不包含侮辱性词汇的概率，那么对于评论w，可以用下面的规则来判断它的类别：</p>\n<ul>\n<li>如果P1(w) &gt; P2(w) ，那么w为包含侮辱性词汇的评论．</li>\n<li>如果P2(w) &gt; P1(w)，那么w为不包含侮辱性词汇的评论．</li>\n</ul>\n<h3 id=\"假设前提\"><a href=\"#假设前提\" class=\"headerlink\" title=\"假设前提\"></a>假设前提</h3><p>朴素贝叶斯是用于文档分类的常用算法，它是基于以下假设对贝叶斯分类器的一个扩展．</p>\n<ul>\n<li>特征之间相互独立，即一个特征出现的可能性与其他特征没有关系．比如，如果文档中一个词出现的概率不依赖于文档中的其他词，那么文档中词与词之间相互独立．</li>\n<li>每个特征同等重要．</li>\n</ul>\n<p>我们知道这两个假设过于简单，这也是之所以称之为朴素（navie）贝叶斯的原因．</p>\n<h3 id=\"理论模型\"><a href=\"#理论模型\" class=\"headerlink\" title=\"理论模型\"></a>理论模型</h3><p>$$P(c|\\mathbf{x})=\\frac{P(c)P(\\mathbf{x}|c)}{P(\\mathbf{x})}$$</p>\n<p>其中，P(c)是类＂先验＂(prior)概率，$P(\\mathbf{x}|c)$是样本x相对于类标记c的类条件概率，或称为＂似然＂，$P(\\mathbf{x})$是用于归一化的＂证据＂因子．</p>\n<p>对于给定样本x，证据因子$P(\\mathbf{x})$与类标记无关，因此估计$P(c|\\mathbf{x})$的问题就转化为如何基于训练数据D来估计先验概率P(c)和条件概率$P(\\mathbf{x}|c)$</p>\n<p>根据大数定律，当训练集包含充足的独立同分布样本时，P(c)可通过各类样本出现的频率来进行估计．</p>\n<p>对于条件概率$P(\\mathbf{x}|c)$来说，由于假设x的各个属性相互独立，因此</p>\n<p>$$P(\\mathbf{x}|c) = P(x_1x_2…x_n|c) = P(x_1|c)P(x_2|c) \\cdot\\cdot\\cdot P(x_n|c) = \\prod_{i=1}^{n}{P(x_i|c)}$$ </p>\n<p>其中，n为<strong>x</strong>的属性个数</p>\n<p>由于连乘操作易造成下溢出，即太多很小的数相乘导致结果四舍五入后得到0，通常使用对数进行处理，将连乘变为累加，从而避免下溢出．因此，</p>\n<p>令$$L = P(c)P(\\mathbf{x}|c)$$</p>\n<p>则$$log L = log P(c) + log P(\\mathbf{x}|c) = log P(c) + \\sum_{i=1}^{n}{log P(x_i|c)}$$</p>\n<h3 id=\"拉普拉斯修正\"><a href=\"#拉普拉斯修正\" class=\"headerlink\" title=\"拉普拉斯修正\"></a>拉普拉斯修正</h3><p>为了避免其他属性（特征）携带的信息被训练集中未出现的属性值＂抹去＂，即为了避免多个条件概率相乘时某个概率值为0，导致最后的乘积为0，在估计概率值时通常要进行＂平滑＂，常用＂拉普拉斯修正＂．</p>\n<p>具体来说，令N表示训练集D中可能的类别数，$N_i$表示第i个属性可能的取值数，则</p>\n<p>$$P(c)=\\frac{|D_c|+1}{|D|+N}$$</p>\n<p>$$P(w_i|c)=\\frac{|D_{c,x_i}|+1}{|D_c|+N_i}$$</p>\n<h3 id=\"示例：文本分类\"><a href=\"#示例：文本分类\" class=\"headerlink\" title=\"示例：文本分类\"></a>示例：文本分类</h3><p>朴素贝叶斯分类器通常有以下两种实现方式</p>\n<ul>\n<li>词集模型：将每个词的出现与否作为一个特征，值为1表示词条出现在文档中，0表示词条未出现</li>\n<li>词袋模型：将每个词在文档中出现的次数作为一个特征</li>\n</ul>\n<p>下面我们用词集模型，来实现一个区分某一评论是否包含侮辱性词汇的朴素贝叶斯分类器．</p>\n<p>创建一个bayes.py文件，</p>\n<ul>\n<li>将训练集转化为词汇列表</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> numpy <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">createVocabularyList</span><span class=\"params\">(dataset)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    从数据集中抽取不重复的词汇列表</span></span><br><span class=\"line\"><span class=\"string\">    dataset: 给定的数据集</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    vocabularySet = set([])　<span class=\"comment\">#　创建一个空集合 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> document <span class=\"keyword\">in</span> dataset:</span><br><span class=\"line\">        <span class=\"comment\"># 操作符｜表示求两个集合的并集</span></span><br><span class=\"line\">        vocabularySet = vocabulary | set(document)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list(vocabularySet)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将训练集中的某一条数据转化为向量</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setOfWords2Vector</span><span class=\"params\">(vocabularyList,inputSet)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    根据词汇列表，将输入的数据集转化为与词汇列表维度相同的向量</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建一个长度为len(vocabularyList)，所含元素都为0的向量</span></span><br><span class=\"line\">    <span class=\"comment\"># 等价于 </span></span><br><span class=\"line\">    <span class=\"comment\"># returnVector = []</span></span><br><span class=\"line\">    <span class=\"comment\"># for i in range(len(vocabularyList)):</span></span><br><span class=\"line\">    <span class=\"comment\">#     returnVector[i] = 0</span></span><br><span class=\"line\">    returnVector = [<span class=\"number\">0</span>]*len(vocabularyList)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> inputSet:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> word <span class=\"keyword\">in</span> vocabularyList:</span><br><span class=\"line\">            returnVector[vocabularyList.index(word)] = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> returnVector</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建朴素贝叶斯分类器训练函数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">trainNavieBayes</span><span class=\"params\">(trainMatrix,trainCategory)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    贝叶斯分类器训练函数</span></span><br><span class=\"line\"><span class=\"string\">    trainMatrix: numpy中array类型，是由训练集转化的所有向量组成的矩阵</span></span><br><span class=\"line\"><span class=\"string\">    trainCategory: 由矩阵中每一向量的所属类别组成的列表</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    numTrainDocs = len(trainMatrix)</span><br><span class=\"line\">    numWords = len(trainMatrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">    <span class=\"comment\"># pAbusive = sum(trainCategory)/float(numTrainDocs)</span></span><br><span class=\"line\">    <span class=\"comment\"># 拉普拉斯修正</span></span><br><span class=\"line\">    pAbusive = (sum(trainCategory) + <span class=\"number\">1</span>)/(float(numTrainDocs) + <span class=\"number\">2</span>)</span><br><span class=\"line\">    p0Vector = zeros(numWords);p1Vector = zeros(numWords)</span><br><span class=\"line\">    <span class=\"comment\"># 计算某一类别下的总词数</span></span><br><span class=\"line\">    <span class=\"comment\"># p0NumWords = 0.0;p1NumWords = 0.0</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用拉普拉斯修正后</span></span><br><span class=\"line\">    p0NumWords = <span class=\"number\">2.0</span>;p1NumWords = <span class=\"number\">2.0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(numTrainDocs):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> trainCategory[i] == <span class=\"number\">1</span>:</span><br><span class=\"line\">            p1Vector += trainMatrix[i]</span><br><span class=\"line\">            p1NumWords += sum(trainMatrix[i])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            p0Vector += trainMatrix[i]</span><br><span class=\"line\">            p0NumWords += sum(trainMatrix[i])</span><br><span class=\"line\">    <span class=\"comment\"># 用某个类别下某个词出现的次数除以该类别下的总词数，</span></span><br><span class=\"line\">    <span class=\"comment\"># 即求得某一类别c在每一个属性上的概率p(ci)</span></span><br><span class=\"line\">    <span class=\"comment\"># p0Vector = p0Vector/p0NumWords</span></span><br><span class=\"line\">    <span class=\"comment\"># p1Vector = p1Vector/p1NumWords</span></span><br><span class=\"line\">    p0Vector = log(p0Vector/p0NumWords)</span><br><span class=\"line\">    p1Vector = log(p1Vector/p1NumWords)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p0Vector,p1Vector,pAbusive</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建朴素贝叶斯分类函数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">classifyNavieBayes</span><span class=\"params\">(vector2Classify,p0Vector,p1Vector,pc1)</span>:</span></span><br><span class=\"line\">    p1 = sum(vector2Classify*p1Vector) + log(pc1)</span><br><span class=\"line\">    p0 = sum(vector2Classify*p0Vector) + log(<span class=\"number\">1.0</span>-pc1)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> p1 &gt; p0:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>上面程序的第2行，就是在求</p>\n<p>$$log L = log P(c) + log P(\\mathbf{x}|c) = log P(c) + \\sum_{i=1}^{n}{log P(x_i|c)}$$</p>\n<p>接下来我们测试一下刚才的分类器是否有效</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loadDataSet</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    postingList = [[<span class=\"string\">'my'</span>,<span class=\"string\">'dog'</span>,<span class=\"string\">'has'</span>,<span class=\"string\">'flea'</span>,<span class=\"string\">'problems'</span>,<span class=\"string\">'help'</span>,<span class=\"string\">'please'</span>],</span><br><span class=\"line\">                  [<span class=\"string\">'maybe'</span>,<span class=\"string\">'not'</span>,<span class=\"string\">'take'</span>,<span class=\"string\">'him'</span>,<span class=\"string\">'to'</span>,<span class=\"string\">'dog'</span>,<span class=\"string\">'park'</span>,<span class=\"string\">'stupid'</span>],</span><br><span class=\"line\">                  [<span class=\"string\">'my'</span>,<span class=\"string\">'dalmation'</span>,<span class=\"string\">'is'</span>,<span class=\"string\">'so'</span>,<span class=\"string\">'cute'</span>,<span class=\"string\">'I'</span>,<span class=\"string\">'love'</span>,<span class=\"string\">'him'</span>],</span><br><span class=\"line\">                  [<span class=\"string\">'stop'</span>,<span class=\"string\">'posting'</span>,<span class=\"string\">'stupid'</span>,<span class=\"string\">'worthless'</span>,<span class=\"string\">'garbage'</span>],</span><br><span class=\"line\">                  [<span class=\"string\">'mr'</span>,<span class=\"string\">'licks'</span>,<span class=\"string\">'ate'</span>,<span class=\"string\">'my'</span>,<span class=\"string\">'steak'</span>,<span class=\"string\">'how'</span>,<span class=\"string\">'to'</span>,<span class=\"string\">'stop'</span>,<span class=\"string\">'him'</span>],</span><br><span class=\"line\">                  [<span class=\"string\">'quit'</span>,<span class=\"string\">'buying'</span>,<span class=\"string\">'worthless'</span>,<span class=\"string\">'dog'</span>,<span class=\"string\">'food'</span>,<span class=\"string\">'stupid'</span>]]</span><br><span class=\"line\">    <span class=\"comment\"># 0表示正常言论，１表示包含侮辱性词汇的评论</span></span><br><span class=\"line\">    categoryVector = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> postingList,categoryVector</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testNavieBayes</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    listOfPosts,listClasses = loadDataSet()</span><br><span class=\"line\">    vocabularyList = createVocabularyList(listOfPosts)</span><br><span class=\"line\">    trainMatrix = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> post <span class=\"keyword\">in</span> listOfPosts:</span><br><span class=\"line\">        trainMatrix.append(setOfWords2Vector(vocabularyList,post))</span><br><span class=\"line\">    p0Vector,p1Vector,pc1 = trainNavieBayes(array(trainMatrix),array(listClaasses))</span><br><span class=\"line\">    testPost = [<span class=\"string\">'love'</span>,<span class=\"string\">'my'</span>,<span class=\"string\">'dalmation'</span>]</span><br><span class=\"line\">    testVector = array(setOfWords2Vector(vocabularyList,testPost))</span><br><span class=\"line\">    print(str(testPost)+<span class=\"string\">\" 被分类为:\"</span>+</span><br><span class=\"line\">          classifNavieBayes(testVector,p0Vector,p1Vector,pc1))</span><br><span class=\"line\">    </span><br><span class=\"line\">    testPost = [<span class=\"string\">'stupid'</span>,<span class=\"string\">'garbage'</span>]</span><br><span class=\"line\">    testVector = array(setOfWords2Vector(vocabularyList,testPost))</span><br><span class=\"line\">    print(str(testPost)+<span class=\"string\">\" 被分类为:\"</span>+</span><br><span class=\"line\">          classifNavieBayes(testVector,p0Vector,p1Vector,pc1))</span><br></pre></td></tr></table></figure>\n<hr>\n\n<p>参考资料</p>\n<ul>\n<li>机器学习实战, Peter Harrington, 人民邮电出版社</li>\n<li>机器学习, 周志华, 清华大学出版社</li>\n</ul>"},{"title":"机器学习之PCA算法","date":"2018-08-26T06:08:44.000Z","mathjax":true,"_content":"\n主成分分析（Principal Component Analysis，简称PCA）。\n\n\n$$\n\\begin{align}\n\\hline \n& PCA算法 \\\\\\\\\n\\hline\n& 输入：样本集D=\\\\{x_1,x_2,\\dots,x_m\\\\};低维空间维数d^{'} \\\\\\\\\n& 过程： \\\\\\\\\n& 1. 对所有样本进行中心化：x_i \\leftarrow x_i - \\frac{1}{m} \\sum_{i=1}^{m} x_i;\\\\\\\\\n& 2.计算样本的协方差矩阵XX^{T}; \\\\\\\\\n& 3.对协方差矩阵XX^{T}做特征值分解; \\\\\\\\\n& 4.取最大的d^{'}个特征值所对应的特征向量w_1,w_2,\\dots,w_{d^{'}}. \\\\\\\\\n& 输出：投影矩阵W=(w_1,w_2,\\dots,w_{d^{'}})\n\\end{align}\n$$\n","source":"_posts/machine-learning-pca.md","raw":"---\ntitle: 机器学习之PCA算法\ndate: 2018-08-26 14:08:44\ntags: 降维\ncategories: 机器学习\nmathjax: true\n---\n\n主成分分析（Principal Component Analysis，简称PCA）。\n\n\n$$\n\\begin{align}\n\\hline \n& PCA算法 \\\\\\\\\n\\hline\n& 输入：样本集D=\\\\{x_1,x_2,\\dots,x_m\\\\};低维空间维数d^{'} \\\\\\\\\n& 过程： \\\\\\\\\n& 1. 对所有样本进行中心化：x_i \\leftarrow x_i - \\frac{1}{m} \\sum_{i=1}^{m} x_i;\\\\\\\\\n& 2.计算样本的协方差矩阵XX^{T}; \\\\\\\\\n& 3.对协方差矩阵XX^{T}做特征值分解; \\\\\\\\\n& 4.取最大的d^{'}个特征值所对应的特征向量w_1,w_2,\\dots,w_{d^{'}}. \\\\\\\\\n& 输出：投影矩阵W=(w_1,w_2,\\dots,w_{d^{'}})\n\\end{align}\n$$\n","slug":"machine-learning-pca","published":1,"updated":"2019-01-19T07:23:57.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aqj003qj1q031wm5zri","content":"<p>主成分分析（Principal Component Analysis，简称PCA）。</p>\n<p>$$<br>\\begin{align}<br>\\hline<br>&amp; PCA算法 \\\\<br>\\hline<br>&amp; 输入：样本集D=\\{x_1,x_2,\\dots,x_m\\};低维空间维数d^{‘} \\\\<br>&amp; 过程： \\\\<br>&amp; 1. 对所有样本进行中心化：x_i \\leftarrow x_i - \\frac{1}{m} \\sum_{i=1}^{m} x_i;\\\\<br>&amp; 2.计算样本的协方差矩阵XX^{T}; \\\\<br>&amp; 3.对协方差矩阵XX^{T}做特征值分解; \\\\<br>&amp; 4.取最大的d^{‘}个特征值所对应的特征向量w_1,w_2,\\dots,w_{d^{‘}}. \\\\<br>&amp; 输出：投影矩阵W=(w_1,w_2,\\dots,w_{d^{‘}})<br>\\end{align}<br>$$</p>\n","site":{"data":{}},"excerpt":"","more":"<p>主成分分析（Principal Component Analysis，简称PCA）。</p>\n<p>$$<br>\\begin{align}<br>\\hline<br>&amp; PCA算法 \\\\<br>\\hline<br>&amp; 输入：样本集D=\\{x_1,x_2,\\dots,x_m\\};低维空间维数d^{‘} \\\\<br>&amp; 过程： \\\\<br>&amp; 1. 对所有样本进行中心化：x_i \\leftarrow x_i - \\frac{1}{m} \\sum_{i=1}^{m} x_i;\\\\<br>&amp; 2.计算样本的协方差矩阵XX^{T}; \\\\<br>&amp; 3.对协方差矩阵XX^{T}做特征值分解; \\\\<br>&amp; 4.取最大的d^{‘}个特征值所对应的特征向量w_1,w_2,\\dots,w_{d^{‘}}. \\\\<br>&amp; 输出：投影矩阵W=(w_1,w_2,\\dots,w_{d^{‘}})<br>\\end{align}<br>$$</p>\n"},{"title":"机器学习之PageRank算法","date":"2018-08-25T05:25:16.000Z","updated":"2018-08-25T05:25:16.000Z","mathjax":true,"_content":"\nPageRank是一个搜索排名算法，由Sergey Brin和Larry Page在1998年第七届国际万维网大会上提出的。基于这一算法，他们创建了Google搜索引擎。\n\n在介绍PageRank之前，先来了解一些主要概念。\n\n页面i的入链（In-links of page i）：从其他网页链接到网页$i$的超链接数，通常不包括来自同一站点内网页的链接。\n\n网页i的出链（Out-links of page i）：从网页$i$链接到其他网页的超链接数，通常不包括链接到同一站点内网页的超链接。\n<!--more-->\n\n### 算法\n\n根据社交网络的排序声望原理，页面$i$的重要程度（页面$i$的PageRank分数），由所有指向页面i的所有页面的PageRank分数之和决定。因为一个页面可能指向很多其他的页面，它的声望分数应该被所有它指向的页面所共享。\n\n将网络看做一个有向图G = (V , E)，其中V是所有顶点或结点的集合，例如，所有网页的集合，E是图中有向边的集合，例如，超链接。\n\n设网络中的网页总数为n，网页i的PageRank分数为P(i)，\n$$\nP(i) = \\sum_{(j,i) \\in E} \\frac{P(j)}{O_{j}} \\tag{1}\n$$\n其中，$O_{j}$是网页$j$的出链数。\n\n设P是一个由PageRank值组成的n维列向量（n-dimensional column vector）。\n$$\nP = (P(1),P(2),\\dots,P(n))^{T} \\tag{2}\n$$\n设A是图的邻接矩阵（adjacency matrix），\n$$\nA_{ij} = \n\\begin{cases}\n\\frac{1}{O_{j}},& (i,j) \\in E \\\\\\\\\n0, & 其他\n\\end{cases} \\tag{3}\n$$\n由公式(1)~(3)，可以得到如下n阶方程组\n$$\nP = A^{T}P \\tag{4}\n$$\n显然，P是一个特征值为1的特征向量（eigenvector）。\n\n如果满足以下条件：\n\n1.A是一个随机矩阵；2.A是不可约的；3.A是非周期的。\n\n那么PageRank向量P就是对应矩阵A的最大特征值1的那个主特征向量。\n\n实际上，公式(4)也可基于马尔科夫链（Markov chain）推导出来。\n\n### 模型修正\n\n然而，Web图并不满足以上三个条件。\n\n1.Web图中，A不是一个随机矩阵。\n\n* 原因\n\n有限马尔科夫链的状态转移矩阵是随机矩阵，它要求每个元素都是非负实数，且每行元素之和为1。这要求每一个网页至少要有一个出链，但实际上，很多网页根本就没有出链，从而导致状态转移矩阵A某些行全为0。这样的网页称为悬挂网页。\n\n* 解决办法\n\n从每个悬挂网页$i$向其他各个网页添加一条出链，将网页$i$到其他网页的转换概率均设为$\\frac{1}{n}$。也就是说，将A中全为0的行用$\\frac{\\mathbf{ e}}{n}$（$\\mathbf{e}$是元素全为1的n维向量）来替换。\n\n2.Web图在一般情况下是可约的。\n\n* 原因：Web图G不是强连通的。通常存在一些节点对<u, v>，没有从u到v的路径。\n\n强连通图：若图G中的任意两个顶点$i$和$j$都连通，即从顶点$i$到顶点$j$和从顶点$j$到顶点$i$都存在路径，则图G是强连通图。\n\n* 解决办法：同问题三\n\n3.\"A是非周期的\"，并不一定成立。\n\n周期图：状态$i$是周期的，并且具有周期$k>1$，是指存在一个最小的正整数$k$，使得所有从状态$i$出发又回到状态$i$的路径长度都是$k$的整数倍。\n\n如果一个状态不是周期的（或者$k=1$），那么它就是非周期的。如果一个马尔科夫链的所有状态都是非周期的，那么就说这个马尔科夫链是非周期的。\n\n* 解决办法\n\n从任一页面出发，到每个页面都加上一条链接，并给这一链接分配一个由参数$d$控制的微小转换概率。\n\n通过以上修正，状态转换矩阵A满足之前的三个条件，从而得到了一个改进后的PageRank模型：\n$$\nP = \\left[(1-d) \\frac{E}{n} + d A^{T}\\right]P \\tag{5}\n$$\n其中，$E=ee^{T}$（e是元素全为1的列向量，从而E是一个nxn的元素全为1的矩阵），n是Web图中的节点总数。\n\n公式（5）化简后，得到\n$$\nP = (1-d)e + dA^{T}P \\tag{6}\n$$\n其中，e是全为1的列向量。\n\n从而，可以得到\n$$\nP(i) = (1-d) + d \\sum_{j=1}^{n} A_{ji} P(j) \\tag{7}\n$$\n上式等价于\n$$\nP(i) = (1-d) + d \\sum_{(j,i) \\in E} \\frac{P(j)}{O_{j}} \\tag{8}\n$$\n其中，$d$称之为阻尼系数（damping factor），且$0 \\leq d  \\leq 1$。一些论文中认为，$d = 0.85$是一个不错的选择。\n\n可以使用幂迭代（power iteration）求解特征向量P，算法如下\n$$\n\\begin{align}\n& PageRank-Iterate(G) \\\\\\\\\n& \\quad P_{0} \\leftarrow \\frac{e}{n} \\\\\\\\\n& \\quad k \\leftarrow 1 \\\\\\\\\n& \\quad repeat \\\\\\\\\n& \\qquad P_{k} \\leftarrow (1-d)e+dA^{T}P_{k-1}; \\\\\\\\\n& \\qquad k \\leftarrow k+1; \\\\\\\\\n& \\quad until\\ \\Vert P_{k} - P_{k-1} \\Vert_{1} < \\epsilon \\\\\\\\\n& \\quad return\\ P_{k}\n\\end{align}\n$$\n\n<hr>\n\n参考资料\n\n1. Xindong Wu，[Top 10 algorithms in data mining](https://link.springer.com/content/pdf/10.1007%2Fs10115-007-0114-2.pdf)，Knowledge and Information Systems，2008\n\n2. （美）吴信东，库玛尔编著；李文波，吴素研译.数据挖掘十大算法，清华大学出版社，2013.5","source":"_posts/machine-learning-pagerank.md","raw":"---\ntitle: 机器学习之PageRank算法\ndate: 2018-08-25 13:25:16\ntags: 链接挖掘\ncategories: 机器学习\nupdated: 2018-08-25 13:25:16\nmathjax: true\n---\n\nPageRank是一个搜索排名算法，由Sergey Brin和Larry Page在1998年第七届国际万维网大会上提出的。基于这一算法，他们创建了Google搜索引擎。\n\n在介绍PageRank之前，先来了解一些主要概念。\n\n页面i的入链（In-links of page i）：从其他网页链接到网页$i$的超链接数，通常不包括来自同一站点内网页的链接。\n\n网页i的出链（Out-links of page i）：从网页$i$链接到其他网页的超链接数，通常不包括链接到同一站点内网页的超链接。\n<!--more-->\n\n### 算法\n\n根据社交网络的排序声望原理，页面$i$的重要程度（页面$i$的PageRank分数），由所有指向页面i的所有页面的PageRank分数之和决定。因为一个页面可能指向很多其他的页面，它的声望分数应该被所有它指向的页面所共享。\n\n将网络看做一个有向图G = (V , E)，其中V是所有顶点或结点的集合，例如，所有网页的集合，E是图中有向边的集合，例如，超链接。\n\n设网络中的网页总数为n，网页i的PageRank分数为P(i)，\n$$\nP(i) = \\sum_{(j,i) \\in E} \\frac{P(j)}{O_{j}} \\tag{1}\n$$\n其中，$O_{j}$是网页$j$的出链数。\n\n设P是一个由PageRank值组成的n维列向量（n-dimensional column vector）。\n$$\nP = (P(1),P(2),\\dots,P(n))^{T} \\tag{2}\n$$\n设A是图的邻接矩阵（adjacency matrix），\n$$\nA_{ij} = \n\\begin{cases}\n\\frac{1}{O_{j}},& (i,j) \\in E \\\\\\\\\n0, & 其他\n\\end{cases} \\tag{3}\n$$\n由公式(1)~(3)，可以得到如下n阶方程组\n$$\nP = A^{T}P \\tag{4}\n$$\n显然，P是一个特征值为1的特征向量（eigenvector）。\n\n如果满足以下条件：\n\n1.A是一个随机矩阵；2.A是不可约的；3.A是非周期的。\n\n那么PageRank向量P就是对应矩阵A的最大特征值1的那个主特征向量。\n\n实际上，公式(4)也可基于马尔科夫链（Markov chain）推导出来。\n\n### 模型修正\n\n然而，Web图并不满足以上三个条件。\n\n1.Web图中，A不是一个随机矩阵。\n\n* 原因\n\n有限马尔科夫链的状态转移矩阵是随机矩阵，它要求每个元素都是非负实数，且每行元素之和为1。这要求每一个网页至少要有一个出链，但实际上，很多网页根本就没有出链，从而导致状态转移矩阵A某些行全为0。这样的网页称为悬挂网页。\n\n* 解决办法\n\n从每个悬挂网页$i$向其他各个网页添加一条出链，将网页$i$到其他网页的转换概率均设为$\\frac{1}{n}$。也就是说，将A中全为0的行用$\\frac{\\mathbf{ e}}{n}$（$\\mathbf{e}$是元素全为1的n维向量）来替换。\n\n2.Web图在一般情况下是可约的。\n\n* 原因：Web图G不是强连通的。通常存在一些节点对<u, v>，没有从u到v的路径。\n\n强连通图：若图G中的任意两个顶点$i$和$j$都连通，即从顶点$i$到顶点$j$和从顶点$j$到顶点$i$都存在路径，则图G是强连通图。\n\n* 解决办法：同问题三\n\n3.\"A是非周期的\"，并不一定成立。\n\n周期图：状态$i$是周期的，并且具有周期$k>1$，是指存在一个最小的正整数$k$，使得所有从状态$i$出发又回到状态$i$的路径长度都是$k$的整数倍。\n\n如果一个状态不是周期的（或者$k=1$），那么它就是非周期的。如果一个马尔科夫链的所有状态都是非周期的，那么就说这个马尔科夫链是非周期的。\n\n* 解决办法\n\n从任一页面出发，到每个页面都加上一条链接，并给这一链接分配一个由参数$d$控制的微小转换概率。\n\n通过以上修正，状态转换矩阵A满足之前的三个条件，从而得到了一个改进后的PageRank模型：\n$$\nP = \\left[(1-d) \\frac{E}{n} + d A^{T}\\right]P \\tag{5}\n$$\n其中，$E=ee^{T}$（e是元素全为1的列向量，从而E是一个nxn的元素全为1的矩阵），n是Web图中的节点总数。\n\n公式（5）化简后，得到\n$$\nP = (1-d)e + dA^{T}P \\tag{6}\n$$\n其中，e是全为1的列向量。\n\n从而，可以得到\n$$\nP(i) = (1-d) + d \\sum_{j=1}^{n} A_{ji} P(j) \\tag{7}\n$$\n上式等价于\n$$\nP(i) = (1-d) + d \\sum_{(j,i) \\in E} \\frac{P(j)}{O_{j}} \\tag{8}\n$$\n其中，$d$称之为阻尼系数（damping factor），且$0 \\leq d  \\leq 1$。一些论文中认为，$d = 0.85$是一个不错的选择。\n\n可以使用幂迭代（power iteration）求解特征向量P，算法如下\n$$\n\\begin{align}\n& PageRank-Iterate(G) \\\\\\\\\n& \\quad P_{0} \\leftarrow \\frac{e}{n} \\\\\\\\\n& \\quad k \\leftarrow 1 \\\\\\\\\n& \\quad repeat \\\\\\\\\n& \\qquad P_{k} \\leftarrow (1-d)e+dA^{T}P_{k-1}; \\\\\\\\\n& \\qquad k \\leftarrow k+1; \\\\\\\\\n& \\quad until\\ \\Vert P_{k} - P_{k-1} \\Vert_{1} < \\epsilon \\\\\\\\\n& \\quad return\\ P_{k}\n\\end{align}\n$$\n\n<hr>\n\n参考资料\n\n1. Xindong Wu，[Top 10 algorithms in data mining](https://link.springer.com/content/pdf/10.1007%2Fs10115-007-0114-2.pdf)，Knowledge and Information Systems，2008\n\n2. （美）吴信东，库玛尔编著；李文波，吴素研译.数据挖掘十大算法，清华大学出版社，2013.5","slug":"machine-learning-pagerank","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aql003uj1q018xfexy4","content":"<p>PageRank是一个搜索排名算法，由Sergey Brin和Larry Page在1998年第七届国际万维网大会上提出的。基于这一算法，他们创建了Google搜索引擎。</p>\n<p>在介绍PageRank之前，先来了解一些主要概念。</p>\n<p>页面i的入链（In-links of page i）：从其他网页链接到网页$i$的超链接数，通常不包括来自同一站点内网页的链接。</p>\n<p>网页i的出链（Out-links of page i）：从网页$i$链接到其他网页的超链接数，通常不包括链接到同一站点内网页的超链接。<br><a id=\"more\"></a></p>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><p>根据社交网络的排序声望原理，页面$i$的重要程度（页面$i$的PageRank分数），由所有指向页面i的所有页面的PageRank分数之和决定。因为一个页面可能指向很多其他的页面，它的声望分数应该被所有它指向的页面所共享。</p>\n<p>将网络看做一个有向图G = (V , E)，其中V是所有顶点或结点的集合，例如，所有网页的集合，E是图中有向边的集合，例如，超链接。</p>\n<p>设网络中的网页总数为n，网页i的PageRank分数为P(i)，<br>$$<br>P(i) = \\sum_{(j,i) \\in E} \\frac{P(j)}{O_{j}} \\tag{1}<br>$$<br>其中，$O_{j}$是网页$j$的出链数。</p>\n<p>设P是一个由PageRank值组成的n维列向量（n-dimensional column vector）。<br>$$<br>P = (P(1),P(2),\\dots,P(n))^{T} \\tag{2}<br>$$<br>设A是图的邻接矩阵（adjacency matrix），<br>$$<br>A_{ij} =<br>\\begin{cases}<br>\\frac{1}{O_{j}},&amp; (i,j) \\in E \\\\<br>0, &amp; 其他<br>\\end{cases} \\tag{3}<br>$$<br>由公式(1)~(3)，可以得到如下n阶方程组<br>$$<br>P = A^{T}P \\tag{4}<br>$$<br>显然，P是一个特征值为1的特征向量（eigenvector）。</p>\n<p>如果满足以下条件：</p>\n<p>1.A是一个随机矩阵；2.A是不可约的；3.A是非周期的。</p>\n<p>那么PageRank向量P就是对应矩阵A的最大特征值1的那个主特征向量。</p>\n<p>实际上，公式(4)也可基于马尔科夫链（Markov chain）推导出来。</p>\n<h3 id=\"模型修正\"><a href=\"#模型修正\" class=\"headerlink\" title=\"模型修正\"></a>模型修正</h3><p>然而，Web图并不满足以上三个条件。</p>\n<p>1.Web图中，A不是一个随机矩阵。</p>\n<ul>\n<li>原因</li>\n</ul>\n<p>有限马尔科夫链的状态转移矩阵是随机矩阵，它要求每个元素都是非负实数，且每行元素之和为1。这要求每一个网页至少要有一个出链，但实际上，很多网页根本就没有出链，从而导致状态转移矩阵A某些行全为0。这样的网页称为悬挂网页。</p>\n<ul>\n<li>解决办法</li>\n</ul>\n<p>从每个悬挂网页$i$向其他各个网页添加一条出链，将网页$i$到其他网页的转换概率均设为$\\frac{1}{n}$。也就是说，将A中全为0的行用$\\frac{\\mathbf{ e}}{n}$（$\\mathbf{e}$是元素全为1的n维向量）来替换。</p>\n<p>2.Web图在一般情况下是可约的。</p>\n<ul>\n<li>原因：Web图G不是强连通的。通常存在一些节点对&lt;u, v&gt;，没有从u到v的路径。</li>\n</ul>\n<p>强连通图：若图G中的任意两个顶点$i$和$j$都连通，即从顶点$i$到顶点$j$和从顶点$j$到顶点$i$都存在路径，则图G是强连通图。</p>\n<ul>\n<li>解决办法：同问题三</li>\n</ul>\n<p>3.”A是非周期的”，并不一定成立。</p>\n<p>周期图：状态$i$是周期的，并且具有周期$k&gt;1$，是指存在一个最小的正整数$k$，使得所有从状态$i$出发又回到状态$i$的路径长度都是$k$的整数倍。</p>\n<p>如果一个状态不是周期的（或者$k=1$），那么它就是非周期的。如果一个马尔科夫链的所有状态都是非周期的，那么就说这个马尔科夫链是非周期的。</p>\n<ul>\n<li>解决办法</li>\n</ul>\n<p>从任一页面出发，到每个页面都加上一条链接，并给这一链接分配一个由参数$d$控制的微小转换概率。</p>\n<p>通过以上修正，状态转换矩阵A满足之前的三个条件，从而得到了一个改进后的PageRank模型：<br>$$<br>P = \\left[(1-d) \\frac{E}{n} + d A^{T}\\right]P \\tag{5}<br>$$<br>其中，$E=ee^{T}$（e是元素全为1的列向量，从而E是一个nxn的元素全为1的矩阵），n是Web图中的节点总数。</p>\n<p>公式（5）化简后，得到<br>$$<br>P = (1-d)e + dA^{T}P \\tag{6}<br>$$<br>其中，e是全为1的列向量。</p>\n<p>从而，可以得到<br>$$<br>P(i) = (1-d) + d \\sum_{j=1}^{n} A_{ji} P(j) \\tag{7}<br>$$<br>上式等价于<br>$$<br>P(i) = (1-d) + d \\sum_{(j,i) \\in E} \\frac{P(j)}{O_{j}} \\tag{8}<br>$$<br>其中，$d$称之为阻尼系数（damping factor），且$0 \\leq d  \\leq 1$。一些论文中认为，$d = 0.85$是一个不错的选择。</p>\n<p>可以使用幂迭代（power iteration）求解特征向量P，算法如下<br>$$<br>\\begin{align}<br>&amp; PageRank-Iterate(G) \\\\<br>&amp; \\quad P_{0} \\leftarrow \\frac{e}{n} \\\\<br>&amp; \\quad k \\leftarrow 1 \\\\<br>&amp; \\quad repeat \\\\<br>&amp; \\qquad P_{k} \\leftarrow (1-d)e+dA^{T}P_{k-1}; \\\\<br>&amp; \\qquad k \\leftarrow k+1; \\\\<br>&amp; \\quad until\\ \\Vert P_{k} - P_{k-1} \\Vert_{1} &lt; \\epsilon \\\\<br>&amp; \\quad return\\ P_{k}<br>\\end{align}<br>$$</p>\n<hr>\n\n<p>参考资料</p>\n<ol>\n<li><p>Xindong Wu，<a href=\"https://link.springer.com/content/pdf/10.1007%2Fs10115-007-0114-2.pdf\" target=\"_blank\" rel=\"noopener\">Top 10 algorithms in data mining</a>，Knowledge and Information Systems，2008</p>\n</li>\n<li><p>（美）吴信东，库玛尔编著；李文波，吴素研译.数据挖掘十大算法，清华大学出版社，2013.5</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>PageRank是一个搜索排名算法，由Sergey Brin和Larry Page在1998年第七届国际万维网大会上提出的。基于这一算法，他们创建了Google搜索引擎。</p>\n<p>在介绍PageRank之前，先来了解一些主要概念。</p>\n<p>页面i的入链（In-links of page i）：从其他网页链接到网页$i$的超链接数，通常不包括来自同一站点内网页的链接。</p>\n<p>网页i的出链（Out-links of page i）：从网页$i$链接到其他网页的超链接数，通常不包括链接到同一站点内网页的超链接。<br>","more":"</p>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><p>根据社交网络的排序声望原理，页面$i$的重要程度（页面$i$的PageRank分数），由所有指向页面i的所有页面的PageRank分数之和决定。因为一个页面可能指向很多其他的页面，它的声望分数应该被所有它指向的页面所共享。</p>\n<p>将网络看做一个有向图G = (V , E)，其中V是所有顶点或结点的集合，例如，所有网页的集合，E是图中有向边的集合，例如，超链接。</p>\n<p>设网络中的网页总数为n，网页i的PageRank分数为P(i)，<br>$$<br>P(i) = \\sum_{(j,i) \\in E} \\frac{P(j)}{O_{j}} \\tag{1}<br>$$<br>其中，$O_{j}$是网页$j$的出链数。</p>\n<p>设P是一个由PageRank值组成的n维列向量（n-dimensional column vector）。<br>$$<br>P = (P(1),P(2),\\dots,P(n))^{T} \\tag{2}<br>$$<br>设A是图的邻接矩阵（adjacency matrix），<br>$$<br>A_{ij} =<br>\\begin{cases}<br>\\frac{1}{O_{j}},&amp; (i,j) \\in E \\\\<br>0, &amp; 其他<br>\\end{cases} \\tag{3}<br>$$<br>由公式(1)~(3)，可以得到如下n阶方程组<br>$$<br>P = A^{T}P \\tag{4}<br>$$<br>显然，P是一个特征值为1的特征向量（eigenvector）。</p>\n<p>如果满足以下条件：</p>\n<p>1.A是一个随机矩阵；2.A是不可约的；3.A是非周期的。</p>\n<p>那么PageRank向量P就是对应矩阵A的最大特征值1的那个主特征向量。</p>\n<p>实际上，公式(4)也可基于马尔科夫链（Markov chain）推导出来。</p>\n<h3 id=\"模型修正\"><a href=\"#模型修正\" class=\"headerlink\" title=\"模型修正\"></a>模型修正</h3><p>然而，Web图并不满足以上三个条件。</p>\n<p>1.Web图中，A不是一个随机矩阵。</p>\n<ul>\n<li>原因</li>\n</ul>\n<p>有限马尔科夫链的状态转移矩阵是随机矩阵，它要求每个元素都是非负实数，且每行元素之和为1。这要求每一个网页至少要有一个出链，但实际上，很多网页根本就没有出链，从而导致状态转移矩阵A某些行全为0。这样的网页称为悬挂网页。</p>\n<ul>\n<li>解决办法</li>\n</ul>\n<p>从每个悬挂网页$i$向其他各个网页添加一条出链，将网页$i$到其他网页的转换概率均设为$\\frac{1}{n}$。也就是说，将A中全为0的行用$\\frac{\\mathbf{ e}}{n}$（$\\mathbf{e}$是元素全为1的n维向量）来替换。</p>\n<p>2.Web图在一般情况下是可约的。</p>\n<ul>\n<li>原因：Web图G不是强连通的。通常存在一些节点对&lt;u, v&gt;，没有从u到v的路径。</li>\n</ul>\n<p>强连通图：若图G中的任意两个顶点$i$和$j$都连通，即从顶点$i$到顶点$j$和从顶点$j$到顶点$i$都存在路径，则图G是强连通图。</p>\n<ul>\n<li>解决办法：同问题三</li>\n</ul>\n<p>3.”A是非周期的”，并不一定成立。</p>\n<p>周期图：状态$i$是周期的，并且具有周期$k&gt;1$，是指存在一个最小的正整数$k$，使得所有从状态$i$出发又回到状态$i$的路径长度都是$k$的整数倍。</p>\n<p>如果一个状态不是周期的（或者$k=1$），那么它就是非周期的。如果一个马尔科夫链的所有状态都是非周期的，那么就说这个马尔科夫链是非周期的。</p>\n<ul>\n<li>解决办法</li>\n</ul>\n<p>从任一页面出发，到每个页面都加上一条链接，并给这一链接分配一个由参数$d$控制的微小转换概率。</p>\n<p>通过以上修正，状态转换矩阵A满足之前的三个条件，从而得到了一个改进后的PageRank模型：<br>$$<br>P = \\left[(1-d) \\frac{E}{n} + d A^{T}\\right]P \\tag{5}<br>$$<br>其中，$E=ee^{T}$（e是元素全为1的列向量，从而E是一个nxn的元素全为1的矩阵），n是Web图中的节点总数。</p>\n<p>公式（5）化简后，得到<br>$$<br>P = (1-d)e + dA^{T}P \\tag{6}<br>$$<br>其中，e是全为1的列向量。</p>\n<p>从而，可以得到<br>$$<br>P(i) = (1-d) + d \\sum_{j=1}^{n} A_{ji} P(j) \\tag{7}<br>$$<br>上式等价于<br>$$<br>P(i) = (1-d) + d \\sum_{(j,i) \\in E} \\frac{P(j)}{O_{j}} \\tag{8}<br>$$<br>其中，$d$称之为阻尼系数（damping factor），且$0 \\leq d  \\leq 1$。一些论文中认为，$d = 0.85$是一个不错的选择。</p>\n<p>可以使用幂迭代（power iteration）求解特征向量P，算法如下<br>$$<br>\\begin{align}<br>&amp; PageRank-Iterate(G) \\\\<br>&amp; \\quad P_{0} \\leftarrow \\frac{e}{n} \\\\<br>&amp; \\quad k \\leftarrow 1 \\\\<br>&amp; \\quad repeat \\\\<br>&amp; \\qquad P_{k} \\leftarrow (1-d)e+dA^{T}P_{k-1}; \\\\<br>&amp; \\qquad k \\leftarrow k+1; \\\\<br>&amp; \\quad until\\ \\Vert P_{k} - P_{k-1} \\Vert_{1} &lt; \\epsilon \\\\<br>&amp; \\quad return\\ P_{k}<br>\\end{align}<br>$$</p>\n<hr>\n\n<p>参考资料</p>\n<ol>\n<li><p>Xindong Wu，<a href=\"https://link.springer.com/content/pdf/10.1007%2Fs10115-007-0114-2.pdf\" target=\"_blank\" rel=\"noopener\">Top 10 algorithms in data mining</a>，Knowledge and Information Systems，2008</p>\n</li>\n<li><p>（美）吴信东，库玛尔编著；李文波，吴素研译.数据挖掘十大算法，清华大学出版社，2013.5</p>\n</li>\n</ol>"},{"title":"线性可分支持向量机","date":"2018-07-16T11:08:48.000Z","mathjax":true,"_content":"\n### 线性可分支持向量机\n\n分离超平面\n$$\n\\mathbf w \\cdot \\mathbf x +b = 0　\\tag {1}\n$$\n\n其中，w为分离超平面的法向量，b为截距\n\n分类决策函数\n$$\nf(x) = sign(\\mathbf w \\cdot \\mathbf x +b)\n$$\n其中，sign()称为符号函数，\n$$\nsign(x) =\n\\begin{cases}\n-1, & x < 0 \\\\\\\n0, & x = 0 \\\\\\\n1, & x > 0\n\\end{cases}\n$$\n<!--more-->\n\n### 函数间隔\n\n定义：对于给定的训练数据集T和超平面(w,b)，定义超平面(w,b)关于样本点($x_i,y_i$)的函数间隔为\n$$\n\\hat \\gamma_i = y_i ( w \\cdot x_i + b)\n$$\n定义超平面(w,b)关于训练数据集T的函数间隔为超平面(w,b)关于T中所有样本点($x_i,y_i$)的函数间隔之最小值，即\n$$\n\\hat \\gamma  = \\min_{i=1,\\dots,N} \\hat \\gamma_i\n$$\n\n### 几何间隔\n\n定义：对于给定的训练数据集T和超平面(w,b)，定义超平面(w,b)关于样本点($x_i,y_i$)的几何间隔为\n$$\n\\gamma_i = y_i \\frac {w \\cdot x_i + b}{||w||}\n$$\n定义超平面(w,b)关于训练数据集T的几何间隔为超平面(w,b)关于T中所有样本点($x_i,y_i$)的几何间隔之最小值，即\n$$\n\\gamma = \\min_{i=1,\\dots,N} \\gamma_i\n$$\n超平面（w，b）关于样本点（$x_i,y_i$）的几何间隔是`实例点到超平面的带符号的距离`。\n\n函数间隔和几何间隔有如下关系：\n$$\n\\gamma_i = \\frac{\\hat \\gamma_i}{||w||}\n$$\n\n$$\n\\gamma = \\frac{\\hat \\gamma}{||w||}\n$$\n\n若||w||=1，则函数间隔和几何间隔相等。如果超平面参数w和b成比例地改变（超平面没有改变），函数间隔也会按比例改变，而几何间隔不变。\n\n### 间隔最大化\n\n如何求得几何间隔最大的分离超平面，即最大间隔分离超平面呢？可用下面的约束最优化问题来表示\n$$\n\\max_{w,b} \\gamma \\\\\\\ns.t. y_i \\frac{w \\cdot x_i +b }{||w||} \\geq \\gamma, i=1,2,\\dots,N\n$$\n约束条件表示超平面(w,b)关于每个训练样本点的几何间隔至少是$\\gamma$\n\n根据函数间隔和几何间隔的关系，上面的问题可写为\n$$\n\\max_{w,b} \\frac{\\hat \\gamma}{||w||}\n$$\n\n$$\ns.t. y_i ( w \\cdot x_i +b ) \\geq \\hat \\gamma, i=1,2,\\dots,N\n$$\n\n*函数间隔$\\hat \\gamma$的取值并不影响最优化问题的解*。因为将w和b按比例改变为$\\lambda w 和\\lambda b$，这时函数间隔变为$\\lambda \\hat \\gamma$，函数间隔的改变对上面的最优化问题的不等式约束没有影响，对目标函数的优化也没有影响。\n\n不妨取$\\hat \\gamma = 1$，将其代入上面的最优化问题，得$\\max_{w,b} \\frac{1}{||w||}$，又最大化$\\frac{1}{||w||}$等价于最小化$\\frac{1}{2}||w||^2$。\n\n故得到了下面的线性可分支持向量机学习的最优化问题\n$$\n\\min_{w,b} \\frac{1}{2}||w||^2\n$$\n\n$$\ns.t. y_i ( w \\cdot x_i +b ) - 1 \\geq 0, i = 1,2,\\dots,N\n$$\n\n对式（4）使用拉格朗日乘数法（Lagrange multipliers）可得到其“对偶问题”(dual problem)。对式（4）的每条约束添加拉格朗日乘数$\\alpha_i \\geq 0$，则该问题的拉格朗日函数可写为\n$$\nL(w,b,\\alpha) = \\frac{1}{2}||w||^2 + \\sum_{i=1}^{m} \\alpha_i (1-y_i(w \\cdot x_i +b)) \\tag{5}，\\\\\\\n其中 \\alpha = (\\alpha_i,\\alpha_2,\\dots,\\alpha_m)^T\n$$\n令L(w,b,$\\alpha$)对w和b的偏导数为零，\n$$\n\\begin{align}\n& \\frac{\\partial L}{\\partial w} = w - \\sum_{i=1}^{m} \\alpha_i y_i \\mathbf x_i = 0\\\\\\\n& \\frac{\\partial L}{\\partial b} = -\\sum_{i=1}^{m} \\alpha_i y_i = 0\n\\end{align}\n$$\n从而，\n$$\nw =  \\sum_{i=1}^{m} \\alpha_i y_i \\mathbf x_i \\tag {6}\n$$\n\n$$\n0 = \\sum_{i=1}^{m} \\alpha_i y_i \\tag {7}\n$$\n\n将式（6）、（7）代入式（5）中，得：\n$$\n\\begin{align}\nL(w,b,\\alpha) & = \\frac{1}{2}  \\sum_{i=1}^{m} \\alpha_I y_i \\mathbf x_i^T   \\sum_{j=1}^{m} \\alpha_j y_j \\mathbf x_j + \\sum_{i=1}^{m} \\alpha_i ( 1 - y_i( \\mathbf x_i \\sum_{j=1}^{m} \\alpha_j y_j \\mathbf x_j^T + b) )\\\\\\\n& =\\sum_{i=1}^{m} \\alpha_i - \\frac{1}{2}\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\alpha_i \\alpha_j y_i y_j \\mathbf x_i^T x_j\n\\end{align}\n$$\n\n故，式(4)的对偶问题为\n$$\n\\max_\\alpha [ \\sum_{i=1}^{m} \\alpha_i - \\frac{1}{2}\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\alpha_i \\alpha_j y_i y_j (\\mathbf x_i \\cdot \\mathbf x_j) ] \\tag{8} \\\\\\\ns.t. \\sum_{i=1}^{m} \\alpha_i y_i = 0,\\\\\\\n\\alpha_i \\geq 0, i = 1,2,\\dots,m\n$$\n### 例题\n\n已知一个训练数据集，其正例点是$x_1 = (3,3),x_2 = (4,3)$,负例点是$x_3 = (1,1)$，求线性可分支持向量机。\n\n**解：**对偶问题是\n$$\n\\min_\\alpha  \\left ( \\frac{1}{2}\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\alpha_i \\alpha_j y_i y_j (\\mathbf x_i \\cdot \\mathbf x_j) - \\sum_{i=1}^{m} \\alpha_i \\right) \\\\\\\n=  \\frac{1}{2}(18 \\alpha_1^2+25 \\alpha_2^2 + 2 \\alpha_3^2 + 42\\alpha_1 \\alpha_2 - 12 \\alpha_1 \\alpha_3 - 14 \\alpha_2 \\alpha_3) -\\alpha_1 - \\alpha_2 - \\alpha_3 \\\\\\\ns.t. \\alpha_1 + \\alpha_2 - \\alpha_3 = 0 \\\\\\\n\\alpha_i \\geq 0 , i = 1,2,3\n$$\n将$\\alpha_3 = \\alpha_1 + \\alpha_2$代入目标函数并记为\n$$\ns(\\alpha_1,\\alpha_2) = 4 \\alpha_1^2 + \\frac{13}{2} \\alpha_2^2 + 10 \\alpha_1 \\alpha_2 - 2 \\alpha_1 - 2 \\alpha_2\n$$\n\n对$\\alpha_1,\\alpha_2$求偏导数，并其为0\n$$\n\\frac{\\partial s}{\\partial \\alpha_1} = 8 \\alpha_1 + 10 \\alpha_2 - 2 = 0\\\\\\\n\\frac{\\partial s}{\\partial \\alpha_2} = 13 \\alpha_2 + 10 \\alpha_1 - 2 = 0\n$$\n联立上式，解得：\n$$\n\\alpha_1 = \\frac{3}{2}, \\alpha_2 = -1\n$$\n从而，$s(\\alpha_1,\\alpha_2)在（\\frac{3}{2}, -1）$取极值，但该点不满足约束条件$\\alpha_2 \\geq 0$，所以最小值应在边界上取得。\n\n当$\\alpha_1 = 0$时，\n$$\n\\begin{align}\ns(\\alpha_2) &= \\frac{13}{2} \\alpha_2^2 - 2 \\alpha_2 \\\\\\\n&=  \\frac{13}{2} (\\alpha_2^2 - \\frac{4}{13} \\alpha_2) \\\\\\\n&=  \\frac{13}{2} (\\alpha_2 - \\frac{2}{13})^2 - \\frac{2}{13}\n\\end{align}\n$$\n显然，当$\\alpha_2 = \\frac{2}{13}$时，$s(\\alpha_1,\\alpha_2)$取得最小值$s(0,\\frac{2}{13}) = - \\frac{2}{13}$。\n\n同理可得，当$\\alpha_2 = 0$时，$s(\\alpha_1,\\alpha_2)$的最小值$s(\\frac{1}{4},0) = - \\frac{1}{4}$。\n\n故，$s(\\alpha_1,\\alpha_2)$在$\\alpha_1 = \\frac{1}{4} ,\\alpha_2 = 0)$处达到最小，此时，$\\alpha_3 = \\frac{1}{4}$\n\n因此，$\\alpha_1^\\* = \\alpha_3^\\* = \\frac{1}{4}$对应的实例点$x_1,x_3$是支持向量。\n$$\n\\begin{align}\nw_1^{\\*} & = \\alpha_1^{\\*} y_1 x_{11} + \\alpha_3^{\\*} y_3 x_{31}\\\\\\\n&=\\frac{1}{4} \\times 1 \\times 3 + \\frac{1}{4} \\times (-1) \\times 1\\\\\\\n&=\\frac{1}{2}\n\\end{align}\n$$\n同理可得，\n$$\nw_2^\\* = \\alpha_1^\\* y_1 x_{12} + \\alpha_3^\\* y_3 x_{32} =\\frac{1}{2}\n$$\n\n$$\n\\begin{align}\nb^\\* &= y_1 - [ \\alpha_1^\\*y_1(x_1 \\cdot x_1)  + \\alpha_3^\\*y_3(x_3 \\cdot x_1)] \\\\\\\n&= 1 - \\left( \\frac{1}{4} \\times 1 \\times [ (3,3) \\cdot (3,3) ] + \\frac{1}{4} \\times (-1) \\times [(1,1) \\cdot (3,3) \\right) \\\\\\\n&= -2\n\\end{align}\n$$\n\n故，分离超平面为\n$$\n\\frac{1}{2}x^{(1)} + \\frac{1}{2} x^{(1)} - 2 = 0\n$$\n分类决策函数为\n$$\nf(x) = sign \\left( \\frac{1}{2}x^{(1)} + \\frac{1}{2} x^{(1)} - 2 \\right)\n$$\n\n（未完待续。。。）\n","source":"_posts/machine-learning-svm-linearly-separable.md","raw":"---\ntitle: 线性可分支持向量机\ndate: 2018-07-16 19:08:48\ntags: 机器学习\ncategories: 机器学习\nmathjax: true\n---\n\n### 线性可分支持向量机\n\n分离超平面\n$$\n\\mathbf w \\cdot \\mathbf x +b = 0　\\tag {1}\n$$\n\n其中，w为分离超平面的法向量，b为截距\n\n分类决策函数\n$$\nf(x) = sign(\\mathbf w \\cdot \\mathbf x +b)\n$$\n其中，sign()称为符号函数，\n$$\nsign(x) =\n\\begin{cases}\n-1, & x < 0 \\\\\\\n0, & x = 0 \\\\\\\n1, & x > 0\n\\end{cases}\n$$\n<!--more-->\n\n### 函数间隔\n\n定义：对于给定的训练数据集T和超平面(w,b)，定义超平面(w,b)关于样本点($x_i,y_i$)的函数间隔为\n$$\n\\hat \\gamma_i = y_i ( w \\cdot x_i + b)\n$$\n定义超平面(w,b)关于训练数据集T的函数间隔为超平面(w,b)关于T中所有样本点($x_i,y_i$)的函数间隔之最小值，即\n$$\n\\hat \\gamma  = \\min_{i=1,\\dots,N} \\hat \\gamma_i\n$$\n\n### 几何间隔\n\n定义：对于给定的训练数据集T和超平面(w,b)，定义超平面(w,b)关于样本点($x_i,y_i$)的几何间隔为\n$$\n\\gamma_i = y_i \\frac {w \\cdot x_i + b}{||w||}\n$$\n定义超平面(w,b)关于训练数据集T的几何间隔为超平面(w,b)关于T中所有样本点($x_i,y_i$)的几何间隔之最小值，即\n$$\n\\gamma = \\min_{i=1,\\dots,N} \\gamma_i\n$$\n超平面（w，b）关于样本点（$x_i,y_i$）的几何间隔是`实例点到超平面的带符号的距离`。\n\n函数间隔和几何间隔有如下关系：\n$$\n\\gamma_i = \\frac{\\hat \\gamma_i}{||w||}\n$$\n\n$$\n\\gamma = \\frac{\\hat \\gamma}{||w||}\n$$\n\n若||w||=1，则函数间隔和几何间隔相等。如果超平面参数w和b成比例地改变（超平面没有改变），函数间隔也会按比例改变，而几何间隔不变。\n\n### 间隔最大化\n\n如何求得几何间隔最大的分离超平面，即最大间隔分离超平面呢？可用下面的约束最优化问题来表示\n$$\n\\max_{w,b} \\gamma \\\\\\\ns.t. y_i \\frac{w \\cdot x_i +b }{||w||} \\geq \\gamma, i=1,2,\\dots,N\n$$\n约束条件表示超平面(w,b)关于每个训练样本点的几何间隔至少是$\\gamma$\n\n根据函数间隔和几何间隔的关系，上面的问题可写为\n$$\n\\max_{w,b} \\frac{\\hat \\gamma}{||w||}\n$$\n\n$$\ns.t. y_i ( w \\cdot x_i +b ) \\geq \\hat \\gamma, i=1,2,\\dots,N\n$$\n\n*函数间隔$\\hat \\gamma$的取值并不影响最优化问题的解*。因为将w和b按比例改变为$\\lambda w 和\\lambda b$，这时函数间隔变为$\\lambda \\hat \\gamma$，函数间隔的改变对上面的最优化问题的不等式约束没有影响，对目标函数的优化也没有影响。\n\n不妨取$\\hat \\gamma = 1$，将其代入上面的最优化问题，得$\\max_{w,b} \\frac{1}{||w||}$，又最大化$\\frac{1}{||w||}$等价于最小化$\\frac{1}{2}||w||^2$。\n\n故得到了下面的线性可分支持向量机学习的最优化问题\n$$\n\\min_{w,b} \\frac{1}{2}||w||^2\n$$\n\n$$\ns.t. y_i ( w \\cdot x_i +b ) - 1 \\geq 0, i = 1,2,\\dots,N\n$$\n\n对式（4）使用拉格朗日乘数法（Lagrange multipliers）可得到其“对偶问题”(dual problem)。对式（4）的每条约束添加拉格朗日乘数$\\alpha_i \\geq 0$，则该问题的拉格朗日函数可写为\n$$\nL(w,b,\\alpha) = \\frac{1}{2}||w||^2 + \\sum_{i=1}^{m} \\alpha_i (1-y_i(w \\cdot x_i +b)) \\tag{5}，\\\\\\\n其中 \\alpha = (\\alpha_i,\\alpha_2,\\dots,\\alpha_m)^T\n$$\n令L(w,b,$\\alpha$)对w和b的偏导数为零，\n$$\n\\begin{align}\n& \\frac{\\partial L}{\\partial w} = w - \\sum_{i=1}^{m} \\alpha_i y_i \\mathbf x_i = 0\\\\\\\n& \\frac{\\partial L}{\\partial b} = -\\sum_{i=1}^{m} \\alpha_i y_i = 0\n\\end{align}\n$$\n从而，\n$$\nw =  \\sum_{i=1}^{m} \\alpha_i y_i \\mathbf x_i \\tag {6}\n$$\n\n$$\n0 = \\sum_{i=1}^{m} \\alpha_i y_i \\tag {7}\n$$\n\n将式（6）、（7）代入式（5）中，得：\n$$\n\\begin{align}\nL(w,b,\\alpha) & = \\frac{1}{2}  \\sum_{i=1}^{m} \\alpha_I y_i \\mathbf x_i^T   \\sum_{j=1}^{m} \\alpha_j y_j \\mathbf x_j + \\sum_{i=1}^{m} \\alpha_i ( 1 - y_i( \\mathbf x_i \\sum_{j=1}^{m} \\alpha_j y_j \\mathbf x_j^T + b) )\\\\\\\n& =\\sum_{i=1}^{m} \\alpha_i - \\frac{1}{2}\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\alpha_i \\alpha_j y_i y_j \\mathbf x_i^T x_j\n\\end{align}\n$$\n\n故，式(4)的对偶问题为\n$$\n\\max_\\alpha [ \\sum_{i=1}^{m} \\alpha_i - \\frac{1}{2}\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\alpha_i \\alpha_j y_i y_j (\\mathbf x_i \\cdot \\mathbf x_j) ] \\tag{8} \\\\\\\ns.t. \\sum_{i=1}^{m} \\alpha_i y_i = 0,\\\\\\\n\\alpha_i \\geq 0, i = 1,2,\\dots,m\n$$\n### 例题\n\n已知一个训练数据集，其正例点是$x_1 = (3,3),x_2 = (4,3)$,负例点是$x_3 = (1,1)$，求线性可分支持向量机。\n\n**解：**对偶问题是\n$$\n\\min_\\alpha  \\left ( \\frac{1}{2}\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\alpha_i \\alpha_j y_i y_j (\\mathbf x_i \\cdot \\mathbf x_j) - \\sum_{i=1}^{m} \\alpha_i \\right) \\\\\\\n=  \\frac{1}{2}(18 \\alpha_1^2+25 \\alpha_2^2 + 2 \\alpha_3^2 + 42\\alpha_1 \\alpha_2 - 12 \\alpha_1 \\alpha_3 - 14 \\alpha_2 \\alpha_3) -\\alpha_1 - \\alpha_2 - \\alpha_3 \\\\\\\ns.t. \\alpha_1 + \\alpha_2 - \\alpha_3 = 0 \\\\\\\n\\alpha_i \\geq 0 , i = 1,2,3\n$$\n将$\\alpha_3 = \\alpha_1 + \\alpha_2$代入目标函数并记为\n$$\ns(\\alpha_1,\\alpha_2) = 4 \\alpha_1^2 + \\frac{13}{2} \\alpha_2^2 + 10 \\alpha_1 \\alpha_2 - 2 \\alpha_1 - 2 \\alpha_2\n$$\n\n对$\\alpha_1,\\alpha_2$求偏导数，并其为0\n$$\n\\frac{\\partial s}{\\partial \\alpha_1} = 8 \\alpha_1 + 10 \\alpha_2 - 2 = 0\\\\\\\n\\frac{\\partial s}{\\partial \\alpha_2} = 13 \\alpha_2 + 10 \\alpha_1 - 2 = 0\n$$\n联立上式，解得：\n$$\n\\alpha_1 = \\frac{3}{2}, \\alpha_2 = -1\n$$\n从而，$s(\\alpha_1,\\alpha_2)在（\\frac{3}{2}, -1）$取极值，但该点不满足约束条件$\\alpha_2 \\geq 0$，所以最小值应在边界上取得。\n\n当$\\alpha_1 = 0$时，\n$$\n\\begin{align}\ns(\\alpha_2) &= \\frac{13}{2} \\alpha_2^2 - 2 \\alpha_2 \\\\\\\n&=  \\frac{13}{2} (\\alpha_2^2 - \\frac{4}{13} \\alpha_2) \\\\\\\n&=  \\frac{13}{2} (\\alpha_2 - \\frac{2}{13})^2 - \\frac{2}{13}\n\\end{align}\n$$\n显然，当$\\alpha_2 = \\frac{2}{13}$时，$s(\\alpha_1,\\alpha_2)$取得最小值$s(0,\\frac{2}{13}) = - \\frac{2}{13}$。\n\n同理可得，当$\\alpha_2 = 0$时，$s(\\alpha_1,\\alpha_2)$的最小值$s(\\frac{1}{4},0) = - \\frac{1}{4}$。\n\n故，$s(\\alpha_1,\\alpha_2)$在$\\alpha_1 = \\frac{1}{4} ,\\alpha_2 = 0)$处达到最小，此时，$\\alpha_3 = \\frac{1}{4}$\n\n因此，$\\alpha_1^\\* = \\alpha_3^\\* = \\frac{1}{4}$对应的实例点$x_1,x_3$是支持向量。\n$$\n\\begin{align}\nw_1^{\\*} & = \\alpha_1^{\\*} y_1 x_{11} + \\alpha_3^{\\*} y_3 x_{31}\\\\\\\n&=\\frac{1}{4} \\times 1 \\times 3 + \\frac{1}{4} \\times (-1) \\times 1\\\\\\\n&=\\frac{1}{2}\n\\end{align}\n$$\n同理可得，\n$$\nw_2^\\* = \\alpha_1^\\* y_1 x_{12} + \\alpha_3^\\* y_3 x_{32} =\\frac{1}{2}\n$$\n\n$$\n\\begin{align}\nb^\\* &= y_1 - [ \\alpha_1^\\*y_1(x_1 \\cdot x_1)  + \\alpha_3^\\*y_3(x_3 \\cdot x_1)] \\\\\\\n&= 1 - \\left( \\frac{1}{4} \\times 1 \\times [ (3,3) \\cdot (3,3) ] + \\frac{1}{4} \\times (-1) \\times [(1,1) \\cdot (3,3) \\right) \\\\\\\n&= -2\n\\end{align}\n$$\n\n故，分离超平面为\n$$\n\\frac{1}{2}x^{(1)} + \\frac{1}{2} x^{(1)} - 2 = 0\n$$\n分类决策函数为\n$$\nf(x) = sign \\left( \\frac{1}{2}x^{(1)} + \\frac{1}{2} x^{(1)} - 2 \\right)\n$$\n\n（未完待续。。。）\n","slug":"machine-learning-svm-linearly-separable","published":1,"updated":"2019-01-19T07:23:57.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aqp003wj1q04fkjdy1m","content":"<h3 id=\"线性可分支持向量机\"><a href=\"#线性可分支持向量机\" class=\"headerlink\" title=\"线性可分支持向量机\"></a>线性可分支持向量机</h3><p>分离超平面<br>$$<br>\\mathbf w \\cdot \\mathbf x +b = 0　\\tag {1}<br>$$</p>\n<p>其中，w为分离超平面的法向量，b为截距</p>\n<p>分类决策函数<br>$$<br>f(x) = sign(\\mathbf w \\cdot \\mathbf x +b)<br>$$<br>其中，sign()称为符号函数，<br>$$<br>sign(x) =<br>\\begin{cases}<br>-1, &amp; x &lt; 0 \\\\<br>0, &amp; x = 0 \\\\<br>1, &amp; x &gt; 0<br>\\end{cases}<br>$$<br><a id=\"more\"></a></p>\n<h3 id=\"函数间隔\"><a href=\"#函数间隔\" class=\"headerlink\" title=\"函数间隔\"></a>函数间隔</h3><p>定义：对于给定的训练数据集T和超平面(w,b)，定义超平面(w,b)关于样本点($x_i,y_i$)的函数间隔为<br>$$<br>\\hat \\gamma_i = y_i ( w \\cdot x_i + b)<br>$$<br>定义超平面(w,b)关于训练数据集T的函数间隔为超平面(w,b)关于T中所有样本点($x_i,y_i$)的函数间隔之最小值，即<br>$$<br>\\hat \\gamma  = \\min_{i=1,\\dots,N} \\hat \\gamma_i<br>$$</p>\n<h3 id=\"几何间隔\"><a href=\"#几何间隔\" class=\"headerlink\" title=\"几何间隔\"></a>几何间隔</h3><p>定义：对于给定的训练数据集T和超平面(w,b)，定义超平面(w,b)关于样本点($x_i,y_i$)的几何间隔为<br>$$<br>\\gamma_i = y_i \\frac {w \\cdot x_i + b}{||w||}<br>$$<br>定义超平面(w,b)关于训练数据集T的几何间隔为超平面(w,b)关于T中所有样本点($x_i,y_i$)的几何间隔之最小值，即<br>$$<br>\\gamma = \\min_{i=1,\\dots,N} \\gamma_i<br>$$<br>超平面（w，b）关于样本点（$x_i,y_i$）的几何间隔是<code>实例点到超平面的带符号的距离</code>。</p>\n<p>函数间隔和几何间隔有如下关系：<br>$$<br>\\gamma_i = \\frac{\\hat \\gamma_i}{||w||}<br>$$</p>\n<p>$$<br>\\gamma = \\frac{\\hat \\gamma}{||w||}<br>$$</p>\n<p>若||w||=1，则函数间隔和几何间隔相等。如果超平面参数w和b成比例地改变（超平面没有改变），函数间隔也会按比例改变，而几何间隔不变。</p>\n<h3 id=\"间隔最大化\"><a href=\"#间隔最大化\" class=\"headerlink\" title=\"间隔最大化\"></a>间隔最大化</h3><p>如何求得几何间隔最大的分离超平面，即最大间隔分离超平面呢？可用下面的约束最优化问题来表示<br>$$<br>\\max_{w,b} \\gamma \\\\<br>s.t. y_i \\frac{w \\cdot x_i +b }{||w||} \\geq \\gamma, i=1,2,\\dots,N<br>$$<br>约束条件表示超平面(w,b)关于每个训练样本点的几何间隔至少是$\\gamma$</p>\n<p>根据函数间隔和几何间隔的关系，上面的问题可写为<br>$$<br>\\max_{w,b} \\frac{\\hat \\gamma}{||w||}<br>$$</p>\n<p>$$<br>s.t. y_i ( w \\cdot x_i +b ) \\geq \\hat \\gamma, i=1,2,\\dots,N<br>$$</p>\n<p><em>函数间隔$\\hat \\gamma$的取值并不影响最优化问题的解</em>。因为将w和b按比例改变为$\\lambda w 和\\lambda b$，这时函数间隔变为$\\lambda \\hat \\gamma$，函数间隔的改变对上面的最优化问题的不等式约束没有影响，对目标函数的优化也没有影响。</p>\n<p>不妨取$\\hat \\gamma = 1$，将其代入上面的最优化问题，得$\\max_{w,b} \\frac{1}{||w||}$，又最大化$\\frac{1}{||w||}$等价于最小化$\\frac{1}{2}||w||^2$。</p>\n<p>故得到了下面的线性可分支持向量机学习的最优化问题<br>$$<br>\\min_{w,b} \\frac{1}{2}||w||^2<br>$$</p>\n<p>$$<br>s.t. y_i ( w \\cdot x_i +b ) - 1 \\geq 0, i = 1,2,\\dots,N<br>$$</p>\n<p>对式（4）使用拉格朗日乘数法（Lagrange multipliers）可得到其“对偶问题”(dual problem)。对式（4）的每条约束添加拉格朗日乘数$\\alpha_i \\geq 0$，则该问题的拉格朗日函数可写为<br>$$<br>L(w,b,\\alpha) = \\frac{1}{2}||w||^2 + \\sum_{i=1}^{m} \\alpha_i (1-y_i(w \\cdot x_i +b)) \\tag{5}，\\\\<br>其中 \\alpha = (\\alpha_i,\\alpha_2,\\dots,\\alpha_m)^T<br>$$<br>令L(w,b,$\\alpha$)对w和b的偏导数为零，<br>$$<br>\\begin{align}<br>&amp; \\frac{\\partial L}{\\partial w} = w - \\sum_{i=1}^{m} \\alpha_i y_i \\mathbf x_i = 0\\\\<br>&amp; \\frac{\\partial L}{\\partial b} = -\\sum_{i=1}^{m} \\alpha_i y_i = 0<br>\\end{align}<br>$$<br>从而，<br>$$<br>w =  \\sum_{i=1}^{m} \\alpha_i y_i \\mathbf x_i \\tag {6}<br>$$</p>\n<p>$$<br>0 = \\sum_{i=1}^{m} \\alpha_i y_i \\tag {7}<br>$$</p>\n<p>将式（6）、（7）代入式（5）中，得：<br>$$<br>\\begin{align}<br>L(w,b,\\alpha) &amp; = \\frac{1}{2}  \\sum_{i=1}^{m} \\alpha_I y_i \\mathbf x_i^T   \\sum_{j=1}^{m} \\alpha_j y_j \\mathbf x_j + \\sum_{i=1}^{m} \\alpha_i ( 1 - y_i( \\mathbf x_i \\sum_{j=1}^{m} \\alpha_j y_j \\mathbf x_j^T + b) )\\\\<br>&amp; =\\sum_{i=1}^{m} \\alpha_i - \\frac{1}{2}\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\alpha_i \\alpha_j y_i y_j \\mathbf x_i^T x_j<br>\\end{align}<br>$$</p>\n<p>故，式(4)的对偶问题为<br>$$<br>\\max_\\alpha [ \\sum_{i=1}^{m} \\alpha_i - \\frac{1}{2}\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\alpha_i \\alpha_j y_i y_j (\\mathbf x_i \\cdot \\mathbf x_j) ] \\tag{8} \\\\<br>s.t. \\sum_{i=1}^{m} \\alpha_i y_i = 0,\\\\<br>\\alpha_i \\geq 0, i = 1,2,\\dots,m<br>$$</p>\n<h3 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h3><p>已知一个训练数据集，其正例点是$x_1 = (3,3),x_2 = (4,3)$,负例点是$x_3 = (1,1)$，求线性可分支持向量机。</p>\n<p><strong>解：</strong>对偶问题是<br>$$<br>\\min_\\alpha  \\left ( \\frac{1}{2}\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\alpha_i \\alpha_j y_i y_j (\\mathbf x_i \\cdot \\mathbf x_j) - \\sum_{i=1}^{m} \\alpha_i \\right) \\\\<br>=  \\frac{1}{2}(18 \\alpha_1^2+25 \\alpha_2^2 + 2 \\alpha_3^2 + 42\\alpha_1 \\alpha_2 - 12 \\alpha_1 \\alpha_3 - 14 \\alpha_2 \\alpha_3) -\\alpha_1 - \\alpha_2 - \\alpha_3 \\\\<br>s.t. \\alpha_1 + \\alpha_2 - \\alpha_3 = 0 \\\\<br>\\alpha_i \\geq 0 , i = 1,2,3<br>$$<br>将$\\alpha_3 = \\alpha_1 + \\alpha_2$代入目标函数并记为<br>$$<br>s(\\alpha_1,\\alpha_2) = 4 \\alpha_1^2 + \\frac{13}{2} \\alpha_2^2 + 10 \\alpha_1 \\alpha_2 - 2 \\alpha_1 - 2 \\alpha_2<br>$$</p>\n<p>对$\\alpha_1,\\alpha_2$求偏导数，并其为0<br>$$<br>\\frac{\\partial s}{\\partial \\alpha_1} = 8 \\alpha_1 + 10 \\alpha_2 - 2 = 0\\\\<br>\\frac{\\partial s}{\\partial \\alpha_2} = 13 \\alpha_2 + 10 \\alpha_1 - 2 = 0<br>$$<br>联立上式，解得：<br>$$<br>\\alpha_1 = \\frac{3}{2}, \\alpha_2 = -1<br>$$<br>从而，$s(\\alpha_1,\\alpha_2)在（\\frac{3}{2}, -1）$取极值，但该点不满足约束条件$\\alpha_2 \\geq 0$，所以最小值应在边界上取得。</p>\n<p>当$\\alpha_1 = 0$时，<br>$$<br>\\begin{align}<br>s(\\alpha_2) &amp;= \\frac{13}{2} \\alpha_2^2 - 2 \\alpha_2 \\\\<br>&amp;=  \\frac{13}{2} (\\alpha_2^2 - \\frac{4}{13} \\alpha_2) \\\\<br>&amp;=  \\frac{13}{2} (\\alpha_2 - \\frac{2}{13})^2 - \\frac{2}{13}<br>\\end{align}<br>$$<br>显然，当$\\alpha_2 = \\frac{2}{13}$时，$s(\\alpha_1,\\alpha_2)$取得最小值$s(0,\\frac{2}{13}) = - \\frac{2}{13}$。</p>\n<p>同理可得，当$\\alpha_2 = 0$时，$s(\\alpha_1,\\alpha_2)$的最小值$s(\\frac{1}{4},0) = - \\frac{1}{4}$。</p>\n<p>故，$s(\\alpha_1,\\alpha_2)$在$\\alpha_1 = \\frac{1}{4} ,\\alpha_2 = 0)$处达到最小，此时，$\\alpha_3 = \\frac{1}{4}$</p>\n<p>因此，$\\alpha_1^* = \\alpha_3^* = \\frac{1}{4}$对应的实例点$x_1,x_3$是支持向量。<br>$$<br>\\begin{align}<br>w_1^{*} &amp; = \\alpha_1^{*} y_1 x_{11} + \\alpha_3^{*} y_3 x_{31}\\\\<br>&amp;=\\frac{1}{4} \\times 1 \\times 3 + \\frac{1}{4} \\times (-1) \\times 1\\\\<br>&amp;=\\frac{1}{2}<br>\\end{align}<br>$$<br>同理可得，<br>$$<br>w_2^* = \\alpha_1^* y_1 x_{12} + \\alpha_3^* y_3 x_{32} =\\frac{1}{2}<br>$$</p>\n<p>$$<br>\\begin{align}<br>b^* &amp;= y_1 - [ \\alpha_1^*y_1(x_1 \\cdot x_1)  + \\alpha_3^*y_3(x_3 \\cdot x_1)] \\\\<br>&amp;= 1 - \\left( \\frac{1}{4} \\times 1 \\times [ (3,3) \\cdot (3,3) ] + \\frac{1}{4} \\times (-1) \\times [(1,1) \\cdot (3,3) \\right) \\\\<br>&amp;= -2<br>\\end{align}<br>$$</p>\n<p>故，分离超平面为<br>$$<br>\\frac{1}{2}x^{(1)} + \\frac{1}{2} x^{(1)} - 2 = 0<br>$$<br>分类决策函数为<br>$$<br>f(x) = sign \\left( \\frac{1}{2}x^{(1)} + \\frac{1}{2} x^{(1)} - 2 \\right)<br>$$</p>\n<p>（未完待续。。。）</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"线性可分支持向量机\"><a href=\"#线性可分支持向量机\" class=\"headerlink\" title=\"线性可分支持向量机\"></a>线性可分支持向量机</h3><p>分离超平面<br>$$<br>\\mathbf w \\cdot \\mathbf x +b = 0　\\tag {1}<br>$$</p>\n<p>其中，w为分离超平面的法向量，b为截距</p>\n<p>分类决策函数<br>$$<br>f(x) = sign(\\mathbf w \\cdot \\mathbf x +b)<br>$$<br>其中，sign()称为符号函数，<br>$$<br>sign(x) =<br>\\begin{cases}<br>-1, &amp; x &lt; 0 \\\\<br>0, &amp; x = 0 \\\\<br>1, &amp; x &gt; 0<br>\\end{cases}<br>$$<br>","more":"</p>\n<h3 id=\"函数间隔\"><a href=\"#函数间隔\" class=\"headerlink\" title=\"函数间隔\"></a>函数间隔</h3><p>定义：对于给定的训练数据集T和超平面(w,b)，定义超平面(w,b)关于样本点($x_i,y_i$)的函数间隔为<br>$$<br>\\hat \\gamma_i = y_i ( w \\cdot x_i + b)<br>$$<br>定义超平面(w,b)关于训练数据集T的函数间隔为超平面(w,b)关于T中所有样本点($x_i,y_i$)的函数间隔之最小值，即<br>$$<br>\\hat \\gamma  = \\min_{i=1,\\dots,N} \\hat \\gamma_i<br>$$</p>\n<h3 id=\"几何间隔\"><a href=\"#几何间隔\" class=\"headerlink\" title=\"几何间隔\"></a>几何间隔</h3><p>定义：对于给定的训练数据集T和超平面(w,b)，定义超平面(w,b)关于样本点($x_i,y_i$)的几何间隔为<br>$$<br>\\gamma_i = y_i \\frac {w \\cdot x_i + b}{||w||}<br>$$<br>定义超平面(w,b)关于训练数据集T的几何间隔为超平面(w,b)关于T中所有样本点($x_i,y_i$)的几何间隔之最小值，即<br>$$<br>\\gamma = \\min_{i=1,\\dots,N} \\gamma_i<br>$$<br>超平面（w，b）关于样本点（$x_i,y_i$）的几何间隔是<code>实例点到超平面的带符号的距离</code>。</p>\n<p>函数间隔和几何间隔有如下关系：<br>$$<br>\\gamma_i = \\frac{\\hat \\gamma_i}{||w||}<br>$$</p>\n<p>$$<br>\\gamma = \\frac{\\hat \\gamma}{||w||}<br>$$</p>\n<p>若||w||=1，则函数间隔和几何间隔相等。如果超平面参数w和b成比例地改变（超平面没有改变），函数间隔也会按比例改变，而几何间隔不变。</p>\n<h3 id=\"间隔最大化\"><a href=\"#间隔最大化\" class=\"headerlink\" title=\"间隔最大化\"></a>间隔最大化</h3><p>如何求得几何间隔最大的分离超平面，即最大间隔分离超平面呢？可用下面的约束最优化问题来表示<br>$$<br>\\max_{w,b} \\gamma \\\\<br>s.t. y_i \\frac{w \\cdot x_i +b }{||w||} \\geq \\gamma, i=1,2,\\dots,N<br>$$<br>约束条件表示超平面(w,b)关于每个训练样本点的几何间隔至少是$\\gamma$</p>\n<p>根据函数间隔和几何间隔的关系，上面的问题可写为<br>$$<br>\\max_{w,b} \\frac{\\hat \\gamma}{||w||}<br>$$</p>\n<p>$$<br>s.t. y_i ( w \\cdot x_i +b ) \\geq \\hat \\gamma, i=1,2,\\dots,N<br>$$</p>\n<p><em>函数间隔$\\hat \\gamma$的取值并不影响最优化问题的解</em>。因为将w和b按比例改变为$\\lambda w 和\\lambda b$，这时函数间隔变为$\\lambda \\hat \\gamma$，函数间隔的改变对上面的最优化问题的不等式约束没有影响，对目标函数的优化也没有影响。</p>\n<p>不妨取$\\hat \\gamma = 1$，将其代入上面的最优化问题，得$\\max_{w,b} \\frac{1}{||w||}$，又最大化$\\frac{1}{||w||}$等价于最小化$\\frac{1}{2}||w||^2$。</p>\n<p>故得到了下面的线性可分支持向量机学习的最优化问题<br>$$<br>\\min_{w,b} \\frac{1}{2}||w||^2<br>$$</p>\n<p>$$<br>s.t. y_i ( w \\cdot x_i +b ) - 1 \\geq 0, i = 1,2,\\dots,N<br>$$</p>\n<p>对式（4）使用拉格朗日乘数法（Lagrange multipliers）可得到其“对偶问题”(dual problem)。对式（4）的每条约束添加拉格朗日乘数$\\alpha_i \\geq 0$，则该问题的拉格朗日函数可写为<br>$$<br>L(w,b,\\alpha) = \\frac{1}{2}||w||^2 + \\sum_{i=1}^{m} \\alpha_i (1-y_i(w \\cdot x_i +b)) \\tag{5}，\\\\<br>其中 \\alpha = (\\alpha_i,\\alpha_2,\\dots,\\alpha_m)^T<br>$$<br>令L(w,b,$\\alpha$)对w和b的偏导数为零，<br>$$<br>\\begin{align}<br>&amp; \\frac{\\partial L}{\\partial w} = w - \\sum_{i=1}^{m} \\alpha_i y_i \\mathbf x_i = 0\\\\<br>&amp; \\frac{\\partial L}{\\partial b} = -\\sum_{i=1}^{m} \\alpha_i y_i = 0<br>\\end{align}<br>$$<br>从而，<br>$$<br>w =  \\sum_{i=1}^{m} \\alpha_i y_i \\mathbf x_i \\tag {6}<br>$$</p>\n<p>$$<br>0 = \\sum_{i=1}^{m} \\alpha_i y_i \\tag {7}<br>$$</p>\n<p>将式（6）、（7）代入式（5）中，得：<br>$$<br>\\begin{align}<br>L(w,b,\\alpha) &amp; = \\frac{1}{2}  \\sum_{i=1}^{m} \\alpha_I y_i \\mathbf x_i^T   \\sum_{j=1}^{m} \\alpha_j y_j \\mathbf x_j + \\sum_{i=1}^{m} \\alpha_i ( 1 - y_i( \\mathbf x_i \\sum_{j=1}^{m} \\alpha_j y_j \\mathbf x_j^T + b) )\\\\<br>&amp; =\\sum_{i=1}^{m} \\alpha_i - \\frac{1}{2}\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\alpha_i \\alpha_j y_i y_j \\mathbf x_i^T x_j<br>\\end{align}<br>$$</p>\n<p>故，式(4)的对偶问题为<br>$$<br>\\max_\\alpha [ \\sum_{i=1}^{m} \\alpha_i - \\frac{1}{2}\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\alpha_i \\alpha_j y_i y_j (\\mathbf x_i \\cdot \\mathbf x_j) ] \\tag{8} \\\\<br>s.t. \\sum_{i=1}^{m} \\alpha_i y_i = 0,\\\\<br>\\alpha_i \\geq 0, i = 1,2,\\dots,m<br>$$</p>\n<h3 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h3><p>已知一个训练数据集，其正例点是$x_1 = (3,3),x_2 = (4,3)$,负例点是$x_3 = (1,1)$，求线性可分支持向量机。</p>\n<p><strong>解：</strong>对偶问题是<br>$$<br>\\min_\\alpha  \\left ( \\frac{1}{2}\\sum_{i=1}^{m} \\sum_{j=1}^{m} \\alpha_i \\alpha_j y_i y_j (\\mathbf x_i \\cdot \\mathbf x_j) - \\sum_{i=1}^{m} \\alpha_i \\right) \\\\<br>=  \\frac{1}{2}(18 \\alpha_1^2+25 \\alpha_2^2 + 2 \\alpha_3^2 + 42\\alpha_1 \\alpha_2 - 12 \\alpha_1 \\alpha_3 - 14 \\alpha_2 \\alpha_3) -\\alpha_1 - \\alpha_2 - \\alpha_3 \\\\<br>s.t. \\alpha_1 + \\alpha_2 - \\alpha_3 = 0 \\\\<br>\\alpha_i \\geq 0 , i = 1,2,3<br>$$<br>将$\\alpha_3 = \\alpha_1 + \\alpha_2$代入目标函数并记为<br>$$<br>s(\\alpha_1,\\alpha_2) = 4 \\alpha_1^2 + \\frac{13}{2} \\alpha_2^2 + 10 \\alpha_1 \\alpha_2 - 2 \\alpha_1 - 2 \\alpha_2<br>$$</p>\n<p>对$\\alpha_1,\\alpha_2$求偏导数，并其为0<br>$$<br>\\frac{\\partial s}{\\partial \\alpha_1} = 8 \\alpha_1 + 10 \\alpha_2 - 2 = 0\\\\<br>\\frac{\\partial s}{\\partial \\alpha_2} = 13 \\alpha_2 + 10 \\alpha_1 - 2 = 0<br>$$<br>联立上式，解得：<br>$$<br>\\alpha_1 = \\frac{3}{2}, \\alpha_2 = -1<br>$$<br>从而，$s(\\alpha_1,\\alpha_2)在（\\frac{3}{2}, -1）$取极值，但该点不满足约束条件$\\alpha_2 \\geq 0$，所以最小值应在边界上取得。</p>\n<p>当$\\alpha_1 = 0$时，<br>$$<br>\\begin{align}<br>s(\\alpha_2) &amp;= \\frac{13}{2} \\alpha_2^2 - 2 \\alpha_2 \\\\<br>&amp;=  \\frac{13}{2} (\\alpha_2^2 - \\frac{4}{13} \\alpha_2) \\\\<br>&amp;=  \\frac{13}{2} (\\alpha_2 - \\frac{2}{13})^2 - \\frac{2}{13}<br>\\end{align}<br>$$<br>显然，当$\\alpha_2 = \\frac{2}{13}$时，$s(\\alpha_1,\\alpha_2)$取得最小值$s(0,\\frac{2}{13}) = - \\frac{2}{13}$。</p>\n<p>同理可得，当$\\alpha_2 = 0$时，$s(\\alpha_1,\\alpha_2)$的最小值$s(\\frac{1}{4},0) = - \\frac{1}{4}$。</p>\n<p>故，$s(\\alpha_1,\\alpha_2)$在$\\alpha_1 = \\frac{1}{4} ,\\alpha_2 = 0)$处达到最小，此时，$\\alpha_3 = \\frac{1}{4}$</p>\n<p>因此，$\\alpha_1^* = \\alpha_3^* = \\frac{1}{4}$对应的实例点$x_1,x_3$是支持向量。<br>$$<br>\\begin{align}<br>w_1^{*} &amp; = \\alpha_1^{*} y_1 x_{11} + \\alpha_3^{*} y_3 x_{31}\\\\<br>&amp;=\\frac{1}{4} \\times 1 \\times 3 + \\frac{1}{4} \\times (-1) \\times 1\\\\<br>&amp;=\\frac{1}{2}<br>\\end{align}<br>$$<br>同理可得，<br>$$<br>w_2^* = \\alpha_1^* y_1 x_{12} + \\alpha_3^* y_3 x_{32} =\\frac{1}{2}<br>$$</p>\n<p>$$<br>\\begin{align}<br>b^* &amp;= y_1 - [ \\alpha_1^*y_1(x_1 \\cdot x_1)  + \\alpha_3^*y_3(x_3 \\cdot x_1)] \\\\<br>&amp;= 1 - \\left( \\frac{1}{4} \\times 1 \\times [ (3,3) \\cdot (3,3) ] + \\frac{1}{4} \\times (-1) \\times [(1,1) \\cdot (3,3) \\right) \\\\<br>&amp;= -2<br>\\end{align}<br>$$</p>\n<p>故，分离超平面为<br>$$<br>\\frac{1}{2}x^{(1)} + \\frac{1}{2} x^{(1)} - 2 = 0<br>$$<br>分类决策函数为<br>$$<br>f(x) = sign \\left( \\frac{1}{2}x^{(1)} + \\frac{1}{2} x^{(1)} - 2 \\right)<br>$$</p>\n<p>（未完待续。。。）</p>"},{"title":"序列最小最优化算法SMO","date":"2018-07-28T11:33:13.000Z","mathjax":true,"_content":"\n如何高效地实现支持向量机学习呢？常用的是1998年Platt提出的序列最小最优化算法(Sequential minimal optimization，SMO)算法。\n\nSMO算法要解的是如下的一个最优化问题：\n$$\n\\min_{\\alpha} \\left( \\frac{1}{2} \\sum_{i=1}^N \\sum_{j=1}^N \\alpha_i \\alpha_j y_i y_j K(x_i,x_j) - \\sum_{i=1}^N \\alpha_i\\right) \\tag{1} \n$$\n\n$$\nsubject \\; to \\sum_{i=1}^N \\alpha_i y_i = 0, \\tag{2}\n$$\n\n$$\n0 \\leq \\alpha_i \\leq C, \\forall i \\tag{3}\n$$\n\n整个SMO算法包括两个部分：求解两个变量二次规划的解析方法和选择变量的启发式方法。\n\n<!--more-->\n\n### 两个变量二次规划的求解方法\n\n假设选择的两个变量是$\\alpha_1,\\alpha_2$，其他变量$\\alpha_i (i=3,4,\\dots,N)$是固定的。因此，上面的最优化问题(1)~(3)的子问题可写为\n$$\n\\min_{\\alpha_1,\\alpha_2} G(\\alpha_1,\\alpha_2) = \\frac{1}{2} K_{11} \\alpha_1^2 + \\frac{1}{2} K_{22} \\alpha_2^2 + y_1 y_2 K_{12} \\alpha_1 \\alpha_2 - (\\alpha_1 + \\alpha_2) + \\\\\\\ny_1 \\alpha_1 \\sum_{i=3}^{N} y_i \\alpha_i K_{i1} + y_2 \\alpha_2 \\sum_{i=3}^{N} y_i \\alpha_i K_{i2} \\tag{4}\n$$\n\n$$\nsubject \\; to \\; \\alpha_1 y_1 + \\alpha_2 y_2 = - \\sum_{i=3}^{N} y_i \\alpha_i = \\beta, \\tag{5}\n$$\n\n$$\n0 \\leq \\alpha_i \\leq C, \\forall i \\tag{6}\n$$\n\n其中，$K_{ij} = K(x_i,x_j) ,i,j = 1,2, \\dots ,N$，（４）中省略了不含$\\alpha_1,\\alpha_2$的常数项。\n\n由于只有两个变量$(\\alpha_1,\\alpha_2)$，约束可以用二维空间中的图形表示。\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/07/28/20180728202502.png)\n\n不等式约束（6）使得$（\\alpha_1,\\alpha_2）$在区域 [0, C] x [0, C] 内，等式约束（５）使得$（\\alpha_1,\\alpha_2）$在平行于区域 [0, C] x [0, C] 的对角线的直线上。因此要求的是目标函数在一条平行于对角线的线段上的最优值。这使得两个变量的最优化问题成为实质上的单变量的最优化问题，不妨考虑为变量$\\alpha_2$的最优化问题。\n\n假设问题（４）～（６）的初始可行解为$\\alpha_1,\\alpha_2$，最优解为$\\alpha_1^{new},\\alpha_2^{new}$，沿着约束方向经剪辑后$\\alpha_2$的最优解为$\\alpha_2^{new,clipped}$。\n\n由于$\\alpha_2^{new}$满足不等式约束（５），所以最优值$\\alpha_2^{new}$的取值范围必须满足条件\n$$\nL \\leq \\alpha_2^{new} \\leq H\n$$\n其中，L与H分别是$\\alpha_2^{new}$所在的对角线段端点的下、上界。\n\n如果$y_1 \\neq y_2$ ，则\n$$\nL = \\max (0, \\alpha_2 - \\alpha_1)，H = \\min ( C, C + \\alpha_2 - \\alpha_1  ) \\tag{7}\n$$\n如果$y_i = y_2$，则\n$$\nL = \\max (0, \\alpha_2 + \\alpha_1 - C)，H = \\min ( C,  \\alpha_2 + \\alpha_1  ) \\tag{8}\n$$\n 记\n$$\nw(x) = \\sum_{i=1}^{N} \\alpha_i y_i K(x_i,x) + b \\tag{9}\n$$\n令\n$$\nE_i = w(x_i) - y_i = \\left (   \\sum_{i=1}^{N} \\alpha_i y_i K(x_i,x) + b \\right) - y_i, i = 1,2, \\tag{10}\n$$\n当i = 1, 2时，$E_i$为函数w(x)对输入$x_i$的预测值与真实输出$y_i$之间的误差。\n\n由\n$$\n\\alpha_1 y_1 + \\alpha_2 y_2 = \\beta　及 　y_i^2 = 1\n$$\n$\\alpha_1$可表示为\n$$\n\\alpha_1 = ( \\beta - y_2 \\alpha_2 ) y_1 \\tag{11}\n$$\n代入（４）中，得到仅含$\\alpha_2$的目标函数：\n$$\nG(\\alpha_2) = \\frac{1}{2} K_{11} ( \\beta - y_2 \\alpha_2 )^2 + \\frac{1}{2} K_{22} \\alpha_2^2 + y_2 K_{12} ( \\beta - y_2 \\alpha_2 ) \\alpha_2 -  ( \\beta - y_2 \\alpha_2 )y_1 - \\alpha_2 + \\\\\\\n( \\beta - y_2 \\alpha_2 ) \\sum_{i=3}^{N} y_i \\alpha_i K_{i1} + y_2 \\alpha_2 \\sum_{i=3}^{N} y_i \\alpha_i K_{i2}\n$$\n对$\\alpha_2$求导数，并令其为 0\n$$\n\\frac {\\partial G} {\\partial \\alpha_2}  = K_{11}( \\alpha_2 - \\beta y_2) + K_{22} \\alpha_2 + y_2 K_{12} (\\beta - 2 y_2 \\alpha_2) + \\\\\\\ny_1 y_2 -1 -  y_2 \\sum_{i=3}^{N} y_i \\alpha_i K_{i1} + y_2 \\sum_{i=3}^{N} y_i \\alpha_i K_{i2} = 0\n$$\n\n$$\n\\begin{align}\n=> ( K_{11} +K_{22} -2 K_{12} ) \\alpha_2 &= y_2 ( y_2 - y_1 + \\beta K_{11} - \\beta K_{12} + \\sum_{i=3}^{N} y_i \\alpha_i K_{i1} - \\sum_{i=3}^{N} y_i \\alpha_i K_{i2} ) \\\\\\\n&= y_2 [ y_2 - y_1 + \\beta K_{11} - \\beta K_{12} + \\left(  w(x_1) - \\sum_{j=1}^{2} y_j \\alpha_j K_{1j}  - b \\right) \\\\\\\n& - \\left(  w(x_2) - \\sum_{j=1}^{2} y_j \\alpha_j K_{2j} - b \\right) ]\n\\end{align}\n$$\n\n将$\\beta = \\alpha_1 y_1 + \\alpha_2 y_2 $代入，得到\n$$\n\\begin{align}\n( K_{11} +K_{22} -2 K_{12} ) \\alpha_2^{new} &= y_2 \\left ( y_2 - y_1 + (\\alpha_1 y_1 + \\alpha_2 y_2) K_{11} - (\\alpha_1 y_1 + \\alpha_2 y_2) K_{12} + \\\\\\\nw(x_1) - w(x_2) \\tag {12}  - y_1 \\alpha_1 K_{11} - y_2 \\alpha_2 K_{12} + y_1 \\alpha_1 K_{21} + y_2 \\alpha_2 K_{22} \\right) \\\\\\\n& = y_2 \\left( E_1 - E_2 + \\alpha_2 y_2 (K_{11} - 2 K_{12} + K_{22}) \\right) \\\\\\\n& = \\alpha_2 (K_{11} - 2 K_{12} + K_{22}) + y_2(E_1 - E_2)\n\\end{align}\n$$\n令\n$$\n\\eta = K_{11} - 2 K_{12} + K_{22} \\tag{13}\n$$\n将$\\eta$代入（１２）\n$$\n\\eta \\alpha_2^{new} = \\alpha_2 \\eta + y_2 (E_1 - E_2) \\\\\\\n=> \\alpha_2^{new} = \\alpha_2 + \\frac {y_2 (E_1 - E_2)}{\\eta} \\tag {14}\n$$\n要将$\\alpha_2^{new}$限制在区间[L, H]中 ，则\n$$\n\\alpha_2^{new,clipped} =  \n\\begin{cases}\nH, & \\alpha_2^{new} > H \\\\\\\n\\alpha_2^{new}, & L \\leq \\alpha_2^{new} \\leq H \\\\\\\nL, &  \\alpha_2^{new} < L\n\\end{cases} \\tag {15}\n$$\n由式（５）可得\n$$\n\\alpha_1 y_1 + \\alpha_2 y_2 = \\alpha_1^{new} y_1 + \\alpha_2^{new,clipped} y_2\n$$\n两边同乘以$y_1$，得\n$$\n\\alpha_1 + \\alpha_2 y_1 y_2 = \\alpha_1^{new} + \\alpha_2^{new,clipped} y_1 y_2\n$$\n从而，\n$$\n\\alpha_1^{new} = \\alpha_1 + y_1 y_2 ( \\alpha_2^{new,clipped} - \\alpha_2)　\\tag{16}\n$$\n故，最优化问题（４）～（６）的解为$（\\alpha_1^{new},\\alpha_2^{new,clipped}）$\n\n（未完待续。。。）","source":"_posts/machine-learning-svm-smo.md","raw":"---\ntitle: 序列最小最优化算法SMO\ndate: 2018-07-28 19:33:13\ntags: 机器学习\ncategories: 机器学习\nmathjax: true\n---\n\n如何高效地实现支持向量机学习呢？常用的是1998年Platt提出的序列最小最优化算法(Sequential minimal optimization，SMO)算法。\n\nSMO算法要解的是如下的一个最优化问题：\n$$\n\\min_{\\alpha} \\left( \\frac{1}{2} \\sum_{i=1}^N \\sum_{j=1}^N \\alpha_i \\alpha_j y_i y_j K(x_i,x_j) - \\sum_{i=1}^N \\alpha_i\\right) \\tag{1} \n$$\n\n$$\nsubject \\; to \\sum_{i=1}^N \\alpha_i y_i = 0, \\tag{2}\n$$\n\n$$\n0 \\leq \\alpha_i \\leq C, \\forall i \\tag{3}\n$$\n\n整个SMO算法包括两个部分：求解两个变量二次规划的解析方法和选择变量的启发式方法。\n\n<!--more-->\n\n### 两个变量二次规划的求解方法\n\n假设选择的两个变量是$\\alpha_1,\\alpha_2$，其他变量$\\alpha_i (i=3,4,\\dots,N)$是固定的。因此，上面的最优化问题(1)~(3)的子问题可写为\n$$\n\\min_{\\alpha_1,\\alpha_2} G(\\alpha_1,\\alpha_2) = \\frac{1}{2} K_{11} \\alpha_1^2 + \\frac{1}{2} K_{22} \\alpha_2^2 + y_1 y_2 K_{12} \\alpha_1 \\alpha_2 - (\\alpha_1 + \\alpha_2) + \\\\\\\ny_1 \\alpha_1 \\sum_{i=3}^{N} y_i \\alpha_i K_{i1} + y_2 \\alpha_2 \\sum_{i=3}^{N} y_i \\alpha_i K_{i2} \\tag{4}\n$$\n\n$$\nsubject \\; to \\; \\alpha_1 y_1 + \\alpha_2 y_2 = - \\sum_{i=3}^{N} y_i \\alpha_i = \\beta, \\tag{5}\n$$\n\n$$\n0 \\leq \\alpha_i \\leq C, \\forall i \\tag{6}\n$$\n\n其中，$K_{ij} = K(x_i,x_j) ,i,j = 1,2, \\dots ,N$，（４）中省略了不含$\\alpha_1,\\alpha_2$的常数项。\n\n由于只有两个变量$(\\alpha_1,\\alpha_2)$，约束可以用二维空间中的图形表示。\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/07/28/20180728202502.png)\n\n不等式约束（6）使得$（\\alpha_1,\\alpha_2）$在区域 [0, C] x [0, C] 内，等式约束（５）使得$（\\alpha_1,\\alpha_2）$在平行于区域 [0, C] x [0, C] 的对角线的直线上。因此要求的是目标函数在一条平行于对角线的线段上的最优值。这使得两个变量的最优化问题成为实质上的单变量的最优化问题，不妨考虑为变量$\\alpha_2$的最优化问题。\n\n假设问题（４）～（６）的初始可行解为$\\alpha_1,\\alpha_2$，最优解为$\\alpha_1^{new},\\alpha_2^{new}$，沿着约束方向经剪辑后$\\alpha_2$的最优解为$\\alpha_2^{new,clipped}$。\n\n由于$\\alpha_2^{new}$满足不等式约束（５），所以最优值$\\alpha_2^{new}$的取值范围必须满足条件\n$$\nL \\leq \\alpha_2^{new} \\leq H\n$$\n其中，L与H分别是$\\alpha_2^{new}$所在的对角线段端点的下、上界。\n\n如果$y_1 \\neq y_2$ ，则\n$$\nL = \\max (0, \\alpha_2 - \\alpha_1)，H = \\min ( C, C + \\alpha_2 - \\alpha_1  ) \\tag{7}\n$$\n如果$y_i = y_2$，则\n$$\nL = \\max (0, \\alpha_2 + \\alpha_1 - C)，H = \\min ( C,  \\alpha_2 + \\alpha_1  ) \\tag{8}\n$$\n 记\n$$\nw(x) = \\sum_{i=1}^{N} \\alpha_i y_i K(x_i,x) + b \\tag{9}\n$$\n令\n$$\nE_i = w(x_i) - y_i = \\left (   \\sum_{i=1}^{N} \\alpha_i y_i K(x_i,x) + b \\right) - y_i, i = 1,2, \\tag{10}\n$$\n当i = 1, 2时，$E_i$为函数w(x)对输入$x_i$的预测值与真实输出$y_i$之间的误差。\n\n由\n$$\n\\alpha_1 y_1 + \\alpha_2 y_2 = \\beta　及 　y_i^2 = 1\n$$\n$\\alpha_1$可表示为\n$$\n\\alpha_1 = ( \\beta - y_2 \\alpha_2 ) y_1 \\tag{11}\n$$\n代入（４）中，得到仅含$\\alpha_2$的目标函数：\n$$\nG(\\alpha_2) = \\frac{1}{2} K_{11} ( \\beta - y_2 \\alpha_2 )^2 + \\frac{1}{2} K_{22} \\alpha_2^2 + y_2 K_{12} ( \\beta - y_2 \\alpha_2 ) \\alpha_2 -  ( \\beta - y_2 \\alpha_2 )y_1 - \\alpha_2 + \\\\\\\n( \\beta - y_2 \\alpha_2 ) \\sum_{i=3}^{N} y_i \\alpha_i K_{i1} + y_2 \\alpha_2 \\sum_{i=3}^{N} y_i \\alpha_i K_{i2}\n$$\n对$\\alpha_2$求导数，并令其为 0\n$$\n\\frac {\\partial G} {\\partial \\alpha_2}  = K_{11}( \\alpha_2 - \\beta y_2) + K_{22} \\alpha_2 + y_2 K_{12} (\\beta - 2 y_2 \\alpha_2) + \\\\\\\ny_1 y_2 -1 -  y_2 \\sum_{i=3}^{N} y_i \\alpha_i K_{i1} + y_2 \\sum_{i=3}^{N} y_i \\alpha_i K_{i2} = 0\n$$\n\n$$\n\\begin{align}\n=> ( K_{11} +K_{22} -2 K_{12} ) \\alpha_2 &= y_2 ( y_2 - y_1 + \\beta K_{11} - \\beta K_{12} + \\sum_{i=3}^{N} y_i \\alpha_i K_{i1} - \\sum_{i=3}^{N} y_i \\alpha_i K_{i2} ) \\\\\\\n&= y_2 [ y_2 - y_1 + \\beta K_{11} - \\beta K_{12} + \\left(  w(x_1) - \\sum_{j=1}^{2} y_j \\alpha_j K_{1j}  - b \\right) \\\\\\\n& - \\left(  w(x_2) - \\sum_{j=1}^{2} y_j \\alpha_j K_{2j} - b \\right) ]\n\\end{align}\n$$\n\n将$\\beta = \\alpha_1 y_1 + \\alpha_2 y_2 $代入，得到\n$$\n\\begin{align}\n( K_{11} +K_{22} -2 K_{12} ) \\alpha_2^{new} &= y_2 \\left ( y_2 - y_1 + (\\alpha_1 y_1 + \\alpha_2 y_2) K_{11} - (\\alpha_1 y_1 + \\alpha_2 y_2) K_{12} + \\\\\\\nw(x_1) - w(x_2) \\tag {12}  - y_1 \\alpha_1 K_{11} - y_2 \\alpha_2 K_{12} + y_1 \\alpha_1 K_{21} + y_2 \\alpha_2 K_{22} \\right) \\\\\\\n& = y_2 \\left( E_1 - E_2 + \\alpha_2 y_2 (K_{11} - 2 K_{12} + K_{22}) \\right) \\\\\\\n& = \\alpha_2 (K_{11} - 2 K_{12} + K_{22}) + y_2(E_1 - E_2)\n\\end{align}\n$$\n令\n$$\n\\eta = K_{11} - 2 K_{12} + K_{22} \\tag{13}\n$$\n将$\\eta$代入（１２）\n$$\n\\eta \\alpha_2^{new} = \\alpha_2 \\eta + y_2 (E_1 - E_2) \\\\\\\n=> \\alpha_2^{new} = \\alpha_2 + \\frac {y_2 (E_1 - E_2)}{\\eta} \\tag {14}\n$$\n要将$\\alpha_2^{new}$限制在区间[L, H]中 ，则\n$$\n\\alpha_2^{new,clipped} =  \n\\begin{cases}\nH, & \\alpha_2^{new} > H \\\\\\\n\\alpha_2^{new}, & L \\leq \\alpha_2^{new} \\leq H \\\\\\\nL, &  \\alpha_2^{new} < L\n\\end{cases} \\tag {15}\n$$\n由式（５）可得\n$$\n\\alpha_1 y_1 + \\alpha_2 y_2 = \\alpha_1^{new} y_1 + \\alpha_2^{new,clipped} y_2\n$$\n两边同乘以$y_1$，得\n$$\n\\alpha_1 + \\alpha_2 y_1 y_2 = \\alpha_1^{new} + \\alpha_2^{new,clipped} y_1 y_2\n$$\n从而，\n$$\n\\alpha_1^{new} = \\alpha_1 + y_1 y_2 ( \\alpha_2^{new,clipped} - \\alpha_2)　\\tag{16}\n$$\n故，最优化问题（４）～（６）的解为$（\\alpha_1^{new},\\alpha_2^{new,clipped}）$\n\n（未完待续。。。）","slug":"machine-learning-svm-smo","published":1,"updated":"2019-01-19T07:23:57.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aqq0041j1q0dj3z5wvj","content":"<p>如何高效地实现支持向量机学习呢？常用的是1998年Platt提出的序列最小最优化算法(Sequential minimal optimization，SMO)算法。</p>\n<p>SMO算法要解的是如下的一个最优化问题：<br>$$<br>\\min_{\\alpha} \\left( \\frac{1}{2} \\sum_{i=1}^N \\sum_{j=1}^N \\alpha_i \\alpha_j y_i y_j K(x_i,x_j) - \\sum_{i=1}^N \\alpha_i\\right) \\tag{1}<br>$$</p>\n<p>$$<br>subject \\; to \\sum_{i=1}^N \\alpha_i y_i = 0, \\tag{2}<br>$$</p>\n<p>$$<br>0 \\leq \\alpha_i \\leq C, \\forall i \\tag{3}<br>$$</p>\n<p>整个SMO算法包括两个部分：求解两个变量二次规划的解析方法和选择变量的启发式方法。</p>\n<a id=\"more\"></a>\n<h3 id=\"两个变量二次规划的求解方法\"><a href=\"#两个变量二次规划的求解方法\" class=\"headerlink\" title=\"两个变量二次规划的求解方法\"></a>两个变量二次规划的求解方法</h3><p>假设选择的两个变量是$\\alpha_1,\\alpha_2$，其他变量$\\alpha_i (i=3,4,\\dots,N)$是固定的。因此，上面的最优化问题(1)~(3)的子问题可写为<br>$$<br>\\min_{\\alpha_1,\\alpha_2} G(\\alpha_1,\\alpha_2) = \\frac{1}{2} K_{11} \\alpha_1^2 + \\frac{1}{2} K_{22} \\alpha_2^2 + y_1 y_2 K_{12} \\alpha_1 \\alpha_2 - (\\alpha_1 + \\alpha_2) + \\\\<br>y_1 \\alpha_1 \\sum_{i=3}^{N} y_i \\alpha_i K_{i1} + y_2 \\alpha_2 \\sum_{i=3}^{N} y_i \\alpha_i K_{i2} \\tag{4}<br>$$</p>\n<p>$$<br>subject \\; to \\; \\alpha_1 y_1 + \\alpha_2 y_2 = - \\sum_{i=3}^{N} y_i \\alpha_i = \\beta, \\tag{5}<br>$$</p>\n<p>$$<br>0 \\leq \\alpha_i \\leq C, \\forall i \\tag{6}<br>$$</p>\n<p>其中，$K_{ij} = K(x_i,x_j) ,i,j = 1,2, \\dots ,N$，（４）中省略了不含$\\alpha_1,\\alpha_2$的常数项。</p>\n<p>由于只有两个变量$(\\alpha_1,\\alpha_2)$，约束可以用二维空间中的图形表示。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/07/28/20180728202502.png\" alt=\"\"></p>\n<p>不等式约束（6）使得$（\\alpha_1,\\alpha_2）$在区域 [0, C] x [0, C] 内，等式约束（５）使得$（\\alpha_1,\\alpha_2）$在平行于区域 [0, C] x [0, C] 的对角线的直线上。因此要求的是目标函数在一条平行于对角线的线段上的最优值。这使得两个变量的最优化问题成为实质上的单变量的最优化问题，不妨考虑为变量$\\alpha_2$的最优化问题。</p>\n<p>假设问题（４）～（６）的初始可行解为$\\alpha_1,\\alpha_2$，最优解为$\\alpha_1^{new},\\alpha_2^{new}$，沿着约束方向经剪辑后$\\alpha_2$的最优解为$\\alpha_2^{new,clipped}$。</p>\n<p>由于$\\alpha_2^{new}$满足不等式约束（５），所以最优值$\\alpha_2^{new}$的取值范围必须满足条件<br>$$<br>L \\leq \\alpha_2^{new} \\leq H<br>$$<br>其中，L与H分别是$\\alpha_2^{new}$所在的对角线段端点的下、上界。</p>\n<p>如果$y_1 \\neq y_2$ ，则<br>$$<br>L = \\max (0, \\alpha_2 - \\alpha_1)，H = \\min ( C, C + \\alpha_2 - \\alpha_1  ) \\tag{7}<br>$$<br>如果$y_i = y_2$，则<br>$$<br>L = \\max (0, \\alpha_2 + \\alpha_1 - C)，H = \\min ( C,  \\alpha_2 + \\alpha_1  ) \\tag{8}<br>$$<br> 记<br>$$<br>w(x) = \\sum_{i=1}^{N} \\alpha_i y_i K(x_i,x) + b \\tag{9}<br>$$<br>令<br>$$<br>E_i = w(x_i) - y_i = \\left (   \\sum_{i=1}^{N} \\alpha_i y_i K(x_i,x) + b \\right) - y_i, i = 1,2, \\tag{10}<br>$$<br>当i = 1, 2时，$E_i$为函数w(x)对输入$x_i$的预测值与真实输出$y_i$之间的误差。</p>\n<p>由<br>$$<br>\\alpha_1 y_1 + \\alpha_2 y_2 = \\beta　及 　y_i^2 = 1<br>$$<br>$\\alpha_1$可表示为<br>$$<br>\\alpha_1 = ( \\beta - y_2 \\alpha_2 ) y_1 \\tag{11}<br>$$<br>代入（４）中，得到仅含$\\alpha_2$的目标函数：<br>$$<br>G(\\alpha_2) = \\frac{1}{2} K_{11} ( \\beta - y_2 \\alpha_2 )^2 + \\frac{1}{2} K_{22} \\alpha_2^2 + y_2 K_{12} ( \\beta - y_2 \\alpha_2 ) \\alpha_2 -  ( \\beta - y_2 \\alpha_2 )y_1 - \\alpha_2 + \\\\<br>( \\beta - y_2 \\alpha_2 ) \\sum_{i=3}^{N} y_i \\alpha_i K_{i1} + y_2 \\alpha_2 \\sum_{i=3}^{N} y_i \\alpha_i K_{i2}<br>$$<br>对$\\alpha_2$求导数，并令其为 0<br>$$<br>\\frac {\\partial G} {\\partial \\alpha_2}  = K_{11}( \\alpha_2 - \\beta y_2) + K_{22} \\alpha_2 + y_2 K_{12} (\\beta - 2 y_2 \\alpha_2) + \\\\<br>y_1 y_2 -1 -  y_2 \\sum_{i=3}^{N} y_i \\alpha_i K_{i1} + y_2 \\sum_{i=3}^{N} y_i \\alpha_i K_{i2} = 0<br>$$</p>\n<p>$$<br>\\begin{align}<br>=&gt; ( K_{11} +K_{22} -2 K_{12} ) \\alpha_2 &amp;= y_2 ( y_2 - y_1 + \\beta K_{11} - \\beta K_{12} + \\sum_{i=3}^{N} y_i \\alpha_i K_{i1} - \\sum_{i=3}^{N} y_i \\alpha_i K_{i2} ) \\\\<br>&amp;= y_2 [ y_2 - y_1 + \\beta K_{11} - \\beta K_{12} + \\left(  w(x_1) - \\sum_{j=1}^{2} y_j \\alpha_j K_{1j}  - b \\right) \\\\<br>&amp; - \\left(  w(x_2) - \\sum_{j=1}^{2} y_j \\alpha_j K_{2j} - b \\right) ]<br>\\end{align}<br>$$</p>\n<p>将$\\beta = \\alpha_1 y_1 + \\alpha_2 y_2 $代入，得到<br>$$<br>\\begin{align}<br>( K_{11} +K_{22} -2 K_{12} ) \\alpha_2^{new} &amp;= y_2 \\left ( y_2 - y_1 + (\\alpha_1 y_1 + \\alpha_2 y_2) K_{11} - (\\alpha_1 y_1 + \\alpha_2 y_2) K_{12} + \\\\<br>w(x_1) - w(x_2) \\tag {12}  - y_1 \\alpha_1 K_{11} - y_2 \\alpha_2 K_{12} + y_1 \\alpha_1 K_{21} + y_2 \\alpha_2 K_{22} \\right) \\\\<br>&amp; = y_2 \\left( E_1 - E_2 + \\alpha_2 y_2 (K_{11} - 2 K_{12} + K_{22}) \\right) \\\\<br>&amp; = \\alpha_2 (K_{11} - 2 K_{12} + K_{22}) + y_2(E_1 - E_2)<br>\\end{align}<br>$$<br>令<br>$$<br>\\eta = K_{11} - 2 K_{12} + K_{22} \\tag{13}<br>$$<br>将$\\eta$代入（１２）<br>$$<br>\\eta \\alpha_2^{new} = \\alpha_2 \\eta + y_2 (E_1 - E_2) \\\\<br>=&gt; \\alpha_2^{new} = \\alpha_2 + \\frac {y_2 (E_1 - E_2)}{\\eta} \\tag {14}<br>$$<br>要将$\\alpha_2^{new}$限制在区间[L, H]中 ，则<br>$$<br>\\alpha_2^{new,clipped} =<br>\\begin{cases}<br>H, &amp; \\alpha_2^{new} &gt; H \\\\<br>\\alpha_2^{new}, &amp; L \\leq \\alpha_2^{new} \\leq H \\\\<br>L, &amp;  \\alpha_2^{new} &lt; L<br>\\end{cases} \\tag {15}<br>$$<br>由式（５）可得<br>$$<br>\\alpha_1 y_1 + \\alpha_2 y_2 = \\alpha_1^{new} y_1 + \\alpha_2^{new,clipped} y_2<br>$$<br>两边同乘以$y_1$，得<br>$$<br>\\alpha_1 + \\alpha_2 y_1 y_2 = \\alpha_1^{new} + \\alpha_2^{new,clipped} y_1 y_2<br>$$<br>从而，<br>$$<br>\\alpha_1^{new} = \\alpha_1 + y_1 y_2 ( \\alpha_2^{new,clipped} - \\alpha_2)　\\tag{16}<br>$$<br>故，最优化问题（４）～（６）的解为$（\\alpha_1^{new},\\alpha_2^{new,clipped}）$</p>\n<p>（未完待续。。。）</p>\n","site":{"data":{}},"excerpt":"<p>如何高效地实现支持向量机学习呢？常用的是1998年Platt提出的序列最小最优化算法(Sequential minimal optimization，SMO)算法。</p>\n<p>SMO算法要解的是如下的一个最优化问题：<br>$$<br>\\min_{\\alpha} \\left( \\frac{1}{2} \\sum_{i=1}^N \\sum_{j=1}^N \\alpha_i \\alpha_j y_i y_j K(x_i,x_j) - \\sum_{i=1}^N \\alpha_i\\right) \\tag{1}<br>$$</p>\n<p>$$<br>subject \\; to \\sum_{i=1}^N \\alpha_i y_i = 0, \\tag{2}<br>$$</p>\n<p>$$<br>0 \\leq \\alpha_i \\leq C, \\forall i \\tag{3}<br>$$</p>\n<p>整个SMO算法包括两个部分：求解两个变量二次规划的解析方法和选择变量的启发式方法。</p>","more":"<h3 id=\"两个变量二次规划的求解方法\"><a href=\"#两个变量二次规划的求解方法\" class=\"headerlink\" title=\"两个变量二次规划的求解方法\"></a>两个变量二次规划的求解方法</h3><p>假设选择的两个变量是$\\alpha_1,\\alpha_2$，其他变量$\\alpha_i (i=3,4,\\dots,N)$是固定的。因此，上面的最优化问题(1)~(3)的子问题可写为<br>$$<br>\\min_{\\alpha_1,\\alpha_2} G(\\alpha_1,\\alpha_2) = \\frac{1}{2} K_{11} \\alpha_1^2 + \\frac{1}{2} K_{22} \\alpha_2^2 + y_1 y_2 K_{12} \\alpha_1 \\alpha_2 - (\\alpha_1 + \\alpha_2) + \\\\<br>y_1 \\alpha_1 \\sum_{i=3}^{N} y_i \\alpha_i K_{i1} + y_2 \\alpha_2 \\sum_{i=3}^{N} y_i \\alpha_i K_{i2} \\tag{4}<br>$$</p>\n<p>$$<br>subject \\; to \\; \\alpha_1 y_1 + \\alpha_2 y_2 = - \\sum_{i=3}^{N} y_i \\alpha_i = \\beta, \\tag{5}<br>$$</p>\n<p>$$<br>0 \\leq \\alpha_i \\leq C, \\forall i \\tag{6}<br>$$</p>\n<p>其中，$K_{ij} = K(x_i,x_j) ,i,j = 1,2, \\dots ,N$，（４）中省略了不含$\\alpha_1,\\alpha_2$的常数项。</p>\n<p>由于只有两个变量$(\\alpha_1,\\alpha_2)$，约束可以用二维空间中的图形表示。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/07/28/20180728202502.png\" alt=\"\"></p>\n<p>不等式约束（6）使得$（\\alpha_1,\\alpha_2）$在区域 [0, C] x [0, C] 内，等式约束（５）使得$（\\alpha_1,\\alpha_2）$在平行于区域 [0, C] x [0, C] 的对角线的直线上。因此要求的是目标函数在一条平行于对角线的线段上的最优值。这使得两个变量的最优化问题成为实质上的单变量的最优化问题，不妨考虑为变量$\\alpha_2$的最优化问题。</p>\n<p>假设问题（４）～（６）的初始可行解为$\\alpha_1,\\alpha_2$，最优解为$\\alpha_1^{new},\\alpha_2^{new}$，沿着约束方向经剪辑后$\\alpha_2$的最优解为$\\alpha_2^{new,clipped}$。</p>\n<p>由于$\\alpha_2^{new}$满足不等式约束（５），所以最优值$\\alpha_2^{new}$的取值范围必须满足条件<br>$$<br>L \\leq \\alpha_2^{new} \\leq H<br>$$<br>其中，L与H分别是$\\alpha_2^{new}$所在的对角线段端点的下、上界。</p>\n<p>如果$y_1 \\neq y_2$ ，则<br>$$<br>L = \\max (0, \\alpha_2 - \\alpha_1)，H = \\min ( C, C + \\alpha_2 - \\alpha_1  ) \\tag{7}<br>$$<br>如果$y_i = y_2$，则<br>$$<br>L = \\max (0, \\alpha_2 + \\alpha_1 - C)，H = \\min ( C,  \\alpha_2 + \\alpha_1  ) \\tag{8}<br>$$<br> 记<br>$$<br>w(x) = \\sum_{i=1}^{N} \\alpha_i y_i K(x_i,x) + b \\tag{9}<br>$$<br>令<br>$$<br>E_i = w(x_i) - y_i = \\left (   \\sum_{i=1}^{N} \\alpha_i y_i K(x_i,x) + b \\right) - y_i, i = 1,2, \\tag{10}<br>$$<br>当i = 1, 2时，$E_i$为函数w(x)对输入$x_i$的预测值与真实输出$y_i$之间的误差。</p>\n<p>由<br>$$<br>\\alpha_1 y_1 + \\alpha_2 y_2 = \\beta　及 　y_i^2 = 1<br>$$<br>$\\alpha_1$可表示为<br>$$<br>\\alpha_1 = ( \\beta - y_2 \\alpha_2 ) y_1 \\tag{11}<br>$$<br>代入（４）中，得到仅含$\\alpha_2$的目标函数：<br>$$<br>G(\\alpha_2) = \\frac{1}{2} K_{11} ( \\beta - y_2 \\alpha_2 )^2 + \\frac{1}{2} K_{22} \\alpha_2^2 + y_2 K_{12} ( \\beta - y_2 \\alpha_2 ) \\alpha_2 -  ( \\beta - y_2 \\alpha_2 )y_1 - \\alpha_2 + \\\\<br>( \\beta - y_2 \\alpha_2 ) \\sum_{i=3}^{N} y_i \\alpha_i K_{i1} + y_2 \\alpha_2 \\sum_{i=3}^{N} y_i \\alpha_i K_{i2}<br>$$<br>对$\\alpha_2$求导数，并令其为 0<br>$$<br>\\frac {\\partial G} {\\partial \\alpha_2}  = K_{11}( \\alpha_2 - \\beta y_2) + K_{22} \\alpha_2 + y_2 K_{12} (\\beta - 2 y_2 \\alpha_2) + \\\\<br>y_1 y_2 -1 -  y_2 \\sum_{i=3}^{N} y_i \\alpha_i K_{i1} + y_2 \\sum_{i=3}^{N} y_i \\alpha_i K_{i2} = 0<br>$$</p>\n<p>$$<br>\\begin{align}<br>=&gt; ( K_{11} +K_{22} -2 K_{12} ) \\alpha_2 &amp;= y_2 ( y_2 - y_1 + \\beta K_{11} - \\beta K_{12} + \\sum_{i=3}^{N} y_i \\alpha_i K_{i1} - \\sum_{i=3}^{N} y_i \\alpha_i K_{i2} ) \\\\<br>&amp;= y_2 [ y_2 - y_1 + \\beta K_{11} - \\beta K_{12} + \\left(  w(x_1) - \\sum_{j=1}^{2} y_j \\alpha_j K_{1j}  - b \\right) \\\\<br>&amp; - \\left(  w(x_2) - \\sum_{j=1}^{2} y_j \\alpha_j K_{2j} - b \\right) ]<br>\\end{align}<br>$$</p>\n<p>将$\\beta = \\alpha_1 y_1 + \\alpha_2 y_2 $代入，得到<br>$$<br>\\begin{align}<br>( K_{11} +K_{22} -2 K_{12} ) \\alpha_2^{new} &amp;= y_2 \\left ( y_2 - y_1 + (\\alpha_1 y_1 + \\alpha_2 y_2) K_{11} - (\\alpha_1 y_1 + \\alpha_2 y_2) K_{12} + \\\\<br>w(x_1) - w(x_2) \\tag {12}  - y_1 \\alpha_1 K_{11} - y_2 \\alpha_2 K_{12} + y_1 \\alpha_1 K_{21} + y_2 \\alpha_2 K_{22} \\right) \\\\<br>&amp; = y_2 \\left( E_1 - E_2 + \\alpha_2 y_2 (K_{11} - 2 K_{12} + K_{22}) \\right) \\\\<br>&amp; = \\alpha_2 (K_{11} - 2 K_{12} + K_{22}) + y_2(E_1 - E_2)<br>\\end{align}<br>$$<br>令<br>$$<br>\\eta = K_{11} - 2 K_{12} + K_{22} \\tag{13}<br>$$<br>将$\\eta$代入（１２）<br>$$<br>\\eta \\alpha_2^{new} = \\alpha_2 \\eta + y_2 (E_1 - E_2) \\\\<br>=&gt; \\alpha_2^{new} = \\alpha_2 + \\frac {y_2 (E_1 - E_2)}{\\eta} \\tag {14}<br>$$<br>要将$\\alpha_2^{new}$限制在区间[L, H]中 ，则<br>$$<br>\\alpha_2^{new,clipped} =<br>\\begin{cases}<br>H, &amp; \\alpha_2^{new} &gt; H \\\\<br>\\alpha_2^{new}, &amp; L \\leq \\alpha_2^{new} \\leq H \\\\<br>L, &amp;  \\alpha_2^{new} &lt; L<br>\\end{cases} \\tag {15}<br>$$<br>由式（５）可得<br>$$<br>\\alpha_1 y_1 + \\alpha_2 y_2 = \\alpha_1^{new} y_1 + \\alpha_2^{new,clipped} y_2<br>$$<br>两边同乘以$y_1$，得<br>$$<br>\\alpha_1 + \\alpha_2 y_1 y_2 = \\alpha_1^{new} + \\alpha_2^{new,clipped} y_1 y_2<br>$$<br>从而，<br>$$<br>\\alpha_1^{new} = \\alpha_1 + y_1 y_2 ( \\alpha_2^{new,clipped} - \\alpha_2)　\\tag{16}<br>$$<br>故，最优化问题（４）～（６）的解为$（\\alpha_1^{new},\\alpha_2^{new,clipped}）$</p>\n<p>（未完待续。。。）</p>"},{"title":"MacOS常用快捷键总结","date":"2019-01-26T10:58:50.000Z","_content":"\n2018年双十一期间，博主在京东入手了一台17版256G的MacBook Pro。由于一些外在原因，直到最近一段时间才真正使用上。经过最初的磨合，现在已经比较熟练了。这里总结下MacOS中的一些常用快捷键。\n\n<!--more-->\n\n* `control-空格键`：切换输入法\n* `command-C`：拷贝到剪切板\n* `command-V`：粘贴\n* `command-X`：剪切\n* `command-Z`：撤销上一个命令\n* `command-D`：复制（生成文件副本）\n* `command-tab`：在打开的应用中切换到下一个最近使用的应用\n* `command-delete`：将所选项移到废纸篓（或者将废纸篓中的文件还回原处）\n* `shift-command-delete`：清空废纸篓\n* `shift-command-N`：在\"访达\"中创建一个文件夹\n* `shift-command-.`:显示隐藏文件（或者恢复隐藏状态）\n* `enter`：重命名\n\n关于MacOS的更多快捷键，请参看[这里](https://support.apple.com/zh-cn/HT201236)。\n\n","source":"_posts/macos-keyboard-shortcut.md","raw":"---\ntitle: MacOS常用快捷键总结\ndate: 2019-01-26 18:58:50\ntags: macos\ncategories: macos\n---\n\n2018年双十一期间，博主在京东入手了一台17版256G的MacBook Pro。由于一些外在原因，直到最近一段时间才真正使用上。经过最初的磨合，现在已经比较熟练了。这里总结下MacOS中的一些常用快捷键。\n\n<!--more-->\n\n* `control-空格键`：切换输入法\n* `command-C`：拷贝到剪切板\n* `command-V`：粘贴\n* `command-X`：剪切\n* `command-Z`：撤销上一个命令\n* `command-D`：复制（生成文件副本）\n* `command-tab`：在打开的应用中切换到下一个最近使用的应用\n* `command-delete`：将所选项移到废纸篓（或者将废纸篓中的文件还回原处）\n* `shift-command-delete`：清空废纸篓\n* `shift-command-N`：在\"访达\"中创建一个文件夹\n* `shift-command-.`:显示隐藏文件（或者恢复隐藏状态）\n* `enter`：重命名\n\n关于MacOS的更多快捷键，请参看[这里](https://support.apple.com/zh-cn/HT201236)。\n\n","slug":"macos-keyboard-shortcut","published":1,"updated":"2019-02-21T05:50:26.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aqs0043j1q0saasdl2i","content":"<p>2018年双十一期间，博主在京东入手了一台17版256G的MacBook Pro。由于一些外在原因，直到最近一段时间才真正使用上。经过最初的磨合，现在已经比较熟练了。这里总结下MacOS中的一些常用快捷键。</p>\n<a id=\"more\"></a>\n<ul>\n<li><code>control-空格键</code>：切换输入法</li>\n<li><code>command-C</code>：拷贝到剪切板</li>\n<li><code>command-V</code>：粘贴</li>\n<li><code>command-X</code>：剪切</li>\n<li><code>command-Z</code>：撤销上一个命令</li>\n<li><code>command-D</code>：复制（生成文件副本）</li>\n<li><code>command-tab</code>：在打开的应用中切换到下一个最近使用的应用</li>\n<li><code>command-delete</code>：将所选项移到废纸篓（或者将废纸篓中的文件还回原处）</li>\n<li><code>shift-command-delete</code>：清空废纸篓</li>\n<li><code>shift-command-N</code>：在”访达”中创建一个文件夹</li>\n<li><code>shift-command-.</code>:显示隐藏文件（或者恢复隐藏状态）</li>\n<li><code>enter</code>：重命名</li>\n</ul>\n<p>关于MacOS的更多快捷键，请参看<a href=\"https://support.apple.com/zh-cn/HT201236\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n","site":{"data":{}},"excerpt":"<p>2018年双十一期间，博主在京东入手了一台17版256G的MacBook Pro。由于一些外在原因，直到最近一段时间才真正使用上。经过最初的磨合，现在已经比较熟练了。这里总结下MacOS中的一些常用快捷键。</p>","more":"<ul>\n<li><code>control-空格键</code>：切换输入法</li>\n<li><code>command-C</code>：拷贝到剪切板</li>\n<li><code>command-V</code>：粘贴</li>\n<li><code>command-X</code>：剪切</li>\n<li><code>command-Z</code>：撤销上一个命令</li>\n<li><code>command-D</code>：复制（生成文件副本）</li>\n<li><code>command-tab</code>：在打开的应用中切换到下一个最近使用的应用</li>\n<li><code>command-delete</code>：将所选项移到废纸篓（或者将废纸篓中的文件还回原处）</li>\n<li><code>shift-command-delete</code>：清空废纸篓</li>\n<li><code>shift-command-N</code>：在”访达”中创建一个文件夹</li>\n<li><code>shift-command-.</code>:显示隐藏文件（或者恢复隐藏状态）</li>\n<li><code>enter</code>：重命名</li>\n</ul>\n<p>关于MacOS的更多快捷键，请参看<a href=\"https://support.apple.com/zh-cn/HT201236\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>"},{"title":"MathJax语法","date":"2018-07-16T11:09:32.000Z","mathjax":true,"_content":"\n如何在网页中便捷地输入数学公式呢？MathJax就是一个不错的选择。\n\n使用`$`或者`$$`来标明需要MathJax解析的公式。`$`表示行内公式，而`$$`表示的数学公式会独占一行，如\n\n`$y=ax+b$`： $y=ax+b$\n\n`$$y=ax+b$$`：\n$$\ny=ax+b\n$$\n\n<!--more-->\n\n#### 输入分数\n\n示例：`$\\frac{1}{3}$` 或者　`$1 \\over 3$`\n\n显示：$\\frac{1}{3}$\n\n#### 开根号\n\n示例：`$\\sqrt{3}$` 或者 `$\\sqrt[n]{3}$`\n\n显示：$\\sqrt{3}$、$\\sqrt[n]{3}$\n\n#### 上下标\n\n^表示上标，_表示下标。如果上下标的内容多于一个字符，则需要用{ }括起来。\n\n示例：`$e^2$`、`$e^{ax+b}$`、\n\n显示：$e^2$、$e^{ax+b}$\n\n#### 对数\n\n* 普通对数：`$\\log_2{8}$` => $\\log_2{8}$\n* 自然对数：`$\\ln 8$` => $\\ln 8$\n* 常用对数：`$\\lg 100$` => $\\lg 100$\\\n\n#### 累加、累乘\n\n* 累加：`$\\sum_{i=1}^{n}{I^2+1}$`　=> $\\sum_{i=1}^n{(i^2+2i+1)}$\n* 累乘：`$\\prod_{i=1}^n{\\frac{1}{i^2}}$` => $\\prod_{i=1}^n{\\frac{1}{i^2}}$\n\n#### 向量\n\n示例：`$\\vec x$` => $\\vec x$\n\n#### 积分\n\n示例：`$\\int_a^b sinx dx$` => $\\int_a^b sinx dx$\n\n#### 无穷\n\n示例：`$\\infty$` $\\Rightarrow$  $\\infty$\n\n#### 偏导数\n\n示例：`$\\frac{\\partial f(x,y)}{\\partial x}$` => $\\frac{\\partial f(x,y)}{\\partial x}$\n\n#### 标签\n\n示例：`$$(a+b)(a-b)=a^2-b^2 \\tag{1.1}$$`\n$$\n(a+b)(a-b)=a^2-b^2 \\tag{1.1}\n$$\n\n#### 最大、最小\n\n最大：`$$\\max_{x} y$$`\n$$\n\\max_{x} y\n$$\n最小：`$$\\min_{x} y$$`\n$$\n\\min_{x} y\n$$\n\n#### 统计估计\n\n示例：`$$\\hat y$$ `\n$$\n\\hat y\n$$\n\n#### 空格\n\n空一格：`a\\ b ` => $a \\ b$\n\n空四格：`a \\quad b` => $a \\quad b$\n\n空八格：`a \\qquad b` $\\Rightarrow$ $a \\qquad b$\n\n#### 绝对值、范数\n\n绝对值：`\\lvert x \\rvert` $\\Rightarrow$ $\\lvert x \\rvert$\n\n范数：`\\lVert x \\rVert` $\\Rightarrow$ $\\lVert x \\rVert$\n\n#### 对齐\n\n```\n$$\n\\begin{align}\ny &= (a-b)(a+b) \\\\\n&= a^2 - b^2\n\\end{align}\n$$\n```\n\n$$\n\\begin{align}\ny &= (a-b)(a+b) \\\\\\\n&= a^2 - b^2\n\\end{align}\n$$\n\n#### 分段函数\n\n```latex\n$$\ny=\n\\begin{cases}\n0,& x < 0 \\\\\n0.5,& x = 0 \\\\\n1,& x > 0\n\\end{cases}\n$$\n```\n\n$$\ny=\n\\begin{cases}\n0,& x < 0 \\\\\\\n0.5,& x = 0 \\\\\\\n1,& x > 0\n\\end{cases}\n$$\n\n#### 矩阵\n\n* 不带括号的矩阵\n\n```latex\n$$\nA = \n\\begin{matrix}\n2 & 0 \\\\\n0 & 5\n\\end{matrix}\n$$\n```\n\n$$\nA = \n\\begin{matrix}\n2 & 0 \\\\\\\\\n0 & 5\n\\end{matrix}\n$$\n\n* 带括号的矩阵\n\n1.`\\begin{vmatrix}...\\end{vmatrix}` \n$$\nA = \n\\begin{vmatrix}\n2 & 0 \\\\\\\\\n0 & 5\n\\end{vmatrix}\n$$\n\n\n2.`\\begin{bmatrix}...\\end{bmatrix}` \n$$\nA = \n\\begin{bmatrix}\n2 & 0 \\\\\\\\\n0 & 5\n\\end{bmatrix}\n$$\n\n\n3.`\\begin{Bmatrix}...\\end{Bmatrix}`\n$$\nA = \n\\begin{Bmatrix}\n2 & 0 \\\\\n0 & 5\n\\end{Bmatrix}\n$$\n4.`\\begin{pmatrix}...\\end{pmatrix}`\n$$\nA = \n\\begin{pmatrix}\n2 & 0 \\\\\n0 & 5\n\\end{pmatrix}\n$$\n\n\n#### 括号\n\n|          括号          |          符号          |\n| :--------------------: | :--------------------: |\n|  $\\overbrace{x,y,z}$   |  `\\overbrace{x,y,z}`   |\n| $\\underbrace{x_1,x_2}$ | `\\underbrace{x_1,x_2}` |\n\n#### 箭头\n\n|     箭头      |     符号      |\n| :-----------: | :-----------: |\n|  $\\uparrow$   |  `\\uparrow`   |\n|  $\\Uparrow$   |  `\\Uparrow`   |\n| $\\downarrow$  | `\\downarrow`  |\n| $\\Downarrow$  | `\\Downarrow`  |\n| $\\rightarrow$ | `\\rightarrow` |\n| $\\Rightarrow$ | `\\Rightarrow` |\n| $\\leftarrow$  | `\\leftarrow`  |\n| $\\Leftarrow$  | `\\Leftarrow`  |\n\n#### 四则运算\n\n| 四则运算 |   符号   |\n| :------: | :------: |\n|    +     |    +     |\n|    -     |    -     |\n| $\\times$ | `\\times` |\n|  $\\div$  |  `\\div`  |\n\n#### 关系运算法\n\n| 关系运算 |  符号  |\n| :------: | :----: |\n|  $\\leq$  | `\\leq` |\n|  $\\geq$  | `\\geq` |\n|  $\\neq$  | `\\neq` |\n\n#### 逻辑运算符\n\n|   逻辑运算    |     符号      |\n| :-----------: | :-----------: |\n|   $\\forall$   |   `\\forall`   |\n|    $\\cup$     |    `\\cup`     |\n|    $\\cap$     |    `\\cap`     |\n|     $\\in$     |     `\\in`     |\n|   $\\notin$    |   `\\notin`    |\n| $\\varnothing$ | `\\varnothing` |\n\n#### 希腊字母\n\n|    字母    |    符号    |\n| :--------: | :--------: |\n|  $\\alpha$  |  `\\alpha`  |\n|  $\\beta$   |  `\\beta`   |\n|  $\\gamma$  |  `\\gamma`  |\n| $\\lambda$  | `\\lambda`  |\n|   $\\eta$   |   `\\eta`   |\n| $\\epsilon$ | `\\epsilon` |\n|  $\\theta$  |  `\\theta`  |\n| $ \\sigma $ |  `\\sigma`  |\n|  $\\Sigma$  |  `\\Sigma`  |\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/mathjax-tutorial.md","raw":"---\n\ntitle: MathJax语法\ndate: 2018-07-16 19:09:32\ntags: mathjax\ncategories: mathjax\nmathjax: true\n---\n\n如何在网页中便捷地输入数学公式呢？MathJax就是一个不错的选择。\n\n使用`$`或者`$$`来标明需要MathJax解析的公式。`$`表示行内公式，而`$$`表示的数学公式会独占一行，如\n\n`$y=ax+b$`： $y=ax+b$\n\n`$$y=ax+b$$`：\n$$\ny=ax+b\n$$\n\n<!--more-->\n\n#### 输入分数\n\n示例：`$\\frac{1}{3}$` 或者　`$1 \\over 3$`\n\n显示：$\\frac{1}{3}$\n\n#### 开根号\n\n示例：`$\\sqrt{3}$` 或者 `$\\sqrt[n]{3}$`\n\n显示：$\\sqrt{3}$、$\\sqrt[n]{3}$\n\n#### 上下标\n\n^表示上标，_表示下标。如果上下标的内容多于一个字符，则需要用{ }括起来。\n\n示例：`$e^2$`、`$e^{ax+b}$`、\n\n显示：$e^2$、$e^{ax+b}$\n\n#### 对数\n\n* 普通对数：`$\\log_2{8}$` => $\\log_2{8}$\n* 自然对数：`$\\ln 8$` => $\\ln 8$\n* 常用对数：`$\\lg 100$` => $\\lg 100$\\\n\n#### 累加、累乘\n\n* 累加：`$\\sum_{i=1}^{n}{I^2+1}$`　=> $\\sum_{i=1}^n{(i^2+2i+1)}$\n* 累乘：`$\\prod_{i=1}^n{\\frac{1}{i^2}}$` => $\\prod_{i=1}^n{\\frac{1}{i^2}}$\n\n#### 向量\n\n示例：`$\\vec x$` => $\\vec x$\n\n#### 积分\n\n示例：`$\\int_a^b sinx dx$` => $\\int_a^b sinx dx$\n\n#### 无穷\n\n示例：`$\\infty$` $\\Rightarrow$  $\\infty$\n\n#### 偏导数\n\n示例：`$\\frac{\\partial f(x,y)}{\\partial x}$` => $\\frac{\\partial f(x,y)}{\\partial x}$\n\n#### 标签\n\n示例：`$$(a+b)(a-b)=a^2-b^2 \\tag{1.1}$$`\n$$\n(a+b)(a-b)=a^2-b^2 \\tag{1.1}\n$$\n\n#### 最大、最小\n\n最大：`$$\\max_{x} y$$`\n$$\n\\max_{x} y\n$$\n最小：`$$\\min_{x} y$$`\n$$\n\\min_{x} y\n$$\n\n#### 统计估计\n\n示例：`$$\\hat y$$ `\n$$\n\\hat y\n$$\n\n#### 空格\n\n空一格：`a\\ b ` => $a \\ b$\n\n空四格：`a \\quad b` => $a \\quad b$\n\n空八格：`a \\qquad b` $\\Rightarrow$ $a \\qquad b$\n\n#### 绝对值、范数\n\n绝对值：`\\lvert x \\rvert` $\\Rightarrow$ $\\lvert x \\rvert$\n\n范数：`\\lVert x \\rVert` $\\Rightarrow$ $\\lVert x \\rVert$\n\n#### 对齐\n\n```\n$$\n\\begin{align}\ny &= (a-b)(a+b) \\\\\n&= a^2 - b^2\n\\end{align}\n$$\n```\n\n$$\n\\begin{align}\ny &= (a-b)(a+b) \\\\\\\n&= a^2 - b^2\n\\end{align}\n$$\n\n#### 分段函数\n\n```latex\n$$\ny=\n\\begin{cases}\n0,& x < 0 \\\\\n0.5,& x = 0 \\\\\n1,& x > 0\n\\end{cases}\n$$\n```\n\n$$\ny=\n\\begin{cases}\n0,& x < 0 \\\\\\\n0.5,& x = 0 \\\\\\\n1,& x > 0\n\\end{cases}\n$$\n\n#### 矩阵\n\n* 不带括号的矩阵\n\n```latex\n$$\nA = \n\\begin{matrix}\n2 & 0 \\\\\n0 & 5\n\\end{matrix}\n$$\n```\n\n$$\nA = \n\\begin{matrix}\n2 & 0 \\\\\\\\\n0 & 5\n\\end{matrix}\n$$\n\n* 带括号的矩阵\n\n1.`\\begin{vmatrix}...\\end{vmatrix}` \n$$\nA = \n\\begin{vmatrix}\n2 & 0 \\\\\\\\\n0 & 5\n\\end{vmatrix}\n$$\n\n\n2.`\\begin{bmatrix}...\\end{bmatrix}` \n$$\nA = \n\\begin{bmatrix}\n2 & 0 \\\\\\\\\n0 & 5\n\\end{bmatrix}\n$$\n\n\n3.`\\begin{Bmatrix}...\\end{Bmatrix}`\n$$\nA = \n\\begin{Bmatrix}\n2 & 0 \\\\\n0 & 5\n\\end{Bmatrix}\n$$\n4.`\\begin{pmatrix}...\\end{pmatrix}`\n$$\nA = \n\\begin{pmatrix}\n2 & 0 \\\\\n0 & 5\n\\end{pmatrix}\n$$\n\n\n#### 括号\n\n|          括号          |          符号          |\n| :--------------------: | :--------------------: |\n|  $\\overbrace{x,y,z}$   |  `\\overbrace{x,y,z}`   |\n| $\\underbrace{x_1,x_2}$ | `\\underbrace{x_1,x_2}` |\n\n#### 箭头\n\n|     箭头      |     符号      |\n| :-----------: | :-----------: |\n|  $\\uparrow$   |  `\\uparrow`   |\n|  $\\Uparrow$   |  `\\Uparrow`   |\n| $\\downarrow$  | `\\downarrow`  |\n| $\\Downarrow$  | `\\Downarrow`  |\n| $\\rightarrow$ | `\\rightarrow` |\n| $\\Rightarrow$ | `\\Rightarrow` |\n| $\\leftarrow$  | `\\leftarrow`  |\n| $\\Leftarrow$  | `\\Leftarrow`  |\n\n#### 四则运算\n\n| 四则运算 |   符号   |\n| :------: | :------: |\n|    +     |    +     |\n|    -     |    -     |\n| $\\times$ | `\\times` |\n|  $\\div$  |  `\\div`  |\n\n#### 关系运算法\n\n| 关系运算 |  符号  |\n| :------: | :----: |\n|  $\\leq$  | `\\leq` |\n|  $\\geq$  | `\\geq` |\n|  $\\neq$  | `\\neq` |\n\n#### 逻辑运算符\n\n|   逻辑运算    |     符号      |\n| :-----------: | :-----------: |\n|   $\\forall$   |   `\\forall`   |\n|    $\\cup$     |    `\\cup`     |\n|    $\\cap$     |    `\\cap`     |\n|     $\\in$     |     `\\in`     |\n|   $\\notin$    |   `\\notin`    |\n| $\\varnothing$ | `\\varnothing` |\n\n#### 希腊字母\n\n|    字母    |    符号    |\n| :--------: | :--------: |\n|  $\\alpha$  |  `\\alpha`  |\n|  $\\beta$   |  `\\beta`   |\n|  $\\gamma$  |  `\\gamma`  |\n| $\\lambda$  | `\\lambda`  |\n|   $\\eta$   |   `\\eta`   |\n| $\\epsilon$ | `\\epsilon` |\n|  $\\theta$  |  `\\theta`  |\n| $ \\sigma $ |  `\\sigma`  |\n|  $\\Sigma$  |  `\\Sigma`  |\n\n\n\n\n\n\n\n\n\n\n\n","slug":"mathjax-tutorial","published":1,"updated":"2019-01-19T07:23:57.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aqu0047j1q0mdfxwzwo","content":"<p>如何在网页中便捷地输入数学公式呢？MathJax就是一个不错的选择。</p>\n<p>使用<code>$</code>或者<code>$$</code>来标明需要MathJax解析的公式。<code>$</code>表示行内公式，而<code>$$</code>表示的数学公式会独占一行，如</p>\n<p><code>$y=ax+b$</code>： $y=ax+b$</p>\n<p><code>$$y=ax+b$$</code>：<br>$$<br>y=ax+b<br>$$</p>\n<a id=\"more\"></a>\n<h4 id=\"输入分数\"><a href=\"#输入分数\" class=\"headerlink\" title=\"输入分数\"></a>输入分数</h4><p>示例：<code>$\\frac{1}{3}$</code> 或者　<code>$1 \\over 3$</code></p>\n<p>显示：$\\frac{1}{3}$</p>\n<h4 id=\"开根号\"><a href=\"#开根号\" class=\"headerlink\" title=\"开根号\"></a>开根号</h4><p>示例：<code>$\\sqrt{3}$</code> 或者 <code>$\\sqrt[n]{3}$</code></p>\n<p>显示：$\\sqrt{3}$、$\\sqrt[n]{3}$</p>\n<h4 id=\"上下标\"><a href=\"#上下标\" class=\"headerlink\" title=\"上下标\"></a>上下标</h4><p>^表示上标，_表示下标。如果上下标的内容多于一个字符，则需要用{ }括起来。</p>\n<p>示例：<code>$e^2$</code>、<code>$e^{ax+b}$</code>、</p>\n<p>显示：$e^2$、$e^{ax+b}$</p>\n<h4 id=\"对数\"><a href=\"#对数\" class=\"headerlink\" title=\"对数\"></a>对数</h4><ul>\n<li>普通对数：<code>$\\log_2{8}$</code> =&gt; $\\log_2{8}$</li>\n<li>自然对数：<code>$\\ln 8$</code> =&gt; $\\ln 8$</li>\n<li>常用对数：<code>$\\lg 100$</code> =&gt; $\\lg 100$\\</li>\n</ul>\n<h4 id=\"累加、累乘\"><a href=\"#累加、累乘\" class=\"headerlink\" title=\"累加、累乘\"></a>累加、累乘</h4><ul>\n<li>累加：<code>$\\sum_{i=1}^{n}{I^2+1}$</code>　=&gt; $\\sum_{i=1}^n{(i^2+2i+1)}$</li>\n<li>累乘：<code>$\\prod_{i=1}^n{\\frac{1}{i^2}}$</code> =&gt; $\\prod_{i=1}^n{\\frac{1}{i^2}}$</li>\n</ul>\n<h4 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a>向量</h4><p>示例：<code>$\\vec x$</code> =&gt; $\\vec x$</p>\n<h4 id=\"积分\"><a href=\"#积分\" class=\"headerlink\" title=\"积分\"></a>积分</h4><p>示例：<code>$\\int_a^b sinx dx$</code> =&gt; $\\int_a^b sinx dx$</p>\n<h4 id=\"无穷\"><a href=\"#无穷\" class=\"headerlink\" title=\"无穷\"></a>无穷</h4><p>示例：<code>$\\infty$</code> $\\Rightarrow$  $\\infty$</p>\n<h4 id=\"偏导数\"><a href=\"#偏导数\" class=\"headerlink\" title=\"偏导数\"></a>偏导数</h4><p>示例：<code>$\\frac{\\partial f(x,y)}{\\partial x}$</code> =&gt; $\\frac{\\partial f(x,y)}{\\partial x}$</p>\n<h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><p>示例：<code>$$(a+b)(a-b)=a^2-b^2 \\tag{1.1}$$</code><br>$$<br>(a+b)(a-b)=a^2-b^2 \\tag{1.1}<br>$$</p>\n<h4 id=\"最大、最小\"><a href=\"#最大、最小\" class=\"headerlink\" title=\"最大、最小\"></a>最大、最小</h4><p>最大：<code>$$\\max_{x} y$$</code><br>$$<br>\\max_{x} y<br>$$<br>最小：<code>$$\\min_{x} y$$</code><br>$$<br>\\min_{x} y<br>$$</p>\n<h4 id=\"统计估计\"><a href=\"#统计估计\" class=\"headerlink\" title=\"统计估计\"></a>统计估计</h4><p>示例：<code>$$\\hat y$$</code><br>$$<br>\\hat y<br>$$</p>\n<h4 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h4><p>空一格：<code>a\\ b</code> =&gt; $a \\ b$</p>\n<p>空四格：<code>a \\quad b</code> =&gt; $a \\quad b$</p>\n<p>空八格：<code>a \\qquad b</code> $\\Rightarrow$ $a \\qquad b$</p>\n<h4 id=\"绝对值、范数\"><a href=\"#绝对值、范数\" class=\"headerlink\" title=\"绝对值、范数\"></a>绝对值、范数</h4><p>绝对值：<code>\\lvert x \\rvert</code> $\\Rightarrow$ $\\lvert x \\rvert$</p>\n<p>范数：<code>\\lVert x \\rVert</code> $\\Rightarrow$ $\\lVert x \\rVert$</p>\n<h4 id=\"对齐\"><a href=\"#对齐\" class=\"headerlink\" title=\"对齐\"></a>对齐</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">\\begin&#123;align&#125;</span><br><span class=\"line\">y &amp;= (a-b)(a+b) \\\\</span><br><span class=\"line\">&amp;= a^2 - b^2</span><br><span class=\"line\">\\end&#123;align&#125;</span><br><span class=\"line\">$$</span><br></pre></td></tr></table></figure>\n<p>$$<br>\\begin{align}<br>y &amp;= (a-b)(a+b) \\\\<br>&amp;= a^2 - b^2<br>\\end{align}<br>$$</p>\n<h4 id=\"分段函数\"><a href=\"#分段函数\" class=\"headerlink\" title=\"分段函数\"></a>分段函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">y=</span><br><span class=\"line\">\\begin&#123;cases&#125;</span><br><span class=\"line\">0,&amp; x &lt; 0 \\\\</span><br><span class=\"line\">0.5,&amp; x = 0 \\\\</span><br><span class=\"line\">1,&amp; x &gt; 0</span><br><span class=\"line\">\\end&#123;cases&#125;</span><br><span class=\"line\">$$</span><br></pre></td></tr></table></figure>\n<p>$$<br>y=<br>\\begin{cases}<br>0,&amp; x &lt; 0 \\\\<br>0.5,&amp; x = 0 \\\\<br>1,&amp; x &gt; 0<br>\\end{cases}<br>$$</p>\n<h4 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h4><ul>\n<li>不带括号的矩阵</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">A = </span><br><span class=\"line\">\\begin&#123;matrix&#125;</span><br><span class=\"line\">2 &amp; 0 \\\\</span><br><span class=\"line\">0 &amp; 5</span><br><span class=\"line\">\\end&#123;matrix&#125;</span><br><span class=\"line\">$$</span><br></pre></td></tr></table></figure>\n<p>$$<br>A =<br>\\begin{matrix}<br>2 &amp; 0 \\\\<br>0 &amp; 5<br>\\end{matrix}<br>$$</p>\n<ul>\n<li>带括号的矩阵</li>\n</ul>\n<p>1.<code>\\begin{vmatrix}...\\end{vmatrix}</code><br>$$<br>A =<br>\\begin{vmatrix}<br>2 &amp; 0 \\\\<br>0 &amp; 5<br>\\end{vmatrix}<br>$$</p>\n<p>2.<code>\\begin{bmatrix}...\\end{bmatrix}</code><br>$$<br>A =<br>\\begin{bmatrix}<br>2 &amp; 0 \\\\<br>0 &amp; 5<br>\\end{bmatrix}<br>$$</p>\n<p>3.<code>\\begin{Bmatrix}...\\end{Bmatrix}</code><br>$$<br>A =<br>\\begin{Bmatrix}<br>2 &amp; 0 \\<br>0 &amp; 5<br>\\end{Bmatrix}<br>$$<br>4.<code>\\begin{pmatrix}...\\end{pmatrix}</code><br>$$<br>A =<br>\\begin{pmatrix}<br>2 &amp; 0 \\<br>0 &amp; 5<br>\\end{pmatrix}<br>$$</p>\n<h4 id=\"括号\"><a href=\"#括号\" class=\"headerlink\" title=\"括号\"></a>括号</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">括号</th>\n<th style=\"text-align:center\">符号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$\\overbrace{x,y,z}$</td>\n<td style=\"text-align:center\"><code>\\overbrace{x,y,z}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\underbrace{x_1,x_2}$</td>\n<td style=\"text-align:center\"><code>\\underbrace{x_1,x_2}</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"箭头\"><a href=\"#箭头\" class=\"headerlink\" title=\"箭头\"></a>箭头</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">箭头</th>\n<th style=\"text-align:center\">符号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$\\uparrow$</td>\n<td style=\"text-align:center\"><code>\\uparrow</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\Uparrow$</td>\n<td style=\"text-align:center\"><code>\\Uparrow</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\downarrow$</td>\n<td style=\"text-align:center\"><code>\\downarrow</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\Downarrow$</td>\n<td style=\"text-align:center\"><code>\\Downarrow</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\rightarrow$</td>\n<td style=\"text-align:center\"><code>\\rightarrow</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\Rightarrow$</td>\n<td style=\"text-align:center\"><code>\\Rightarrow</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\leftarrow$</td>\n<td style=\"text-align:center\"><code>\\leftarrow</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\Leftarrow$</td>\n<td style=\"text-align:center\"><code>\\Leftarrow</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"四则运算\"><a href=\"#四则运算\" class=\"headerlink\" title=\"四则运算\"></a>四则运算</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">四则运算</th>\n<th style=\"text-align:center\">符号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">+</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\times$</td>\n<td style=\"text-align:center\"><code>\\times</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\div$</td>\n<td style=\"text-align:center\"><code>\\div</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"关系运算法\"><a href=\"#关系运算法\" class=\"headerlink\" title=\"关系运算法\"></a>关系运算法</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">关系运算</th>\n<th style=\"text-align:center\">符号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$\\leq$</td>\n<td style=\"text-align:center\"><code>\\leq</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\geq$</td>\n<td style=\"text-align:center\"><code>\\geq</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\neq$</td>\n<td style=\"text-align:center\"><code>\\neq</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">逻辑运算</th>\n<th style=\"text-align:center\">符号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$\\forall$</td>\n<td style=\"text-align:center\"><code>\\forall</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\cup$</td>\n<td style=\"text-align:center\"><code>\\cup</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\cap$</td>\n<td style=\"text-align:center\"><code>\\cap</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\in$</td>\n<td style=\"text-align:center\"><code>\\in</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\notin$</td>\n<td style=\"text-align:center\"><code>\\notin</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\varnothing$</td>\n<td style=\"text-align:center\"><code>\\varnothing</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"希腊字母\"><a href=\"#希腊字母\" class=\"headerlink\" title=\"希腊字母\"></a>希腊字母</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字母</th>\n<th style=\"text-align:center\">符号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$\\alpha$</td>\n<td style=\"text-align:center\"><code>\\alpha</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\beta$</td>\n<td style=\"text-align:center\"><code>\\beta</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\gamma$</td>\n<td style=\"text-align:center\"><code>\\gamma</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\lambda$</td>\n<td style=\"text-align:center\"><code>\\lambda</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\eta$</td>\n<td style=\"text-align:center\"><code>\\eta</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\epsilon$</td>\n<td style=\"text-align:center\"><code>\\epsilon</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\theta$</td>\n<td style=\"text-align:center\"><code>\\theta</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$ \\sigma $</td>\n<td style=\"text-align:center\"><code>\\sigma</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\Sigma$</td>\n<td style=\"text-align:center\"><code>\\Sigma</code></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p>如何在网页中便捷地输入数学公式呢？MathJax就是一个不错的选择。</p>\n<p>使用<code>$</code>或者<code>$$</code>来标明需要MathJax解析的公式。<code>$</code>表示行内公式，而<code>$$</code>表示的数学公式会独占一行，如</p>\n<p><code>$y=ax+b$</code>： $y=ax+b$</p>\n<p><code>$$y=ax+b$$</code>：<br>$$<br>y=ax+b<br>$$</p>","more":"<h4 id=\"输入分数\"><a href=\"#输入分数\" class=\"headerlink\" title=\"输入分数\"></a>输入分数</h4><p>示例：<code>$\\frac{1}{3}$</code> 或者　<code>$1 \\over 3$</code></p>\n<p>显示：$\\frac{1}{3}$</p>\n<h4 id=\"开根号\"><a href=\"#开根号\" class=\"headerlink\" title=\"开根号\"></a>开根号</h4><p>示例：<code>$\\sqrt{3}$</code> 或者 <code>$\\sqrt[n]{3}$</code></p>\n<p>显示：$\\sqrt{3}$、$\\sqrt[n]{3}$</p>\n<h4 id=\"上下标\"><a href=\"#上下标\" class=\"headerlink\" title=\"上下标\"></a>上下标</h4><p>^表示上标，_表示下标。如果上下标的内容多于一个字符，则需要用{ }括起来。</p>\n<p>示例：<code>$e^2$</code>、<code>$e^{ax+b}$</code>、</p>\n<p>显示：$e^2$、$e^{ax+b}$</p>\n<h4 id=\"对数\"><a href=\"#对数\" class=\"headerlink\" title=\"对数\"></a>对数</h4><ul>\n<li>普通对数：<code>$\\log_2{8}$</code> =&gt; $\\log_2{8}$</li>\n<li>自然对数：<code>$\\ln 8$</code> =&gt; $\\ln 8$</li>\n<li>常用对数：<code>$\\lg 100$</code> =&gt; $\\lg 100$\\</li>\n</ul>\n<h4 id=\"累加、累乘\"><a href=\"#累加、累乘\" class=\"headerlink\" title=\"累加、累乘\"></a>累加、累乘</h4><ul>\n<li>累加：<code>$\\sum_{i=1}^{n}{I^2+1}$</code>　=&gt; $\\sum_{i=1}^n{(i^2+2i+1)}$</li>\n<li>累乘：<code>$\\prod_{i=1}^n{\\frac{1}{i^2}}$</code> =&gt; $\\prod_{i=1}^n{\\frac{1}{i^2}}$</li>\n</ul>\n<h4 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a>向量</h4><p>示例：<code>$\\vec x$</code> =&gt; $\\vec x$</p>\n<h4 id=\"积分\"><a href=\"#积分\" class=\"headerlink\" title=\"积分\"></a>积分</h4><p>示例：<code>$\\int_a^b sinx dx$</code> =&gt; $\\int_a^b sinx dx$</p>\n<h4 id=\"无穷\"><a href=\"#无穷\" class=\"headerlink\" title=\"无穷\"></a>无穷</h4><p>示例：<code>$\\infty$</code> $\\Rightarrow$  $\\infty$</p>\n<h4 id=\"偏导数\"><a href=\"#偏导数\" class=\"headerlink\" title=\"偏导数\"></a>偏导数</h4><p>示例：<code>$\\frac{\\partial f(x,y)}{\\partial x}$</code> =&gt; $\\frac{\\partial f(x,y)}{\\partial x}$</p>\n<h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><p>示例：<code>$$(a+b)(a-b)=a^2-b^2 \\tag{1.1}$$</code><br>$$<br>(a+b)(a-b)=a^2-b^2 \\tag{1.1}<br>$$</p>\n<h4 id=\"最大、最小\"><a href=\"#最大、最小\" class=\"headerlink\" title=\"最大、最小\"></a>最大、最小</h4><p>最大：<code>$$\\max_{x} y$$</code><br>$$<br>\\max_{x} y<br>$$<br>最小：<code>$$\\min_{x} y$$</code><br>$$<br>\\min_{x} y<br>$$</p>\n<h4 id=\"统计估计\"><a href=\"#统计估计\" class=\"headerlink\" title=\"统计估计\"></a>统计估计</h4><p>示例：<code>$$\\hat y$$</code><br>$$<br>\\hat y<br>$$</p>\n<h4 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h4><p>空一格：<code>a\\ b</code> =&gt; $a \\ b$</p>\n<p>空四格：<code>a \\quad b</code> =&gt; $a \\quad b$</p>\n<p>空八格：<code>a \\qquad b</code> $\\Rightarrow$ $a \\qquad b$</p>\n<h4 id=\"绝对值、范数\"><a href=\"#绝对值、范数\" class=\"headerlink\" title=\"绝对值、范数\"></a>绝对值、范数</h4><p>绝对值：<code>\\lvert x \\rvert</code> $\\Rightarrow$ $\\lvert x \\rvert$</p>\n<p>范数：<code>\\lVert x \\rVert</code> $\\Rightarrow$ $\\lVert x \\rVert$</p>\n<h4 id=\"对齐\"><a href=\"#对齐\" class=\"headerlink\" title=\"对齐\"></a>对齐</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">\\begin&#123;align&#125;</span><br><span class=\"line\">y &amp;= (a-b)(a+b) \\\\</span><br><span class=\"line\">&amp;= a^2 - b^2</span><br><span class=\"line\">\\end&#123;align&#125;</span><br><span class=\"line\">$$</span><br></pre></td></tr></table></figure>\n<p>$$<br>\\begin{align}<br>y &amp;= (a-b)(a+b) \\\\<br>&amp;= a^2 - b^2<br>\\end{align}<br>$$</p>\n<h4 id=\"分段函数\"><a href=\"#分段函数\" class=\"headerlink\" title=\"分段函数\"></a>分段函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">y=</span><br><span class=\"line\">\\begin&#123;cases&#125;</span><br><span class=\"line\">0,&amp; x &lt; 0 \\\\</span><br><span class=\"line\">0.5,&amp; x = 0 \\\\</span><br><span class=\"line\">1,&amp; x &gt; 0</span><br><span class=\"line\">\\end&#123;cases&#125;</span><br><span class=\"line\">$$</span><br></pre></td></tr></table></figure>\n<p>$$<br>y=<br>\\begin{cases}<br>0,&amp; x &lt; 0 \\\\<br>0.5,&amp; x = 0 \\\\<br>1,&amp; x &gt; 0<br>\\end{cases}<br>$$</p>\n<h4 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h4><ul>\n<li>不带括号的矩阵</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">A = </span><br><span class=\"line\">\\begin&#123;matrix&#125;</span><br><span class=\"line\">2 &amp; 0 \\\\</span><br><span class=\"line\">0 &amp; 5</span><br><span class=\"line\">\\end&#123;matrix&#125;</span><br><span class=\"line\">$$</span><br></pre></td></tr></table></figure>\n<p>$$<br>A =<br>\\begin{matrix}<br>2 &amp; 0 \\\\<br>0 &amp; 5<br>\\end{matrix}<br>$$</p>\n<ul>\n<li>带括号的矩阵</li>\n</ul>\n<p>1.<code>\\begin{vmatrix}...\\end{vmatrix}</code><br>$$<br>A =<br>\\begin{vmatrix}<br>2 &amp; 0 \\\\<br>0 &amp; 5<br>\\end{vmatrix}<br>$$</p>\n<p>2.<code>\\begin{bmatrix}...\\end{bmatrix}</code><br>$$<br>A =<br>\\begin{bmatrix}<br>2 &amp; 0 \\\\<br>0 &amp; 5<br>\\end{bmatrix}<br>$$</p>\n<p>3.<code>\\begin{Bmatrix}...\\end{Bmatrix}</code><br>$$<br>A =<br>\\begin{Bmatrix}<br>2 &amp; 0 \\<br>0 &amp; 5<br>\\end{Bmatrix}<br>$$<br>4.<code>\\begin{pmatrix}...\\end{pmatrix}</code><br>$$<br>A =<br>\\begin{pmatrix}<br>2 &amp; 0 \\<br>0 &amp; 5<br>\\end{pmatrix}<br>$$</p>\n<h4 id=\"括号\"><a href=\"#括号\" class=\"headerlink\" title=\"括号\"></a>括号</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">括号</th>\n<th style=\"text-align:center\">符号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$\\overbrace{x,y,z}$</td>\n<td style=\"text-align:center\"><code>\\overbrace{x,y,z}</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\underbrace{x_1,x_2}$</td>\n<td style=\"text-align:center\"><code>\\underbrace{x_1,x_2}</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"箭头\"><a href=\"#箭头\" class=\"headerlink\" title=\"箭头\"></a>箭头</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">箭头</th>\n<th style=\"text-align:center\">符号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$\\uparrow$</td>\n<td style=\"text-align:center\"><code>\\uparrow</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\Uparrow$</td>\n<td style=\"text-align:center\"><code>\\Uparrow</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\downarrow$</td>\n<td style=\"text-align:center\"><code>\\downarrow</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\Downarrow$</td>\n<td style=\"text-align:center\"><code>\\Downarrow</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\rightarrow$</td>\n<td style=\"text-align:center\"><code>\\rightarrow</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\Rightarrow$</td>\n<td style=\"text-align:center\"><code>\\Rightarrow</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\leftarrow$</td>\n<td style=\"text-align:center\"><code>\\leftarrow</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\Leftarrow$</td>\n<td style=\"text-align:center\"><code>\\Leftarrow</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"四则运算\"><a href=\"#四则运算\" class=\"headerlink\" title=\"四则运算\"></a>四则运算</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">四则运算</th>\n<th style=\"text-align:center\">符号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">+</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\times$</td>\n<td style=\"text-align:center\"><code>\\times</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\div$</td>\n<td style=\"text-align:center\"><code>\\div</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"关系运算法\"><a href=\"#关系运算法\" class=\"headerlink\" title=\"关系运算法\"></a>关系运算法</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">关系运算</th>\n<th style=\"text-align:center\">符号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$\\leq$</td>\n<td style=\"text-align:center\"><code>\\leq</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\geq$</td>\n<td style=\"text-align:center\"><code>\\geq</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\neq$</td>\n<td style=\"text-align:center\"><code>\\neq</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">逻辑运算</th>\n<th style=\"text-align:center\">符号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$\\forall$</td>\n<td style=\"text-align:center\"><code>\\forall</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\cup$</td>\n<td style=\"text-align:center\"><code>\\cup</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\cap$</td>\n<td style=\"text-align:center\"><code>\\cap</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\in$</td>\n<td style=\"text-align:center\"><code>\\in</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\notin$</td>\n<td style=\"text-align:center\"><code>\\notin</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\varnothing$</td>\n<td style=\"text-align:center\"><code>\\varnothing</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"希腊字母\"><a href=\"#希腊字母\" class=\"headerlink\" title=\"希腊字母\"></a>希腊字母</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字母</th>\n<th style=\"text-align:center\">符号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$\\alpha$</td>\n<td style=\"text-align:center\"><code>\\alpha</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\beta$</td>\n<td style=\"text-align:center\"><code>\\beta</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\gamma$</td>\n<td style=\"text-align:center\"><code>\\gamma</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\lambda$</td>\n<td style=\"text-align:center\"><code>\\lambda</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\eta$</td>\n<td style=\"text-align:center\"><code>\\eta</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\epsilon$</td>\n<td style=\"text-align:center\"><code>\\epsilon</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\theta$</td>\n<td style=\"text-align:center\"><code>\\theta</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$ \\sigma $</td>\n<td style=\"text-align:center\"><code>\\sigma</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$\\Sigma$</td>\n<td style=\"text-align:center\"><code>\\Sigma</code></td>\n</tr>\n</tbody>\n</table>"},{"title":"矩阵求导","date":"2018-08-17T06:07:11.000Z","mathjax":true,"_content":"\n最近在学习机器学习的时候，经常会碰到矩阵求导，这里记录下矩阵的求导操作。\n\n向量和矩阵的导数满足乘法法则（product rule）\n$$\n\\frac {\\partial x^{T} \\alpha}{ \\partial x } = \\frac {\\partial \\alpha^{T} x }{ \\partial x } = \\alpha\n$$\n\n$$\n\\frac {\\partial AB} {\\alpha x} = \\frac{\\partial A} {\\partial x} B + A \\frac{\\partial B} {\\partial x}\n$$\n\n<!--more-->\n\n由于$A^{-1} A = I$和上式，逆矩阵的导数可表示为\n$$\n\\frac {\\partial A^{-1} } {\\partial x} = - A^{-1} \\frac {\\partial A} {\\partial x} A^{-1}\n$$\n证明：\n$$\n\\begin{align}\n\\frac{\\partial I} {\\partial x} &= \\frac{\\partial A^{-1} A} {\\partial x} \\\\\\\n&= \\frac{\\partial A} {\\partial x} A^{-1} + A \\frac{\\partial  A^{-1} } {\\partial x} \\\\\\\n&= 0\n\\end{align}\n$$\n从而，\n$$\n\\begin{align}\n&=> -A \\frac{\\partial  A^{-1} } {\\partial x} =  \\frac{\\partial A} {\\partial x} A^{-1} \\\\\\\n&=>  \\frac{\\partial A^{-1}} {\\partial x} =  -A^{-1} \\frac{\\partial  A } {\\partial x} A^{-1}\n\\end{align}\n$$\n\n\n","source":"_posts/matrix-derivative.md","raw":"---\ntitle: 矩阵求导\ndate: 2018-08-17 14:07:11\ntags: 线性代数\ncategories: 机器学习\nmathjax: true\n---\n\n最近在学习机器学习的时候，经常会碰到矩阵求导，这里记录下矩阵的求导操作。\n\n向量和矩阵的导数满足乘法法则（product rule）\n$$\n\\frac {\\partial x^{T} \\alpha}{ \\partial x } = \\frac {\\partial \\alpha^{T} x }{ \\partial x } = \\alpha\n$$\n\n$$\n\\frac {\\partial AB} {\\alpha x} = \\frac{\\partial A} {\\partial x} B + A \\frac{\\partial B} {\\partial x}\n$$\n\n<!--more-->\n\n由于$A^{-1} A = I$和上式，逆矩阵的导数可表示为\n$$\n\\frac {\\partial A^{-1} } {\\partial x} = - A^{-1} \\frac {\\partial A} {\\partial x} A^{-1}\n$$\n证明：\n$$\n\\begin{align}\n\\frac{\\partial I} {\\partial x} &= \\frac{\\partial A^{-1} A} {\\partial x} \\\\\\\n&= \\frac{\\partial A} {\\partial x} A^{-1} + A \\frac{\\partial  A^{-1} } {\\partial x} \\\\\\\n&= 0\n\\end{align}\n$$\n从而，\n$$\n\\begin{align}\n&=> -A \\frac{\\partial  A^{-1} } {\\partial x} =  \\frac{\\partial A} {\\partial x} A^{-1} \\\\\\\n&=>  \\frac{\\partial A^{-1}} {\\partial x} =  -A^{-1} \\frac{\\partial  A } {\\partial x} A^{-1}\n\\end{align}\n$$\n\n\n","slug":"matrix-derivative","published":1,"updated":"2019-01-19T07:23:57.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aqw0049j1q0htea0g5d","content":"<p>最近在学习机器学习的时候，经常会碰到矩阵求导，这里记录下矩阵的求导操作。</p>\n<p>向量和矩阵的导数满足乘法法则（product rule）<br>$$<br>\\frac {\\partial x^{T} \\alpha}{ \\partial x } = \\frac {\\partial \\alpha^{T} x }{ \\partial x } = \\alpha<br>$$</p>\n<p>$$<br>\\frac {\\partial AB} {\\alpha x} = \\frac{\\partial A} {\\partial x} B + A \\frac{\\partial B} {\\partial x}<br>$$</p>\n<a id=\"more\"></a>\n<p>由于$A^{-1} A = I$和上式，逆矩阵的导数可表示为<br>$$<br>\\frac {\\partial A^{-1} } {\\partial x} = - A^{-1} \\frac {\\partial A} {\\partial x} A^{-1}<br>$$<br>证明：<br>$$<br>\\begin{align}<br>\\frac{\\partial I} {\\partial x} &amp;= \\frac{\\partial A^{-1} A} {\\partial x} \\\\<br>&amp;= \\frac{\\partial A} {\\partial x} A^{-1} + A \\frac{\\partial  A^{-1} } {\\partial x} \\\\<br>&amp;= 0<br>\\end{align}<br>$$<br>从而，<br>$$<br>\\begin{align}<br>&amp;=&gt; -A \\frac{\\partial  A^{-1} } {\\partial x} =  \\frac{\\partial A} {\\partial x} A^{-1} \\\\<br>&amp;=&gt;  \\frac{\\partial A^{-1}} {\\partial x} =  -A^{-1} \\frac{\\partial  A } {\\partial x} A^{-1}<br>\\end{align}<br>$$</p>\n","site":{"data":{}},"excerpt":"<p>最近在学习机器学习的时候，经常会碰到矩阵求导，这里记录下矩阵的求导操作。</p>\n<p>向量和矩阵的导数满足乘法法则（product rule）<br>$$<br>\\frac {\\partial x^{T} \\alpha}{ \\partial x } = \\frac {\\partial \\alpha^{T} x }{ \\partial x } = \\alpha<br>$$</p>\n<p>$$<br>\\frac {\\partial AB} {\\alpha x} = \\frac{\\partial A} {\\partial x} B + A \\frac{\\partial B} {\\partial x}<br>$$</p>","more":"<p>由于$A^{-1} A = I$和上式，逆矩阵的导数可表示为<br>$$<br>\\frac {\\partial A^{-1} } {\\partial x} = - A^{-1} \\frac {\\partial A} {\\partial x} A^{-1}<br>$$<br>证明：<br>$$<br>\\begin{align}<br>\\frac{\\partial I} {\\partial x} &amp;= \\frac{\\partial A^{-1} A} {\\partial x} \\\\<br>&amp;= \\frac{\\partial A} {\\partial x} A^{-1} + A \\frac{\\partial  A^{-1} } {\\partial x} \\\\<br>&amp;= 0<br>\\end{align}<br>$$<br>从而，<br>$$<br>\\begin{align}<br>&amp;=&gt; -A \\frac{\\partial  A^{-1} } {\\partial x} =  \\frac{\\partial A} {\\partial x} A^{-1} \\\\<br>&amp;=&gt;  \\frac{\\partial A^{-1}} {\\partial x} =  -A^{-1} \\frac{\\partial  A } {\\partial x} A^{-1}<br>\\end{align}<br>$$</p>"},{"title":"奇异值分解","date":"2018-08-28T13:19:49.000Z","mathjax":true,"_content":"\n奇异值分解（Singular Value Decomposition，简称SVD），是一种矩阵分解技术，可以用于机器学习中数据集的降维。\n\n<!--more-->\n\n### 预备知识\n\n* 单位矩阵\n\n主对角元素全为1，其余元素全为0的n阶矩阵，称为单位矩阵，记为$E_{n}$或$I_{n}$，通常用$E$或$I$表示。\n\n> 自看机器学习以来，看到好多次$I$这个符号，以前一直不知道是啥意思，原来就是本科线性代数里单位矩阵$E$的另一种表示符号。\n\n* 正交矩阵\n\n如果n阶实矩阵满足\n$$\nA^{T}A = AA^{T} = I\n$$\n则称$A$为正定矩阵。\n\n* 正规矩阵\n\n设$A \\in C^{\\ m \\times n}$，如果\n$$\nA^{H}A = AA^{H}\n$$\n则称$A$ 为正规矩阵。\n\n* 酉矩阵\n\n如果n阶复矩阵$A$满足\n$$\nA^{H}A = AA^{H} = I\n$$\n则称$A$为酉矩阵。\n\n### 奇异值分解\n\n设$A \\in C^{\\ m \\times n}$，如果存在非负实数$\\sigma$和非零向量$u \\in C^{n}，v \\in C^{m}$使得\n$$\nAu = \\sigma v，A^{H}v = \\sigma u\n$$\n则称$\\sigma$为$A$的奇异值，$u$和$v$分别称为$A$对应于奇异值$\\sigma$的右奇异向量和左奇异向量。\n$$\nA^{H}Au = \\sigma A^{H} v = \\sigma^{2} u\n$$\n\n$$\nA A^{H} v = \\sigma A u = \\sigma^{2}v\n$$\n\n因此，$\\sigma^{2}$是$A^{H} A$的特征值，也是$A A^{H}$的特征值，而$u$和$v$分别是$A^{H}A$和$A A^{H}$对应于特征值$\\sigma^{2}$的特征向量。\n\n设$A \\in C^{\\ m \\times n}$，rank（A）=r，且$A^{H}A$的特征值为$\\lambda_{1} \\geq \\lambda_{2} \\geq \\dots \\geq \\lambda_{n}$。\n$$\n\\lambda_{1} \\geq \\dots \\geq \\lambda_{r} > \\lambda_{r+1} = \\dots = \\lambda_{n} = 0\n$$\n记$k = \\min\\\\{m,n\\\\}$，也称$\\sigma_{i} = \\sqrt{\\lambda_{i}} （i=1,\\dots,k）$为$A$的奇异值，特别地，称$\\sigma_{1}，\\dots，\\sigma_{r}$为$A$的正奇异值。\n\n定理：若$A$是正规矩阵，则$A$的奇异值是$A$的特征值的模。\n\n定理：设$A$是$m \\times n$矩阵，且rank（A）= r，则存在m阶酉矩阵$V$和n阶酉矩阵$U$，使得\n$$\nV^{H}AU = \n\\begin{bmatrix}\n\\Sigma & 0 \\\\\\\\\n0 & 0\n\\end{bmatrix}\n$$\n其中，$\\Sigma = diag（\\sigma_{1}，\\dots，\\sigma_{r}）$，且$\\sigma_{1} \\geq \\dots \\geq \\sigma_{r} > 0$。\n\n$U$的列向量是$A^{H}A$的标准正交特征向量，$U$的前 r 列向量是$A^{H}A$对应于r个非零特征值$\\sigma_{1}^{2},\\dots,\\sigma_{r}^{2}$的标准正交特征向量；而$V$的列向量是$AA^{H}$的标准正交特征向量，前 r 列向量恰是$AA^{H}$对应于特征值$\\sigma_{1}^{2},\\dots,\\sigma_{r}^{2}$的标准正交特征向量。\n\n例题\n\n设\n$$\nA = \n\\begin{bmatrix}\n0 & 1 \\\\\\\\\n-1 & 0 \\\\\\\\\n0 & 2 \\\\\\\\\n1 & 0 \\\\\\\\\n\\end{bmatrix}\n$$\n作出矩阵$A$的奇异值分解。\n\n解：\n$$\nA^{H}A = \n\\begin{bmatrix}\n2 & 0 \\\\\\\\\n0 & 5\n\\end{bmatrix},\nAA^{H} = \n\\begin{bmatrix}\n1 & 0 & 2 & 0 \\\\\\\\\n0 & 1 & 0 & -1 \\\\\\\\\n2 & 0 & 4 & 0 \\\\\\\\\n0 & -1 & 0 & 1\n\\end{bmatrix},\n$$\n则$A$的非零奇异值为$\\sqrt{2}，\\sqrt{5}$ .\n\n$A^{H} A $对应于特征值5和2的标准正交特征向量为\n$$\nu_1 = \n\\begin{pmatrix}\n0 \\\\\\\\ 1\n\\end{pmatrix}，\nu_2 = \n\\begin{pmatrix}\n1 \\\\\\\\ 0\n\\end{pmatrix}\n$$\n$AA^{H}$对应于特征值5和2的标准正交特征向量为\n$$\nv_1 = \n\\begin{bmatrix}\n\\frac{1}{\\sqrt{5}} \\\\\\\\ 0 \\\\\\\\ \\frac{2}{\\sqrt{5}} \\\\\\\\ 0\n\\end{bmatrix},\nv_2 = \n\\begin{bmatrix}\n0 \\\\\\\\ -\\frac{1}{\\sqrt{2}} \\\\\\\\ 0 \\\\\\\\ \\frac{1}{\\sqrt{2}} \n\\end{bmatrix}\n$$\n$AA^{H}$对应于特征值0的标准正交特征向量为\n$$\nv_3 = \n\\begin{bmatrix}\n-\\frac{2}{\\sqrt{5}} \\\\\\\\ 0 \\\\\\\\ \\frac{1}{\\sqrt{5}} \\\\\\\\ 0\n\\end{bmatrix},\nv_4 = \n\\begin{bmatrix}\n0 \\\\\\\\ \\frac{1}{\\sqrt{2}} \\\\\\\\ 0 \\\\\\\\ \\frac{1}{\\sqrt{2}} \n\\end{bmatrix}\n$$\n因此，$A$的奇异值分解为\n$$\nA = \n\\begin{bmatrix}\n0 & 1 \\\\\\\\\n-1 & 0 \\\\\\\\\n0 & 2 \\\\\\\\\n1 & 0 \\\\\\\\\n\\end{bmatrix}\n= \n\\begin{bmatrix}\n\\frac{1}{\\sqrt{5}} & 0 & -\\frac{2}{\\sqrt{5}} & 0\\\\\\\\ \n0 & -\\frac{1}{\\sqrt{2}} & 0 & \\frac{1}{\\sqrt{2}}\\\\\\\\ \n\\frac{2}{\\sqrt{5}} & 0 & \\frac{1}{\\sqrt{5}} & 0\\\\\\\\ \n0 & \\frac{1}{\\sqrt{2}} & 0 & \\frac{1}{\\sqrt{2}}\n\\end{bmatrix}\n\\begin{bmatrix}\n\\sqrt{5} & 0 \\\\\\\\\n0 & \\sqrt{2} \\\\\\\\\n0 & 0 \\\\\\\\\n0 & 0\n\\end{bmatrix}\n\\begin{pmatrix}\n0 & 1 \\\\\\\\\n1 & 0\n\\end{pmatrix}^{H}\n$$\n","source":"_posts/matrix-singular-value-decomposition.md","raw":"---\ntitle: 奇异值分解\ndate: 2018-08-28 21:19:49\ntags: 矩阵论\ncategories: 机器学习\nmathjax: true\n---\n\n奇异值分解（Singular Value Decomposition，简称SVD），是一种矩阵分解技术，可以用于机器学习中数据集的降维。\n\n<!--more-->\n\n### 预备知识\n\n* 单位矩阵\n\n主对角元素全为1，其余元素全为0的n阶矩阵，称为单位矩阵，记为$E_{n}$或$I_{n}$，通常用$E$或$I$表示。\n\n> 自看机器学习以来，看到好多次$I$这个符号，以前一直不知道是啥意思，原来就是本科线性代数里单位矩阵$E$的另一种表示符号。\n\n* 正交矩阵\n\n如果n阶实矩阵满足\n$$\nA^{T}A = AA^{T} = I\n$$\n则称$A$为正定矩阵。\n\n* 正规矩阵\n\n设$A \\in C^{\\ m \\times n}$，如果\n$$\nA^{H}A = AA^{H}\n$$\n则称$A$ 为正规矩阵。\n\n* 酉矩阵\n\n如果n阶复矩阵$A$满足\n$$\nA^{H}A = AA^{H} = I\n$$\n则称$A$为酉矩阵。\n\n### 奇异值分解\n\n设$A \\in C^{\\ m \\times n}$，如果存在非负实数$\\sigma$和非零向量$u \\in C^{n}，v \\in C^{m}$使得\n$$\nAu = \\sigma v，A^{H}v = \\sigma u\n$$\n则称$\\sigma$为$A$的奇异值，$u$和$v$分别称为$A$对应于奇异值$\\sigma$的右奇异向量和左奇异向量。\n$$\nA^{H}Au = \\sigma A^{H} v = \\sigma^{2} u\n$$\n\n$$\nA A^{H} v = \\sigma A u = \\sigma^{2}v\n$$\n\n因此，$\\sigma^{2}$是$A^{H} A$的特征值，也是$A A^{H}$的特征值，而$u$和$v$分别是$A^{H}A$和$A A^{H}$对应于特征值$\\sigma^{2}$的特征向量。\n\n设$A \\in C^{\\ m \\times n}$，rank（A）=r，且$A^{H}A$的特征值为$\\lambda_{1} \\geq \\lambda_{2} \\geq \\dots \\geq \\lambda_{n}$。\n$$\n\\lambda_{1} \\geq \\dots \\geq \\lambda_{r} > \\lambda_{r+1} = \\dots = \\lambda_{n} = 0\n$$\n记$k = \\min\\\\{m,n\\\\}$，也称$\\sigma_{i} = \\sqrt{\\lambda_{i}} （i=1,\\dots,k）$为$A$的奇异值，特别地，称$\\sigma_{1}，\\dots，\\sigma_{r}$为$A$的正奇异值。\n\n定理：若$A$是正规矩阵，则$A$的奇异值是$A$的特征值的模。\n\n定理：设$A$是$m \\times n$矩阵，且rank（A）= r，则存在m阶酉矩阵$V$和n阶酉矩阵$U$，使得\n$$\nV^{H}AU = \n\\begin{bmatrix}\n\\Sigma & 0 \\\\\\\\\n0 & 0\n\\end{bmatrix}\n$$\n其中，$\\Sigma = diag（\\sigma_{1}，\\dots，\\sigma_{r}）$，且$\\sigma_{1} \\geq \\dots \\geq \\sigma_{r} > 0$。\n\n$U$的列向量是$A^{H}A$的标准正交特征向量，$U$的前 r 列向量是$A^{H}A$对应于r个非零特征值$\\sigma_{1}^{2},\\dots,\\sigma_{r}^{2}$的标准正交特征向量；而$V$的列向量是$AA^{H}$的标准正交特征向量，前 r 列向量恰是$AA^{H}$对应于特征值$\\sigma_{1}^{2},\\dots,\\sigma_{r}^{2}$的标准正交特征向量。\n\n例题\n\n设\n$$\nA = \n\\begin{bmatrix}\n0 & 1 \\\\\\\\\n-1 & 0 \\\\\\\\\n0 & 2 \\\\\\\\\n1 & 0 \\\\\\\\\n\\end{bmatrix}\n$$\n作出矩阵$A$的奇异值分解。\n\n解：\n$$\nA^{H}A = \n\\begin{bmatrix}\n2 & 0 \\\\\\\\\n0 & 5\n\\end{bmatrix},\nAA^{H} = \n\\begin{bmatrix}\n1 & 0 & 2 & 0 \\\\\\\\\n0 & 1 & 0 & -1 \\\\\\\\\n2 & 0 & 4 & 0 \\\\\\\\\n0 & -1 & 0 & 1\n\\end{bmatrix},\n$$\n则$A$的非零奇异值为$\\sqrt{2}，\\sqrt{5}$ .\n\n$A^{H} A $对应于特征值5和2的标准正交特征向量为\n$$\nu_1 = \n\\begin{pmatrix}\n0 \\\\\\\\ 1\n\\end{pmatrix}，\nu_2 = \n\\begin{pmatrix}\n1 \\\\\\\\ 0\n\\end{pmatrix}\n$$\n$AA^{H}$对应于特征值5和2的标准正交特征向量为\n$$\nv_1 = \n\\begin{bmatrix}\n\\frac{1}{\\sqrt{5}} \\\\\\\\ 0 \\\\\\\\ \\frac{2}{\\sqrt{5}} \\\\\\\\ 0\n\\end{bmatrix},\nv_2 = \n\\begin{bmatrix}\n0 \\\\\\\\ -\\frac{1}{\\sqrt{2}} \\\\\\\\ 0 \\\\\\\\ \\frac{1}{\\sqrt{2}} \n\\end{bmatrix}\n$$\n$AA^{H}$对应于特征值0的标准正交特征向量为\n$$\nv_3 = \n\\begin{bmatrix}\n-\\frac{2}{\\sqrt{5}} \\\\\\\\ 0 \\\\\\\\ \\frac{1}{\\sqrt{5}} \\\\\\\\ 0\n\\end{bmatrix},\nv_4 = \n\\begin{bmatrix}\n0 \\\\\\\\ \\frac{1}{\\sqrt{2}} \\\\\\\\ 0 \\\\\\\\ \\frac{1}{\\sqrt{2}} \n\\end{bmatrix}\n$$\n因此，$A$的奇异值分解为\n$$\nA = \n\\begin{bmatrix}\n0 & 1 \\\\\\\\\n-1 & 0 \\\\\\\\\n0 & 2 \\\\\\\\\n1 & 0 \\\\\\\\\n\\end{bmatrix}\n= \n\\begin{bmatrix}\n\\frac{1}{\\sqrt{5}} & 0 & -\\frac{2}{\\sqrt{5}} & 0\\\\\\\\ \n0 & -\\frac{1}{\\sqrt{2}} & 0 & \\frac{1}{\\sqrt{2}}\\\\\\\\ \n\\frac{2}{\\sqrt{5}} & 0 & \\frac{1}{\\sqrt{5}} & 0\\\\\\\\ \n0 & \\frac{1}{\\sqrt{2}} & 0 & \\frac{1}{\\sqrt{2}}\n\\end{bmatrix}\n\\begin{bmatrix}\n\\sqrt{5} & 0 \\\\\\\\\n0 & \\sqrt{2} \\\\\\\\\n0 & 0 \\\\\\\\\n0 & 0\n\\end{bmatrix}\n\\begin{pmatrix}\n0 & 1 \\\\\\\\\n1 & 0\n\\end{pmatrix}^{H}\n$$\n","slug":"matrix-singular-value-decomposition","published":1,"updated":"2019-01-19T07:23:57.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aqx004dj1q0huv7fk5t","content":"<p>奇异值分解（Singular Value Decomposition，简称SVD），是一种矩阵分解技术，可以用于机器学习中数据集的降维。</p>\n<a id=\"more\"></a>\n<h3 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h3><ul>\n<li>单位矩阵</li>\n</ul>\n<p>主对角元素全为1，其余元素全为0的n阶矩阵，称为单位矩阵，记为$E_{n}$或$I_{n}$，通常用$E$或$I$表示。</p>\n<blockquote>\n<p>自看机器学习以来，看到好多次$I$这个符号，以前一直不知道是啥意思，原来就是本科线性代数里单位矩阵$E$的另一种表示符号。</p>\n</blockquote>\n<ul>\n<li>正交矩阵</li>\n</ul>\n<p>如果n阶实矩阵满足<br>$$<br>A^{T}A = AA^{T} = I<br>$$<br>则称$A$为正定矩阵。</p>\n<ul>\n<li>正规矩阵</li>\n</ul>\n<p>设$A \\in C^{\\ m \\times n}$，如果<br>$$<br>A^{H}A = AA^{H}<br>$$<br>则称$A$ 为正规矩阵。</p>\n<ul>\n<li>酉矩阵</li>\n</ul>\n<p>如果n阶复矩阵$A$满足<br>$$<br>A^{H}A = AA^{H} = I<br>$$<br>则称$A$为酉矩阵。</p>\n<h3 id=\"奇异值分解\"><a href=\"#奇异值分解\" class=\"headerlink\" title=\"奇异值分解\"></a>奇异值分解</h3><p>设$A \\in C^{\\ m \\times n}$，如果存在非负实数$\\sigma$和非零向量$u \\in C^{n}，v \\in C^{m}$使得<br>$$<br>Au = \\sigma v，A^{H}v = \\sigma u<br>$$<br>则称$\\sigma$为$A$的奇异值，$u$和$v$分别称为$A$对应于奇异值$\\sigma$的右奇异向量和左奇异向量。<br>$$<br>A^{H}Au = \\sigma A^{H} v = \\sigma^{2} u<br>$$</p>\n<p>$$<br>A A^{H} v = \\sigma A u = \\sigma^{2}v<br>$$</p>\n<p>因此，$\\sigma^{2}$是$A^{H} A$的特征值，也是$A A^{H}$的特征值，而$u$和$v$分别是$A^{H}A$和$A A^{H}$对应于特征值$\\sigma^{2}$的特征向量。</p>\n<p>设$A \\in C^{\\ m \\times n}$，rank（A）=r，且$A^{H}A$的特征值为$\\lambda_{1} \\geq \\lambda_{2} \\geq \\dots \\geq \\lambda_{n}$。<br>$$<br>\\lambda_{1} \\geq \\dots \\geq \\lambda_{r} &gt; \\lambda_{r+1} = \\dots = \\lambda_{n} = 0<br>$$<br>记$k = \\min\\{m,n\\}$，也称$\\sigma_{i} = \\sqrt{\\lambda_{i}} （i=1,\\dots,k）$为$A$的奇异值，特别地，称$\\sigma_{1}，\\dots，\\sigma_{r}$为$A$的正奇异值。</p>\n<p>定理：若$A$是正规矩阵，则$A$的奇异值是$A$的特征值的模。</p>\n<p>定理：设$A$是$m \\times n$矩阵，且rank（A）= r，则存在m阶酉矩阵$V$和n阶酉矩阵$U$，使得<br>$$<br>V^{H}AU =<br>\\begin{bmatrix}<br>\\Sigma &amp; 0 \\\\<br>0 &amp; 0<br>\\end{bmatrix}<br>$$<br>其中，$\\Sigma = diag（\\sigma_{1}，\\dots，\\sigma_{r}）$，且$\\sigma_{1} \\geq \\dots \\geq \\sigma_{r} &gt; 0$。</p>\n<p>$U$的列向量是$A^{H}A$的标准正交特征向量，$U$的前 r 列向量是$A^{H}A$对应于r个非零特征值$\\sigma_{1}^{2},\\dots,\\sigma_{r}^{2}$的标准正交特征向量；而$V$的列向量是$AA^{H}$的标准正交特征向量，前 r 列向量恰是$AA^{H}$对应于特征值$\\sigma_{1}^{2},\\dots,\\sigma_{r}^{2}$的标准正交特征向量。</p>\n<p>例题</p>\n<p>设<br>$$<br>A =<br>\\begin{bmatrix}<br>0 &amp; 1 \\\\<br>-1 &amp; 0 \\\\<br>0 &amp; 2 \\\\<br>1 &amp; 0 \\\\<br>\\end{bmatrix}<br>$$<br>作出矩阵$A$的奇异值分解。</p>\n<p>解：<br>$$<br>A^{H}A =<br>\\begin{bmatrix}<br>2 &amp; 0 \\\\<br>0 &amp; 5<br>\\end{bmatrix},<br>AA^{H} =<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 2 &amp; 0 \\\\<br>0 &amp; 1 &amp; 0 &amp; -1 \\\\<br>2 &amp; 0 &amp; 4 &amp; 0 \\\\<br>0 &amp; -1 &amp; 0 &amp; 1<br>\\end{bmatrix},<br>$$<br>则$A$的非零奇异值为$\\sqrt{2}，\\sqrt{5}$ .</p>\n<p>$A^{H} A $对应于特征值5和2的标准正交特征向量为<br>$$<br>u_1 =<br>\\begin{pmatrix}<br>0 \\\\ 1<br>\\end{pmatrix}，<br>u_2 =<br>\\begin{pmatrix}<br>1 \\\\ 0<br>\\end{pmatrix}<br>$$<br>$AA^{H}$对应于特征值5和2的标准正交特征向量为<br>$$<br>v_1 =<br>\\begin{bmatrix}<br>\\frac{1}{\\sqrt{5}} \\\\ 0 \\\\ \\frac{2}{\\sqrt{5}} \\\\ 0<br>\\end{bmatrix},<br>v_2 =<br>\\begin{bmatrix}<br>0 \\\\ -\\frac{1}{\\sqrt{2}} \\\\ 0 \\\\ \\frac{1}{\\sqrt{2}}<br>\\end{bmatrix}<br>$$<br>$AA^{H}$对应于特征值0的标准正交特征向量为<br>$$<br>v_3 =<br>\\begin{bmatrix}<br>-\\frac{2}{\\sqrt{5}} \\\\ 0 \\\\ \\frac{1}{\\sqrt{5}} \\\\ 0<br>\\end{bmatrix},<br>v_4 =<br>\\begin{bmatrix}<br>0 \\\\ \\frac{1}{\\sqrt{2}} \\\\ 0 \\\\ \\frac{1}{\\sqrt{2}}<br>\\end{bmatrix}<br>$$<br>因此，$A$的奇异值分解为<br>$$<br>A =<br>\\begin{bmatrix}<br>0 &amp; 1 \\\\<br>-1 &amp; 0 \\\\<br>0 &amp; 2 \\\\<br>1 &amp; 0 \\\\<br>\\end{bmatrix}<br>=<br>\\begin{bmatrix}<br>\\frac{1}{\\sqrt{5}} &amp; 0 &amp; -\\frac{2}{\\sqrt{5}} &amp; 0\\\\<br>0 &amp; -\\frac{1}{\\sqrt{2}} &amp; 0 &amp; \\frac{1}{\\sqrt{2}}\\\\<br>\\frac{2}{\\sqrt{5}} &amp; 0 &amp; \\frac{1}{\\sqrt{5}} &amp; 0\\\\<br>0 &amp; \\frac{1}{\\sqrt{2}} &amp; 0 &amp; \\frac{1}{\\sqrt{2}}<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>\\sqrt{5} &amp; 0 \\\\<br>0 &amp; \\sqrt{2} \\\\<br>0 &amp; 0 \\\\<br>0 &amp; 0<br>\\end{bmatrix}<br>\\begin{pmatrix}<br>0 &amp; 1 \\\\<br>1 &amp; 0<br>\\end{pmatrix}^{H}<br>$$</p>\n","site":{"data":{}},"excerpt":"<p>奇异值分解（Singular Value Decomposition，简称SVD），是一种矩阵分解技术，可以用于机器学习中数据集的降维。</p>","more":"<h3 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h3><ul>\n<li>单位矩阵</li>\n</ul>\n<p>主对角元素全为1，其余元素全为0的n阶矩阵，称为单位矩阵，记为$E_{n}$或$I_{n}$，通常用$E$或$I$表示。</p>\n<blockquote>\n<p>自看机器学习以来，看到好多次$I$这个符号，以前一直不知道是啥意思，原来就是本科线性代数里单位矩阵$E$的另一种表示符号。</p>\n</blockquote>\n<ul>\n<li>正交矩阵</li>\n</ul>\n<p>如果n阶实矩阵满足<br>$$<br>A^{T}A = AA^{T} = I<br>$$<br>则称$A$为正定矩阵。</p>\n<ul>\n<li>正规矩阵</li>\n</ul>\n<p>设$A \\in C^{\\ m \\times n}$，如果<br>$$<br>A^{H}A = AA^{H}<br>$$<br>则称$A$ 为正规矩阵。</p>\n<ul>\n<li>酉矩阵</li>\n</ul>\n<p>如果n阶复矩阵$A$满足<br>$$<br>A^{H}A = AA^{H} = I<br>$$<br>则称$A$为酉矩阵。</p>\n<h3 id=\"奇异值分解\"><a href=\"#奇异值分解\" class=\"headerlink\" title=\"奇异值分解\"></a>奇异值分解</h3><p>设$A \\in C^{\\ m \\times n}$，如果存在非负实数$\\sigma$和非零向量$u \\in C^{n}，v \\in C^{m}$使得<br>$$<br>Au = \\sigma v，A^{H}v = \\sigma u<br>$$<br>则称$\\sigma$为$A$的奇异值，$u$和$v$分别称为$A$对应于奇异值$\\sigma$的右奇异向量和左奇异向量。<br>$$<br>A^{H}Au = \\sigma A^{H} v = \\sigma^{2} u<br>$$</p>\n<p>$$<br>A A^{H} v = \\sigma A u = \\sigma^{2}v<br>$$</p>\n<p>因此，$\\sigma^{2}$是$A^{H} A$的特征值，也是$A A^{H}$的特征值，而$u$和$v$分别是$A^{H}A$和$A A^{H}$对应于特征值$\\sigma^{2}$的特征向量。</p>\n<p>设$A \\in C^{\\ m \\times n}$，rank（A）=r，且$A^{H}A$的特征值为$\\lambda_{1} \\geq \\lambda_{2} \\geq \\dots \\geq \\lambda_{n}$。<br>$$<br>\\lambda_{1} \\geq \\dots \\geq \\lambda_{r} &gt; \\lambda_{r+1} = \\dots = \\lambda_{n} = 0<br>$$<br>记$k = \\min\\{m,n\\}$，也称$\\sigma_{i} = \\sqrt{\\lambda_{i}} （i=1,\\dots,k）$为$A$的奇异值，特别地，称$\\sigma_{1}，\\dots，\\sigma_{r}$为$A$的正奇异值。</p>\n<p>定理：若$A$是正规矩阵，则$A$的奇异值是$A$的特征值的模。</p>\n<p>定理：设$A$是$m \\times n$矩阵，且rank（A）= r，则存在m阶酉矩阵$V$和n阶酉矩阵$U$，使得<br>$$<br>V^{H}AU =<br>\\begin{bmatrix}<br>\\Sigma &amp; 0 \\\\<br>0 &amp; 0<br>\\end{bmatrix}<br>$$<br>其中，$\\Sigma = diag（\\sigma_{1}，\\dots，\\sigma_{r}）$，且$\\sigma_{1} \\geq \\dots \\geq \\sigma_{r} &gt; 0$。</p>\n<p>$U$的列向量是$A^{H}A$的标准正交特征向量，$U$的前 r 列向量是$A^{H}A$对应于r个非零特征值$\\sigma_{1}^{2},\\dots,\\sigma_{r}^{2}$的标准正交特征向量；而$V$的列向量是$AA^{H}$的标准正交特征向量，前 r 列向量恰是$AA^{H}$对应于特征值$\\sigma_{1}^{2},\\dots,\\sigma_{r}^{2}$的标准正交特征向量。</p>\n<p>例题</p>\n<p>设<br>$$<br>A =<br>\\begin{bmatrix}<br>0 &amp; 1 \\\\<br>-1 &amp; 0 \\\\<br>0 &amp; 2 \\\\<br>1 &amp; 0 \\\\<br>\\end{bmatrix}<br>$$<br>作出矩阵$A$的奇异值分解。</p>\n<p>解：<br>$$<br>A^{H}A =<br>\\begin{bmatrix}<br>2 &amp; 0 \\\\<br>0 &amp; 5<br>\\end{bmatrix},<br>AA^{H} =<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 2 &amp; 0 \\\\<br>0 &amp; 1 &amp; 0 &amp; -1 \\\\<br>2 &amp; 0 &amp; 4 &amp; 0 \\\\<br>0 &amp; -1 &amp; 0 &amp; 1<br>\\end{bmatrix},<br>$$<br>则$A$的非零奇异值为$\\sqrt{2}，\\sqrt{5}$ .</p>\n<p>$A^{H} A $对应于特征值5和2的标准正交特征向量为<br>$$<br>u_1 =<br>\\begin{pmatrix}<br>0 \\\\ 1<br>\\end{pmatrix}，<br>u_2 =<br>\\begin{pmatrix}<br>1 \\\\ 0<br>\\end{pmatrix}<br>$$<br>$AA^{H}$对应于特征值5和2的标准正交特征向量为<br>$$<br>v_1 =<br>\\begin{bmatrix}<br>\\frac{1}{\\sqrt{5}} \\\\ 0 \\\\ \\frac{2}{\\sqrt{5}} \\\\ 0<br>\\end{bmatrix},<br>v_2 =<br>\\begin{bmatrix}<br>0 \\\\ -\\frac{1}{\\sqrt{2}} \\\\ 0 \\\\ \\frac{1}{\\sqrt{2}}<br>\\end{bmatrix}<br>$$<br>$AA^{H}$对应于特征值0的标准正交特征向量为<br>$$<br>v_3 =<br>\\begin{bmatrix}<br>-\\frac{2}{\\sqrt{5}} \\\\ 0 \\\\ \\frac{1}{\\sqrt{5}} \\\\ 0<br>\\end{bmatrix},<br>v_4 =<br>\\begin{bmatrix}<br>0 \\\\ \\frac{1}{\\sqrt{2}} \\\\ 0 \\\\ \\frac{1}{\\sqrt{2}}<br>\\end{bmatrix}<br>$$<br>因此，$A$的奇异值分解为<br>$$<br>A =<br>\\begin{bmatrix}<br>0 &amp; 1 \\\\<br>-1 &amp; 0 \\\\<br>0 &amp; 2 \\\\<br>1 &amp; 0 \\\\<br>\\end{bmatrix}<br>=<br>\\begin{bmatrix}<br>\\frac{1}{\\sqrt{5}} &amp; 0 &amp; -\\frac{2}{\\sqrt{5}} &amp; 0\\\\<br>0 &amp; -\\frac{1}{\\sqrt{2}} &amp; 0 &amp; \\frac{1}{\\sqrt{2}}\\\\<br>\\frac{2}{\\sqrt{5}} &amp; 0 &amp; \\frac{1}{\\sqrt{5}} &amp; 0\\\\<br>0 &amp; \\frac{1}{\\sqrt{2}} &amp; 0 &amp; \\frac{1}{\\sqrt{2}}<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>\\sqrt{5} &amp; 0 \\\\<br>0 &amp; \\sqrt{2} \\\\<br>0 &amp; 0 \\\\<br>0 &amp; 0<br>\\end{bmatrix}<br>\\begin{pmatrix}<br>0 &amp; 1 \\\\<br>1 &amp; 0<br>\\end{pmatrix}^{H}<br>$$</p>"},{"title":"Nginx返回413 Request Entity Too Large","date":"2018-10-14T14:54:23.000Z","_content":"\n* 问题描述\n\n晚上9点55分，前老板在讨论组中截了一张图片，显示的是课程网站上传文件失败的弹框，弹框内容如下\n\n```\nSyntaxError: JSON.parse: unexpected character at line2 column 1 of the JSON data\n```\n\n下意识以为是自己代码写的有问题，赶紧在本机测试了下，发现很小的文件都能正常上传，但是稍大一点的文件就会出现如下错误\n\n```\nSyntaxError: Unexpected token < in JSON at position 1\n```\n\n浏览器控制台报错内容如下\n\n```\n413 Request Entity Too Large\n```\n\n查看了下Spring MVC的配置文件，上传大小写的足够大，这显然不是Spring MVC的问题。后来发现可能是Nginx的问题，试着改了下本地Nginx的配置文件，果然就传成功了。\n\n* 原因\n\nnginx服务器做反向代理时，对上传的文件大小有限制，默认为2M\n\n* 解决办法\n\n在nginx.conf的http{}中，添加一行\n\n```shell\nclient_max_body_size 200m;\n```\n\n文件大小限制可以根据需求自行改变。","source":"_posts/nginx-413-request-entity-too-large.md","raw":"---\ntitle: Nginx返回413 Request Entity Too Large\ndate: 2018-10-14 22:54:23\ntags: nginx\ncategories: nginx\n---\n\n* 问题描述\n\n晚上9点55分，前老板在讨论组中截了一张图片，显示的是课程网站上传文件失败的弹框，弹框内容如下\n\n```\nSyntaxError: JSON.parse: unexpected character at line2 column 1 of the JSON data\n```\n\n下意识以为是自己代码写的有问题，赶紧在本机测试了下，发现很小的文件都能正常上传，但是稍大一点的文件就会出现如下错误\n\n```\nSyntaxError: Unexpected token < in JSON at position 1\n```\n\n浏览器控制台报错内容如下\n\n```\n413 Request Entity Too Large\n```\n\n查看了下Spring MVC的配置文件，上传大小写的足够大，这显然不是Spring MVC的问题。后来发现可能是Nginx的问题，试着改了下本地Nginx的配置文件，果然就传成功了。\n\n* 原因\n\nnginx服务器做反向代理时，对上传的文件大小有限制，默认为2M\n\n* 解决办法\n\n在nginx.conf的http{}中，添加一行\n\n```shell\nclient_max_body_size 200m;\n```\n\n文件大小限制可以根据需求自行改变。","slug":"nginx-413-request-entity-too-large","published":1,"updated":"2019-01-19T07:23:57.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aqy004fj1q0hyc2q1xf","content":"<ul>\n<li>问题描述</li>\n</ul>\n<p>晚上9点55分，前老板在讨论组中截了一张图片，显示的是课程网站上传文件失败的弹框，弹框内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SyntaxError: JSON.parse: unexpected character at line2 column 1 of the JSON data</span><br></pre></td></tr></table></figure>\n<p>下意识以为是自己代码写的有问题，赶紧在本机测试了下，发现很小的文件都能正常上传，但是稍大一点的文件就会出现如下错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SyntaxError: Unexpected token &lt; in JSON at position 1</span><br></pre></td></tr></table></figure>\n<p>浏览器控制台报错内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">413 Request Entity Too Large</span><br></pre></td></tr></table></figure>\n<p>查看了下Spring MVC的配置文件，上传大小写的足够大，这显然不是Spring MVC的问题。后来发现可能是Nginx的问题，试着改了下本地Nginx的配置文件，果然就传成功了。</p>\n<ul>\n<li>原因</li>\n</ul>\n<p>nginx服务器做反向代理时，对上传的文件大小有限制，默认为2M</p>\n<ul>\n<li>解决办法</li>\n</ul>\n<p>在nginx.conf的http{}中，添加一行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client_max_body_size 200m;</span><br></pre></td></tr></table></figure>\n<p>文件大小限制可以根据需求自行改变。</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>问题描述</li>\n</ul>\n<p>晚上9点55分，前老板在讨论组中截了一张图片，显示的是课程网站上传文件失败的弹框，弹框内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SyntaxError: JSON.parse: unexpected character at line2 column 1 of the JSON data</span><br></pre></td></tr></table></figure>\n<p>下意识以为是自己代码写的有问题，赶紧在本机测试了下，发现很小的文件都能正常上传，但是稍大一点的文件就会出现如下错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SyntaxError: Unexpected token &lt; in JSON at position 1</span><br></pre></td></tr></table></figure>\n<p>浏览器控制台报错内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">413 Request Entity Too Large</span><br></pre></td></tr></table></figure>\n<p>查看了下Spring MVC的配置文件，上传大小写的足够大，这显然不是Spring MVC的问题。后来发现可能是Nginx的问题，试着改了下本地Nginx的配置文件，果然就传成功了。</p>\n<ul>\n<li>原因</li>\n</ul>\n<p>nginx服务器做反向代理时，对上传的文件大小有限制，默认为2M</p>\n<ul>\n<li>解决办法</li>\n</ul>\n<p>在nginx.conf的http{}中，添加一行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client_max_body_size 200m;</span><br></pre></td></tr></table></figure>\n<p>文件大小限制可以根据需求自行改变。</p>\n"},{"title":"PAT甲级 1042.Shuffling Machine （20 分)","date":"2019-04-03T09:36:18.000Z","_content":"\nShuffling is a procedure used to randomize a deck of playing cards. Because standard shuffling techniques are seen as weak, and in order to avoid \"inside jobs\" where employees collaborate with gamblers by performing inadequate shuffles, many casinos employ **automatic shuffling machines**. Your task is to simulate a shuffling machine.\n\nThe machine shuffles a deck of 54 cards according to a given random order and repeats for a given number of times. It is assumed that the initial status of a card deck is in the following order:\n\n```\nS1, S2, ..., S13, \nH1, H2, ..., H13, \nC1, C2, ..., C13, \nD1, D2, ..., D13, \nJ1, J2\n```\n\nwhere \"S\" stands for \"Spade\", \"H\" for \"Heart\", \"C\" for \"Club\", \"D\" for \"Diamond\", and \"J\" for \"Joker\". A given order is a permutation of distinct integers in [1, 54]. If the number at the *i*-th position is *j*, it means to move the card from position *i* to position *j*. For example, suppose we only have 5 cards: S3, H5, C1, D13 and J2. Given a shuffling order {4, 2, 5, 3, 1}, the result will be: J2, H5, D13, S3, C1. If we are to repeat the shuffling again, the result will be: C1, H5, S3, J2, D13.\n\n<!--more-->\n\n### Input Specification:\n\nEach input file contains one test case. For each case, the first line contains a positive integer *K* (≤20) which is the number of repeat times. Then the next line contains the given order. All the numbers in a line are separated by a space.\n\n### Output Specification:\n\nFor each test case, print the shuffling results in one line. All the cards are separated by a space, and there must be no extra space at the end of the line.\n\n### Sample Input:\n\n```in\n2\n36 52 37 38 3 39 40 53 54 41 11 12 13 42 43 44 2 4 23 24 25 26 27 6 7 8 48 49 50 51 9 10 14 15 16 5 17 18 19 1 20 21 22 28 29 30 31 32 33 34 35 45 46 47\n```\n\n### Sample Output:\n\n```out\nS7 C11 C10 C12 S1 H7 H8 H9 D8 D9 S11 S12 S13 D10 D11 D12 S3 S4 S6 S10 H1 H2 C13 D2 D3 D4 H6 H3 D13 J1 J2 C1 C2 C3 C4 D1 S5 H5 H11 H12 C6 C7 C8 C9 S2 S8 S9 H10 D5 D6 D7 H4 H13 C5\n```\n\n### 分析：\n\n**题目大意**：模拟一个洗牌机。共有54张牌，其初始顺序为\n\n```\nS1, S2, ..., S13, \nH1, H2, ..., H13, \nC1, C2, ..., C13, \nD1, D2, ..., D13, \nJ1, J2\n```\n\n给定洗牌次数K ( ≤20 )，以及第i张牌需要放置的位置j，输出洗完以后的牌顺序。\n\n例如，假定只有五张牌：S3, H5, C1, D13 和 J2。洗牌顺序为{4, 2, 5, 3, 1}，洗完一次后的结果为： J2, H5, D13, S3, C1。若再洗一次，则结果为 C1, H5, S3, J2, D13。\n\n**思路**：\n\n使用二维数组`arr[n][2]`存储牌号(`[1,54]`)及该牌的当前位置，数组`numbers[n]`存储洗牌顺序。\n\n每次洗牌，对所有牌执行`arr[i][1]=numbers[i]`，然后按照牌的当前位置升序排序，即对数组`arr[n][2]`第二维升序排序。\n\n上述操作循环执行K次以后，得到最终的牌顺序。\n\n输出时，按照牌号转换为对应的牌内容。先按照牌号得到其对应的字母编号，如牌号不大于13，则为字母编号为`S`…然后让牌号对13取模，若余数为0，则该牌的数字编号为`13`，否则该牌的数字编号为取模后的余数。\n\n```c++\n#include <cstdio>\n\nconst int n = 54;\n\nvoid sort(int arr[n][2]) {\n\tint temp = 0;\n\tfor (int i = 0; i < n - 1; i++) {\n\t\tfor (int j = n - 1; j >= i + 1; j--) {\n\t\t\tif (arr[j][1] < arr[j - 1][1]) {\n\t\t\t\ttemp = arr[j][1];\n\t\t\t\tarr[j][1] = arr[j - 1][1];\n\t\t\t\tarr[j - 1][1] = temp;\n\n\t\t\t\ttemp = arr[j][0];\n\t\t\t\tarr[j][0] = arr[j - 1][0];\n\t\t\t\tarr[j - 1][0] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tint k;\n\tscanf(\"%d\", &k);\n\tint arr[n][2] = { 0 };\n\tint numbers[n];\n\tfor (int i = 0; i < n; i++) {\n\t\tarr[i][0] = i + 1;\n\t\tscanf(\"%d\", &numbers[i]);\n\t}\n\twhile (k--) {\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarr[i][1] = numbers[i];\n\t\t}\n\t\tsort(arr);\n\t}\n\n\tfor (int i = 0; i < n; i++) {\n\t\tchar c;\n\t\tif (arr[i][0] <= 13) {\n\t\t\tc = 'S';\n\t\t} else if (arr[i][0] <= 26) {\n\t\t\tc = 'H';\n\t\t} else if (arr[i][0] <= 39) {\n\t\t\tc = 'C';\n\t\t} else if (arr[i][0] <= 52) {\n\t\t\tc = 'D';\n\t\t} else {\n\t\t\tc = 'J';\n\t\t}\n\t\tint r = arr[i][0] % 13;\n\t\tint data = r == 0 ? 13 : r;\n\t\tprintf(\"%c%d\", c, data);\n\t\tif (i < n - 1) {\n\t\t\tprintf(\" \");\n\t\t} else {\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n","source":"_posts/pat-advanced-1042.md","raw":"---\ntitle: PAT甲级 1042.Shuffling Machine （20 分)\ndate: 2019-04-03 17:36:18\ntags: pat\ncategories: pat甲级\n---\n\nShuffling is a procedure used to randomize a deck of playing cards. Because standard shuffling techniques are seen as weak, and in order to avoid \"inside jobs\" where employees collaborate with gamblers by performing inadequate shuffles, many casinos employ **automatic shuffling machines**. Your task is to simulate a shuffling machine.\n\nThe machine shuffles a deck of 54 cards according to a given random order and repeats for a given number of times. It is assumed that the initial status of a card deck is in the following order:\n\n```\nS1, S2, ..., S13, \nH1, H2, ..., H13, \nC1, C2, ..., C13, \nD1, D2, ..., D13, \nJ1, J2\n```\n\nwhere \"S\" stands for \"Spade\", \"H\" for \"Heart\", \"C\" for \"Club\", \"D\" for \"Diamond\", and \"J\" for \"Joker\". A given order is a permutation of distinct integers in [1, 54]. If the number at the *i*-th position is *j*, it means to move the card from position *i* to position *j*. For example, suppose we only have 5 cards: S3, H5, C1, D13 and J2. Given a shuffling order {4, 2, 5, 3, 1}, the result will be: J2, H5, D13, S3, C1. If we are to repeat the shuffling again, the result will be: C1, H5, S3, J2, D13.\n\n<!--more-->\n\n### Input Specification:\n\nEach input file contains one test case. For each case, the first line contains a positive integer *K* (≤20) which is the number of repeat times. Then the next line contains the given order. All the numbers in a line are separated by a space.\n\n### Output Specification:\n\nFor each test case, print the shuffling results in one line. All the cards are separated by a space, and there must be no extra space at the end of the line.\n\n### Sample Input:\n\n```in\n2\n36 52 37 38 3 39 40 53 54 41 11 12 13 42 43 44 2 4 23 24 25 26 27 6 7 8 48 49 50 51 9 10 14 15 16 5 17 18 19 1 20 21 22 28 29 30 31 32 33 34 35 45 46 47\n```\n\n### Sample Output:\n\n```out\nS7 C11 C10 C12 S1 H7 H8 H9 D8 D9 S11 S12 S13 D10 D11 D12 S3 S4 S6 S10 H1 H2 C13 D2 D3 D4 H6 H3 D13 J1 J2 C1 C2 C3 C4 D1 S5 H5 H11 H12 C6 C7 C8 C9 S2 S8 S9 H10 D5 D6 D7 H4 H13 C5\n```\n\n### 分析：\n\n**题目大意**：模拟一个洗牌机。共有54张牌，其初始顺序为\n\n```\nS1, S2, ..., S13, \nH1, H2, ..., H13, \nC1, C2, ..., C13, \nD1, D2, ..., D13, \nJ1, J2\n```\n\n给定洗牌次数K ( ≤20 )，以及第i张牌需要放置的位置j，输出洗完以后的牌顺序。\n\n例如，假定只有五张牌：S3, H5, C1, D13 和 J2。洗牌顺序为{4, 2, 5, 3, 1}，洗完一次后的结果为： J2, H5, D13, S3, C1。若再洗一次，则结果为 C1, H5, S3, J2, D13。\n\n**思路**：\n\n使用二维数组`arr[n][2]`存储牌号(`[1,54]`)及该牌的当前位置，数组`numbers[n]`存储洗牌顺序。\n\n每次洗牌，对所有牌执行`arr[i][1]=numbers[i]`，然后按照牌的当前位置升序排序，即对数组`arr[n][2]`第二维升序排序。\n\n上述操作循环执行K次以后，得到最终的牌顺序。\n\n输出时，按照牌号转换为对应的牌内容。先按照牌号得到其对应的字母编号，如牌号不大于13，则为字母编号为`S`…然后让牌号对13取模，若余数为0，则该牌的数字编号为`13`，否则该牌的数字编号为取模后的余数。\n\n```c++\n#include <cstdio>\n\nconst int n = 54;\n\nvoid sort(int arr[n][2]) {\n\tint temp = 0;\n\tfor (int i = 0; i < n - 1; i++) {\n\t\tfor (int j = n - 1; j >= i + 1; j--) {\n\t\t\tif (arr[j][1] < arr[j - 1][1]) {\n\t\t\t\ttemp = arr[j][1];\n\t\t\t\tarr[j][1] = arr[j - 1][1];\n\t\t\t\tarr[j - 1][1] = temp;\n\n\t\t\t\ttemp = arr[j][0];\n\t\t\t\tarr[j][0] = arr[j - 1][0];\n\t\t\t\tarr[j - 1][0] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tint k;\n\tscanf(\"%d\", &k);\n\tint arr[n][2] = { 0 };\n\tint numbers[n];\n\tfor (int i = 0; i < n; i++) {\n\t\tarr[i][0] = i + 1;\n\t\tscanf(\"%d\", &numbers[i]);\n\t}\n\twhile (k--) {\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarr[i][1] = numbers[i];\n\t\t}\n\t\tsort(arr);\n\t}\n\n\tfor (int i = 0; i < n; i++) {\n\t\tchar c;\n\t\tif (arr[i][0] <= 13) {\n\t\t\tc = 'S';\n\t\t} else if (arr[i][0] <= 26) {\n\t\t\tc = 'H';\n\t\t} else if (arr[i][0] <= 39) {\n\t\t\tc = 'C';\n\t\t} else if (arr[i][0] <= 52) {\n\t\t\tc = 'D';\n\t\t} else {\n\t\t\tc = 'J';\n\t\t}\n\t\tint r = arr[i][0] % 13;\n\t\tint data = r == 0 ? 13 : r;\n\t\tprintf(\"%c%d\", c, data);\n\t\tif (i < n - 1) {\n\t\t\tprintf(\" \");\n\t\t} else {\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n","slug":"pat-advanced-1042","published":1,"updated":"2019-04-03T10:06:19.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9ar3004jj1q05i55gdd1","content":"<p>Shuffling is a procedure used to randomize a deck of playing cards. Because standard shuffling techniques are seen as weak, and in order to avoid “inside jobs” where employees collaborate with gamblers by performing inadequate shuffles, many casinos employ <strong>automatic shuffling machines</strong>. Your task is to simulate a shuffling machine.</p>\n<p>The machine shuffles a deck of 54 cards according to a given random order and repeats for a given number of times. It is assumed that the initial status of a card deck is in the following order:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S1, S2, ..., S13, </span><br><span class=\"line\">H1, H2, ..., H13, </span><br><span class=\"line\">C1, C2, ..., C13, </span><br><span class=\"line\">D1, D2, ..., D13, </span><br><span class=\"line\">J1, J2</span><br></pre></td></tr></table></figure>\n<p>where “S” stands for “Spade”, “H” for “Heart”, “C” for “Club”, “D” for “Diamond”, and “J” for “Joker”. A given order is a permutation of distinct integers in [1, 54]. If the number at the <em>i</em>-th position is <em>j</em>, it means to move the card from position <em>i</em> to position <em>j</em>. For example, suppose we only have 5 cards: S3, H5, C1, D13 and J2. Given a shuffling order {4, 2, 5, 3, 1}, the result will be: J2, H5, D13, S3, C1. If we are to repeat the shuffling again, the result will be: C1, H5, S3, J2, D13.</p>\n<a id=\"more\"></a>\n<h3 id=\"Input-Specification\"><a href=\"#Input-Specification\" class=\"headerlink\" title=\"Input Specification:\"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>K</em> (≤20) which is the number of repeat times. Then the next line contains the given order. All the numbers in a line are separated by a space.</p>\n<h3 id=\"Output-Specification\"><a href=\"#Output-Specification\" class=\"headerlink\" title=\"Output Specification:\"></a>Output Specification:</h3><p>For each test case, print the shuffling results in one line. All the cards are separated by a space, and there must be no extra space at the end of the line.</p>\n<h3 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input:\"></a>Sample Input:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">36 52 37 38 3 39 40 53 54 41 11 12 13 42 43 44 2 4 23 24 25 26 27 6 7 8 48 49 50 51 9 10 14 15 16 5 17 18 19 1 20 21 22 28 29 30 31 32 33 34 35 45 46 47</span><br></pre></td></tr></table></figure>\n<h3 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output:\"></a>Sample Output:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S7 C11 C10 C12 S1 H7 H8 H9 D8 D9 S11 S12 S13 D10 D11 D12 S3 S4 S6 S10 H1 H2 C13 D2 D3 D4 H6 H3 D13 J1 J2 C1 C2 C3 C4 D1 S5 H5 H11 H12 C6 C7 C8 C9 S2 S8 S9 H10 D5 D6 D7 H4 H13 C5</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><p><strong>题目大意</strong>：模拟一个洗牌机。共有54张牌，其初始顺序为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S1, S2, ..., S13, </span><br><span class=\"line\">H1, H2, ..., H13, </span><br><span class=\"line\">C1, C2, ..., C13, </span><br><span class=\"line\">D1, D2, ..., D13, </span><br><span class=\"line\">J1, J2</span><br></pre></td></tr></table></figure>\n<p>给定洗牌次数K ( ≤20 )，以及第i张牌需要放置的位置j，输出洗完以后的牌顺序。</p>\n<p>例如，假定只有五张牌：S3, H5, C1, D13 和 J2。洗牌顺序为{4, 2, 5, 3, 1}，洗完一次后的结果为： J2, H5, D13, S3, C1。若再洗一次，则结果为 C1, H5, S3, J2, D13。</p>\n<p><strong>思路</strong>：</p>\n<p>使用二维数组<code>arr[n][2]</code>存储牌号(<code>[1,54]</code>)及该牌的当前位置，数组<code>numbers[n]</code>存储洗牌顺序。</p>\n<p>每次洗牌，对所有牌执行<code>arr[i][1]=numbers[i]</code>，然后按照牌的当前位置升序排序，即对数组<code>arr[n][2]</code>第二维升序排序。</p>\n<p>上述操作循环执行K次以后，得到最终的牌顺序。</p>\n<p>输出时，按照牌号转换为对应的牌内容。先按照牌号得到其对应的字母编号，如牌号不大于13，则为字母编号为<code>S</code>…然后让牌号对13取模，若余数为0，则该牌的数字编号为<code>13</code>，否则该牌的数字编号为取模后的余数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> n = <span class=\"number\">54</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[n][<span class=\"number\">2</span>])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = n - <span class=\"number\">1</span>; j &gt;= i + <span class=\"number\">1</span>; j--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j][<span class=\"number\">1</span>] &lt; arr[j - <span class=\"number\">1</span>][<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\t\ttemp = arr[j][<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tarr[j][<span class=\"number\">1</span>] = arr[j - <span class=\"number\">1</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tarr[j - <span class=\"number\">1</span>][<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\ttemp = arr[j][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\t\tarr[j][<span class=\"number\">0</span>] = arr[j - <span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\t\tarr[j - <span class=\"number\">1</span>][<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;k);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[n][<span class=\"number\">2</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> numbers[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\tarr[i][<span class=\"number\">0</span>] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;numbers[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tarr[i][<span class=\"number\">1</span>] = numbers[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsort(arr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> c;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[i][<span class=\"number\">0</span>] &lt;= <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">\t\t\tc = <span class=\"string\">'S'</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[i][<span class=\"number\">0</span>] &lt;= <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">\t\t\tc = <span class=\"string\">'H'</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[i][<span class=\"number\">0</span>] &lt;= <span class=\"number\">39</span>) &#123;</span><br><span class=\"line\">\t\t\tc = <span class=\"string\">'C'</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[i][<span class=\"number\">0</span>] &lt;= <span class=\"number\">52</span>) &#123;</span><br><span class=\"line\">\t\t\tc = <span class=\"string\">'D'</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tc = <span class=\"string\">'J'</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> r = arr[i][<span class=\"number\">0</span>] % <span class=\"number\">13</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> data = r == <span class=\"number\">0</span> ? <span class=\"number\">13</span> : r;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c%d\"</span>, c, data);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Shuffling is a procedure used to randomize a deck of playing cards. Because standard shuffling techniques are seen as weak, and in order to avoid “inside jobs” where employees collaborate with gamblers by performing inadequate shuffles, many casinos employ <strong>automatic shuffling machines</strong>. Your task is to simulate a shuffling machine.</p>\n<p>The machine shuffles a deck of 54 cards according to a given random order and repeats for a given number of times. It is assumed that the initial status of a card deck is in the following order:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S1, S2, ..., S13, </span><br><span class=\"line\">H1, H2, ..., H13, </span><br><span class=\"line\">C1, C2, ..., C13, </span><br><span class=\"line\">D1, D2, ..., D13, </span><br><span class=\"line\">J1, J2</span><br></pre></td></tr></table></figure>\n<p>where “S” stands for “Spade”, “H” for “Heart”, “C” for “Club”, “D” for “Diamond”, and “J” for “Joker”. A given order is a permutation of distinct integers in [1, 54]. If the number at the <em>i</em>-th position is <em>j</em>, it means to move the card from position <em>i</em> to position <em>j</em>. For example, suppose we only have 5 cards: S3, H5, C1, D13 and J2. Given a shuffling order {4, 2, 5, 3, 1}, the result will be: J2, H5, D13, S3, C1. If we are to repeat the shuffling again, the result will be: C1, H5, S3, J2, D13.</p>","more":"<h3 id=\"Input-Specification\"><a href=\"#Input-Specification\" class=\"headerlink\" title=\"Input Specification:\"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>K</em> (≤20) which is the number of repeat times. Then the next line contains the given order. All the numbers in a line are separated by a space.</p>\n<h3 id=\"Output-Specification\"><a href=\"#Output-Specification\" class=\"headerlink\" title=\"Output Specification:\"></a>Output Specification:</h3><p>For each test case, print the shuffling results in one line. All the cards are separated by a space, and there must be no extra space at the end of the line.</p>\n<h3 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input:\"></a>Sample Input:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">36 52 37 38 3 39 40 53 54 41 11 12 13 42 43 44 2 4 23 24 25 26 27 6 7 8 48 49 50 51 9 10 14 15 16 5 17 18 19 1 20 21 22 28 29 30 31 32 33 34 35 45 46 47</span><br></pre></td></tr></table></figure>\n<h3 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output:\"></a>Sample Output:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S7 C11 C10 C12 S1 H7 H8 H9 D8 D9 S11 S12 S13 D10 D11 D12 S3 S4 S6 S10 H1 H2 C13 D2 D3 D4 H6 H3 D13 J1 J2 C1 C2 C3 C4 D1 S5 H5 H11 H12 C6 C7 C8 C9 S2 S8 S9 H10 D5 D6 D7 H4 H13 C5</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><p><strong>题目大意</strong>：模拟一个洗牌机。共有54张牌，其初始顺序为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S1, S2, ..., S13, </span><br><span class=\"line\">H1, H2, ..., H13, </span><br><span class=\"line\">C1, C2, ..., C13, </span><br><span class=\"line\">D1, D2, ..., D13, </span><br><span class=\"line\">J1, J2</span><br></pre></td></tr></table></figure>\n<p>给定洗牌次数K ( ≤20 )，以及第i张牌需要放置的位置j，输出洗完以后的牌顺序。</p>\n<p>例如，假定只有五张牌：S3, H5, C1, D13 和 J2。洗牌顺序为{4, 2, 5, 3, 1}，洗完一次后的结果为： J2, H5, D13, S3, C1。若再洗一次，则结果为 C1, H5, S3, J2, D13。</p>\n<p><strong>思路</strong>：</p>\n<p>使用二维数组<code>arr[n][2]</code>存储牌号(<code>[1,54]</code>)及该牌的当前位置，数组<code>numbers[n]</code>存储洗牌顺序。</p>\n<p>每次洗牌，对所有牌执行<code>arr[i][1]=numbers[i]</code>，然后按照牌的当前位置升序排序，即对数组<code>arr[n][2]</code>第二维升序排序。</p>\n<p>上述操作循环执行K次以后，得到最终的牌顺序。</p>\n<p>输出时，按照牌号转换为对应的牌内容。先按照牌号得到其对应的字母编号，如牌号不大于13，则为字母编号为<code>S</code>…然后让牌号对13取模，若余数为0，则该牌的数字编号为<code>13</code>，否则该牌的数字编号为取模后的余数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> n = <span class=\"number\">54</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[n][<span class=\"number\">2</span>])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = n - <span class=\"number\">1</span>; j &gt;= i + <span class=\"number\">1</span>; j--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j][<span class=\"number\">1</span>] &lt; arr[j - <span class=\"number\">1</span>][<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\t\ttemp = arr[j][<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tarr[j][<span class=\"number\">1</span>] = arr[j - <span class=\"number\">1</span>][<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tarr[j - <span class=\"number\">1</span>][<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\ttemp = arr[j][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\t\tarr[j][<span class=\"number\">0</span>] = arr[j - <span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\t\tarr[j - <span class=\"number\">1</span>][<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;k);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[n][<span class=\"number\">2</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> numbers[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\tarr[i][<span class=\"number\">0</span>] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;numbers[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tarr[i][<span class=\"number\">1</span>] = numbers[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsort(arr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> c;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[i][<span class=\"number\">0</span>] &lt;= <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">\t\t\tc = <span class=\"string\">'S'</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[i][<span class=\"number\">0</span>] &lt;= <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">\t\t\tc = <span class=\"string\">'H'</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[i][<span class=\"number\">0</span>] &lt;= <span class=\"number\">39</span>) &#123;</span><br><span class=\"line\">\t\t\tc = <span class=\"string\">'C'</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[i][<span class=\"number\">0</span>] &lt;= <span class=\"number\">52</span>) &#123;</span><br><span class=\"line\">\t\t\tc = <span class=\"string\">'D'</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tc = <span class=\"string\">'J'</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> r = arr[i][<span class=\"number\">0</span>] % <span class=\"number\">13</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> data = r == <span class=\"number\">0</span> ? <span class=\"number\">13</span> : r;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c%d\"</span>, c, data);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"PAT乙级 1001.害死人不偿命的(3n+1)猜想 （15 分)","date":"2019-03-28T07:04:21.000Z","_content":"\n卡拉兹(Callatz)猜想：\n\n对任何一个正整数 *n*，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3*n*+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 *n*=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3*n*+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……\n\n我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 *n*，简单地数一下，需要多少步（砍几下）才能得到 *n*=1？\n\n<!--more-->\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例，即给出正整数 *n* 的值。\n\n### 输出格式：\n\n输出从 *n* 计算到 1 需要的步数。\n\n### 输入样例：\n\n```in\n3\n```\n\n### 输出样例：\n\n```out\n5\n```\n\n### 分析：\n\n使用count记录总的步数，\n\n如果n为偶数，则令n=n/2；\n\n如果n为奇数，则令n=(3*n+1)/2，\n\n然后步数count++，\n\n直至n==1结束循环。\n\n```c++\n#include <cstdio>\n\nint main() {\n\tint n, count = 0;\n\tscanf(\"%d\", &n);\n\twhile (n != 1) {\n\t\tif (n % 2 == 0) {\n\t\t\tn /= 2;\n\t\t} else {\n\t\t\tn = (3 * n + 1) / 2;\n\t\t}\n\t\tcount++;\n\t}\n\tprintf(\"%d\\n\", count);\n\treturn 0;\n}\n```\n\n\n\n","source":"_posts/pat-basic-1001.md","raw":"---\ntitle: PAT乙级 1001.害死人不偿命的(3n+1)猜想 （15 分)\ndate: 2019-03-28 15:04:21\ntags: pat\ncategories: pat乙级\n---\n\n卡拉兹(Callatz)猜想：\n\n对任何一个正整数 *n*，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3*n*+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 *n*=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3*n*+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……\n\n我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 *n*，简单地数一下，需要多少步（砍几下）才能得到 *n*=1？\n\n<!--more-->\n\n### 输入格式：\n\n每个测试输入包含 1 个测试用例，即给出正整数 *n* 的值。\n\n### 输出格式：\n\n输出从 *n* 计算到 1 需要的步数。\n\n### 输入样例：\n\n```in\n3\n```\n\n### 输出样例：\n\n```out\n5\n```\n\n### 分析：\n\n使用count记录总的步数，\n\n如果n为偶数，则令n=n/2；\n\n如果n为奇数，则令n=(3*n+1)/2，\n\n然后步数count++，\n\n直至n==1结束循环。\n\n```c++\n#include <cstdio>\n\nint main() {\n\tint n, count = 0;\n\tscanf(\"%d\", &n);\n\twhile (n != 1) {\n\t\tif (n % 2 == 0) {\n\t\t\tn /= 2;\n\t\t} else {\n\t\t\tn = (3 * n + 1) / 2;\n\t\t}\n\t\tcount++;\n\t}\n\tprintf(\"%d\\n\", count);\n\treturn 0;\n}\n```\n\n\n\n","slug":"pat-basic-1001","published":1,"updated":"2019-03-28T09:12:04.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9ar4004lj1q058p8oiem","content":"<p>卡拉兹(Callatz)猜想：</p>\n<p>对任何一个正整数 <em>n</em>，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3<em>n</em>+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 <em>n</em>=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3<em>n</em>+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p>\n<p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 <em>n</em>，简单地数一下，需要多少步（砍几下）才能得到 <em>n</em>=1？</p>\n<a id=\"more\"></a>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，即给出正整数 <em>n</em> 的值。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>输出从 <em>n</em> 计算到 1 需要的步数。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><p>使用count记录总的步数，</p>\n<p>如果n为偶数，则令n=n/2；</p>\n<p>如果n为奇数，则令n=(3*n+1)/2，</p>\n<p>然后步数count++，</p>\n<p>直至n==1结束循环。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tn /= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tn = (<span class=\"number\">3</span> * n + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, count);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>卡拉兹(Callatz)猜想：</p>\n<p>对任何一个正整数 <em>n</em>，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3<em>n</em>+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 <em>n</em>=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3<em>n</em>+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p>\n<p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 <em>n</em>，简单地数一下，需要多少步（砍几下）才能得到 <em>n</em>=1？</p>","more":"<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，即给出正整数 <em>n</em> 的值。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>输出从 <em>n</em> 计算到 1 需要的步数。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><p>使用count记录总的步数，</p>\n<p>如果n为偶数，则令n=n/2；</p>\n<p>如果n为奇数，则令n=(3*n+1)/2，</p>\n<p>然后步数count++，</p>\n<p>直至n==1结束循环。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tn /= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tn = (<span class=\"number\">3</span> * n + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, count);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"PAT乙级 1008.数组元素循环右移问题 （20 分)","date":"2019-03-15T03:49:28.000Z","mathjax":true,"_content":"\n一个数组*A*中存有*N*（>0）个整数，在**不允许使用另外数组**的前提下，将每个整数循环向右移*M*（≥0）个位置，即将*A*中的数据由（$A_0 A_1⋯A_{N−1}$）变换为（$A_{N-M}⋯A_{N−1} A_0 A_1⋯A_{N−M−1}$）（最后*M*个数循环移至最前面的*M*个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？\n\n<!--more-->\n\n### 输入格式:\n\n每个输入包含一个测试用例，第1行输入*N*（1≤*N*≤100）和*M*（≥0）；第2行输入*N*个整数，之间用空格分隔。\n\n### 输出格式:\n\n在一行中输出循环右移*M*位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。\n\n### 输入样例:\n\n```in\n6 2\n1 2 3 4 5 6\n```\n\n### 输出样例:\n\n```out\n5 6 1 2 3 4\n```\n\n### 解法一：直接法\n\n* **算法思路**：每次向右移动一位，循环执行m次\n\n* **代码实现**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n\tint n, m;\n\tcin >> n >> m;\n\tint arr[n];\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> arr[i];\n\t}\n\tfor (int i = 0; i < m; i++) {\n            //保存数组的最后一位\n            int temp = arr[n - 1];\n            //自后向前，循环后移一位\n            for (int j = n - 2; j >= 0; j--) {\n                arr[j + 1] = arr[j];\n            }\n            arr[0] = temp;\n\t}\n\n\tfor (int i = 0; i < n; i++) {\n            cout << arr[i];\n            if (i != n - 1) {\n                cout << \" \";\n            }\n\t}\n}\n```\n\n* **时间复杂度**：每次向右移动一位，需要执行n次赋值操作，这个过程循环执行m次，所以共执行**nm**次赋值操作，时间复杂度为**O(nm)**\n\n### 解法二：反转法\n\n* **算法思想**\n\n假设N>=M（若N<M，只需令M=M%N即可），数组A中的数据为$A_0 A_1⋯A_{N−1}$，现在需要将数组A循环向右移M个位置，即将$A_{N-M}⋯A_{N−1}$移到数组的前面。\n\n我们可以将数组A中的数据分为两个部分$A_0 A_1⋯A_{N−M-1}$和$A_{N-M}⋯A_{N−1}$来看，\n\n（1）先将$A_0 A_1⋯A_{N−M-1}​$反转，得到$A_{N−M-1} ⋯A_1 A_0​$；\n\n（2）再将$A_{N-M}⋯A_{N−1}​$反转，得到$A_{N-1}⋯A_{N−M}​$\n\n（3）经过（1）和（2）后，数组A中的数据为$A_{N−M-1} ⋯A_1 A_0 A_{N-1}⋯A_{N−M}$，将数组A中的数据反转，此时数组A中的数据顺序为$A_{N-M}⋯A_{N−1} A_0 A_1⋯A_{N−M−1}$\n\n* **代码实现**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n\tint n, m;\n\tcin >> n >> m;\n\tint arr[n];\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> arr[i];\n\t}\n\tif(m > n) {\n\t\tm = m % n;\n\t}\n\tint temp = 0;\n    // 反转前n-m项\n\tfor(int i=0;i<(n-m)/2;i++) {\n\t\ttemp = arr[n-m-i-1];\n\t\tarr[n-m-i-1] = arr[i];\n\t\tarr[i] = temp;\n\t}\n    // 反转后m项\n\tfor(int i=n-m;i<n-m/2;i++) {\n\t\ttemp = arr[2*n-m-i-1];\n\t\tarr[2*n-m-i-1] = arr[i];\n\t\tarr[i] = temp;\n\t}\n    // 反转整个数组\n\tfor(int i=0;i<n/2;i++) {\n\t\ttemp = arr[n-i-1];\n\t\tarr[n-i-1] = arr[i];\n\t\tarr[i] = temp;\n\t}\n\tfor (int i = 0; i < n; i++) {\n\t\tcout << arr[i];\n\t\tif (i != n - 1) {\n\t\t\tcout << \" \";\n\t\t}\n\t}\n}\n```\n\n* **时间复杂度**\n\n三次反转操作，共执行 $3 \\times \\frac{n-m}{2}+3 \\times [n-\\frac{m}{2}-(n-m)]+3 \\times \\frac{n}{2}=3n$次赋值操作，故时间复杂度为**O(n)**","source":"_posts/pat-basic-1008.md","raw":"---\ntitle: PAT乙级 1008.数组元素循环右移问题 （20 分)\ndate: 2019-03-15 11:49:28\ntags: pat\ncategories: pat乙级\nmathjax: true\n---\n\n一个数组*A*中存有*N*（>0）个整数，在**不允许使用另外数组**的前提下，将每个整数循环向右移*M*（≥0）个位置，即将*A*中的数据由（$A_0 A_1⋯A_{N−1}$）变换为（$A_{N-M}⋯A_{N−1} A_0 A_1⋯A_{N−M−1}$）（最后*M*个数循环移至最前面的*M*个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？\n\n<!--more-->\n\n### 输入格式:\n\n每个输入包含一个测试用例，第1行输入*N*（1≤*N*≤100）和*M*（≥0）；第2行输入*N*个整数，之间用空格分隔。\n\n### 输出格式:\n\n在一行中输出循环右移*M*位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。\n\n### 输入样例:\n\n```in\n6 2\n1 2 3 4 5 6\n```\n\n### 输出样例:\n\n```out\n5 6 1 2 3 4\n```\n\n### 解法一：直接法\n\n* **算法思路**：每次向右移动一位，循环执行m次\n\n* **代码实现**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n\tint n, m;\n\tcin >> n >> m;\n\tint arr[n];\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> arr[i];\n\t}\n\tfor (int i = 0; i < m; i++) {\n            //保存数组的最后一位\n            int temp = arr[n - 1];\n            //自后向前，循环后移一位\n            for (int j = n - 2; j >= 0; j--) {\n                arr[j + 1] = arr[j];\n            }\n            arr[0] = temp;\n\t}\n\n\tfor (int i = 0; i < n; i++) {\n            cout << arr[i];\n            if (i != n - 1) {\n                cout << \" \";\n            }\n\t}\n}\n```\n\n* **时间复杂度**：每次向右移动一位，需要执行n次赋值操作，这个过程循环执行m次，所以共执行**nm**次赋值操作，时间复杂度为**O(nm)**\n\n### 解法二：反转法\n\n* **算法思想**\n\n假设N>=M（若N<M，只需令M=M%N即可），数组A中的数据为$A_0 A_1⋯A_{N−1}$，现在需要将数组A循环向右移M个位置，即将$A_{N-M}⋯A_{N−1}$移到数组的前面。\n\n我们可以将数组A中的数据分为两个部分$A_0 A_1⋯A_{N−M-1}$和$A_{N-M}⋯A_{N−1}$来看，\n\n（1）先将$A_0 A_1⋯A_{N−M-1}​$反转，得到$A_{N−M-1} ⋯A_1 A_0​$；\n\n（2）再将$A_{N-M}⋯A_{N−1}​$反转，得到$A_{N-1}⋯A_{N−M}​$\n\n（3）经过（1）和（2）后，数组A中的数据为$A_{N−M-1} ⋯A_1 A_0 A_{N-1}⋯A_{N−M}$，将数组A中的数据反转，此时数组A中的数据顺序为$A_{N-M}⋯A_{N−1} A_0 A_1⋯A_{N−M−1}$\n\n* **代码实现**\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() {\n\tint n, m;\n\tcin >> n >> m;\n\tint arr[n];\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> arr[i];\n\t}\n\tif(m > n) {\n\t\tm = m % n;\n\t}\n\tint temp = 0;\n    // 反转前n-m项\n\tfor(int i=0;i<(n-m)/2;i++) {\n\t\ttemp = arr[n-m-i-1];\n\t\tarr[n-m-i-1] = arr[i];\n\t\tarr[i] = temp;\n\t}\n    // 反转后m项\n\tfor(int i=n-m;i<n-m/2;i++) {\n\t\ttemp = arr[2*n-m-i-1];\n\t\tarr[2*n-m-i-1] = arr[i];\n\t\tarr[i] = temp;\n\t}\n    // 反转整个数组\n\tfor(int i=0;i<n/2;i++) {\n\t\ttemp = arr[n-i-1];\n\t\tarr[n-i-1] = arr[i];\n\t\tarr[i] = temp;\n\t}\n\tfor (int i = 0; i < n; i++) {\n\t\tcout << arr[i];\n\t\tif (i != n - 1) {\n\t\t\tcout << \" \";\n\t\t}\n\t}\n}\n```\n\n* **时间复杂度**\n\n三次反转操作，共执行 $3 \\times \\frac{n-m}{2}+3 \\times [n-\\frac{m}{2}-(n-m)]+3 \\times \\frac{n}{2}=3n$次赋值操作，故时间复杂度为**O(n)**","slug":"pat-basic-1008","published":1,"updated":"2019-04-01T08:21:48.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9ar5004pj1q0lvoe19n1","content":"<p>一个数组<em>A</em>中存有<em>N</em>（&gt;0）个整数，在<strong>不允许使用另外数组</strong>的前提下，将每个整数循环向右移<em>M</em>（≥0）个位置，即将<em>A</em>中的数据由（$A_0 A_1⋯A_{N−1}$）变换为（$A_{N-M}⋯A_{N−1} A_0 A_1⋯A_{N−M−1}$）（最后<em>M</em>个数循环移至最前面的<em>M</em>个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p>\n<a id=\"more\"></a>\n<h3 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式:\"></a>输入格式:</h3><p>每个输入包含一个测试用例，第1行输入<em>N</em>（1≤<em>N</em>≤100）和<em>M</em>（≥0）；第2行输入<em>N</em>个整数，之间用空格分隔。</p>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式:\"></a>输出格式:</h3><p>在一行中输出循环右移<em>M</em>位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p>\n<h3 id=\"输入样例\"><a href=\"#输入样例\" class=\"headerlink\" title=\"输入样例:\"></a>输入样例:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 2</span><br><span class=\"line\">1 2 3 4 5 6</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例\"><a href=\"#输出样例\" class=\"headerlink\" title=\"输出样例:\"></a>输出样例:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 6 1 2 3 4</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法一：直接法\"><a href=\"#解法一：直接法\" class=\"headerlink\" title=\"解法一：直接法\"></a>解法一：直接法</h3><ul>\n<li><p><strong>算法思路</strong>：每次向右移动一位，循环执行m次</p>\n</li>\n<li><p><strong>代码实现</strong></p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; arr[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//保存数组的最后一位</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = arr[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"comment\">//自后向前，循环后移一位</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = n - <span class=\"number\">2</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>时间复杂度</strong>：每次向右移动一位，需要执行n次赋值操作，这个过程循环执行m次，所以共执行<strong>nm</strong>次赋值操作，时间复杂度为<strong>O(nm)</strong></li>\n</ul>\n<h3 id=\"解法二：反转法\"><a href=\"#解法二：反转法\" class=\"headerlink\" title=\"解法二：反转法\"></a>解法二：反转法</h3><ul>\n<li><strong>算法思想</strong></li>\n</ul>\n<p>假设N&gt;=M（若N&lt;M，只需令M=M%N即可），数组A中的数据为$A_0 A_1⋯A_{N−1}$，现在需要将数组A循环向右移M个位置，即将$A_{N-M}⋯A_{N−1}$移到数组的前面。</p>\n<p>我们可以将数组A中的数据分为两个部分$A_0 A_1⋯A_{N−M-1}$和$A_{N-M}⋯A_{N−1}$来看，</p>\n<p>（1）先将$A_0 A_1⋯A_{N−M-1}​$反转，得到$A_{N−M-1} ⋯A_1 A_0​$；</p>\n<p>（2）再将$A_{N-M}⋯A_{N−1}​$反转，得到$A_{N-1}⋯A_{N−M}​$</p>\n<p>（3）经过（1）和（2）后，数组A中的数据为$A_{N−M-1} ⋯A_1 A_0 A_{N-1}⋯A_{N−M}$，将数组A中的数据反转，此时数组A中的数据顺序为$A_{N-M}⋯A_{N−1} A_0 A_1⋯A_{N−M−1}$</p>\n<ul>\n<li><strong>代码实现</strong></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; arr[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(m &gt; n) &#123;</span><br><span class=\"line\">\t\tm = m % n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 反转前n-m项</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;(n-m)/<span class=\"number\">2</span>;i++) &#123;</span><br><span class=\"line\">\t\ttemp = arr[n-m-i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\tarr[n-m-i<span class=\"number\">-1</span>] = arr[i];</span><br><span class=\"line\">\t\tarr[i] = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 反转后m项</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=n-m;i&lt;n-m/<span class=\"number\">2</span>;i++) &#123;</span><br><span class=\"line\">\t\ttemp = arr[<span class=\"number\">2</span>*n-m-i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\tarr[<span class=\"number\">2</span>*n-m-i<span class=\"number\">-1</span>] = arr[i];</span><br><span class=\"line\">\t\tarr[i] = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 反转整个数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n/<span class=\"number\">2</span>;i++) &#123;</span><br><span class=\"line\">\t\ttemp = arr[n-i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\tarr[n-i<span class=\"number\">-1</span>] = arr[i];</span><br><span class=\"line\">\t\tarr[i] = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; arr[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i != n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>时间复杂度</strong></li>\n</ul>\n<p>三次反转操作，共执行 $3 \\times \\frac{n-m}{2}+3 \\times [n-\\frac{m}{2}-(n-m)]+3 \\times \\frac{n}{2}=3n$次赋值操作，故时间复杂度为<strong>O(n)</strong></p>\n","site":{"data":{}},"excerpt":"<p>一个数组<em>A</em>中存有<em>N</em>（&gt;0）个整数，在<strong>不允许使用另外数组</strong>的前提下，将每个整数循环向右移<em>M</em>（≥0）个位置，即将<em>A</em>中的数据由（$A_0 A_1⋯A_{N−1}$）变换为（$A_{N-M}⋯A_{N−1} A_0 A_1⋯A_{N−M−1}$）（最后<em>M</em>个数循环移至最前面的<em>M</em>个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p>","more":"<h3 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式:\"></a>输入格式:</h3><p>每个输入包含一个测试用例，第1行输入<em>N</em>（1≤<em>N</em>≤100）和<em>M</em>（≥0）；第2行输入<em>N</em>个整数，之间用空格分隔。</p>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式:\"></a>输出格式:</h3><p>在一行中输出循环右移<em>M</em>位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p>\n<h3 id=\"输入样例\"><a href=\"#输入样例\" class=\"headerlink\" title=\"输入样例:\"></a>输入样例:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 2</span><br><span class=\"line\">1 2 3 4 5 6</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例\"><a href=\"#输出样例\" class=\"headerlink\" title=\"输出样例:\"></a>输出样例:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 6 1 2 3 4</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法一：直接法\"><a href=\"#解法一：直接法\" class=\"headerlink\" title=\"解法一：直接法\"></a>解法一：直接法</h3><ul>\n<li><p><strong>算法思路</strong>：每次向右移动一位，循环执行m次</p>\n</li>\n<li><p><strong>代码实现</strong></p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; arr[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//保存数组的最后一位</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = arr[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"comment\">//自后向前，循环后移一位</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = n - <span class=\"number\">2</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>时间复杂度</strong>：每次向右移动一位，需要执行n次赋值操作，这个过程循环执行m次，所以共执行<strong>nm</strong>次赋值操作，时间复杂度为<strong>O(nm)</strong></li>\n</ul>\n<h3 id=\"解法二：反转法\"><a href=\"#解法二：反转法\" class=\"headerlink\" title=\"解法二：反转法\"></a>解法二：反转法</h3><ul>\n<li><strong>算法思想</strong></li>\n</ul>\n<p>假设N&gt;=M（若N&lt;M，只需令M=M%N即可），数组A中的数据为$A_0 A_1⋯A_{N−1}$，现在需要将数组A循环向右移M个位置，即将$A_{N-M}⋯A_{N−1}$移到数组的前面。</p>\n<p>我们可以将数组A中的数据分为两个部分$A_0 A_1⋯A_{N−M-1}$和$A_{N-M}⋯A_{N−1}$来看，</p>\n<p>（1）先将$A_0 A_1⋯A_{N−M-1}​$反转，得到$A_{N−M-1} ⋯A_1 A_0​$；</p>\n<p>（2）再将$A_{N-M}⋯A_{N−1}​$反转，得到$A_{N-1}⋯A_{N−M}​$</p>\n<p>（3）经过（1）和（2）后，数组A中的数据为$A_{N−M-1} ⋯A_1 A_0 A_{N-1}⋯A_{N−M}$，将数组A中的数据反转，此时数组A中的数据顺序为$A_{N-M}⋯A_{N−1} A_0 A_1⋯A_{N−M−1}$</p>\n<ul>\n<li><strong>代码实现</strong></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[n];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span> &gt;&gt; arr[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(m &gt; n) &#123;</span><br><span class=\"line\">\t\tm = m % n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 反转前n-m项</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;(n-m)/<span class=\"number\">2</span>;i++) &#123;</span><br><span class=\"line\">\t\ttemp = arr[n-m-i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\tarr[n-m-i<span class=\"number\">-1</span>] = arr[i];</span><br><span class=\"line\">\t\tarr[i] = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 反转后m项</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=n-m;i&lt;n-m/<span class=\"number\">2</span>;i++) &#123;</span><br><span class=\"line\">\t\ttemp = arr[<span class=\"number\">2</span>*n-m-i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\tarr[<span class=\"number\">2</span>*n-m-i<span class=\"number\">-1</span>] = arr[i];</span><br><span class=\"line\">\t\tarr[i] = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 反转整个数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n/<span class=\"number\">2</span>;i++) &#123;</span><br><span class=\"line\">\t\ttemp = arr[n-i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\tarr[n-i<span class=\"number\">-1</span>] = arr[i];</span><br><span class=\"line\">\t\tarr[i] = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; arr[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i != n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>时间复杂度</strong></li>\n</ul>\n<p>三次反转操作，共执行 $3 \\times \\frac{n-m}{2}+3 \\times [n-\\frac{m}{2}-(n-m)]+3 \\times \\frac{n}{2}=3n$次赋值操作，故时间复杂度为<strong>O(n)</strong></p>"},{"title":"PAT乙级 1011.A+B 和 C （15 分)","date":"2019-03-28T07:20:38.000Z","_content":"\n给定区间 [−2^31,2^31] 内的 3 个整数 *A*、*B* 和 *C*，请判断 *A*+*B* 是否大于 *C*。\n\n<!--more-->\n\n### 输入格式：\n\n输入第 1 行给出正整数 *T* (≤10)，是测试用例的个数。随后给出 *T* 组测试用例，每组占一行，顺序给出 *A*、*B* 和 *C*。整数间以空格分隔。\n\n### 输出格式：\n\n对每组测试用例，在一行中输出 `Case #X: true` 如果 *A*+*B*>*C*，否则输出 `Case #X: false`，其中 `X` 是测试用例的编号（从 1 开始）。\n\n### 输入样例：\n\n```in\n4\n1 2 3\n2 3 4\n2147483647 0 2147483646\n0 -2147483648 -2147483647\n```\n\n### 输出样例：\n\n```out\nCase #1: false\nCase #2: true\nCase #3: true\nCase #4: false\n```\n\n### 分析：\n\n本题有两点需要注意：\n\n1.给定的取值范围为 [−2^31,2^31]，因此，A+B有可能会超过int的取值范围，故A、B和C应申明为long long；\n\n2.输出时编号从1开始。\n\n```c++\n#include <cstdio>\n\nint main() {\n\tint n;\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n; i++) {\n\t\tlong long a, b, c;\n\t\tscanf(\"%d %d %d\", &a, &b, &c);\n\t\tif (a + b > c) {\n\t\t\tprintf(\"Case #%d: true\\n\", i);\n\t\t} else {\n\t\t\tprintf(\"Case #%d: false\\n\", i);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n\n","source":"_posts/pat-basic-1011.md","raw":"---\ntitle: PAT乙级 1011.A+B 和 C （15 分)\ndate: 2019-03-28 15:20:38\ntags: pat\ncategories: pat乙级\n---\n\n给定区间 [−2^31,2^31] 内的 3 个整数 *A*、*B* 和 *C*，请判断 *A*+*B* 是否大于 *C*。\n\n<!--more-->\n\n### 输入格式：\n\n输入第 1 行给出正整数 *T* (≤10)，是测试用例的个数。随后给出 *T* 组测试用例，每组占一行，顺序给出 *A*、*B* 和 *C*。整数间以空格分隔。\n\n### 输出格式：\n\n对每组测试用例，在一行中输出 `Case #X: true` 如果 *A*+*B*>*C*，否则输出 `Case #X: false`，其中 `X` 是测试用例的编号（从 1 开始）。\n\n### 输入样例：\n\n```in\n4\n1 2 3\n2 3 4\n2147483647 0 2147483646\n0 -2147483648 -2147483647\n```\n\n### 输出样例：\n\n```out\nCase #1: false\nCase #2: true\nCase #3: true\nCase #4: false\n```\n\n### 分析：\n\n本题有两点需要注意：\n\n1.给定的取值范围为 [−2^31,2^31]，因此，A+B有可能会超过int的取值范围，故A、B和C应申明为long long；\n\n2.输出时编号从1开始。\n\n```c++\n#include <cstdio>\n\nint main() {\n\tint n;\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n; i++) {\n\t\tlong long a, b, c;\n\t\tscanf(\"%d %d %d\", &a, &b, &c);\n\t\tif (a + b > c) {\n\t\t\tprintf(\"Case #%d: true\\n\", i);\n\t\t} else {\n\t\t\tprintf(\"Case #%d: false\\n\", i);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n\n","slug":"pat-basic-1011","published":1,"updated":"2019-03-28T09:13:25.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9ar7004rj1q0nlpvc6vl","content":"<p>给定区间 [−2^31,2^31] 内的 3 个整数 <em>A</em>、<em>B</em> 和 <em>C</em>，请判断 <em>A</em>+<em>B</em> 是否大于 <em>C</em>。</p>\n<a id=\"more\"></a>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第 1 行给出正整数 <em>T</em> (≤10)，是测试用例的个数。随后给出 <em>T</em> 组测试用例，每组占一行，顺序给出 <em>A</em>、<em>B</em> 和 <em>C</em>。整数间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每组测试用例，在一行中输出 <code>Case #X: true</code> 如果 <em>A</em>+<em>B</em>&gt;<em>C</em>，否则输出 <code>Case #X: false</code>，其中 <code>X</code> 是测试用例的编号（从 1 开始）。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">1 2 3</span><br><span class=\"line\">2 3 4</span><br><span class=\"line\">2147483647 0 2147483646</span><br><span class=\"line\">0 -2147483648 -2147483647</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Case #1: false</span><br><span class=\"line\">Case #2: true</span><br><span class=\"line\">Case #3: true</span><br><span class=\"line\">Case #4: false</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><p>本题有两点需要注意：</p>\n<p>1.给定的取值范围为 [−2^31,2^31]，因此，A+B有可能会超过int的取值范围，故A、B和C应申明为long long；</p>\n<p>2.输出时编号从1开始。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, b, c;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d %d\"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a + b &gt; c) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Case #%d: true\\n\"</span>, i);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Case #%d: false\\n\"</span>, i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>给定区间 [−2^31,2^31] 内的 3 个整数 <em>A</em>、<em>B</em> 和 <em>C</em>，请判断 <em>A</em>+<em>B</em> 是否大于 <em>C</em>。</p>","more":"<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第 1 行给出正整数 <em>T</em> (≤10)，是测试用例的个数。随后给出 <em>T</em> 组测试用例，每组占一行，顺序给出 <em>A</em>、<em>B</em> 和 <em>C</em>。整数间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对每组测试用例，在一行中输出 <code>Case #X: true</code> 如果 <em>A</em>+<em>B</em>&gt;<em>C</em>，否则输出 <code>Case #X: false</code>，其中 <code>X</code> 是测试用例的编号（从 1 开始）。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">1 2 3</span><br><span class=\"line\">2 3 4</span><br><span class=\"line\">2147483647 0 2147483646</span><br><span class=\"line\">0 -2147483648 -2147483647</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Case #1: false</span><br><span class=\"line\">Case #2: true</span><br><span class=\"line\">Case #3: true</span><br><span class=\"line\">Case #4: false</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><p>本题有两点需要注意：</p>\n<p>1.给定的取值范围为 [−2^31,2^31]，因此，A+B有可能会超过int的取值范围，故A、B和C应申明为long long；</p>\n<p>2.输出时编号从1开始。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, b, c;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d %d\"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (a + b &gt; c) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Case #%d: true\\n\"</span>, i);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Case #%d: false\\n\"</span>, i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"PAT乙级 1012.数字分类 （20 分)","date":"2019-04-01T08:12:50.000Z","_content":"\n给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：\n\n- *A*1 = 能被 5 整除的数字中所有偶数的和；\n- *A*2 = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 *n*1−*n*2+*n*3−*n*4⋯；\n- *A*3 = 被 5 除后余 2 的数字的个数；\n- *A*4 = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；\n- *A*5 = 被 5 除后余 4 的数字中最大数字。\n\n<!--more-->\n\n### 输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 *N*，随后给出 *N* 个不超过 1000 的待分类的正整数。数字间以空格分隔。\n\n### 输出格式：\n\n对给定的 *N* 个正整数，按题目要求计算 *A*1~*A*5 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。\n\n若其中某一类数字不存在，则在相应位置输出 `N`。\n\n### 输入样例 1：\n\n```in\n13 1 2 3 4 5 6 7 8 9 10 20 16 18\n```\n\n### 输出样例 1：\n\n```out\n30 11 2 9.7 9\n```\n\n### 输入样例 2：\n\n```in\n8 1 2 4 5 6 7 9 16\n```\n\n### 输出样例 2：\n\n```out\nN 11 2 N 9\n```\n\n### 分析：\n\n按照题目要求，对不同数字执行不同的计算即可。\n\n以下两点需要注意：\n\n1.输出时行末不得有多余空格；\n\n2.若其中某一类数字不存在，则在相应位置输出 `N`。\n\n```c++\n#include <cstdio>\n#include <cmath>\nint main() {\n\tint n, a1, a2, a3, a5, a2Index, a4Count;\n\ta1 = a2 = a3 = a5 = a2Index = a4Count = 0;\n\tdouble a4 = 0;\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++) {\n\t\tint x;\n\t\tscanf(\"%d\", &x);\n\t\tif (x % 10 == 0) {\n\t\t\ta1 += x;\n\t\t} else if (x % 5 == 1) {\n\t\t\ta2 += pow(-1, a2Index++) * x;\n\t\t} else if (x % 5 == 2) {\n\t\t\ta3 += 1;\n\t\t} else if (x % 5 == 3) {\n\t\t\ta4 += x;\n\t\t\ta4Count++;\n\t\t} else if (x % 5 == 4) {\n\t\t\tif (x > a5) {\n\t\t\t\ta5 = x;\n\t\t\t}\n\t\t}\n\t}\n\tif (!a1) {\n\t\tprintf(\"N \");\n\t} else {\n\t\tprintf(\"%d \", a1);\n\t}\n\tif (!a2Index) {\n\t\tprintf(\"N \");\n\t} else {\n\t\tprintf(\"%d \", a2);\n\t}\n\tif (!a3) {\n\t\tprintf(\"N \");\n\t} else {\n\t\tprintf(\"%d \", a3);\n\t}\n\tif (!a4Count) {\n\t\tprintf(\"N \");\n\t} else {\n\t\tprintf(\"%.1f \", a4 / a4Count);\n\t}\n\tif (!a5) {\n\t\tprintf(\"N\");\n\t} else {\n\t\tprintf(\"%d\", a5);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n\n","source":"_posts/pat-basic-1012.md","raw":"---\ntitle: PAT乙级 1012.数字分类 （20 分)\ndate: 2019-04-01 16:12:50\ntags: pat\ncategories: pat乙级\n---\n\n给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：\n\n- *A*1 = 能被 5 整除的数字中所有偶数的和；\n- *A*2 = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 *n*1−*n*2+*n*3−*n*4⋯；\n- *A*3 = 被 5 除后余 2 的数字的个数；\n- *A*4 = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；\n- *A*5 = 被 5 除后余 4 的数字中最大数字。\n\n<!--more-->\n\n### 输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 *N*，随后给出 *N* 个不超过 1000 的待分类的正整数。数字间以空格分隔。\n\n### 输出格式：\n\n对给定的 *N* 个正整数，按题目要求计算 *A*1~*A*5 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。\n\n若其中某一类数字不存在，则在相应位置输出 `N`。\n\n### 输入样例 1：\n\n```in\n13 1 2 3 4 5 6 7 8 9 10 20 16 18\n```\n\n### 输出样例 1：\n\n```out\n30 11 2 9.7 9\n```\n\n### 输入样例 2：\n\n```in\n8 1 2 4 5 6 7 9 16\n```\n\n### 输出样例 2：\n\n```out\nN 11 2 N 9\n```\n\n### 分析：\n\n按照题目要求，对不同数字执行不同的计算即可。\n\n以下两点需要注意：\n\n1.输出时行末不得有多余空格；\n\n2.若其中某一类数字不存在，则在相应位置输出 `N`。\n\n```c++\n#include <cstdio>\n#include <cmath>\nint main() {\n\tint n, a1, a2, a3, a5, a2Index, a4Count;\n\ta1 = a2 = a3 = a5 = a2Index = a4Count = 0;\n\tdouble a4 = 0;\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; i++) {\n\t\tint x;\n\t\tscanf(\"%d\", &x);\n\t\tif (x % 10 == 0) {\n\t\t\ta1 += x;\n\t\t} else if (x % 5 == 1) {\n\t\t\ta2 += pow(-1, a2Index++) * x;\n\t\t} else if (x % 5 == 2) {\n\t\t\ta3 += 1;\n\t\t} else if (x % 5 == 3) {\n\t\t\ta4 += x;\n\t\t\ta4Count++;\n\t\t} else if (x % 5 == 4) {\n\t\t\tif (x > a5) {\n\t\t\t\ta5 = x;\n\t\t\t}\n\t\t}\n\t}\n\tif (!a1) {\n\t\tprintf(\"N \");\n\t} else {\n\t\tprintf(\"%d \", a1);\n\t}\n\tif (!a2Index) {\n\t\tprintf(\"N \");\n\t} else {\n\t\tprintf(\"%d \", a2);\n\t}\n\tif (!a3) {\n\t\tprintf(\"N \");\n\t} else {\n\t\tprintf(\"%d \", a3);\n\t}\n\tif (!a4Count) {\n\t\tprintf(\"N \");\n\t} else {\n\t\tprintf(\"%.1f \", a4 / a4Count);\n\t}\n\tif (!a5) {\n\t\tprintf(\"N\");\n\t} else {\n\t\tprintf(\"%d\", a5);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n\n","slug":"pat-basic-1012","published":1,"updated":"2019-04-01T08:22:10.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9ar8004vj1q0j2csvc2f","content":"<p>给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：</p>\n<ul>\n<li><em>A</em>1 = 能被 5 整除的数字中所有偶数的和；</li>\n<li><em>A</em>2 = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 <em>n</em>1−<em>n</em>2+<em>n</em>3−<em>n</em>4⋯；</li>\n<li><em>A</em>3 = 被 5 除后余 2 的数字的个数；</li>\n<li><em>A</em>4 = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；</li>\n<li><em>A</em>5 = 被 5 除后余 4 的数字中最大数字。</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 <em>N</em>，随后给出 <em>N</em> 个不超过 1000 的待分类的正整数。数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对给定的 <em>N</em> 个正整数，按题目要求计算 <em>A</em>1~<em>A</em>5 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。</p>\n<p>若其中某一类数字不存在，则在相应位置输出 <code>N</code>。</p>\n<h3 id=\"输入样例-1：\"><a href=\"#输入样例-1：\" class=\"headerlink\" title=\"输入样例 1：\"></a>输入样例 1：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">13 1 2 3 4 5 6 7 8 9 10 20 16 18</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例-1：\"><a href=\"#输出样例-1：\" class=\"headerlink\" title=\"输出样例 1：\"></a>输出样例 1：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30 11 2 9.7 9</span><br></pre></td></tr></table></figure>\n<h3 id=\"输入样例-2：\"><a href=\"#输入样例-2：\" class=\"headerlink\" title=\"输入样例 2：\"></a>输入样例 2：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8 1 2 4 5 6 7 9 16</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例-2：\"><a href=\"#输出样例-2：\" class=\"headerlink\" title=\"输出样例 2：\"></a>输出样例 2：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">N 11 2 N 9</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><p>按照题目要求，对不同数字执行不同的计算即可。</p>\n<p>以下两点需要注意：</p>\n<p>1.输出时行末不得有多余空格；</p>\n<p>2.若其中某一类数字不存在，则在相应位置输出 <code>N</code>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, a1, a2, a3, a5, a2Index, a4Count;</span><br><span class=\"line\">\ta1 = a2 = a3 = a5 = a2Index = a4Count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> a4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x % <span class=\"number\">10</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\ta1 += x;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x % <span class=\"number\">5</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\ta2 += <span class=\"built_in\">pow</span>(<span class=\"number\">-1</span>, a2Index++) * x;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x % <span class=\"number\">5</span> == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\ta3 += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x % <span class=\"number\">5</span> == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t\ta4 += x;</span><br><span class=\"line\">\t\t\ta4Count++;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x % <span class=\"number\">5</span> == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &gt; a5) &#123;</span><br><span class=\"line\">\t\t\t\ta5 = x;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!a1) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"N \"</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, a1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!a2Index) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"N \"</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, a2);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!a3) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"N \"</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, a3);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!a4Count) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"N \"</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%.1f \"</span>, a4 / a4Count);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!a5) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"N\"</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, a5);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：</p>\n<ul>\n<li><em>A</em>1 = 能被 5 整除的数字中所有偶数的和；</li>\n<li><em>A</em>2 = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 <em>n</em>1−<em>n</em>2+<em>n</em>3−<em>n</em>4⋯；</li>\n<li><em>A</em>3 = 被 5 除后余 2 的数字的个数；</li>\n<li><em>A</em>4 = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；</li>\n<li><em>A</em>5 = 被 5 除后余 4 的数字中最大数字。</li>\n</ul>","more":"<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 <em>N</em>，随后给出 <em>N</em> 个不超过 1000 的待分类的正整数。数字间以空格分隔。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>对给定的 <em>N</em> 个正整数，按题目要求计算 <em>A</em>1~<em>A</em>5 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。</p>\n<p>若其中某一类数字不存在，则在相应位置输出 <code>N</code>。</p>\n<h3 id=\"输入样例-1：\"><a href=\"#输入样例-1：\" class=\"headerlink\" title=\"输入样例 1：\"></a>输入样例 1：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">13 1 2 3 4 5 6 7 8 9 10 20 16 18</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例-1：\"><a href=\"#输出样例-1：\" class=\"headerlink\" title=\"输出样例 1：\"></a>输出样例 1：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">30 11 2 9.7 9</span><br></pre></td></tr></table></figure>\n<h3 id=\"输入样例-2：\"><a href=\"#输入样例-2：\" class=\"headerlink\" title=\"输入样例 2：\"></a>输入样例 2：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8 1 2 4 5 6 7 9 16</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例-2：\"><a href=\"#输出样例-2：\" class=\"headerlink\" title=\"输出样例 2：\"></a>输出样例 2：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">N 11 2 N 9</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><p>按照题目要求，对不同数字执行不同的计算即可。</p>\n<p>以下两点需要注意：</p>\n<p>1.输出时行末不得有多余空格；</p>\n<p>2.若其中某一类数字不存在，则在相应位置输出 <code>N</code>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, a1, a2, a3, a5, a2Index, a4Count;</span><br><span class=\"line\">\ta1 = a2 = a3 = a5 = a2Index = a4Count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> a4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x % <span class=\"number\">10</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\ta1 += x;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x % <span class=\"number\">5</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\ta2 += <span class=\"built_in\">pow</span>(<span class=\"number\">-1</span>, a2Index++) * x;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x % <span class=\"number\">5</span> == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\ta3 += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x % <span class=\"number\">5</span> == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t\ta4 += x;</span><br><span class=\"line\">\t\t\ta4Count++;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x % <span class=\"number\">5</span> == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (x &gt; a5) &#123;</span><br><span class=\"line\">\t\t\t\ta5 = x;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!a1) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"N \"</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, a1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!a2Index) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"N \"</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, a2);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!a3) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"N \"</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, a3);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!a4Count) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"N \"</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%.1f \"</span>, a4 / a4Count);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!a5) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"N\"</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, a5);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"PAT乙级 1016.部分A+B （15 分)","date":"2019-03-28T07:43:15.000Z","mathjax":true,"_content":"\n正整数 *A* 的“$D_A​$（为 1 位整数）部分”定义为由 *A* 中所有 $D_A​$ 组成的新整数 $P_A​$。例如：给定 *A*=3862767，$D_A​$=6，则 *A*的“6 部分”$P_A​$是66，因为 *A* 中有 2 个 6。\n\n现给定 *A*、$D_A$、*B*、$D_A$，请编写程序计算 $P_A+P_B$。\n\n<!--more-->\n\n### 输入格式：\n\n输入在一行中依次给出 *A*、$D_A​$、*B*、$D_B​$，中间以空格分隔，其中 0<*A*,*B*<$10^{10}​$。\n\n### 输出格式：\n\n在一行中输出$P_A+P_B​$ 的值。\n\n### 输入样例 1：\n\n```in\n3862767 6 13530293 3\n```\n\n### 输出样例 1：\n\n```out\n399\n```\n\n### 输入样例 2：\n\n```in\n3862767 1 13530293 8\n```\n\n### 输出样例 2：\n\n```out\n0\n```\n\n### 分析：\n\n首先以字符数组（或者字符串）的形式输入A和B，\n\n然后遍历A和B中的每一个字符，\n\n通过减去'0'得到字符的数字形式，\n\n接着，判断其是否等于$D_A$、$D_B$，若等于，则进行进位累加操作。\n\n(1)若从前往后遍历字符数组（或字符串），则累加语句为：\n\npa = 10 \\* pa + da；\n\n(2)若从后往前遍历字符数组（或字符串），则累加语句为\n\npa += da \\* carray; \n\ncarry \\*= 10;（carry表示进位，初值为1）。\n\n循环结束后，得到$P_A$和$P_B​$ 。\n\n需要注意的是$10^{10}$超过了int的取值范围，故应使用long long 申明$P_A$和$P_B$。\n\n```c++\n#include <cstdio>\n#include <cstring>\n\nlong long getP(char a[], int da) {\n\tlong long pa = 0;\n\tlong long carry = 1;//进位\n\tfor (int i = strlen(a) - 1; i >= 0; i--) {\n\t\tif ((a[i] - '0') == da) {\n\t\t\tpa += da * carry;\n\t\t\tcarry *= 10;\n\t\t}\n\t}\n\treturn pa;\n}\n\nint main() {\n\tchar a[10], b[10];\n\tint da, db;\n\tscanf(\"%s %d %s %d\", a, &da, b, &db);\n\tprintf(\"%lld\\n\", getP(a, da) + getP(b, db));\n\treturn 0;\n}\n```\n\n","source":"_posts/pat-basic-1016.md","raw":"---\ntitle: PAT乙级 1016.部分A+B （15 分)\ndate: 2019-03-28 15:43:15\ntags: pat\ncategories: pat乙级\nmathjax: true\n---\n\n正整数 *A* 的“$D_A​$（为 1 位整数）部分”定义为由 *A* 中所有 $D_A​$ 组成的新整数 $P_A​$。例如：给定 *A*=3862767，$D_A​$=6，则 *A*的“6 部分”$P_A​$是66，因为 *A* 中有 2 个 6。\n\n现给定 *A*、$D_A$、*B*、$D_A$，请编写程序计算 $P_A+P_B$。\n\n<!--more-->\n\n### 输入格式：\n\n输入在一行中依次给出 *A*、$D_A​$、*B*、$D_B​$，中间以空格分隔，其中 0<*A*,*B*<$10^{10}​$。\n\n### 输出格式：\n\n在一行中输出$P_A+P_B​$ 的值。\n\n### 输入样例 1：\n\n```in\n3862767 6 13530293 3\n```\n\n### 输出样例 1：\n\n```out\n399\n```\n\n### 输入样例 2：\n\n```in\n3862767 1 13530293 8\n```\n\n### 输出样例 2：\n\n```out\n0\n```\n\n### 分析：\n\n首先以字符数组（或者字符串）的形式输入A和B，\n\n然后遍历A和B中的每一个字符，\n\n通过减去'0'得到字符的数字形式，\n\n接着，判断其是否等于$D_A$、$D_B$，若等于，则进行进位累加操作。\n\n(1)若从前往后遍历字符数组（或字符串），则累加语句为：\n\npa = 10 \\* pa + da；\n\n(2)若从后往前遍历字符数组（或字符串），则累加语句为\n\npa += da \\* carray; \n\ncarry \\*= 10;（carry表示进位，初值为1）。\n\n循环结束后，得到$P_A$和$P_B​$ 。\n\n需要注意的是$10^{10}$超过了int的取值范围，故应使用long long 申明$P_A$和$P_B$。\n\n```c++\n#include <cstdio>\n#include <cstring>\n\nlong long getP(char a[], int da) {\n\tlong long pa = 0;\n\tlong long carry = 1;//进位\n\tfor (int i = strlen(a) - 1; i >= 0; i--) {\n\t\tif ((a[i] - '0') == da) {\n\t\t\tpa += da * carry;\n\t\t\tcarry *= 10;\n\t\t}\n\t}\n\treturn pa;\n}\n\nint main() {\n\tchar a[10], b[10];\n\tint da, db;\n\tscanf(\"%s %d %s %d\", a, &da, b, &db);\n\tprintf(\"%lld\\n\", getP(a, da) + getP(b, db));\n\treturn 0;\n}\n```\n\n","slug":"pat-basic-1016","published":1,"updated":"2019-03-28T09:12:36.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9ara004xj1q0eeqcqpmx","content":"<p>正整数 <em>A</em> 的“$D_A​$（为 1 位整数）部分”定义为由 <em>A</em> 中所有 $D_A​$ 组成的新整数 $P_A​$。例如：给定 <em>A</em>=3862767，$D_A​$=6，则 <em>A</em>的“6 部分”$P_A​$是66，因为 <em>A</em> 中有 2 个 6。</p>\n<p>现给定 <em>A</em>、$D_A$、<em>B</em>、$D_A$，请编写程序计算 $P_A+P_B$。</p>\n<a id=\"more\"></a>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在一行中依次给出 <em>A</em>、$D_A​$、<em>B</em>、$D_B​$，中间以空格分隔，其中 0&lt;<em>A</em>,<em>B</em>&lt;$10^{10}​$。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在一行中输出$P_A+P_B​$ 的值。</p>\n<h3 id=\"输入样例-1：\"><a href=\"#输入样例-1：\" class=\"headerlink\" title=\"输入样例 1：\"></a>输入样例 1：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3862767 6 13530293 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例-1：\"><a href=\"#输出样例-1：\" class=\"headerlink\" title=\"输出样例 1：\"></a>输出样例 1：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">399</span><br></pre></td></tr></table></figure>\n<h3 id=\"输入样例-2：\"><a href=\"#输入样例-2：\" class=\"headerlink\" title=\"输入样例 2：\"></a>输入样例 2：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3862767 1 13530293 8</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例-2：\"><a href=\"#输出样例-2：\" class=\"headerlink\" title=\"输出样例 2：\"></a>输出样例 2：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><p>首先以字符数组（或者字符串）的形式输入A和B，</p>\n<p>然后遍历A和B中的每一个字符，</p>\n<p>通过减去’0’得到字符的数字形式，</p>\n<p>接着，判断其是否等于$D_A$、$D_B$，若等于，则进行进位累加操作。</p>\n<p>(1)若从前往后遍历字符数组（或字符串），则累加语句为：</p>\n<p>pa = 10 * pa + da；</p>\n<p>(2)若从后往前遍历字符数组（或字符串），则累加语句为</p>\n<p>pa += da * carray; </p>\n<p>carry *= 10;（carry表示进位，初值为1）。</p>\n<p>循环结束后，得到$P_A$和$P_B​$ 。</p>\n<p>需要注意的是$10^{10}$超过了int的取值范围，故应使用long long 申明$P_A$和$P_B$。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">getP</span><span class=\"params\">(<span class=\"keyword\">char</span> a[], <span class=\"keyword\">int</span> da)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> pa = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> carry = <span class=\"number\">1</span>;<span class=\"comment\">//进位</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"built_in\">strlen</span>(a) - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((a[i] - <span class=\"string\">'0'</span>) == da) &#123;</span><br><span class=\"line\">\t\t\tpa += da * carry;</span><br><span class=\"line\">\t\t\tcarry *= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pa;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> a[<span class=\"number\">10</span>], b[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> da, db;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s %d %s %d\"</span>, a, &amp;da, b, &amp;db);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, getP(a, da) + getP(b, db));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>正整数 <em>A</em> 的“$D_A​$（为 1 位整数）部分”定义为由 <em>A</em> 中所有 $D_A​$ 组成的新整数 $P_A​$。例如：给定 <em>A</em>=3862767，$D_A​$=6，则 <em>A</em>的“6 部分”$P_A​$是66，因为 <em>A</em> 中有 2 个 6。</p>\n<p>现给定 <em>A</em>、$D_A$、<em>B</em>、$D_A$，请编写程序计算 $P_A+P_B$。</p>","more":"<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在一行中依次给出 <em>A</em>、$D_A​$、<em>B</em>、$D_B​$，中间以空格分隔，其中 0&lt;<em>A</em>,<em>B</em>&lt;$10^{10}​$。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在一行中输出$P_A+P_B​$ 的值。</p>\n<h3 id=\"输入样例-1：\"><a href=\"#输入样例-1：\" class=\"headerlink\" title=\"输入样例 1：\"></a>输入样例 1：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3862767 6 13530293 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例-1：\"><a href=\"#输出样例-1：\" class=\"headerlink\" title=\"输出样例 1：\"></a>输出样例 1：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">399</span><br></pre></td></tr></table></figure>\n<h3 id=\"输入样例-2：\"><a href=\"#输入样例-2：\" class=\"headerlink\" title=\"输入样例 2：\"></a>输入样例 2：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3862767 1 13530293 8</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例-2：\"><a href=\"#输出样例-2：\" class=\"headerlink\" title=\"输出样例 2：\"></a>输出样例 2：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><p>首先以字符数组（或者字符串）的形式输入A和B，</p>\n<p>然后遍历A和B中的每一个字符，</p>\n<p>通过减去’0’得到字符的数字形式，</p>\n<p>接着，判断其是否等于$D_A$、$D_B$，若等于，则进行进位累加操作。</p>\n<p>(1)若从前往后遍历字符数组（或字符串），则累加语句为：</p>\n<p>pa = 10 * pa + da；</p>\n<p>(2)若从后往前遍历字符数组（或字符串），则累加语句为</p>\n<p>pa += da * carray; </p>\n<p>carry *= 10;（carry表示进位，初值为1）。</p>\n<p>循环结束后，得到$P_A$和$P_B​$ 。</p>\n<p>需要注意的是$10^{10}$超过了int的取值范围，故应使用long long 申明$P_A$和$P_B$。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">getP</span><span class=\"params\">(<span class=\"keyword\">char</span> a[], <span class=\"keyword\">int</span> da)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> pa = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> carry = <span class=\"number\">1</span>;<span class=\"comment\">//进位</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"built_in\">strlen</span>(a) - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((a[i] - <span class=\"string\">'0'</span>) == da) &#123;</span><br><span class=\"line\">\t\t\tpa += da * carry;</span><br><span class=\"line\">\t\t\tcarry *= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pa;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> a[<span class=\"number\">10</span>], b[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> da, db;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s %d %s %d\"</span>, a, &amp;da, b, &amp;db);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>, getP(a, da) + getP(b, db));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"PAt乙级 1018.锤子剪刀布 （20 分)","date":"2019-04-01T08:42:25.000Z","_content":"\n大家应该都会玩“锤子剪刀布”的游戏：两人同时给出手势，胜负规则如图所示：\n\n![FigCJB.jpg](https://images.ptausercontent.com/724da598-b37f-4f1f-99b4-71459654ce3a.jpg)\n\n现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。\n\n<!--more-->\n\n### 输入格式：\n\n输入第 1 行给出正整数 *N*（≤10^5），即双方交锋的次数。随后 *N* 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。`C` 代表“锤子”、`J` 代表“剪刀”、`B` 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。\n\n### 输出格式：\n\n输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。\n\n### 输入样例：\n\n```in\n10\nC J\nJ B\nC B\nB B\nB C\nC C\nC B\nJ B\nB C\nJ J\n```\n\n### 输出样例：\n\n```out\n5 3 2\n2 3 5\nB B\n```\n\n### 分析：\n\n设win、draw和defeat分别表示甲赢、平和输的次数，数组aCount[3]和bCount[3]分别表示甲、乙每个手势获胜的次数（下标0表示`B`，1表示`C`，2表示`J`）。\n\n每次交锋，按照结果赢、平和输，分别改变win、draw和defeat，结果为win时，甲相应手势获胜次数加1；结果为defeat（乙win）时，乙相应手势获胜次数加1。\n\n最后按照题目要求输出即可。\n\n```c++\n#include <cstdio>\n\nchar getMaxGesture(int wins[]) {\n\tint max, maxIndex;\n\tmax = maxIndex = 0;\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (wins[i] > max) {\n\t\t\tmax = wins[i];\n\t\t\tmaxIndex = i;\n\t\t}\n\t}\n\tif (maxIndex == 0) {\n\t\treturn 'B';\n\t}\n\tif (maxIndex == 1) {\n\t\treturn 'C';\n\t}\n\treturn 'J';\n}\n\nint main() {\n\tint n, win, draw, defeat;\n\twin = draw = defeat = 0;\n\tint aCount[3] = { 0 }, bCount[3] = { 0 }; //0-C,1-J,2-B\n\tscanf(\"%d\", &n);\n\twhile (n--) {\n\t\tchar a, b;\n\t\tscanf(\" %c %c\", &a, &b);\n\t\tif ((a == 'C' && b == 'J') || (a == 'J' && b == 'B')\n\t\t\t\t|| (a == 'B' && b == 'C')) {\n\t\t\twin++;\n\t\t\tif (a == 'B') {\n\t\t\t\taCount[0]++;\n\t\t\t} else if (a == 'C') {\n\t\t\t\taCount[1]++;\n\t\t\t} else {\n\t\t\t\taCount[2]++;\n\t\t\t}\n\t\t} else if (a == b) {\n\t\t\tdraw++;\n\t\t} else {\n\t\t\tdefeat++;\n\t\t\tif (b == 'B') {\n\t\t\t\tbCount[0]++;\n\t\t\t} else if (b == 'C') {\n\t\t\t\tbCount[1]++;\n\t\t\t} else {\n\t\t\t\tbCount[2]++;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d %d %d\\n\", win, draw, defeat);\n\tprintf(\"%d %d %d\\n\", defeat, draw, win);\n\tprintf(\"%c %c\\n\", getMaxGesture(aCount), getMaxGesture(bCount));\n\treturn 0;\n}\n```\n\n","source":"_posts/pat-basic-1018.md","raw":"---\ntitle: PAt乙级 1018.锤子剪刀布 （20 分)\ndate: 2019-04-01 16:42:25\ntags: pat\ncategories: pat乙级\n---\n\n大家应该都会玩“锤子剪刀布”的游戏：两人同时给出手势，胜负规则如图所示：\n\n![FigCJB.jpg](https://images.ptausercontent.com/724da598-b37f-4f1f-99b4-71459654ce3a.jpg)\n\n现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。\n\n<!--more-->\n\n### 输入格式：\n\n输入第 1 行给出正整数 *N*（≤10^5），即双方交锋的次数。随后 *N* 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。`C` 代表“锤子”、`J` 代表“剪刀”、`B` 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。\n\n### 输出格式：\n\n输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。\n\n### 输入样例：\n\n```in\n10\nC J\nJ B\nC B\nB B\nB C\nC C\nC B\nJ B\nB C\nJ J\n```\n\n### 输出样例：\n\n```out\n5 3 2\n2 3 5\nB B\n```\n\n### 分析：\n\n设win、draw和defeat分别表示甲赢、平和输的次数，数组aCount[3]和bCount[3]分别表示甲、乙每个手势获胜的次数（下标0表示`B`，1表示`C`，2表示`J`）。\n\n每次交锋，按照结果赢、平和输，分别改变win、draw和defeat，结果为win时，甲相应手势获胜次数加1；结果为defeat（乙win）时，乙相应手势获胜次数加1。\n\n最后按照题目要求输出即可。\n\n```c++\n#include <cstdio>\n\nchar getMaxGesture(int wins[]) {\n\tint max, maxIndex;\n\tmax = maxIndex = 0;\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (wins[i] > max) {\n\t\t\tmax = wins[i];\n\t\t\tmaxIndex = i;\n\t\t}\n\t}\n\tif (maxIndex == 0) {\n\t\treturn 'B';\n\t}\n\tif (maxIndex == 1) {\n\t\treturn 'C';\n\t}\n\treturn 'J';\n}\n\nint main() {\n\tint n, win, draw, defeat;\n\twin = draw = defeat = 0;\n\tint aCount[3] = { 0 }, bCount[3] = { 0 }; //0-C,1-J,2-B\n\tscanf(\"%d\", &n);\n\twhile (n--) {\n\t\tchar a, b;\n\t\tscanf(\" %c %c\", &a, &b);\n\t\tif ((a == 'C' && b == 'J') || (a == 'J' && b == 'B')\n\t\t\t\t|| (a == 'B' && b == 'C')) {\n\t\t\twin++;\n\t\t\tif (a == 'B') {\n\t\t\t\taCount[0]++;\n\t\t\t} else if (a == 'C') {\n\t\t\t\taCount[1]++;\n\t\t\t} else {\n\t\t\t\taCount[2]++;\n\t\t\t}\n\t\t} else if (a == b) {\n\t\t\tdraw++;\n\t\t} else {\n\t\t\tdefeat++;\n\t\t\tif (b == 'B') {\n\t\t\t\tbCount[0]++;\n\t\t\t} else if (b == 'C') {\n\t\t\t\tbCount[1]++;\n\t\t\t} else {\n\t\t\t\tbCount[2]++;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d %d %d\\n\", win, draw, defeat);\n\tprintf(\"%d %d %d\\n\", defeat, draw, win);\n\tprintf(\"%c %c\\n\", getMaxGesture(aCount), getMaxGesture(bCount));\n\treturn 0;\n}\n```\n\n","slug":"pat-basic-1018","published":1,"updated":"2019-04-03T10:09:39.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9arb0051j1q0gt7unuqw","content":"<p>大家应该都会玩“锤子剪刀布”的游戏：两人同时给出手势，胜负规则如图所示：</p>\n<p><img src=\"https://images.ptausercontent.com/724da598-b37f-4f1f-99b4-71459654ce3a.jpg\" alt=\"FigCJB.jpg\"></p>\n<p>现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。</p>\n<a id=\"more\"></a>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第 1 行给出正整数 <em>N</em>（≤10^5），即双方交锋的次数。随后 <em>N</em> 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。<code>C</code> 代表“锤子”、<code>J</code> 代表“剪刀”、<code>B</code> 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">C J</span><br><span class=\"line\">J B</span><br><span class=\"line\">C B</span><br><span class=\"line\">B B</span><br><span class=\"line\">B C</span><br><span class=\"line\">C C</span><br><span class=\"line\">C B</span><br><span class=\"line\">J B</span><br><span class=\"line\">B C</span><br><span class=\"line\">J J</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 3 2</span><br><span class=\"line\">2 3 5</span><br><span class=\"line\">B B</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><p>设win、draw和defeat分别表示甲赢、平和输的次数，数组aCount[3]和bCount[3]分别表示甲、乙每个手势获胜的次数（下标0表示<code>B</code>，1表示<code>C</code>，2表示<code>J</code>）。</p>\n<p>每次交锋，按照结果赢、平和输，分别改变win、draw和defeat，结果为win时，甲相应手势获胜次数加1；结果为defeat（乙win）时，乙相应手势获胜次数加1。</p>\n<p>最后按照题目要求输出即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">getMaxGesture</span><span class=\"params\">(<span class=\"keyword\">int</span> wins[])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> max, maxIndex;</span><br><span class=\"line\">\tmax = maxIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (wins[i] &gt; max) &#123;</span><br><span class=\"line\">\t\t\tmax = wins[i];</span><br><span class=\"line\">\t\t\tmaxIndex = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (maxIndex == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">'B'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (maxIndex == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">'C'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">'J'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, win, draw, defeat;</span><br><span class=\"line\">\twin = draw = defeat = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> aCount[<span class=\"number\">3</span>] = &#123; <span class=\"number\">0</span> &#125;, bCount[<span class=\"number\">3</span>] = &#123; <span class=\"number\">0</span> &#125;; <span class=\"comment\">//0-C,1-J,2-B</span></span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> a, b;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\" %c %c\"</span>, &amp;a, &amp;b);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((a == <span class=\"string\">'C'</span> &amp;&amp; b == <span class=\"string\">'J'</span>) || (a == <span class=\"string\">'J'</span> &amp;&amp; b == <span class=\"string\">'B'</span>)</span><br><span class=\"line\">\t\t\t\t|| (a == <span class=\"string\">'B'</span> &amp;&amp; b == <span class=\"string\">'C'</span>)) &#123;</span><br><span class=\"line\">\t\t\twin++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a == <span class=\"string\">'B'</span>) &#123;</span><br><span class=\"line\">\t\t\t\taCount[<span class=\"number\">0</span>]++;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a == <span class=\"string\">'C'</span>) &#123;</span><br><span class=\"line\">\t\t\t\taCount[<span class=\"number\">1</span>]++;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\taCount[<span class=\"number\">2</span>]++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a == b) &#123;</span><br><span class=\"line\">\t\t\tdraw++;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tdefeat++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (b == <span class=\"string\">'B'</span>) &#123;</span><br><span class=\"line\">\t\t\t\tbCount[<span class=\"number\">0</span>]++;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (b == <span class=\"string\">'C'</span>) &#123;</span><br><span class=\"line\">\t\t\t\tbCount[<span class=\"number\">1</span>]++;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tbCount[<span class=\"number\">2</span>]++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d %d\\n\"</span>, win, draw, defeat);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d %d\\n\"</span>, defeat, draw, win);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c %c\\n\"</span>, getMaxGesture(aCount), getMaxGesture(bCount));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>大家应该都会玩“锤子剪刀布”的游戏：两人同时给出手势，胜负规则如图所示：</p>\n<p><img src=\"https://images.ptausercontent.com/724da598-b37f-4f1f-99b4-71459654ce3a.jpg\" alt=\"FigCJB.jpg\"></p>\n<p>现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。</p>","more":"<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第 1 行给出正整数 <em>N</em>（≤10^5），即双方交锋的次数。随后 <em>N</em> 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。<code>C</code> 代表“锤子”、<code>J</code> 代表“剪刀”、<code>B</code> 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">C J</span><br><span class=\"line\">J B</span><br><span class=\"line\">C B</span><br><span class=\"line\">B B</span><br><span class=\"line\">B C</span><br><span class=\"line\">C C</span><br><span class=\"line\">C B</span><br><span class=\"line\">J B</span><br><span class=\"line\">B C</span><br><span class=\"line\">J J</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 3 2</span><br><span class=\"line\">2 3 5</span><br><span class=\"line\">B B</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><p>设win、draw和defeat分别表示甲赢、平和输的次数，数组aCount[3]和bCount[3]分别表示甲、乙每个手势获胜的次数（下标0表示<code>B</code>，1表示<code>C</code>，2表示<code>J</code>）。</p>\n<p>每次交锋，按照结果赢、平和输，分别改变win、draw和defeat，结果为win时，甲相应手势获胜次数加1；结果为defeat（乙win）时，乙相应手势获胜次数加1。</p>\n<p>最后按照题目要求输出即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">getMaxGesture</span><span class=\"params\">(<span class=\"keyword\">int</span> wins[])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> max, maxIndex;</span><br><span class=\"line\">\tmax = maxIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (wins[i] &gt; max) &#123;</span><br><span class=\"line\">\t\t\tmax = wins[i];</span><br><span class=\"line\">\t\t\tmaxIndex = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (maxIndex == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">'B'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (maxIndex == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">'C'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">'J'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, win, draw, defeat;</span><br><span class=\"line\">\twin = draw = defeat = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> aCount[<span class=\"number\">3</span>] = &#123; <span class=\"number\">0</span> &#125;, bCount[<span class=\"number\">3</span>] = &#123; <span class=\"number\">0</span> &#125;; <span class=\"comment\">//0-C,1-J,2-B</span></span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> a, b;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\" %c %c\"</span>, &amp;a, &amp;b);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((a == <span class=\"string\">'C'</span> &amp;&amp; b == <span class=\"string\">'J'</span>) || (a == <span class=\"string\">'J'</span> &amp;&amp; b == <span class=\"string\">'B'</span>)</span><br><span class=\"line\">\t\t\t\t|| (a == <span class=\"string\">'B'</span> &amp;&amp; b == <span class=\"string\">'C'</span>)) &#123;</span><br><span class=\"line\">\t\t\twin++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a == <span class=\"string\">'B'</span>) &#123;</span><br><span class=\"line\">\t\t\t\taCount[<span class=\"number\">0</span>]++;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a == <span class=\"string\">'C'</span>) &#123;</span><br><span class=\"line\">\t\t\t\taCount[<span class=\"number\">1</span>]++;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\taCount[<span class=\"number\">2</span>]++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a == b) &#123;</span><br><span class=\"line\">\t\t\tdraw++;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tdefeat++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (b == <span class=\"string\">'B'</span>) &#123;</span><br><span class=\"line\">\t\t\t\tbCount[<span class=\"number\">0</span>]++;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (b == <span class=\"string\">'C'</span>) &#123;</span><br><span class=\"line\">\t\t\t\tbCount[<span class=\"number\">1</span>]++;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tbCount[<span class=\"number\">2</span>]++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d %d\\n\"</span>, win, draw, defeat);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d %d\\n\"</span>, defeat, draw, win);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c %c\\n\"</span>, getMaxGesture(aCount), getMaxGesture(bCount));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"PAT乙级 1046.划拳 （15 分)","date":"2019-03-31T09:14:30.000Z","_content":"\n划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就赢了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。\n\n<!--more-->\n\n下面给出甲、乙两人的划拳记录，请你统计他们最后分别喝了多少杯酒。\n\n### 输入格式：\n\n输入第一行先给出一个正整数 *N*（≤100），随后 *N* 行，每行给出一轮划拳的记录，格式为：\n\n```\n甲喊 甲划 乙喊 乙划\n```\n\n其中`喊`是喊出的数字，`划`是划出的数字，均为不超过 100 的正整数（两只手一起划）。\n\n### 输出格式：\n\n在一行中先后输出甲、乙两人喝酒的杯数，其间以一个空格分隔。\n\n### 输入样例：\n\n```in\n5\n8 10 9 12\n5 10 5 10\n3 8 5 12\n12 18 1 13\n4 16 12 15\n```\n\n### 输出样例：\n\n```out\n1 2\n```\n\n### 分析:\n\n设aCount和bCount分别表示甲、乙两人喝酒的杯数，aSay和bSay分别表示甲、乙喊出的数字，aGive和bGive分别表示甲、乙划出的数字。\n\n本题共有四种情况，对应三种结果：\n\n1.甲、乙同赢(aGive == aSay + bSay && bGive == aSay + bSay)或同输(aGive != aSay + bSay && bGive != aSay + bSay)：继续下一轮；\n\n2.甲赢(aGive == aSay + bSay)：乙喝酒，即bCount++；\n\n3.乙赢(bGive == aSay + bSay)：甲喝酒，即aCount++。\n\n```c++\n#include <cstdio>\n\nint main() {\n\tint n, aCount, bCount;\n\taCount = bCount = 0;\n\tscanf(\"%d\", &n);\n\twhile (n--) {\n\t\tint aSay, aGive, bSay, bGive;\n\t\tscanf(\"%d %d %d %d\", &aSay, &aGive, &bSay, &bGive);\n\t\t//1.同赢或同输\n\t\tif ((aGive == aSay + bSay && bGive == aSay + bSay)\n\t\t\t\t|| (aGive != aSay + bSay && bGive != aSay + bSay)) {\n\t\t\tcontinue;\n\t\t}\n\t\t//2.甲赢\n\t\tif (aGive == aSay + bSay) {\n\t\t\tbCount++;\n\t\t} else if (bGive == aSay + bSay) {\n\t\t\t//3.乙赢\n\t\t\taCount++;\n\t\t}\n\t}\n\tprintf(\"%d %d\\n\", aCount, bCount);\n\treturn 0;\n}\n```\n\n","source":"_posts/pat-basic-1046.md","raw":"---\ntitle: PAT乙级 1046.划拳 （15 分)\ndate: 2019-03-31 17:14:30\ntags: pat\ncategories: pat乙级\n---\n\n划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就赢了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。\n\n<!--more-->\n\n下面给出甲、乙两人的划拳记录，请你统计他们最后分别喝了多少杯酒。\n\n### 输入格式：\n\n输入第一行先给出一个正整数 *N*（≤100），随后 *N* 行，每行给出一轮划拳的记录，格式为：\n\n```\n甲喊 甲划 乙喊 乙划\n```\n\n其中`喊`是喊出的数字，`划`是划出的数字，均为不超过 100 的正整数（两只手一起划）。\n\n### 输出格式：\n\n在一行中先后输出甲、乙两人喝酒的杯数，其间以一个空格分隔。\n\n### 输入样例：\n\n```in\n5\n8 10 9 12\n5 10 5 10\n3 8 5 12\n12 18 1 13\n4 16 12 15\n```\n\n### 输出样例：\n\n```out\n1 2\n```\n\n### 分析:\n\n设aCount和bCount分别表示甲、乙两人喝酒的杯数，aSay和bSay分别表示甲、乙喊出的数字，aGive和bGive分别表示甲、乙划出的数字。\n\n本题共有四种情况，对应三种结果：\n\n1.甲、乙同赢(aGive == aSay + bSay && bGive == aSay + bSay)或同输(aGive != aSay + bSay && bGive != aSay + bSay)：继续下一轮；\n\n2.甲赢(aGive == aSay + bSay)：乙喝酒，即bCount++；\n\n3.乙赢(bGive == aSay + bSay)：甲喝酒，即aCount++。\n\n```c++\n#include <cstdio>\n\nint main() {\n\tint n, aCount, bCount;\n\taCount = bCount = 0;\n\tscanf(\"%d\", &n);\n\twhile (n--) {\n\t\tint aSay, aGive, bSay, bGive;\n\t\tscanf(\"%d %d %d %d\", &aSay, &aGive, &bSay, &bGive);\n\t\t//1.同赢或同输\n\t\tif ((aGive == aSay + bSay && bGive == aSay + bSay)\n\t\t\t\t|| (aGive != aSay + bSay && bGive != aSay + bSay)) {\n\t\t\tcontinue;\n\t\t}\n\t\t//2.甲赢\n\t\tif (aGive == aSay + bSay) {\n\t\t\tbCount++;\n\t\t} else if (bGive == aSay + bSay) {\n\t\t\t//3.乙赢\n\t\t\taCount++;\n\t\t}\n\t}\n\tprintf(\"%d %d\\n\", aCount, bCount);\n\treturn 0;\n}\n```\n\n","slug":"pat-basic-1046","published":1,"updated":"2019-03-31T09:35:38.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9arc0053j1q0cor8qtt5","content":"<p>划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就赢了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。</p>\n<a id=\"more\"></a>\n<p>下面给出甲、乙两人的划拳记录，请你统计他们最后分别喝了多少杯酒。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行先给出一个正整数 <em>N</em>（≤100），随后 <em>N</em> 行，每行给出一轮划拳的记录，格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">甲喊 甲划 乙喊 乙划</span><br></pre></td></tr></table></figure>\n<p>其中<code>喊</code>是喊出的数字，<code>划</code>是划出的数字，均为不超过 100 的正整数（两只手一起划）。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在一行中先后输出甲、乙两人喝酒的杯数，其间以一个空格分隔。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">8 10 9 12</span><br><span class=\"line\">5 10 5 10</span><br><span class=\"line\">3 8 5 12</span><br><span class=\"line\">12 18 1 13</span><br><span class=\"line\">4 16 12 15</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析:\"></a>分析:</h3><p>设aCount和bCount分别表示甲、乙两人喝酒的杯数，aSay和bSay分别表示甲、乙喊出的数字，aGive和bGive分别表示甲、乙划出的数字。</p>\n<p>本题共有四种情况，对应三种结果：</p>\n<p>1.甲、乙同赢(aGive == aSay + bSay &amp;&amp; bGive == aSay + bSay)或同输(aGive != aSay + bSay &amp;&amp; bGive != aSay + bSay)：继续下一轮；</p>\n<p>2.甲赢(aGive == aSay + bSay)：乙喝酒，即bCount++；</p>\n<p>3.乙赢(bGive == aSay + bSay)：甲喝酒，即aCount++。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, aCount, bCount;</span><br><span class=\"line\">\taCount = bCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> aSay, aGive, bSay, bGive;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d %d %d\"</span>, &amp;aSay, &amp;aGive, &amp;bSay, &amp;bGive);</span><br><span class=\"line\">\t\t<span class=\"comment\">//1.同赢或同输</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((aGive == aSay + bSay &amp;&amp; bGive == aSay + bSay)</span><br><span class=\"line\">\t\t\t\t|| (aGive != aSay + bSay &amp;&amp; bGive != aSay + bSay)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//2.甲赢</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (aGive == aSay + bSay) &#123;</span><br><span class=\"line\">\t\t\tbCount++;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (bGive == aSay + bSay) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//3.乙赢</span></span><br><span class=\"line\">\t\t\taCount++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>, aCount, bCount);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就赢了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。</p>","more":"<p>下面给出甲、乙两人的划拳记录，请你统计他们最后分别喝了多少杯酒。</p>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入第一行先给出一个正整数 <em>N</em>（≤100），随后 <em>N</em> 行，每行给出一轮划拳的记录，格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">甲喊 甲划 乙喊 乙划</span><br></pre></td></tr></table></figure>\n<p>其中<code>喊</code>是喊出的数字，<code>划</code>是划出的数字，均为不超过 100 的正整数（两只手一起划）。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在一行中先后输出甲、乙两人喝酒的杯数，其间以一个空格分隔。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">8 10 9 12</span><br><span class=\"line\">5 10 5 10</span><br><span class=\"line\">3 8 5 12</span><br><span class=\"line\">12 18 1 13</span><br><span class=\"line\">4 16 12 15</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析:\"></a>分析:</h3><p>设aCount和bCount分别表示甲、乙两人喝酒的杯数，aSay和bSay分别表示甲、乙喊出的数字，aGive和bGive分别表示甲、乙划出的数字。</p>\n<p>本题共有四种情况，对应三种结果：</p>\n<p>1.甲、乙同赢(aGive == aSay + bSay &amp;&amp; bGive == aSay + bSay)或同输(aGive != aSay + bSay &amp;&amp; bGive != aSay + bSay)：继续下一轮；</p>\n<p>2.甲赢(aGive == aSay + bSay)：乙喝酒，即bCount++；</p>\n<p>3.乙赢(bGive == aSay + bSay)：甲喝酒，即aCount++。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, aCount, bCount;</span><br><span class=\"line\">\taCount = bCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> aSay, aGive, bSay, bGive;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d %d %d\"</span>, &amp;aSay, &amp;aGive, &amp;bSay, &amp;bGive);</span><br><span class=\"line\">\t\t<span class=\"comment\">//1.同赢或同输</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((aGive == aSay + bSay &amp;&amp; bGive == aSay + bSay)</span><br><span class=\"line\">\t\t\t\t|| (aGive != aSay + bSay &amp;&amp; bGive != aSay + bSay)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//2.甲赢</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (aGive == aSay + bSay) &#123;</span><br><span class=\"line\">\t\t\tbCount++;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (bGive == aSay + bSay) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//3.乙赢</span></span><br><span class=\"line\">\t\t\taCount++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>, aCount, bCount);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"PAT乙级 1026.程序运行时间 （15 分)","date":"2019-03-28T13:09:33.000Z","_content":"\n要获得一个 C 语言程序的运行时间，常用的方法是调用头文件 time.h，其中提供了 clock() 函数，可以捕捉从程序开始运行到 clock() 被调用时所耗费的时间。这个时间单位是 clock tick，即“时钟打点”。同时还有一个常数 CLK_TCK，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数 *f* 的运行时间，我们只要在调用 *f* 之前先调用 clock()，获得一个时钟打点数 C1；在 *f* 执行完成后再调用 clock()，获得另一个时钟打点数 C2；两次获得的时钟打点数之差 (C2-C1) 就是 *f* 运行所消耗的时钟打点数，再除以常数 CLK_TCK，就得到了以秒为单位的运行时间。\n\n这里不妨简单假设常数 CLK_TCK 为 100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。\n\n<!--more-->\n\n### 输入格式：\n\n输入在一行中顺序给出 2 个整数 C1 和 C2。注意两次获得的时钟打点数肯定不相同，即 C1 < C2，并且取值在 [0,10^7]。\n\n### 输出格式：\n\n在一行中输出被测函数运行的时间。运行时间必须按照 `hh:mm:ss`（即2位的 `时:分:秒`）格式输出；不足 1 秒的时间四舍五入到秒。\n\n### 输入样例：\n\n```in\n123 4577973\n```\n\n### 输出样例：\n\n```out\n12:42:59\n```\n\n### 分析：\n\n由于题目要求“不足 1 秒的时间四舍五入到秒”，所以C2-C1后，先加上50，这样如果（C2-C1）/ 100的小数位大于等于0.5则会进位，小于0.5则会被舍去，从而保证四舍五入到秒。\n\n然后再除以100，得到以秒为单位的总时间n =（C2-C1+50）/ 100。\n\nn / 3600 得到小时数hour，n % 3600 / 60 则得到了分钟数minute ，n % 3600 % 60则得到了秒数second。\n\n```c++\n#include <cstdio>\n\nint main() {\n\tint c1, c2;\n\tscanf(\"%d %d\", &c1, &c2);\n\tint n = (c2 - c1 + 50) / 100;\n\tint hour = n / 3600;\n\tn = n % 3600;\n\tint minute = n / 60, second = n % 60;\n\tprintf(\"%02d:%02d:%02d\\n\", hour, minute, second);\n\treturn 0;\n}\n```\n\n另一种解法：\n\n使用浮点数来存储以秒为单位的总时间，为最后的秒数second加上0.5，从而保证大于等于0.5的小数位能进位。\n\n```c++\n#include <cstdio>\n\nint main() {\n\tint c1, c2;\n\tdouble CLK_TCK = 100.0;\n\tscanf(\"%d %d\", &c1, &c2);\n\tdouble seconds = (c2 - c1) / CLK_TCK;\n\tint h = seconds / (60 * 60);\n\tint m = (seconds - h * 60 * 60) / 60;\n\tint s = seconds - h * 60 * 60 - m * 60 + 0.5;\n\tprintf(\"%02d:%02d:%02d\\n\", h, m, s);\n\treturn 0;\n}\n```\n\n","source":"_posts/pat-basic-1026.md","raw":"---\ntitle: PAT乙级 1026.程序运行时间 （15 分)\ndate: 2019-03-28 21:09:33\ntags: pat\ncategories: pat乙级\n---\n\n要获得一个 C 语言程序的运行时间，常用的方法是调用头文件 time.h，其中提供了 clock() 函数，可以捕捉从程序开始运行到 clock() 被调用时所耗费的时间。这个时间单位是 clock tick，即“时钟打点”。同时还有一个常数 CLK_TCK，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数 *f* 的运行时间，我们只要在调用 *f* 之前先调用 clock()，获得一个时钟打点数 C1；在 *f* 执行完成后再调用 clock()，获得另一个时钟打点数 C2；两次获得的时钟打点数之差 (C2-C1) 就是 *f* 运行所消耗的时钟打点数，再除以常数 CLK_TCK，就得到了以秒为单位的运行时间。\n\n这里不妨简单假设常数 CLK_TCK 为 100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。\n\n<!--more-->\n\n### 输入格式：\n\n输入在一行中顺序给出 2 个整数 C1 和 C2。注意两次获得的时钟打点数肯定不相同，即 C1 < C2，并且取值在 [0,10^7]。\n\n### 输出格式：\n\n在一行中输出被测函数运行的时间。运行时间必须按照 `hh:mm:ss`（即2位的 `时:分:秒`）格式输出；不足 1 秒的时间四舍五入到秒。\n\n### 输入样例：\n\n```in\n123 4577973\n```\n\n### 输出样例：\n\n```out\n12:42:59\n```\n\n### 分析：\n\n由于题目要求“不足 1 秒的时间四舍五入到秒”，所以C2-C1后，先加上50，这样如果（C2-C1）/ 100的小数位大于等于0.5则会进位，小于0.5则会被舍去，从而保证四舍五入到秒。\n\n然后再除以100，得到以秒为单位的总时间n =（C2-C1+50）/ 100。\n\nn / 3600 得到小时数hour，n % 3600 / 60 则得到了分钟数minute ，n % 3600 % 60则得到了秒数second。\n\n```c++\n#include <cstdio>\n\nint main() {\n\tint c1, c2;\n\tscanf(\"%d %d\", &c1, &c2);\n\tint n = (c2 - c1 + 50) / 100;\n\tint hour = n / 3600;\n\tn = n % 3600;\n\tint minute = n / 60, second = n % 60;\n\tprintf(\"%02d:%02d:%02d\\n\", hour, minute, second);\n\treturn 0;\n}\n```\n\n另一种解法：\n\n使用浮点数来存储以秒为单位的总时间，为最后的秒数second加上0.5，从而保证大于等于0.5的小数位能进位。\n\n```c++\n#include <cstdio>\n\nint main() {\n\tint c1, c2;\n\tdouble CLK_TCK = 100.0;\n\tscanf(\"%d %d\", &c1, &c2);\n\tdouble seconds = (c2 - c1) / CLK_TCK;\n\tint h = seconds / (60 * 60);\n\tint m = (seconds - h * 60 * 60) / 60;\n\tint s = seconds - h * 60 * 60 - m * 60 + 0.5;\n\tprintf(\"%02d:%02d:%02d\\n\", h, m, s);\n\treturn 0;\n}\n```\n\n","slug":"pat-basic-1026","published":1,"updated":"2019-03-31T09:36:12.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9arh0057j1q0tragtqoe","content":"<p>要获得一个 C 语言程序的运行时间，常用的方法是调用头文件 time.h，其中提供了 clock() 函数，可以捕捉从程序开始运行到 clock() 被调用时所耗费的时间。这个时间单位是 clock tick，即“时钟打点”。同时还有一个常数 CLK_TCK，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数 <em>f</em> 的运行时间，我们只要在调用 <em>f</em> 之前先调用 clock()，获得一个时钟打点数 C1；在 <em>f</em> 执行完成后再调用 clock()，获得另一个时钟打点数 C2；两次获得的时钟打点数之差 (C2-C1) 就是 <em>f</em> 运行所消耗的时钟打点数，再除以常数 CLK_TCK，就得到了以秒为单位的运行时间。</p>\n<p>这里不妨简单假设常数 CLK_TCK 为 100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。</p>\n<a id=\"more\"></a>\n<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在一行中顺序给出 2 个整数 C1 和 C2。注意两次获得的时钟打点数肯定不相同，即 C1 &lt; C2，并且取值在 [0,10^7]。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在一行中输出被测函数运行的时间。运行时间必须按照 <code>hh:mm:ss</code>（即2位的 <code>时:分:秒</code>）格式输出；不足 1 秒的时间四舍五入到秒。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">123 4577973</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12:42:59</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><p>由于题目要求“不足 1 秒的时间四舍五入到秒”，所以C2-C1后，先加上50，这样如果（C2-C1）/ 100的小数位大于等于0.5则会进位，小于0.5则会被舍去，从而保证四舍五入到秒。</p>\n<p>然后再除以100，得到以秒为单位的总时间n =（C2-C1+50）/ 100。</p>\n<p>n / 3600 得到小时数hour，n % 3600 / 60 则得到了分钟数minute ，n % 3600 % 60则得到了秒数second。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c1, c2;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;c1, &amp;c2);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n = (c2 - c1 + <span class=\"number\">50</span>) / <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> hour = n / <span class=\"number\">3600</span>;</span><br><span class=\"line\">\tn = n % <span class=\"number\">3600</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> minute = n / <span class=\"number\">60</span>, second = n % <span class=\"number\">60</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%02d:%02d:%02d\\n\"</span>, hour, minute, second);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另一种解法：</p>\n<p>使用浮点数来存储以秒为单位的总时间，为最后的秒数second加上0.5，从而保证大于等于0.5的小数位能进位。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c1, c2;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> CLK_TCK = <span class=\"number\">100.0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;c1, &amp;c2);</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> seconds = (c2 - c1) / CLK_TCK;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> h = seconds / (<span class=\"number\">60</span> * <span class=\"number\">60</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m = (seconds - h * <span class=\"number\">60</span> * <span class=\"number\">60</span>) / <span class=\"number\">60</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> s = seconds - h * <span class=\"number\">60</span> * <span class=\"number\">60</span> - m * <span class=\"number\">60</span> + <span class=\"number\">0.5</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%02d:%02d:%02d\\n\"</span>, h, m, s);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>要获得一个 C 语言程序的运行时间，常用的方法是调用头文件 time.h，其中提供了 clock() 函数，可以捕捉从程序开始运行到 clock() 被调用时所耗费的时间。这个时间单位是 clock tick，即“时钟打点”。同时还有一个常数 CLK_TCK，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数 <em>f</em> 的运行时间，我们只要在调用 <em>f</em> 之前先调用 clock()，获得一个时钟打点数 C1；在 <em>f</em> 执行完成后再调用 clock()，获得另一个时钟打点数 C2；两次获得的时钟打点数之差 (C2-C1) 就是 <em>f</em> 运行所消耗的时钟打点数，再除以常数 CLK_TCK，就得到了以秒为单位的运行时间。</p>\n<p>这里不妨简单假设常数 CLK_TCK 为 100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。</p>","more":"<h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><p>输入在一行中顺序给出 2 个整数 C1 和 C2。注意两次获得的时钟打点数肯定不相同，即 C1 &lt; C2，并且取值在 [0,10^7]。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>在一行中输出被测函数运行的时间。运行时间必须按照 <code>hh:mm:ss</code>（即2位的 <code>时:分:秒</code>）格式输出；不足 1 秒的时间四舍五入到秒。</p>\n<h3 id=\"输入样例：\"><a href=\"#输入样例：\" class=\"headerlink\" title=\"输入样例：\"></a>输入样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">123 4577973</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例：\"><a href=\"#输出样例：\" class=\"headerlink\" title=\"输出样例：\"></a>输出样例：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12:42:59</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><p>由于题目要求“不足 1 秒的时间四舍五入到秒”，所以C2-C1后，先加上50，这样如果（C2-C1）/ 100的小数位大于等于0.5则会进位，小于0.5则会被舍去，从而保证四舍五入到秒。</p>\n<p>然后再除以100，得到以秒为单位的总时间n =（C2-C1+50）/ 100。</p>\n<p>n / 3600 得到小时数hour，n % 3600 / 60 则得到了分钟数minute ，n % 3600 % 60则得到了秒数second。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c1, c2;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;c1, &amp;c2);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n = (c2 - c1 + <span class=\"number\">50</span>) / <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> hour = n / <span class=\"number\">3600</span>;</span><br><span class=\"line\">\tn = n % <span class=\"number\">3600</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> minute = n / <span class=\"number\">60</span>, second = n % <span class=\"number\">60</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%02d:%02d:%02d\\n\"</span>, hour, minute, second);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另一种解法：</p>\n<p>使用浮点数来存储以秒为单位的总时间，为最后的秒数second加上0.5，从而保证大于等于0.5的小数位能进位。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c1, c2;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> CLK_TCK = <span class=\"number\">100.0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;c1, &amp;c2);</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> seconds = (c2 - c1) / CLK_TCK;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> h = seconds / (<span class=\"number\">60</span> * <span class=\"number\">60</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m = (seconds - h * <span class=\"number\">60</span> * <span class=\"number\">60</span>) / <span class=\"number\">60</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> s = seconds - h * <span class=\"number\">60</span> * <span class=\"number\">60</span> - m * <span class=\"number\">60</span> + <span class=\"number\">0.5</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%02d:%02d:%02d\\n\"</span>, h, m, s);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"使用PuTTY实现Windows和Linux的文件传输","date":"2018-08-17T06:04:30.000Z","_content":"\n安装完PuTTY以后，进入命令行界面，就可以使用PuTTY的**pscp命令**进行文件传输。\n\n### pscp\n\n语法：\n\n```shell\npscp 源文件路径 目标文件路径\n```\n\n<!--more-->\n\n示例：\n\n```shell\npscp root@111.199.227.74:/mnt/files/abc.txt D:/file/\n```\n\n值得一提的是，pscp命令只能用于**文件**的上传下载，若要进行**文件夹（目录）**的上传下载，可以先压缩，然后再使用pscp命令进行文件传输。\n\n若命令行中显示找不到pscp命令，只需将PuTTY的安装路径添加到系统变量Path中即可。\n\n","source":"_posts/putty-file-upload-and-download.md","raw":"---\ntitle: 使用PuTTY实现Windows和Linux的文件传输\ndate: 2018-08-17 14:04:30\ntags: putty\ncategories: putty\n---\n\n安装完PuTTY以后，进入命令行界面，就可以使用PuTTY的**pscp命令**进行文件传输。\n\n### pscp\n\n语法：\n\n```shell\npscp 源文件路径 目标文件路径\n```\n\n<!--more-->\n\n示例：\n\n```shell\npscp root@111.199.227.74:/mnt/files/abc.txt D:/file/\n```\n\n值得一提的是，pscp命令只能用于**文件**的上传下载，若要进行**文件夹（目录）**的上传下载，可以先压缩，然后再使用pscp命令进行文件传输。\n\n若命令行中显示找不到pscp命令，只需将PuTTY的安装路径添加到系统变量Path中即可。\n\n","slug":"putty-file-upload-and-download","published":1,"updated":"2019-01-19T07:23:57.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9arj0059j1q0ybb54h7i","content":"<p>安装完PuTTY以后，进入命令行界面，就可以使用PuTTY的<strong>pscp命令</strong>进行文件传输。</p>\n<h3 id=\"pscp\"><a href=\"#pscp\" class=\"headerlink\" title=\"pscp\"></a>pscp</h3><p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pscp 源文件路径 目标文件路径</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pscp root@111.199.227.74:/mnt/files/abc.txt D:/file/</span><br></pre></td></tr></table></figure>\n<p>值得一提的是，pscp命令只能用于<strong>文件</strong>的上传下载，若要进行<strong>文件夹（目录）</strong>的上传下载，可以先压缩，然后再使用pscp命令进行文件传输。</p>\n<p>若命令行中显示找不到pscp命令，只需将PuTTY的安装路径添加到系统变量Path中即可。</p>\n","site":{"data":{}},"excerpt":"<p>安装完PuTTY以后，进入命令行界面，就可以使用PuTTY的<strong>pscp命令</strong>进行文件传输。</p>\n<h3 id=\"pscp\"><a href=\"#pscp\" class=\"headerlink\" title=\"pscp\"></a>pscp</h3><p>语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pscp 源文件路径 目标文件路径</span><br></pre></td></tr></table></figure>","more":"<p>示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pscp root@111.199.227.74:/mnt/files/abc.txt D:/file/</span><br></pre></td></tr></table></figure>\n<p>值得一提的是，pscp命令只能用于<strong>文件</strong>的上传下载，若要进行<strong>文件夹（目录）</strong>的上传下载，可以先压缩，然后再使用pscp命令进行文件传输。</p>\n<p>若命令行中显示找不到pscp命令，只需将PuTTY的安装路径添加到系统变量Path中即可。</p>"},{"title":"使用PuTTY远程登录Linux服务器","date":"2018-08-16T06:55:33.000Z","_content":"\n使用PuTTY已经很长时间了，是时候总结下PuTTY的用法了。\n\n* 什么是PuTTY?\n\n下面是PuTTY官网的介绍\n\nPuTTY is an SSH and telnet client, developed originally by Simon Tatham for the Windows platform. \n\n翻译过来就是说，PuTTY是Windows平台下的一个SSH客户端。\n\n* 为什么要使用PuTTY？\n\n与商用的XShell相比，PuTTY是开源免费的>_<。\n\n<!--more-->\n\n### 安装PuTTY\n\n从[PuTTY官网](https://www.putty.org)下载合适的版本，目前的最新稳定版本是0.70。\n\n成功安装后目录结构如下，我的安装路径为G:\\putty\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816183626.png)\n\n### 远程登录\n\n双击putty.exe，将会显示如下界面\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816184134.png)\n\n在Host Name(or IP address)，也就是下图中红框标明的地方，输入远程Linux服务器的IP地址\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816184446.png)\n\n然后点击Open按钮，将会显示如下界面。\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816184906.png)\n\n在login as：后输入用户名\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816185216.png)\n\n按照要求输入密码即可登录，值得一提的是，密码是不会显示的，这也很符合Linux设计的哲学。\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816185506.png)\n\n### 小经验\n\n刚才那样的登录，每次都需要输入服务器IP地址，实际上，PuTTY提供了保存IP地址，下次自动导入的功能。\n\n第一次登录时，输入IP地址，在Saved Sessions下的输入框中输入想保存的名字，然后点击Save按钮（图中用红框标明）。\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816190008.png)\n\n这里以127.0.0.1为例，设置session的名字为server，点击Save按钮，Default Settings下出现了一个server\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816190808.png)\n\n下一次登录时，只需要选择server，然后点击Load按钮，IP地址将会被自动导入。\n\n如果不想再保存该IP地址了，则选中session的名字，然后点击Delete按钮即可删除存储的session。","source":"_posts/putty-ssh.md","raw":"---\ntitle: 使用PuTTY远程登录Linux服务器\ndate: 2018-08-16 14:55:33\ntags: putty\ncategories: putty\n---\n\n使用PuTTY已经很长时间了，是时候总结下PuTTY的用法了。\n\n* 什么是PuTTY?\n\n下面是PuTTY官网的介绍\n\nPuTTY is an SSH and telnet client, developed originally by Simon Tatham for the Windows platform. \n\n翻译过来就是说，PuTTY是Windows平台下的一个SSH客户端。\n\n* 为什么要使用PuTTY？\n\n与商用的XShell相比，PuTTY是开源免费的>_<。\n\n<!--more-->\n\n### 安装PuTTY\n\n从[PuTTY官网](https://www.putty.org)下载合适的版本，目前的最新稳定版本是0.70。\n\n成功安装后目录结构如下，我的安装路径为G:\\putty\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816183626.png)\n\n### 远程登录\n\n双击putty.exe，将会显示如下界面\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816184134.png)\n\n在Host Name(or IP address)，也就是下图中红框标明的地方，输入远程Linux服务器的IP地址\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816184446.png)\n\n然后点击Open按钮，将会显示如下界面。\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816184906.png)\n\n在login as：后输入用户名\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816185216.png)\n\n按照要求输入密码即可登录，值得一提的是，密码是不会显示的，这也很符合Linux设计的哲学。\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816185506.png)\n\n### 小经验\n\n刚才那样的登录，每次都需要输入服务器IP地址，实际上，PuTTY提供了保存IP地址，下次自动导入的功能。\n\n第一次登录时，输入IP地址，在Saved Sessions下的输入框中输入想保存的名字，然后点击Save按钮（图中用红框标明）。\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816190008.png)\n\n这里以127.0.0.1为例，设置session的名字为server，点击Save按钮，Default Settings下出现了一个server\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816190808.png)\n\n下一次登录时，只需要选择server，然后点击Load按钮，IP地址将会被自动导入。\n\n如果不想再保存该IP地址了，则选中session的名字，然后点击Delete按钮即可删除存储的session。","slug":"putty-ssh","published":1,"updated":"2019-01-19T07:23:57.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9arn005dj1q0hu5leq23","content":"<p>使用PuTTY已经很长时间了，是时候总结下PuTTY的用法了。</p>\n<ul>\n<li>什么是PuTTY?</li>\n</ul>\n<p>下面是PuTTY官网的介绍</p>\n<p>PuTTY is an SSH and telnet client, developed originally by Simon Tatham for the Windows platform. </p>\n<p>翻译过来就是说，PuTTY是Windows平台下的一个SSH客户端。</p>\n<ul>\n<li>为什么要使用PuTTY？</li>\n</ul>\n<p>与商用的XShell相比，PuTTY是开源免费的&gt;_&lt;。</p>\n<a id=\"more\"></a>\n<h3 id=\"安装PuTTY\"><a href=\"#安装PuTTY\" class=\"headerlink\" title=\"安装PuTTY\"></a>安装PuTTY</h3><p>从<a href=\"https://www.putty.org\" target=\"_blank\" rel=\"noopener\">PuTTY官网</a>下载合适的版本，目前的最新稳定版本是0.70。</p>\n<p>成功安装后目录结构如下，我的安装路径为G:\\putty</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816183626.png\" alt=\"\"></p>\n<h3 id=\"远程登录\"><a href=\"#远程登录\" class=\"headerlink\" title=\"远程登录\"></a>远程登录</h3><p>双击putty.exe，将会显示如下界面</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816184134.png\" alt=\"\"></p>\n<p>在Host Name(or IP address)，也就是下图中红框标明的地方，输入远程Linux服务器的IP地址</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816184446.png\" alt=\"\"></p>\n<p>然后点击Open按钮，将会显示如下界面。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816184906.png\" alt=\"\"></p>\n<p>在login as：后输入用户名</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816185216.png\" alt=\"\"></p>\n<p>按照要求输入密码即可登录，值得一提的是，密码是不会显示的，这也很符合Linux设计的哲学。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816185506.png\" alt=\"\"></p>\n<h3 id=\"小经验\"><a href=\"#小经验\" class=\"headerlink\" title=\"小经验\"></a>小经验</h3><p>刚才那样的登录，每次都需要输入服务器IP地址，实际上，PuTTY提供了保存IP地址，下次自动导入的功能。</p>\n<p>第一次登录时，输入IP地址，在Saved Sessions下的输入框中输入想保存的名字，然后点击Save按钮（图中用红框标明）。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816190008.png\" alt=\"\"></p>\n<p>这里以127.0.0.1为例，设置session的名字为server，点击Save按钮，Default Settings下出现了一个server</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816190808.png\" alt=\"\"></p>\n<p>下一次登录时，只需要选择server，然后点击Load按钮，IP地址将会被自动导入。</p>\n<p>如果不想再保存该IP地址了，则选中session的名字，然后点击Delete按钮即可删除存储的session。</p>\n","site":{"data":{}},"excerpt":"<p>使用PuTTY已经很长时间了，是时候总结下PuTTY的用法了。</p>\n<ul>\n<li>什么是PuTTY?</li>\n</ul>\n<p>下面是PuTTY官网的介绍</p>\n<p>PuTTY is an SSH and telnet client, developed originally by Simon Tatham for the Windows platform. </p>\n<p>翻译过来就是说，PuTTY是Windows平台下的一个SSH客户端。</p>\n<ul>\n<li>为什么要使用PuTTY？</li>\n</ul>\n<p>与商用的XShell相比，PuTTY是开源免费的&gt;_&lt;。</p>","more":"<h3 id=\"安装PuTTY\"><a href=\"#安装PuTTY\" class=\"headerlink\" title=\"安装PuTTY\"></a>安装PuTTY</h3><p>从<a href=\"https://www.putty.org\" target=\"_blank\" rel=\"noopener\">PuTTY官网</a>下载合适的版本，目前的最新稳定版本是0.70。</p>\n<p>成功安装后目录结构如下，我的安装路径为G:\\putty</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816183626.png\" alt=\"\"></p>\n<h3 id=\"远程登录\"><a href=\"#远程登录\" class=\"headerlink\" title=\"远程登录\"></a>远程登录</h3><p>双击putty.exe，将会显示如下界面</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816184134.png\" alt=\"\"></p>\n<p>在Host Name(or IP address)，也就是下图中红框标明的地方，输入远程Linux服务器的IP地址</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816184446.png\" alt=\"\"></p>\n<p>然后点击Open按钮，将会显示如下界面。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816184906.png\" alt=\"\"></p>\n<p>在login as：后输入用户名</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816185216.png\" alt=\"\"></p>\n<p>按照要求输入密码即可登录，值得一提的是，密码是不会显示的，这也很符合Linux设计的哲学。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816185506.png\" alt=\"\"></p>\n<h3 id=\"小经验\"><a href=\"#小经验\" class=\"headerlink\" title=\"小经验\"></a>小经验</h3><p>刚才那样的登录，每次都需要输入服务器IP地址，实际上，PuTTY提供了保存IP地址，下次自动导入的功能。</p>\n<p>第一次登录时，输入IP地址，在Saved Sessions下的输入框中输入想保存的名字，然后点击Save按钮（图中用红框标明）。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816190008.png\" alt=\"\"></p>\n<p>这里以127.0.0.1为例，设置session的名字为server，点击Save按钮，Default Settings下出现了一个server</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816190808.png\" alt=\"\"></p>\n<p>下一次登录时，只需要选择server，然后点击Load按钮，IP地址将会被自动导入。</p>\n<p>如果不想再保存该IP地址了，则选中session的名字，然后点击Delete按钮即可删除存储的session。</p>"},{"title":"python数据分析之NumPy","date":"2018-06-25T14:12:48.000Z","_content":"\nNumPy（Numerical Python）是高性能科学计算和数据分析的基础包。\n\n下面记录一些NumPy中的基础函数及应用。\n\n按照标准约定，我们在使用NumPy时，最好遵循如下格式：\n\n```python\nimport numpy as np\n```\n\n<!--more-->\n\n### ndarray\n\nndarray是一个n维数组对象，其中的所有元素必须是相同类型的值。\n\nndarray常见属性：\n\n* shape：表示各个维度大小的元组\n* dtype：表示数组数据类型的对象\n\n通过NumPy中的array()函数，即可将一切序列型的对象转换为NumPy中的数组。\n\n示例：\n\n```python\nimport numpy as np\ndata = np.array([[1,2,4,5],[1.1,23,1234,5]])\nprint(data.shape)\nprint(data.dtype)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/07/13/%2020180713114022.png)\n\n### zeros, ones\n\n除了可以使用array()函数创建数组外，还可以使用zeros、ones来创建数组。\n\n接受参数：\n\n* 表示维度大小的元组shape\n* 表示数据类型的dtype\n\n返回：一个指定维度且元素值全为0或1的数组\n\n示例：\n\n```python\nimport numpy as np\n# 创建一个１行３列的全0数组\nnp.zeros(3)\n# 创建一个３行3列的全0数组\nnp.zeros((3,3))\n# 创建一个3x3x2的全0数组\nnp.zeros((3,3,2))\nnp.ones(3)\nnp.ones((3,3))\nnp.ones((3,3,2))\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/07/13/20180713114346.png)\n\n可以看到，如果我们只传入一个数字n，则会创建一个1xn的数组。\n\n### shape\n\nshape()函数用于测量NumPy中数组、矩阵等的维度，返回一个表示维度的元组。\n\n示例：\n\n```python\nimport numpy as np\nnp.shape([[1, 2]])\nnp.shape([0])\nnp.shape(0)\ndata = np.array([[[1,2,3],[1,2,3]],\n                [[4,5,6],[7,8,9]]])\nnp.shape(data)\n```\n\n输出：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/07/13/20180713121056.png)\n\n### eye\n\neye()函数用于创建一个指定大小的单位数组(类似于线性代数中的单位矩阵)。\n\n接受参数：一个表示维度大小的整数\n\n示例：\n\n```python\nimport numpy as np\nnp.eye(3)\n```\n\n输出：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/07/13/20180713121243.png)\n\n### arange\n\narange()函数类似于python中的range()，但它返回的是一个NumPy数组。\n\n\n\n### random\n\nrandom.uniform\n\n\n\n### mat\n\nmat()函数用于创建矩阵。","source":"_posts/python-data-analysis-numpy.md","raw":"---\ntitle: python数据分析之NumPy\ndate: 2018-06-25 22:12:48\ntags: 数据分析\ncategories: python\n---\n\nNumPy（Numerical Python）是高性能科学计算和数据分析的基础包。\n\n下面记录一些NumPy中的基础函数及应用。\n\n按照标准约定，我们在使用NumPy时，最好遵循如下格式：\n\n```python\nimport numpy as np\n```\n\n<!--more-->\n\n### ndarray\n\nndarray是一个n维数组对象，其中的所有元素必须是相同类型的值。\n\nndarray常见属性：\n\n* shape：表示各个维度大小的元组\n* dtype：表示数组数据类型的对象\n\n通过NumPy中的array()函数，即可将一切序列型的对象转换为NumPy中的数组。\n\n示例：\n\n```python\nimport numpy as np\ndata = np.array([[1,2,4,5],[1.1,23,1234,5]])\nprint(data.shape)\nprint(data.dtype)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/07/13/%2020180713114022.png)\n\n### zeros, ones\n\n除了可以使用array()函数创建数组外，还可以使用zeros、ones来创建数组。\n\n接受参数：\n\n* 表示维度大小的元组shape\n* 表示数据类型的dtype\n\n返回：一个指定维度且元素值全为0或1的数组\n\n示例：\n\n```python\nimport numpy as np\n# 创建一个１行３列的全0数组\nnp.zeros(3)\n# 创建一个３行3列的全0数组\nnp.zeros((3,3))\n# 创建一个3x3x2的全0数组\nnp.zeros((3,3,2))\nnp.ones(3)\nnp.ones((3,3))\nnp.ones((3,3,2))\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/07/13/20180713114346.png)\n\n可以看到，如果我们只传入一个数字n，则会创建一个1xn的数组。\n\n### shape\n\nshape()函数用于测量NumPy中数组、矩阵等的维度，返回一个表示维度的元组。\n\n示例：\n\n```python\nimport numpy as np\nnp.shape([[1, 2]])\nnp.shape([0])\nnp.shape(0)\ndata = np.array([[[1,2,3],[1,2,3]],\n                [[4,5,6],[7,8,9]]])\nnp.shape(data)\n```\n\n输出：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/07/13/20180713121056.png)\n\n### eye\n\neye()函数用于创建一个指定大小的单位数组(类似于线性代数中的单位矩阵)。\n\n接受参数：一个表示维度大小的整数\n\n示例：\n\n```python\nimport numpy as np\nnp.eye(3)\n```\n\n输出：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/07/13/20180713121243.png)\n\n### arange\n\narange()函数类似于python中的range()，但它返回的是一个NumPy数组。\n\n\n\n### random\n\nrandom.uniform\n\n\n\n### mat\n\nmat()函数用于创建矩阵。","slug":"python-data-analysis-numpy","published":1,"updated":"2019-01-19T07:23:57.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9arp005fj1q0fr0wdmrh","content":"<p>NumPy（Numerical Python）是高性能科学计算和数据分析的基础包。</p>\n<p>下面记录一些NumPy中的基础函数及应用。</p>\n<p>按照标准约定，我们在使用NumPy时，最好遵循如下格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"ndarray\"><a href=\"#ndarray\" class=\"headerlink\" title=\"ndarray\"></a>ndarray</h3><p>ndarray是一个n维数组对象，其中的所有元素必须是相同类型的值。</p>\n<p>ndarray常见属性：</p>\n<ul>\n<li>shape：表示各个维度大小的元组</li>\n<li>dtype：表示数组数据类型的对象</li>\n</ul>\n<p>通过NumPy中的array()函数，即可将一切序列型的对象转换为NumPy中的数组。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">data = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>],[<span class=\"number\">1.1</span>,<span class=\"number\">23</span>,<span class=\"number\">1234</span>,<span class=\"number\">5</span>]])</span><br><span class=\"line\">print(data.shape)</span><br><span class=\"line\">print(data.dtype)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/07/13/%2020180713114022.png\" alt=\"\"></p>\n<h3 id=\"zeros-ones\"><a href=\"#zeros-ones\" class=\"headerlink\" title=\"zeros, ones\"></a>zeros, ones</h3><p>除了可以使用array()函数创建数组外，还可以使用zeros、ones来创建数组。</p>\n<p>接受参数：</p>\n<ul>\n<li>表示维度大小的元组shape</li>\n<li>表示数据类型的dtype</li>\n</ul>\n<p>返回：一个指定维度且元素值全为0或1的数组</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"comment\"># 创建一个１行３列的全0数组</span></span><br><span class=\"line\">np.zeros(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># 创建一个３行3列的全0数组</span></span><br><span class=\"line\">np.zeros((<span class=\"number\">3</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"comment\"># 创建一个3x3x2的全0数组</span></span><br><span class=\"line\">np.zeros((<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">np.ones(<span class=\"number\">3</span>)</span><br><span class=\"line\">np.ones((<span class=\"number\">3</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">np.ones((<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/07/13/20180713114346.png\" alt=\"\"></p>\n<p>可以看到，如果我们只传入一个数字n，则会创建一个1xn的数组。</p>\n<h3 id=\"shape\"><a href=\"#shape\" class=\"headerlink\" title=\"shape\"></a>shape</h3><p>shape()函数用于测量NumPy中数组、矩阵等的维度，返回一个表示维度的元组。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">np.shape([[<span class=\"number\">1</span>, <span class=\"number\">2</span>]])</span><br><span class=\"line\">np.shape([<span class=\"number\">0</span>])</span><br><span class=\"line\">np.shape(<span class=\"number\">0</span>)</span><br><span class=\"line\">data = np.array([[[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]],</span><br><span class=\"line\">                [[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]]])</span><br><span class=\"line\">np.shape(data)</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/07/13/20180713121056.png\" alt=\"\"></p>\n<h3 id=\"eye\"><a href=\"#eye\" class=\"headerlink\" title=\"eye\"></a>eye</h3><p>eye()函数用于创建一个指定大小的单位数组(类似于线性代数中的单位矩阵)。</p>\n<p>接受参数：一个表示维度大小的整数</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">np.eye(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/07/13/20180713121243.png\" alt=\"\"></p>\n<h3 id=\"arange\"><a href=\"#arange\" class=\"headerlink\" title=\"arange\"></a>arange</h3><p>arange()函数类似于python中的range()，但它返回的是一个NumPy数组。</p>\n<h3 id=\"random\"><a href=\"#random\" class=\"headerlink\" title=\"random\"></a>random</h3><p>random.uniform</p>\n<h3 id=\"mat\"><a href=\"#mat\" class=\"headerlink\" title=\"mat\"></a>mat</h3><p>mat()函数用于创建矩阵。</p>\n","site":{"data":{}},"excerpt":"<p>NumPy（Numerical Python）是高性能科学计算和数据分析的基础包。</p>\n<p>下面记录一些NumPy中的基础函数及应用。</p>\n<p>按照标准约定，我们在使用NumPy时，最好遵循如下格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"ndarray\"><a href=\"#ndarray\" class=\"headerlink\" title=\"ndarray\"></a>ndarray</h3><p>ndarray是一个n维数组对象，其中的所有元素必须是相同类型的值。</p>\n<p>ndarray常见属性：</p>\n<ul>\n<li>shape：表示各个维度大小的元组</li>\n<li>dtype：表示数组数据类型的对象</li>\n</ul>\n<p>通过NumPy中的array()函数，即可将一切序列型的对象转换为NumPy中的数组。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">data = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>],[<span class=\"number\">1.1</span>,<span class=\"number\">23</span>,<span class=\"number\">1234</span>,<span class=\"number\">5</span>]])</span><br><span class=\"line\">print(data.shape)</span><br><span class=\"line\">print(data.dtype)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/07/13/%2020180713114022.png\" alt=\"\"></p>\n<h3 id=\"zeros-ones\"><a href=\"#zeros-ones\" class=\"headerlink\" title=\"zeros, ones\"></a>zeros, ones</h3><p>除了可以使用array()函数创建数组外，还可以使用zeros、ones来创建数组。</p>\n<p>接受参数：</p>\n<ul>\n<li>表示维度大小的元组shape</li>\n<li>表示数据类型的dtype</li>\n</ul>\n<p>返回：一个指定维度且元素值全为0或1的数组</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"comment\"># 创建一个１行３列的全0数组</span></span><br><span class=\"line\">np.zeros(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># 创建一个３行3列的全0数组</span></span><br><span class=\"line\">np.zeros((<span class=\"number\">3</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"comment\"># 创建一个3x3x2的全0数组</span></span><br><span class=\"line\">np.zeros((<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">np.ones(<span class=\"number\">3</span>)</span><br><span class=\"line\">np.ones((<span class=\"number\">3</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">np.ones((<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/07/13/20180713114346.png\" alt=\"\"></p>\n<p>可以看到，如果我们只传入一个数字n，则会创建一个1xn的数组。</p>\n<h3 id=\"shape\"><a href=\"#shape\" class=\"headerlink\" title=\"shape\"></a>shape</h3><p>shape()函数用于测量NumPy中数组、矩阵等的维度，返回一个表示维度的元组。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">np.shape([[<span class=\"number\">1</span>, <span class=\"number\">2</span>]])</span><br><span class=\"line\">np.shape([<span class=\"number\">0</span>])</span><br><span class=\"line\">np.shape(<span class=\"number\">0</span>)</span><br><span class=\"line\">data = np.array([[[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]],</span><br><span class=\"line\">                [[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]]])</span><br><span class=\"line\">np.shape(data)</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/07/13/20180713121056.png\" alt=\"\"></p>\n<h3 id=\"eye\"><a href=\"#eye\" class=\"headerlink\" title=\"eye\"></a>eye</h3><p>eye()函数用于创建一个指定大小的单位数组(类似于线性代数中的单位矩阵)。</p>\n<p>接受参数：一个表示维度大小的整数</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">np.eye(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/07/13/20180713121243.png\" alt=\"\"></p>\n<h3 id=\"arange\"><a href=\"#arange\" class=\"headerlink\" title=\"arange\"></a>arange</h3><p>arange()函数类似于python中的range()，但它返回的是一个NumPy数组。</p>\n<h3 id=\"random\"><a href=\"#random\" class=\"headerlink\" title=\"random\"></a>random</h3><p>random.uniform</p>\n<h3 id=\"mat\"><a href=\"#mat\" class=\"headerlink\" title=\"mat\"></a>mat</h3><p>mat()函数用于创建矩阵。</p>"},{"title":"python数据分析之matplotlib","date":"2018-06-26T12:36:44.000Z","_content":"\nmatplotlib\n\n### 折线图\n\n```python\nimport matplotlib.pyplot as plt\ny = [1,4,9,16]\nplt.plot(y)\nplt.show()\n```\n\n修改标签文字和线条粗细\n\n```python\nimport matplotlib.pyplot as plt\ny = [1,4,9,16,25]\nplt.plot(y,linewidth=5)\n# \nplt.title('Squares Numbers',fontsize=24)\nplt.xlabel('value',fontsize=14)\nplt.ylabel('square of value',fontsize=14)\n\nplt.tick_params(axis='both',labelsize=14)\nplt.show()\n```\n\n校正图形\n\n```python\nimport matplotlib.pyplot as plt\nx = [1,2,3,4,5]\ny = [i**2 for i in x]\nplt.plot(x,y,linewidth=5)\n# \nplt.title('Squares Numbers',fontsize=24)\nplt.xlabel('value',fontsize=14)\nplt.ylabel('square of value',fontsize=14)\n\nplt.tick_params(axis='both',labelsize=14)\nplt.show()\n```\n\n\n\n### 散点图\n\n\n\n### 画分段函数\n\n","source":"_posts/python-data-analysis-matplotlib.md","raw":"---\ntitle: python数据分析之matplotlib\ndate: 2018-06-26 20:36:44\ntags: [python,matplotlib]\ncategories: python\n---\n\nmatplotlib\n\n### 折线图\n\n```python\nimport matplotlib.pyplot as plt\ny = [1,4,9,16]\nplt.plot(y)\nplt.show()\n```\n\n修改标签文字和线条粗细\n\n```python\nimport matplotlib.pyplot as plt\ny = [1,4,9,16,25]\nplt.plot(y,linewidth=5)\n# \nplt.title('Squares Numbers',fontsize=24)\nplt.xlabel('value',fontsize=14)\nplt.ylabel('square of value',fontsize=14)\n\nplt.tick_params(axis='both',labelsize=14)\nplt.show()\n```\n\n校正图形\n\n```python\nimport matplotlib.pyplot as plt\nx = [1,2,3,4,5]\ny = [i**2 for i in x]\nplt.plot(x,y,linewidth=5)\n# \nplt.title('Squares Numbers',fontsize=24)\nplt.xlabel('value',fontsize=14)\nplt.ylabel('square of value',fontsize=14)\n\nplt.tick_params(axis='both',labelsize=14)\nplt.show()\n```\n\n\n\n### 散点图\n\n\n\n### 画分段函数\n\n","slug":"python-data-analysis-matplotlib","published":1,"updated":"2019-01-19T07:23:57.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9arq005jj1q0kv5ph4l5","content":"<p>matplotlib</p>\n<h3 id=\"折线图\"><a href=\"#折线图\" class=\"headerlink\" title=\"折线图\"></a>折线图</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">y = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>,<span class=\"number\">16</span>]</span><br><span class=\"line\">plt.plot(y)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>修改标签文字和线条粗细</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">y = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>,<span class=\"number\">16</span>,<span class=\"number\">25</span>]</span><br><span class=\"line\">plt.plot(y,linewidth=<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">plt.title(<span class=\"string\">'Squares Numbers'</span>,fontsize=<span class=\"number\">24</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">'value'</span>,fontsize=<span class=\"number\">14</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">'square of value'</span>,fontsize=<span class=\"number\">14</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.tick_params(axis=<span class=\"string\">'both'</span>,labelsize=<span class=\"number\">14</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>校正图形</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">x = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">y = [i**<span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">plt.plot(x,y,linewidth=<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">plt.title(<span class=\"string\">'Squares Numbers'</span>,fontsize=<span class=\"number\">24</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">'value'</span>,fontsize=<span class=\"number\">14</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">'square of value'</span>,fontsize=<span class=\"number\">14</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.tick_params(axis=<span class=\"string\">'both'</span>,labelsize=<span class=\"number\">14</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<h3 id=\"散点图\"><a href=\"#散点图\" class=\"headerlink\" title=\"散点图\"></a>散点图</h3><h3 id=\"画分段函数\"><a href=\"#画分段函数\" class=\"headerlink\" title=\"画分段函数\"></a>画分段函数</h3>","site":{"data":{}},"excerpt":"","more":"<p>matplotlib</p>\n<h3 id=\"折线图\"><a href=\"#折线图\" class=\"headerlink\" title=\"折线图\"></a>折线图</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">y = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>,<span class=\"number\">16</span>]</span><br><span class=\"line\">plt.plot(y)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>修改标签文字和线条粗细</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">y = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>,<span class=\"number\">16</span>,<span class=\"number\">25</span>]</span><br><span class=\"line\">plt.plot(y,linewidth=<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">plt.title(<span class=\"string\">'Squares Numbers'</span>,fontsize=<span class=\"number\">24</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">'value'</span>,fontsize=<span class=\"number\">14</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">'square of value'</span>,fontsize=<span class=\"number\">14</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.tick_params(axis=<span class=\"string\">'both'</span>,labelsize=<span class=\"number\">14</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>校正图形</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">x = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">y = [i**<span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">plt.plot(x,y,linewidth=<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">plt.title(<span class=\"string\">'Squares Numbers'</span>,fontsize=<span class=\"number\">24</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">'value'</span>,fontsize=<span class=\"number\">14</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">'square of value'</span>,fontsize=<span class=\"number\">14</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.tick_params(axis=<span class=\"string\">'both'</span>,labelsize=<span class=\"number\">14</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<h3 id=\"散点图\"><a href=\"#散点图\" class=\"headerlink\" title=\"散点图\"></a>散点图</h3><h3 id=\"画分段函数\"><a href=\"#画分段函数\" class=\"headerlink\" title=\"画分段函数\"></a>画分段函数</h3>"},{"title":"python3教程-第1章 入门","date":"2018-06-11T10:38:47.000Z","_content":"\n> 课题组要求每一个组员必须学会python，并能使用scrapy（python的一个爬虫框架）编写爬虫，故有了这个系列的教程。\n>\n> 教程使用教材：《python编程从入门到实践》\n\n本文是python3教程系列的第一篇，主要讲下python环境的搭建，以及永恒的hello wolrd  &gt;_&lt;\n\n<!--more-->\n\n### 安装python3\n\n* Windows/Mac os\n\n[python官网下载地址](https://www.python.org/downloads/release)，按照官网的提示下载对应的版本，安装就行。安装完后，Windows用户双击安装目录下的python.exe，即可进入python命令行交互模式。\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180611185954.png)\n\n当然，最好在系统环境变量PATH中添加下python的安装路径，这样只要打开命令行界面，**输入python就可以进入python命令行交互模式**。\n\nMac用户自己解决问题咯，因为我没用过Mac os，哈哈哈。\n\n* Linux\n\n如果你用的Linux操作系统，咱不需要下载python，为什么呢？因为大多数Linux系统已经自带了python环境。\n\n我们可以在终端输入python，试探下系统是否已经安装python环境\n\n下图是我在ubuntu下的测试结果\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180611184149.png)\n\n系统提示我没有找到python命令，并给我提供了python的安装方法，最后又提示我，系统已经安装了python3，我可以直接输入python3，出现>>>，表示已经进入python命令行交互模式。\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180611185452.png)\n\n### hello python\n\n进入python命令行交互模式后，输入\n\n```python\nprint(\"hello python\")\n```\n\n不出意外的话，下面会打印一行“hello python”\n\n实际操作及结果如下：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180611190300.png)\n\n输入exit()或者ctrl+D可以退出python命令行交互模式\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612144035.png)\n\n<hr>\n\n刚才演示的是在python命令行交互模式直接写代码，我们能不能像其他语言一样，把代码写在一个文件里，然后编译执行呢？答案当然是可以的。\n\n现在我在桌面新建一个hello.py文件，并把刚才写的代码在文件里重新写一遍\n\n输入如下命令（Windows/Mac用python代替我的python3）\n\n```python\npython3 hello.py\n```\n\n输出如下\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180612143844.png)","source":"_posts/python3-tutorial-chapter1-helloworld.md","raw":"---\ntitle: python3教程-第1章 入门\ndate: 2018-06-11 18:38:47\ntags: python\ncategories: python\n---\n\n> 课题组要求每一个组员必须学会python，并能使用scrapy（python的一个爬虫框架）编写爬虫，故有了这个系列的教程。\n>\n> 教程使用教材：《python编程从入门到实践》\n\n本文是python3教程系列的第一篇，主要讲下python环境的搭建，以及永恒的hello wolrd  &gt;_&lt;\n\n<!--more-->\n\n### 安装python3\n\n* Windows/Mac os\n\n[python官网下载地址](https://www.python.org/downloads/release)，按照官网的提示下载对应的版本，安装就行。安装完后，Windows用户双击安装目录下的python.exe，即可进入python命令行交互模式。\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180611185954.png)\n\n当然，最好在系统环境变量PATH中添加下python的安装路径，这样只要打开命令行界面，**输入python就可以进入python命令行交互模式**。\n\nMac用户自己解决问题咯，因为我没用过Mac os，哈哈哈。\n\n* Linux\n\n如果你用的Linux操作系统，咱不需要下载python，为什么呢？因为大多数Linux系统已经自带了python环境。\n\n我们可以在终端输入python，试探下系统是否已经安装python环境\n\n下图是我在ubuntu下的测试结果\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180611184149.png)\n\n系统提示我没有找到python命令，并给我提供了python的安装方法，最后又提示我，系统已经安装了python3，我可以直接输入python3，出现>>>，表示已经进入python命令行交互模式。\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180611185452.png)\n\n### hello python\n\n进入python命令行交互模式后，输入\n\n```python\nprint(\"hello python\")\n```\n\n不出意外的话，下面会打印一行“hello python”\n\n实际操作及结果如下：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180611190300.png)\n\n输入exit()或者ctrl+D可以退出python命令行交互模式\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612144035.png)\n\n<hr>\n\n刚才演示的是在python命令行交互模式直接写代码，我们能不能像其他语言一样，把代码写在一个文件里，然后编译执行呢？答案当然是可以的。\n\n现在我在桌面新建一个hello.py文件，并把刚才写的代码在文件里重新写一遍\n\n输入如下命令（Windows/Mac用python代替我的python3）\n\n```python\npython3 hello.py\n```\n\n输出如下\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180612143844.png)","slug":"python3-tutorial-chapter1-helloworld","published":1,"updated":"2019-01-19T07:23:57.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9arr005lj1q0lss7fgg2","content":"<blockquote>\n<p>课题组要求每一个组员必须学会python，并能使用scrapy（python的一个爬虫框架）编写爬虫，故有了这个系列的教程。</p>\n<p>教程使用教材：《python编程从入门到实践》</p>\n</blockquote>\n<p>本文是python3教程系列的第一篇，主要讲下python环境的搭建，以及永恒的hello wolrd  &gt;_&lt;</p>\n<a id=\"more\"></a>\n<h3 id=\"安装python3\"><a href=\"#安装python3\" class=\"headerlink\" title=\"安装python3\"></a>安装python3</h3><ul>\n<li>Windows/Mac os</li>\n</ul>\n<p><a href=\"https://www.python.org/downloads/release\" target=\"_blank\" rel=\"noopener\">python官网下载地址</a>，按照官网的提示下载对应的版本，安装就行。安装完后，Windows用户双击安装目录下的python.exe，即可进入python命令行交互模式。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180611185954.png\" alt=\"\"></p>\n<p>当然，最好在系统环境变量PATH中添加下python的安装路径，这样只要打开命令行界面，<strong>输入python就可以进入python命令行交互模式</strong>。</p>\n<p>Mac用户自己解决问题咯，因为我没用过Mac os，哈哈哈。</p>\n<ul>\n<li>Linux</li>\n</ul>\n<p>如果你用的Linux操作系统，咱不需要下载python，为什么呢？因为大多数Linux系统已经自带了python环境。</p>\n<p>我们可以在终端输入python，试探下系统是否已经安装python环境</p>\n<p>下图是我在ubuntu下的测试结果</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180611184149.png\" alt=\"\"></p>\n<p>系统提示我没有找到python命令，并给我提供了python的安装方法，最后又提示我，系统已经安装了python3，我可以直接输入python3，出现&gt;&gt;&gt;，表示已经进入python命令行交互模式。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180611185452.png\" alt=\"\"></p>\n<h3 id=\"hello-python\"><a href=\"#hello-python\" class=\"headerlink\" title=\"hello python\"></a>hello python</h3><p>进入python命令行交互模式后，输入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"hello python\"</span>)</span><br></pre></td></tr></table></figure>\n<p>不出意外的话，下面会打印一行“hello python”</p>\n<p>实际操作及结果如下：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180611190300.png\" alt=\"\"></p>\n<p>输入exit()或者ctrl+D可以退出python命令行交互模式</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612144035.png\" alt=\"\"></p>\n<hr>\n\n<p>刚才演示的是在python命令行交互模式直接写代码，我们能不能像其他语言一样，把代码写在一个文件里，然后编译执行呢？答案当然是可以的。</p>\n<p>现在我在桌面新建一个hello.py文件，并把刚才写的代码在文件里重新写一遍</p>\n<p>输入如下命令（Windows/Mac用python代替我的python3）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 hello.py</span><br></pre></td></tr></table></figure>\n<p>输出如下</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180612143844.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>课题组要求每一个组员必须学会python，并能使用scrapy（python的一个爬虫框架）编写爬虫，故有了这个系列的教程。</p>\n<p>教程使用教材：《python编程从入门到实践》</p>\n</blockquote>\n<p>本文是python3教程系列的第一篇，主要讲下python环境的搭建，以及永恒的hello wolrd  &gt;_&lt;</p>","more":"<h3 id=\"安装python3\"><a href=\"#安装python3\" class=\"headerlink\" title=\"安装python3\"></a>安装python3</h3><ul>\n<li>Windows/Mac os</li>\n</ul>\n<p><a href=\"https://www.python.org/downloads/release\" target=\"_blank\" rel=\"noopener\">python官网下载地址</a>，按照官网的提示下载对应的版本，安装就行。安装完后，Windows用户双击安装目录下的python.exe，即可进入python命令行交互模式。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180611185954.png\" alt=\"\"></p>\n<p>当然，最好在系统环境变量PATH中添加下python的安装路径，这样只要打开命令行界面，<strong>输入python就可以进入python命令行交互模式</strong>。</p>\n<p>Mac用户自己解决问题咯，因为我没用过Mac os，哈哈哈。</p>\n<ul>\n<li>Linux</li>\n</ul>\n<p>如果你用的Linux操作系统，咱不需要下载python，为什么呢？因为大多数Linux系统已经自带了python环境。</p>\n<p>我们可以在终端输入python，试探下系统是否已经安装python环境</p>\n<p>下图是我在ubuntu下的测试结果</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180611184149.png\" alt=\"\"></p>\n<p>系统提示我没有找到python命令，并给我提供了python的安装方法，最后又提示我，系统已经安装了python3，我可以直接输入python3，出现&gt;&gt;&gt;，表示已经进入python命令行交互模式。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180611185452.png\" alt=\"\"></p>\n<h3 id=\"hello-python\"><a href=\"#hello-python\" class=\"headerlink\" title=\"hello python\"></a>hello python</h3><p>进入python命令行交互模式后，输入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"hello python\"</span>)</span><br></pre></td></tr></table></figure>\n<p>不出意外的话，下面会打印一行“hello python”</p>\n<p>实际操作及结果如下：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180611190300.png\" alt=\"\"></p>\n<p>输入exit()或者ctrl+D可以退出python命令行交互模式</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612144035.png\" alt=\"\"></p>\n<hr>\n\n<p>刚才演示的是在python命令行交互模式直接写代码，我们能不能像其他语言一样，把代码写在一个文件里，然后编译执行呢？答案当然是可以的。</p>\n<p>现在我在桌面新建一个hello.py文件，并把刚才写的代码在文件里重新写一遍</p>\n<p>输入如下命令（Windows/Mac用python代替我的python3）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 hello.py</span><br></pre></td></tr></table></figure>\n<p>输出如下</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/11/20180612143844.png\" alt=\"\"></p>"},{"title":"python3教程-第10章 函数(1)","date":"2018-06-17T09:31:31.000Z","_content":"\n> 从本章开始，我们将不再面对黑底白字的命令行，转而使用更加方便的编辑器编写python代码。你可以选择自己最喜欢的文本编辑器，如Notepad++、Sublime Text等，也可以使用eclipse、PyCharm等IDE。我使用的是eclipse+pydev。\n\n函数是带名字的代码块，用于完成具体的工作。\n\n### 定义函数\n\n* 基本语法：\n\n```python\ndef 函数名(参数1,参数2,...):\n    函数体\n```\n\n上面的括号中可以没有参数，也可以有任意个参数，但即使没有参数，括号也必不可少。\n\n<!--more-->\n\n示例1.不带参数的函数\n\n```python\ndef say_hello():\n    print(\"hello\")\nsay_hello()\n```\n\n输出结果：\n\n```python\nhello\n```\n\n示例2.带参数的函数\n\n```python\ndef say_hello_to(username):    \n    \"\"\"显示问候\"\"\"\n    print(\"hello \"+username.title())\nsay_hello_to('hegongshan')\n```\n\n输出结果：\n\n```python\nhello Hegongshan\n```\n\n上面第2行处的文本\"\"\"显示问候\"\"\"被称为**文档字符串**，用于描述函数的作用。文档字符串用**三个引号**括起来（单引号双引号都可以，但不能混用），python使用它们来生成有关程序中函数的文档。简单来说就是文档注释。\n\n* 实参和形参\n\n上面示例2，在say_hello_to()的定义中，变量username是一个形参（函数完成其工作所需要的一项信息）。\n\n在代码say_hello_to('hegongshan')中，值‘hegongshan’是一个实参（调用函数时传递给函数的信息）。\n\n在say_hello_to('hegongshan')中，将实参‘hegongshan’传递给了函数say_hello_to()，这个值被存储在形参username中。\n\n### 传递实参\n\npython中传递实参，主要有以下三种方式:\n\n#### 位置实参\n\n在调用函数时，基于实参的顺序，将函数调用中的每个实参都关联到函数定义中的一个形参，这种关联方式称为**位置实参（positional arguments）**。\n\n示例：\n\n```python\ndef greater_than(i,j):\n    '''判断第一个参数i是否大于第二个参数j'''\n    if i>j:\n        print(str(i)+\"大于\"+str(j))\n    elif i==j:\n        print(str(i)+\"等于\"+str(j))\n    else:\n        print(str(i)+\"小于\"+str(j))\ngreater_than(18,10)\n```\n\n输出结果：\n\n```python\n18大于10\n```\n\n位置实参这种方式，需要确保函数调用时实参的顺序与函数定义中形参的顺序一致，否则，结果可能出乎意料。\n\n例如下面这个例子\n\n```python\ndef describe_user(first,last):\n    print(\"用户\\n姓：\"+first+\",名：\"+last)\ndescribe_user(\"贺\", \"巩山\")\n```\n\n输出结果：\n\n```python\n用户\n姓：贺,名：巩山\n```\n\n如果我在调用函数的时候，将两个参数的顺序弄错了\n\n```python\ndescribe_user(\"巩山\", \"贺\")\n```\n\n输出结果：\n\n```python\n用户\n姓：巩山,名：贺\n```\n\n结果就是牛头不对马嘴。\n\n#### 关键字实参\n\n关键字实参是将键-值对传递给函数。通过这种方式，我们无需考虑函数调用中的实参顺序，清楚地指出了函数调用中各个值的用途。\n\n示例：\n\n```python\ndef describe_user(first,last):\n    print(\"用户\\n姓：\"+first+\",名：\"+last)\ndescribe_user(last=\"巩山\",first=\"贺\") \n```\n\n输出结果：\n\n```python\n用户\n姓：贺,名：巩山\n```\n\n可以看到我并没有按照形参顺序传递实参，输出结果也是正确的。\n\n#### 默认值\n\n编写函数时，可给每个形参指定默认值。如果在调用函数时给形参提供了实参，python将使用指定的实参值；否则，将使用形参的默认值。因此，在形参指定默认值后，可在函数调用中省略相应的实参。\n\n示例：\n\n```python\ndef describe_user(first,last,motto='没有伞的孩子更要努力奔跑'):\n    print(\"用户\\n姓：\"+first+\"，名：\"+last+\"，座右铭：\"+motto)\ndescribe_user(first=\"贺\",last='巩山') \ndescribe_user(first=\"he\",last='gongshan',motto='To live is to change the world') \n```\n\n输出结果：\n\n```python\n用户\n姓：贺，名：巩山，座右铭：没有伞的孩子更要努力奔跑\n用户\n姓：he，名：gongshan，座右铭：To live is to change the world\n```\n\n**使用默认值时，在形参列表中必须先列出没有默认值的形参，再列出有默认值的形参。**\n\n这是因为使用了默认值后，函数调用传参时，python依然会将传入的参数视为位置实参。\n\n### 返回值\n\n大多数情况下，函数并非直接显示输出，相反，它可以处理一些数据，并返回一个或一组值。在函数中，可以使用**return语句**将值返回。另外，函数可返回任何类型的值，包括列表和字典等较复杂的数据结构。\n\n#### 返回简单值\n\n示例：\n\n```python\ndef multiply(i,j):\n    return i*j\nresult = multiply(20, 55.5)\nprint(result)\n```\n\n输出结果：\n\n```python\n1110.0\n```\n\n#### 返回字典\n\n```python\ndef to_user(first,last,email,motto):\n    \"\"\"返回一个包含个人信息的字典\"\"\"\n    user = {'first':first,'last':last,'email':email,'motto':motto}\n    return user\nuser = to_user(\"he\", \"gongshan\", \"hegongshan@qq.com\", \"To live is to change the world.\")\nprint(user)\n```\n\n输出结果：\n\n```python\n{'first': 'he', 'last': 'gongshan', 'email': 'hegongshan@qq.com', 'motto': 'To live is to change the world.'}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[]()\n\n","source":"_posts/python3-tutorial-chapter10-function-1.md","raw":"---\ntitle: python3教程-第10章 函数(1)\ndate: 2018-06-17 17:31:31\ntags: python\ncategories: python\n---\n\n> 从本章开始，我们将不再面对黑底白字的命令行，转而使用更加方便的编辑器编写python代码。你可以选择自己最喜欢的文本编辑器，如Notepad++、Sublime Text等，也可以使用eclipse、PyCharm等IDE。我使用的是eclipse+pydev。\n\n函数是带名字的代码块，用于完成具体的工作。\n\n### 定义函数\n\n* 基本语法：\n\n```python\ndef 函数名(参数1,参数2,...):\n    函数体\n```\n\n上面的括号中可以没有参数，也可以有任意个参数，但即使没有参数，括号也必不可少。\n\n<!--more-->\n\n示例1.不带参数的函数\n\n```python\ndef say_hello():\n    print(\"hello\")\nsay_hello()\n```\n\n输出结果：\n\n```python\nhello\n```\n\n示例2.带参数的函数\n\n```python\ndef say_hello_to(username):    \n    \"\"\"显示问候\"\"\"\n    print(\"hello \"+username.title())\nsay_hello_to('hegongshan')\n```\n\n输出结果：\n\n```python\nhello Hegongshan\n```\n\n上面第2行处的文本\"\"\"显示问候\"\"\"被称为**文档字符串**，用于描述函数的作用。文档字符串用**三个引号**括起来（单引号双引号都可以，但不能混用），python使用它们来生成有关程序中函数的文档。简单来说就是文档注释。\n\n* 实参和形参\n\n上面示例2，在say_hello_to()的定义中，变量username是一个形参（函数完成其工作所需要的一项信息）。\n\n在代码say_hello_to('hegongshan')中，值‘hegongshan’是一个实参（调用函数时传递给函数的信息）。\n\n在say_hello_to('hegongshan')中，将实参‘hegongshan’传递给了函数say_hello_to()，这个值被存储在形参username中。\n\n### 传递实参\n\npython中传递实参，主要有以下三种方式:\n\n#### 位置实参\n\n在调用函数时，基于实参的顺序，将函数调用中的每个实参都关联到函数定义中的一个形参，这种关联方式称为**位置实参（positional arguments）**。\n\n示例：\n\n```python\ndef greater_than(i,j):\n    '''判断第一个参数i是否大于第二个参数j'''\n    if i>j:\n        print(str(i)+\"大于\"+str(j))\n    elif i==j:\n        print(str(i)+\"等于\"+str(j))\n    else:\n        print(str(i)+\"小于\"+str(j))\ngreater_than(18,10)\n```\n\n输出结果：\n\n```python\n18大于10\n```\n\n位置实参这种方式，需要确保函数调用时实参的顺序与函数定义中形参的顺序一致，否则，结果可能出乎意料。\n\n例如下面这个例子\n\n```python\ndef describe_user(first,last):\n    print(\"用户\\n姓：\"+first+\",名：\"+last)\ndescribe_user(\"贺\", \"巩山\")\n```\n\n输出结果：\n\n```python\n用户\n姓：贺,名：巩山\n```\n\n如果我在调用函数的时候，将两个参数的顺序弄错了\n\n```python\ndescribe_user(\"巩山\", \"贺\")\n```\n\n输出结果：\n\n```python\n用户\n姓：巩山,名：贺\n```\n\n结果就是牛头不对马嘴。\n\n#### 关键字实参\n\n关键字实参是将键-值对传递给函数。通过这种方式，我们无需考虑函数调用中的实参顺序，清楚地指出了函数调用中各个值的用途。\n\n示例：\n\n```python\ndef describe_user(first,last):\n    print(\"用户\\n姓：\"+first+\",名：\"+last)\ndescribe_user(last=\"巩山\",first=\"贺\") \n```\n\n输出结果：\n\n```python\n用户\n姓：贺,名：巩山\n```\n\n可以看到我并没有按照形参顺序传递实参，输出结果也是正确的。\n\n#### 默认值\n\n编写函数时，可给每个形参指定默认值。如果在调用函数时给形参提供了实参，python将使用指定的实参值；否则，将使用形参的默认值。因此，在形参指定默认值后，可在函数调用中省略相应的实参。\n\n示例：\n\n```python\ndef describe_user(first,last,motto='没有伞的孩子更要努力奔跑'):\n    print(\"用户\\n姓：\"+first+\"，名：\"+last+\"，座右铭：\"+motto)\ndescribe_user(first=\"贺\",last='巩山') \ndescribe_user(first=\"he\",last='gongshan',motto='To live is to change the world') \n```\n\n输出结果：\n\n```python\n用户\n姓：贺，名：巩山，座右铭：没有伞的孩子更要努力奔跑\n用户\n姓：he，名：gongshan，座右铭：To live is to change the world\n```\n\n**使用默认值时，在形参列表中必须先列出没有默认值的形参，再列出有默认值的形参。**\n\n这是因为使用了默认值后，函数调用传参时，python依然会将传入的参数视为位置实参。\n\n### 返回值\n\n大多数情况下，函数并非直接显示输出，相反，它可以处理一些数据，并返回一个或一组值。在函数中，可以使用**return语句**将值返回。另外，函数可返回任何类型的值，包括列表和字典等较复杂的数据结构。\n\n#### 返回简单值\n\n示例：\n\n```python\ndef multiply(i,j):\n    return i*j\nresult = multiply(20, 55.5)\nprint(result)\n```\n\n输出结果：\n\n```python\n1110.0\n```\n\n#### 返回字典\n\n```python\ndef to_user(first,last,email,motto):\n    \"\"\"返回一个包含个人信息的字典\"\"\"\n    user = {'first':first,'last':last,'email':email,'motto':motto}\n    return user\nuser = to_user(\"he\", \"gongshan\", \"hegongshan@qq.com\", \"To live is to change the world.\")\nprint(user)\n```\n\n输出结果：\n\n```python\n{'first': 'he', 'last': 'gongshan', 'email': 'hegongshan@qq.com', 'motto': 'To live is to change the world.'}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[]()\n\n","slug":"python3-tutorial-chapter10-function-1","published":1,"updated":"2019-01-19T07:23:57.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9arr005pj1q0yflv8il4","content":"<blockquote>\n<p>从本章开始，我们将不再面对黑底白字的命令行，转而使用更加方便的编辑器编写python代码。你可以选择自己最喜欢的文本编辑器，如Notepad++、Sublime Text等，也可以使用eclipse、PyCharm等IDE。我使用的是eclipse+pydev。</p>\n</blockquote>\n<p>函数是带名字的代码块，用于完成具体的工作。</p>\n<h3 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h3><ul>\n<li>基本语法：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> 函数名<span class=\"params\">(参数<span class=\"number\">1</span>,参数<span class=\"number\">2</span>,...)</span>:</span></span><br><span class=\"line\">    函数体</span><br></pre></td></tr></table></figure>\n<p>上面的括号中可以没有参数，也可以有任意个参数，但即使没有参数，括号也必不可少。</p>\n<a id=\"more\"></a>\n<p>示例1.不带参数的函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say_hello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">say_hello()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br></pre></td></tr></table></figure>\n<p>示例2.带参数的函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say_hello_to</span><span class=\"params\">(username)</span>:</span>    </span><br><span class=\"line\">    <span class=\"string\">\"\"\"显示问候\"\"\"</span></span><br><span class=\"line\">    print(<span class=\"string\">\"hello \"</span>+username.title())</span><br><span class=\"line\">say_hello_to(<span class=\"string\">'hegongshan'</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello Hegongshan</span><br></pre></td></tr></table></figure>\n<p>上面第2行处的文本”””显示问候”””被称为<strong>文档字符串</strong>，用于描述函数的作用。文档字符串用<strong>三个引号</strong>括起来（单引号双引号都可以，但不能混用），python使用它们来生成有关程序中函数的文档。简单来说就是文档注释。</p>\n<ul>\n<li>实参和形参</li>\n</ul>\n<p>上面示例2，在say_hello_to()的定义中，变量username是一个形参（函数完成其工作所需要的一项信息）。</p>\n<p>在代码say_hello_to(‘hegongshan’)中，值‘hegongshan’是一个实参（调用函数时传递给函数的信息）。</p>\n<p>在say_hello_to(‘hegongshan’)中，将实参‘hegongshan’传递给了函数say_hello_to()，这个值被存储在形参username中。</p>\n<h3 id=\"传递实参\"><a href=\"#传递实参\" class=\"headerlink\" title=\"传递实参\"></a>传递实参</h3><p>python中传递实参，主要有以下三种方式:</p>\n<h4 id=\"位置实参\"><a href=\"#位置实参\" class=\"headerlink\" title=\"位置实参\"></a>位置实参</h4><p>在调用函数时，基于实参的顺序，将函数调用中的每个实参都关联到函数定义中的一个形参，这种关联方式称为<strong>位置实参（positional arguments）</strong>。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greater_than</span><span class=\"params\">(i,j)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''判断第一个参数i是否大于第二个参数j'''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i&gt;j:</span><br><span class=\"line\">        print(str(i)+<span class=\"string\">\"大于\"</span>+str(j))</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> i==j:</span><br><span class=\"line\">        print(str(i)+<span class=\"string\">\"等于\"</span>+str(j))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(str(i)+<span class=\"string\">\"小于\"</span>+str(j))</span><br><span class=\"line\">greater_than(<span class=\"number\">18</span>,<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">18</span>大于<span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p>位置实参这种方式，需要确保函数调用时实参的顺序与函数定义中形参的顺序一致，否则，结果可能出乎意料。</p>\n<p>例如下面这个例子</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">describe_user</span><span class=\"params\">(first,last)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"用户\\n姓：\"</span>+first+<span class=\"string\">\",名：\"</span>+last)</span><br><span class=\"line\">describe_user(<span class=\"string\">\"贺\"</span>, <span class=\"string\">\"巩山\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户</span><br><span class=\"line\">姓：贺,名：巩山</span><br></pre></td></tr></table></figure>\n<p>如果我在调用函数的时候，将两个参数的顺序弄错了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe_user(<span class=\"string\">\"巩山\"</span>, <span class=\"string\">\"贺\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户</span><br><span class=\"line\">姓：巩山,名：贺</span><br></pre></td></tr></table></figure>\n<p>结果就是牛头不对马嘴。</p>\n<h4 id=\"关键字实参\"><a href=\"#关键字实参\" class=\"headerlink\" title=\"关键字实参\"></a>关键字实参</h4><p>关键字实参是将键-值对传递给函数。通过这种方式，我们无需考虑函数调用中的实参顺序，清楚地指出了函数调用中各个值的用途。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">describe_user</span><span class=\"params\">(first,last)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"用户\\n姓：\"</span>+first+<span class=\"string\">\",名：\"</span>+last)</span><br><span class=\"line\">describe_user(last=<span class=\"string\">\"巩山\"</span>,first=<span class=\"string\">\"贺\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户</span><br><span class=\"line\">姓：贺,名：巩山</span><br></pre></td></tr></table></figure>\n<p>可以看到我并没有按照形参顺序传递实参，输出结果也是正确的。</p>\n<h4 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h4><p>编写函数时，可给每个形参指定默认值。如果在调用函数时给形参提供了实参，python将使用指定的实参值；否则，将使用形参的默认值。因此，在形参指定默认值后，可在函数调用中省略相应的实参。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">describe_user</span><span class=\"params\">(first,last,motto=<span class=\"string\">'没有伞的孩子更要努力奔跑'</span>)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"用户\\n姓：\"</span>+first+<span class=\"string\">\"，名：\"</span>+last+<span class=\"string\">\"，座右铭：\"</span>+motto)</span><br><span class=\"line\">describe_user(first=<span class=\"string\">\"贺\"</span>,last=<span class=\"string\">'巩山'</span>) </span><br><span class=\"line\">describe_user(first=<span class=\"string\">\"he\"</span>,last=<span class=\"string\">'gongshan'</span>,motto=<span class=\"string\">'To live is to change the world'</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户</span><br><span class=\"line\">姓：贺，名：巩山，座右铭：没有伞的孩子更要努力奔跑</span><br><span class=\"line\">用户</span><br><span class=\"line\">姓：he，名：gongshan，座右铭：To live <span class=\"keyword\">is</span> to change the world</span><br></pre></td></tr></table></figure>\n<p><strong>使用默认值时，在形参列表中必须先列出没有默认值的形参，再列出有默认值的形参。</strong></p>\n<p>这是因为使用了默认值后，函数调用传参时，python依然会将传入的参数视为位置实参。</p>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>大多数情况下，函数并非直接显示输出，相反，它可以处理一些数据，并返回一个或一组值。在函数中，可以使用<strong>return语句</strong>将值返回。另外，函数可返回任何类型的值，包括列表和字典等较复杂的数据结构。</p>\n<h4 id=\"返回简单值\"><a href=\"#返回简单值\" class=\"headerlink\" title=\"返回简单值\"></a>返回简单值</h4><p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">multiply</span><span class=\"params\">(i,j)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i*j</span><br><span class=\"line\">result = multiply(<span class=\"number\">20</span>, <span class=\"number\">55.5</span>)</span><br><span class=\"line\">print(result)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1110.0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"返回字典\"><a href=\"#返回字典\" class=\"headerlink\" title=\"返回字典\"></a>返回字典</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_user</span><span class=\"params\">(first,last,email,motto)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"返回一个包含个人信息的字典\"\"\"</span></span><br><span class=\"line\">    user = &#123;<span class=\"string\">'first'</span>:first,<span class=\"string\">'last'</span>:last,<span class=\"string\">'email'</span>:email,<span class=\"string\">'motto'</span>:motto&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user</span><br><span class=\"line\">user = to_user(<span class=\"string\">\"he\"</span>, <span class=\"string\">\"gongshan\"</span>, <span class=\"string\">\"hegongshan@qq.com\"</span>, <span class=\"string\">\"To live is to change the world.\"</span>)</span><br><span class=\"line\">print(user)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'first'</span>: <span class=\"string\">'he'</span>, <span class=\"string\">'last'</span>: <span class=\"string\">'gongshan'</span>, <span class=\"string\">'email'</span>: <span class=\"string\">'hegongshan@qq.com'</span>, <span class=\"string\">'motto'</span>: <span class=\"string\">'To live is to change the world.'</span>&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"\"></a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>从本章开始，我们将不再面对黑底白字的命令行，转而使用更加方便的编辑器编写python代码。你可以选择自己最喜欢的文本编辑器，如Notepad++、Sublime Text等，也可以使用eclipse、PyCharm等IDE。我使用的是eclipse+pydev。</p>\n</blockquote>\n<p>函数是带名字的代码块，用于完成具体的工作。</p>\n<h3 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h3><ul>\n<li>基本语法：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> 函数名<span class=\"params\">(参数<span class=\"number\">1</span>,参数<span class=\"number\">2</span>,...)</span>:</span></span><br><span class=\"line\">    函数体</span><br></pre></td></tr></table></figure>\n<p>上面的括号中可以没有参数，也可以有任意个参数，但即使没有参数，括号也必不可少。</p>","more":"<p>示例1.不带参数的函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say_hello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">say_hello()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br></pre></td></tr></table></figure>\n<p>示例2.带参数的函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say_hello_to</span><span class=\"params\">(username)</span>:</span>    </span><br><span class=\"line\">    <span class=\"string\">\"\"\"显示问候\"\"\"</span></span><br><span class=\"line\">    print(<span class=\"string\">\"hello \"</span>+username.title())</span><br><span class=\"line\">say_hello_to(<span class=\"string\">'hegongshan'</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello Hegongshan</span><br></pre></td></tr></table></figure>\n<p>上面第2行处的文本”””显示问候”””被称为<strong>文档字符串</strong>，用于描述函数的作用。文档字符串用<strong>三个引号</strong>括起来（单引号双引号都可以，但不能混用），python使用它们来生成有关程序中函数的文档。简单来说就是文档注释。</p>\n<ul>\n<li>实参和形参</li>\n</ul>\n<p>上面示例2，在say_hello_to()的定义中，变量username是一个形参（函数完成其工作所需要的一项信息）。</p>\n<p>在代码say_hello_to(‘hegongshan’)中，值‘hegongshan’是一个实参（调用函数时传递给函数的信息）。</p>\n<p>在say_hello_to(‘hegongshan’)中，将实参‘hegongshan’传递给了函数say_hello_to()，这个值被存储在形参username中。</p>\n<h3 id=\"传递实参\"><a href=\"#传递实参\" class=\"headerlink\" title=\"传递实参\"></a>传递实参</h3><p>python中传递实参，主要有以下三种方式:</p>\n<h4 id=\"位置实参\"><a href=\"#位置实参\" class=\"headerlink\" title=\"位置实参\"></a>位置实参</h4><p>在调用函数时，基于实参的顺序，将函数调用中的每个实参都关联到函数定义中的一个形参，这种关联方式称为<strong>位置实参（positional arguments）</strong>。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greater_than</span><span class=\"params\">(i,j)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''判断第一个参数i是否大于第二个参数j'''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i&gt;j:</span><br><span class=\"line\">        print(str(i)+<span class=\"string\">\"大于\"</span>+str(j))</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> i==j:</span><br><span class=\"line\">        print(str(i)+<span class=\"string\">\"等于\"</span>+str(j))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(str(i)+<span class=\"string\">\"小于\"</span>+str(j))</span><br><span class=\"line\">greater_than(<span class=\"number\">18</span>,<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">18</span>大于<span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p>位置实参这种方式，需要确保函数调用时实参的顺序与函数定义中形参的顺序一致，否则，结果可能出乎意料。</p>\n<p>例如下面这个例子</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">describe_user</span><span class=\"params\">(first,last)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"用户\\n姓：\"</span>+first+<span class=\"string\">\",名：\"</span>+last)</span><br><span class=\"line\">describe_user(<span class=\"string\">\"贺\"</span>, <span class=\"string\">\"巩山\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户</span><br><span class=\"line\">姓：贺,名：巩山</span><br></pre></td></tr></table></figure>\n<p>如果我在调用函数的时候，将两个参数的顺序弄错了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe_user(<span class=\"string\">\"巩山\"</span>, <span class=\"string\">\"贺\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户</span><br><span class=\"line\">姓：巩山,名：贺</span><br></pre></td></tr></table></figure>\n<p>结果就是牛头不对马嘴。</p>\n<h4 id=\"关键字实参\"><a href=\"#关键字实参\" class=\"headerlink\" title=\"关键字实参\"></a>关键字实参</h4><p>关键字实参是将键-值对传递给函数。通过这种方式，我们无需考虑函数调用中的实参顺序，清楚地指出了函数调用中各个值的用途。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">describe_user</span><span class=\"params\">(first,last)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"用户\\n姓：\"</span>+first+<span class=\"string\">\",名：\"</span>+last)</span><br><span class=\"line\">describe_user(last=<span class=\"string\">\"巩山\"</span>,first=<span class=\"string\">\"贺\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户</span><br><span class=\"line\">姓：贺,名：巩山</span><br></pre></td></tr></table></figure>\n<p>可以看到我并没有按照形参顺序传递实参，输出结果也是正确的。</p>\n<h4 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h4><p>编写函数时，可给每个形参指定默认值。如果在调用函数时给形参提供了实参，python将使用指定的实参值；否则，将使用形参的默认值。因此，在形参指定默认值后，可在函数调用中省略相应的实参。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">describe_user</span><span class=\"params\">(first,last,motto=<span class=\"string\">'没有伞的孩子更要努力奔跑'</span>)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"用户\\n姓：\"</span>+first+<span class=\"string\">\"，名：\"</span>+last+<span class=\"string\">\"，座右铭：\"</span>+motto)</span><br><span class=\"line\">describe_user(first=<span class=\"string\">\"贺\"</span>,last=<span class=\"string\">'巩山'</span>) </span><br><span class=\"line\">describe_user(first=<span class=\"string\">\"he\"</span>,last=<span class=\"string\">'gongshan'</span>,motto=<span class=\"string\">'To live is to change the world'</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户</span><br><span class=\"line\">姓：贺，名：巩山，座右铭：没有伞的孩子更要努力奔跑</span><br><span class=\"line\">用户</span><br><span class=\"line\">姓：he，名：gongshan，座右铭：To live <span class=\"keyword\">is</span> to change the world</span><br></pre></td></tr></table></figure>\n<p><strong>使用默认值时，在形参列表中必须先列出没有默认值的形参，再列出有默认值的形参。</strong></p>\n<p>这是因为使用了默认值后，函数调用传参时，python依然会将传入的参数视为位置实参。</p>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>大多数情况下，函数并非直接显示输出，相反，它可以处理一些数据，并返回一个或一组值。在函数中，可以使用<strong>return语句</strong>将值返回。另外，函数可返回任何类型的值，包括列表和字典等较复杂的数据结构。</p>\n<h4 id=\"返回简单值\"><a href=\"#返回简单值\" class=\"headerlink\" title=\"返回简单值\"></a>返回简单值</h4><p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">multiply</span><span class=\"params\">(i,j)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i*j</span><br><span class=\"line\">result = multiply(<span class=\"number\">20</span>, <span class=\"number\">55.5</span>)</span><br><span class=\"line\">print(result)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1110.0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"返回字典\"><a href=\"#返回字典\" class=\"headerlink\" title=\"返回字典\"></a>返回字典</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_user</span><span class=\"params\">(first,last,email,motto)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"返回一个包含个人信息的字典\"\"\"</span></span><br><span class=\"line\">    user = &#123;<span class=\"string\">'first'</span>:first,<span class=\"string\">'last'</span>:last,<span class=\"string\">'email'</span>:email,<span class=\"string\">'motto'</span>:motto&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user</span><br><span class=\"line\">user = to_user(<span class=\"string\">\"he\"</span>, <span class=\"string\">\"gongshan\"</span>, <span class=\"string\">\"hegongshan@qq.com\"</span>, <span class=\"string\">\"To live is to change the world.\"</span>)</span><br><span class=\"line\">print(user)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'first'</span>: <span class=\"string\">'he'</span>, <span class=\"string\">'last'</span>: <span class=\"string\">'gongshan'</span>, <span class=\"string\">'email'</span>: <span class=\"string\">'hegongshan@qq.com'</span>, <span class=\"string\">'motto'</span>: <span class=\"string\">'To live is to change the world.'</span>&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"\"></a></p>"},{"title":"python3教程-第10章 函数(2)","date":"2018-06-17T13:50:30.000Z","_content":"\n上一小节中，我们学习了基础的函数使用，本节我们将学习更加高级的函数运用，以及函数编写的规范。\n\n### 传递任意数量的参数\n\n有时候，我们预先不知道函数需要接受多少个参数，好在python允许函数从调用语句中获取任意数量的实参。\n\n<!--more-->\n\n示例：\n\n```python\ndef test_any_arguments(*args):\n    \"\"\"测试任意数量的参数\"\"\"\n    print(args)\ntest_any_arguments(\"school of information management\")\ntest_any_arguments(\"hegongshan\",\"https://www.hegongshan.com\",\n                   \"central china normal university\")\n```\n\n输出结果：\n\n```python\n('school of information management',)\n('hegongshan', 'https://www.hegongshan.com', 'central china normal university')\n```\n\n在上面代码的第一行中，形参名*args中的星号，表示让python创建一个名为args的空元组，并将收到的所有值都封装到这个元组中。\n\n#### 结合使用位置实参和任意数量的实参\n\n如果函数要接收不同类型的参数，必须在函数定义中将接纳任意数量实参的形参放在最后。python先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中。\n\n示例：\n\n```python\ndef test_any_arguments(tip,*args):\n    print(tip+\":\")\n    print(args)\ntest_any_arguments(\"hello\",\"import this\",\"the zen of python\")\n```\n\n输出结果：\n\n```python\nhello:\n('import this', 'the zen of python')\n```\n\n#### 使用任意数量的关键字实参\n\n示例：\n\n```python\ndef get_user_info(name,**user_info):\n    \"\"\"创建一个字典包含用户的所有信息\"\"\"\n    profile = {}\n    profile['name'] = name\n    for key,value in user_info.items():\n        profile[key] = value\n    return profile\nuser_info = get_user_info('hegongshan',email='hegongshan@qq.com',\n                          website=\"https://www.hegongshan.com\",\n                          occupation=\"freelance/student\")\nprint(user_info)\n```\n\n输出结果：\n\n```python\n{'name': 'hegongshan', 'email': 'hegongshan@qq.com', 'website': 'https://www.hegongshan.com', 'occupation': 'freelance/student'}\n```\n\n上面代码第一行中，函数形参名**user_info，前面的两个星号表示让python创建一个名为user_info的空字典，并将收到的所有键-值对都封装到这个字典中。\n\n### 将函数存储在模块中\n\n通过将函数存储在称为模块的独立文件中，可隐藏程序代码的实现细节，将重点放在程序的高层逻辑上。模块是扩展名为.py的文件。import语句允许在当前运行的程序文件中使用模块中的代码。\n\n#### 导入整个模块\n\n我们先创建一个包含函数get_user_info()的模块user.py\n\n```python\ndef get_user_info(name,**user_info):\n    \"\"\"创建一个字典包含用户的所有信息\"\"\"\n    profile = {}\n    profile['name'] = name\n    for key,value in user_info.items():\n        profile[key] = value\n    return profile\n```\n\n接下来，在user.py所在目录中创建一个main.py的文件，用于调用get_user_info()函数。\n\nmain.py\n\n```python\nimport user\n\nuser_info = user.get_user_info('hegongshan',email='hegongshan@qq.com',\n                          website=\"https://www.hegongshan.com\",\n                          occupation=\"freelance/student\")\nprint(user_info)\n```\n\n第一行中的import user让python打开文件user.py，并将其中的所有函数都复制到这个程序中。要调用被导入模块中的函数，需要制定模块名user和函数名get_user_info()，并用\".\"（成员运算符）分隔它们。\n\n上述代码的输出结果与之前一般无二\n\n```python\n{'name': 'hegongshan', 'email': 'hegongshan@qq.com', 'website': 'https://www.hegongshan.com', 'occupation': 'freelance/student'}\n```\n\n#### 导入特定的函数\n\n如果我们不需要导入模块中的所有函数，只想导入某几个函数，也是可以的。\n\n语法如下：\n\n```python\nfrom 模块名 import 函数名1,函数名2,...\n```\n\n现在我们可以改写上面main.py中的代码\n\n```python\nfrom user import get_user_info\n\nuser_info = get_user_info('hegongshan',email='hegongshan@qq.com',\n                          website=\"https://www.hegongshan.com\",\n                          occupation=\"freelance/student\")\nprint(user_info)\n```\n\n若使用这种语法，调用导入的函数时，不能加模块名和 ”.“。\n\n使用这种方式后，如果我们还像之前那样，用 模块名 . 函数名来调用函数，则会报如下错误：\n\n```python\nTraceback (most recent call last):\n  File \"main.py\", line 3, in <module>\n    user_info = user.get_user_info('hegongshan',email='hegongshan@qq.com',\nNameError: name 'user' is not defined\n```\n\n#### 使用as给函数指定别名\n\n如果要导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而独一无二的别名（类似于人的外号）。\n\n语法如下：\n\n```python\nfrom 模块名 import 函数名 as 函数的别名\n```\n\n修改main.py\n\n```python\nfrom user import get_user_info as info\n\nuser_info = info('hegongshan',email='hegongshan@qq.com',\n                          website=\"https://www.hegongshan.com\",\n                          occupation=\"freelance/student\")\nprint(user_info)\n```\n\n值得注意的是，指定了别名后，就不能再使用本来的函数名了。\n\n#### 使用as给模块指定别名\n\n我们还可以使用as给模块指定一个简短的别名。\n\n语法如下：\n\n```python\nimport 模块名 as 模块的别名\n```\n\n例如，修改main.py，为导入的模块user指定别名u\n\n```python\nimport user as u\n\nuser_info = u.get_user_info('hegongshan',email='hegongshan@qq.com',\n                          website=\"https://www.hegongshan.com\",\n                          occupation=\"freelance/student\")\nprint(user_info)\n```\n\n#### 导入模块中的所有函数\n\n使用星号（*）可以导入模块中的所有函数\n\n语法如下：\n\n```python\nfrom 模块名 import *\n```\n\n示例：\n\n```python\nfrom user import *\n\nuser_info = get_user_info('hegongshan',email='hegongshan@qq.com',\n                          website=\"https://www.hegongshan.com\",\n                          occupation=\"freelance/student\")\nprint(user_info)\n```\n\n不推荐使用这种用法。为了提高代码的可读性，要么导入我们需要使用的某个（些）函数，要么导入整个模块并使用句号（ . ）表示法。\n\n### 函数编写规范\n\n* 函数命名应该有意义，且只包含小写字母和下划线\n* 每个函数都应包含简要地阐述其功能的注释，该注释应紧跟在函数定义后面，并采用文档字符串格式\n* 给形参指定默认值，或者在函数调用中的关键字实参，等号两边不要有空格\n* 一行的长度不要超过79个字符\n* 如果程序或模块中包含多个函数，使用两个空行将相邻的函数分开\n* 所有的import语句都应该放在文件开头，唯一例外的情形是，在文件开头使用了注释来描述整个程序。","source":"_posts/python3-tutorial-chapter10-function-2.md","raw":"---\ntitle: python3教程-第10章 函数(2)\ndate: 2018-06-17 21:50:30\ntags: python\ncategories: python\n---\n\n上一小节中，我们学习了基础的函数使用，本节我们将学习更加高级的函数运用，以及函数编写的规范。\n\n### 传递任意数量的参数\n\n有时候，我们预先不知道函数需要接受多少个参数，好在python允许函数从调用语句中获取任意数量的实参。\n\n<!--more-->\n\n示例：\n\n```python\ndef test_any_arguments(*args):\n    \"\"\"测试任意数量的参数\"\"\"\n    print(args)\ntest_any_arguments(\"school of information management\")\ntest_any_arguments(\"hegongshan\",\"https://www.hegongshan.com\",\n                   \"central china normal university\")\n```\n\n输出结果：\n\n```python\n('school of information management',)\n('hegongshan', 'https://www.hegongshan.com', 'central china normal university')\n```\n\n在上面代码的第一行中，形参名*args中的星号，表示让python创建一个名为args的空元组，并将收到的所有值都封装到这个元组中。\n\n#### 结合使用位置实参和任意数量的实参\n\n如果函数要接收不同类型的参数，必须在函数定义中将接纳任意数量实参的形参放在最后。python先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中。\n\n示例：\n\n```python\ndef test_any_arguments(tip,*args):\n    print(tip+\":\")\n    print(args)\ntest_any_arguments(\"hello\",\"import this\",\"the zen of python\")\n```\n\n输出结果：\n\n```python\nhello:\n('import this', 'the zen of python')\n```\n\n#### 使用任意数量的关键字实参\n\n示例：\n\n```python\ndef get_user_info(name,**user_info):\n    \"\"\"创建一个字典包含用户的所有信息\"\"\"\n    profile = {}\n    profile['name'] = name\n    for key,value in user_info.items():\n        profile[key] = value\n    return profile\nuser_info = get_user_info('hegongshan',email='hegongshan@qq.com',\n                          website=\"https://www.hegongshan.com\",\n                          occupation=\"freelance/student\")\nprint(user_info)\n```\n\n输出结果：\n\n```python\n{'name': 'hegongshan', 'email': 'hegongshan@qq.com', 'website': 'https://www.hegongshan.com', 'occupation': 'freelance/student'}\n```\n\n上面代码第一行中，函数形参名**user_info，前面的两个星号表示让python创建一个名为user_info的空字典，并将收到的所有键-值对都封装到这个字典中。\n\n### 将函数存储在模块中\n\n通过将函数存储在称为模块的独立文件中，可隐藏程序代码的实现细节，将重点放在程序的高层逻辑上。模块是扩展名为.py的文件。import语句允许在当前运行的程序文件中使用模块中的代码。\n\n#### 导入整个模块\n\n我们先创建一个包含函数get_user_info()的模块user.py\n\n```python\ndef get_user_info(name,**user_info):\n    \"\"\"创建一个字典包含用户的所有信息\"\"\"\n    profile = {}\n    profile['name'] = name\n    for key,value in user_info.items():\n        profile[key] = value\n    return profile\n```\n\n接下来，在user.py所在目录中创建一个main.py的文件，用于调用get_user_info()函数。\n\nmain.py\n\n```python\nimport user\n\nuser_info = user.get_user_info('hegongshan',email='hegongshan@qq.com',\n                          website=\"https://www.hegongshan.com\",\n                          occupation=\"freelance/student\")\nprint(user_info)\n```\n\n第一行中的import user让python打开文件user.py，并将其中的所有函数都复制到这个程序中。要调用被导入模块中的函数，需要制定模块名user和函数名get_user_info()，并用\".\"（成员运算符）分隔它们。\n\n上述代码的输出结果与之前一般无二\n\n```python\n{'name': 'hegongshan', 'email': 'hegongshan@qq.com', 'website': 'https://www.hegongshan.com', 'occupation': 'freelance/student'}\n```\n\n#### 导入特定的函数\n\n如果我们不需要导入模块中的所有函数，只想导入某几个函数，也是可以的。\n\n语法如下：\n\n```python\nfrom 模块名 import 函数名1,函数名2,...\n```\n\n现在我们可以改写上面main.py中的代码\n\n```python\nfrom user import get_user_info\n\nuser_info = get_user_info('hegongshan',email='hegongshan@qq.com',\n                          website=\"https://www.hegongshan.com\",\n                          occupation=\"freelance/student\")\nprint(user_info)\n```\n\n若使用这种语法，调用导入的函数时，不能加模块名和 ”.“。\n\n使用这种方式后，如果我们还像之前那样，用 模块名 . 函数名来调用函数，则会报如下错误：\n\n```python\nTraceback (most recent call last):\n  File \"main.py\", line 3, in <module>\n    user_info = user.get_user_info('hegongshan',email='hegongshan@qq.com',\nNameError: name 'user' is not defined\n```\n\n#### 使用as给函数指定别名\n\n如果要导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而独一无二的别名（类似于人的外号）。\n\n语法如下：\n\n```python\nfrom 模块名 import 函数名 as 函数的别名\n```\n\n修改main.py\n\n```python\nfrom user import get_user_info as info\n\nuser_info = info('hegongshan',email='hegongshan@qq.com',\n                          website=\"https://www.hegongshan.com\",\n                          occupation=\"freelance/student\")\nprint(user_info)\n```\n\n值得注意的是，指定了别名后，就不能再使用本来的函数名了。\n\n#### 使用as给模块指定别名\n\n我们还可以使用as给模块指定一个简短的别名。\n\n语法如下：\n\n```python\nimport 模块名 as 模块的别名\n```\n\n例如，修改main.py，为导入的模块user指定别名u\n\n```python\nimport user as u\n\nuser_info = u.get_user_info('hegongshan',email='hegongshan@qq.com',\n                          website=\"https://www.hegongshan.com\",\n                          occupation=\"freelance/student\")\nprint(user_info)\n```\n\n#### 导入模块中的所有函数\n\n使用星号（*）可以导入模块中的所有函数\n\n语法如下：\n\n```python\nfrom 模块名 import *\n```\n\n示例：\n\n```python\nfrom user import *\n\nuser_info = get_user_info('hegongshan',email='hegongshan@qq.com',\n                          website=\"https://www.hegongshan.com\",\n                          occupation=\"freelance/student\")\nprint(user_info)\n```\n\n不推荐使用这种用法。为了提高代码的可读性，要么导入我们需要使用的某个（些）函数，要么导入整个模块并使用句号（ . ）表示法。\n\n### 函数编写规范\n\n* 函数命名应该有意义，且只包含小写字母和下划线\n* 每个函数都应包含简要地阐述其功能的注释，该注释应紧跟在函数定义后面，并采用文档字符串格式\n* 给形参指定默认值，或者在函数调用中的关键字实参，等号两边不要有空格\n* 一行的长度不要超过79个字符\n* 如果程序或模块中包含多个函数，使用两个空行将相邻的函数分开\n* 所有的import语句都应该放在文件开头，唯一例外的情形是，在文件开头使用了注释来描述整个程序。","slug":"python3-tutorial-chapter10-function-2","published":1,"updated":"2019-01-19T07:23:57.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9art005rj1q0c5j3zj80","content":"<p>上一小节中，我们学习了基础的函数使用，本节我们将学习更加高级的函数运用，以及函数编写的规范。</p>\n<h3 id=\"传递任意数量的参数\"><a href=\"#传递任意数量的参数\" class=\"headerlink\" title=\"传递任意数量的参数\"></a>传递任意数量的参数</h3><p>有时候，我们预先不知道函数需要接受多少个参数，好在python允许函数从调用语句中获取任意数量的实参。</p>\n<a id=\"more\"></a>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_any_arguments</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"测试任意数量的参数\"\"\"</span></span><br><span class=\"line\">    print(args)</span><br><span class=\"line\">test_any_arguments(<span class=\"string\">\"school of information management\"</span>)</span><br><span class=\"line\">test_any_arguments(<span class=\"string\">\"hegongshan\"</span>,<span class=\"string\">\"https://www.hegongshan.com\"</span>,</span><br><span class=\"line\">                   <span class=\"string\">\"central china normal university\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"string\">'school of information management'</span>,)</span><br><span class=\"line\">(<span class=\"string\">'hegongshan'</span>, <span class=\"string\">'https://www.hegongshan.com'</span>, <span class=\"string\">'central china normal university'</span>)</span><br></pre></td></tr></table></figure>\n<p>在上面代码的第一行中，形参名*args中的星号，表示让python创建一个名为args的空元组，并将收到的所有值都封装到这个元组中。</p>\n<h4 id=\"结合使用位置实参和任意数量的实参\"><a href=\"#结合使用位置实参和任意数量的实参\" class=\"headerlink\" title=\"结合使用位置实参和任意数量的实参\"></a>结合使用位置实参和任意数量的实参</h4><p>如果函数要接收不同类型的参数，必须在函数定义中将接纳任意数量实参的形参放在最后。python先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_any_arguments</span><span class=\"params\">(tip,*args)</span>:</span></span><br><span class=\"line\">    print(tip+<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    print(args)</span><br><span class=\"line\">test_any_arguments(<span class=\"string\">\"hello\"</span>,<span class=\"string\">\"import this\"</span>,<span class=\"string\">\"the zen of python\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello:</span><br><span class=\"line\">(<span class=\"string\">'import this'</span>, <span class=\"string\">'the zen of python'</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用任意数量的关键字实参\"><a href=\"#使用任意数量的关键字实参\" class=\"headerlink\" title=\"使用任意数量的关键字实参\"></a>使用任意数量的关键字实参</h4><p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_user_info</span><span class=\"params\">(name,**user_info)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"创建一个字典包含用户的所有信息\"\"\"</span></span><br><span class=\"line\">    profile = &#123;&#125;</span><br><span class=\"line\">    profile[<span class=\"string\">'name'</span>] = name</span><br><span class=\"line\">    <span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> user_info.items():</span><br><span class=\"line\">        profile[key] = value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> profile</span><br><span class=\"line\">user_info = get_user_info(<span class=\"string\">'hegongshan'</span>,email=<span class=\"string\">'hegongshan@qq.com'</span>,</span><br><span class=\"line\">                          website=<span class=\"string\">\"https://www.hegongshan.com\"</span>,</span><br><span class=\"line\">                          occupation=<span class=\"string\">\"freelance/student\"</span>)</span><br><span class=\"line\">print(user_info)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'hegongshan'</span>, <span class=\"string\">'email'</span>: <span class=\"string\">'hegongshan@qq.com'</span>, <span class=\"string\">'website'</span>: <span class=\"string\">'https://www.hegongshan.com'</span>, <span class=\"string\">'occupation'</span>: <span class=\"string\">'freelance/student'</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码第一行中，函数形参名**user_info，前面的两个星号表示让python创建一个名为user_info的空字典，并将收到的所有键-值对都封装到这个字典中。</p>\n<h3 id=\"将函数存储在模块中\"><a href=\"#将函数存储在模块中\" class=\"headerlink\" title=\"将函数存储在模块中\"></a>将函数存储在模块中</h3><p>通过将函数存储在称为模块的独立文件中，可隐藏程序代码的实现细节，将重点放在程序的高层逻辑上。模块是扩展名为.py的文件。import语句允许在当前运行的程序文件中使用模块中的代码。</p>\n<h4 id=\"导入整个模块\"><a href=\"#导入整个模块\" class=\"headerlink\" title=\"导入整个模块\"></a>导入整个模块</h4><p>我们先创建一个包含函数get_user_info()的模块user.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_user_info</span><span class=\"params\">(name,**user_info)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"创建一个字典包含用户的所有信息\"\"\"</span></span><br><span class=\"line\">    profile = &#123;&#125;</span><br><span class=\"line\">    profile[<span class=\"string\">'name'</span>] = name</span><br><span class=\"line\">    <span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> user_info.items():</span><br><span class=\"line\">        profile[key] = value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> profile</span><br></pre></td></tr></table></figure>\n<p>接下来，在user.py所在目录中创建一个main.py的文件，用于调用get_user_info()函数。</p>\n<p>main.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> user</span><br><span class=\"line\"></span><br><span class=\"line\">user_info = user.get_user_info(<span class=\"string\">'hegongshan'</span>,email=<span class=\"string\">'hegongshan@qq.com'</span>,</span><br><span class=\"line\">                          website=<span class=\"string\">\"https://www.hegongshan.com\"</span>,</span><br><span class=\"line\">                          occupation=<span class=\"string\">\"freelance/student\"</span>)</span><br><span class=\"line\">print(user_info)</span><br></pre></td></tr></table></figure>\n<p>第一行中的import user让python打开文件user.py，并将其中的所有函数都复制到这个程序中。要调用被导入模块中的函数，需要制定模块名user和函数名get_user_info()，并用”.”（成员运算符）分隔它们。</p>\n<p>上述代码的输出结果与之前一般无二</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'hegongshan'</span>, <span class=\"string\">'email'</span>: <span class=\"string\">'hegongshan@qq.com'</span>, <span class=\"string\">'website'</span>: <span class=\"string\">'https://www.hegongshan.com'</span>, <span class=\"string\">'occupation'</span>: <span class=\"string\">'freelance/student'</span>&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"导入特定的函数\"><a href=\"#导入特定的函数\" class=\"headerlink\" title=\"导入特定的函数\"></a>导入特定的函数</h4><p>如果我们不需要导入模块中的所有函数，只想导入某几个函数，也是可以的。</p>\n<p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> 模块名 <span class=\"keyword\">import</span> 函数名<span class=\"number\">1</span>,函数名<span class=\"number\">2</span>,...</span><br></pre></td></tr></table></figure>\n<p>现在我们可以改写上面main.py中的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> user <span class=\"keyword\">import</span> get_user_info</span><br><span class=\"line\"></span><br><span class=\"line\">user_info = get_user_info(<span class=\"string\">'hegongshan'</span>,email=<span class=\"string\">'hegongshan@qq.com'</span>,</span><br><span class=\"line\">                          website=<span class=\"string\">\"https://www.hegongshan.com\"</span>,</span><br><span class=\"line\">                          occupation=<span class=\"string\">\"freelance/student\"</span>)</span><br><span class=\"line\">print(user_info)</span><br></pre></td></tr></table></figure>\n<p>若使用这种语法，调用导入的函数时，不能加模块名和 ”.“。</p>\n<p>使用这种方式后，如果我们还像之前那样，用 模块名 . 函数名来调用函数，则会报如下错误：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"main.py\"</span>, line <span class=\"number\">3</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    user_info = user.get_user_info(<span class=\"string\">'hegongshan'</span>,email=<span class=\"string\">'hegongshan@qq.com'</span>,</span><br><span class=\"line\">NameError: name <span class=\"string\">'user'</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用as给函数指定别名\"><a href=\"#使用as给函数指定别名\" class=\"headerlink\" title=\"使用as给函数指定别名\"></a>使用as给函数指定别名</h4><p>如果要导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而独一无二的别名（类似于人的外号）。</p>\n<p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> 模块名 <span class=\"keyword\">import</span> 函数名 <span class=\"keyword\">as</span> 函数的别名</span><br></pre></td></tr></table></figure>\n<p>修改main.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> user <span class=\"keyword\">import</span> get_user_info <span class=\"keyword\">as</span> info</span><br><span class=\"line\"></span><br><span class=\"line\">user_info = info(<span class=\"string\">'hegongshan'</span>,email=<span class=\"string\">'hegongshan@qq.com'</span>,</span><br><span class=\"line\">                          website=<span class=\"string\">\"https://www.hegongshan.com\"</span>,</span><br><span class=\"line\">                          occupation=<span class=\"string\">\"freelance/student\"</span>)</span><br><span class=\"line\">print(user_info)</span><br></pre></td></tr></table></figure>\n<p>值得注意的是，指定了别名后，就不能再使用本来的函数名了。</p>\n<h4 id=\"使用as给模块指定别名\"><a href=\"#使用as给模块指定别名\" class=\"headerlink\" title=\"使用as给模块指定别名\"></a>使用as给模块指定别名</h4><p>我们还可以使用as给模块指定一个简短的别名。</p>\n<p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> 模块名 <span class=\"keyword\">as</span> 模块的别名</span><br></pre></td></tr></table></figure>\n<p>例如，修改main.py，为导入的模块user指定别名u</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> user <span class=\"keyword\">as</span> u</span><br><span class=\"line\"></span><br><span class=\"line\">user_info = u.get_user_info(<span class=\"string\">'hegongshan'</span>,email=<span class=\"string\">'hegongshan@qq.com'</span>,</span><br><span class=\"line\">                          website=<span class=\"string\">\"https://www.hegongshan.com\"</span>,</span><br><span class=\"line\">                          occupation=<span class=\"string\">\"freelance/student\"</span>)</span><br><span class=\"line\">print(user_info)</span><br></pre></td></tr></table></figure>\n<h4 id=\"导入模块中的所有函数\"><a href=\"#导入模块中的所有函数\" class=\"headerlink\" title=\"导入模块中的所有函数\"></a>导入模块中的所有函数</h4><p>使用星号（*）可以导入模块中的所有函数</p>\n<p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> 模块名 <span class=\"keyword\">import</span> *</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> user <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">user_info = get_user_info(<span class=\"string\">'hegongshan'</span>,email=<span class=\"string\">'hegongshan@qq.com'</span>,</span><br><span class=\"line\">                          website=<span class=\"string\">\"https://www.hegongshan.com\"</span>,</span><br><span class=\"line\">                          occupation=<span class=\"string\">\"freelance/student\"</span>)</span><br><span class=\"line\">print(user_info)</span><br></pre></td></tr></table></figure>\n<p>不推荐使用这种用法。为了提高代码的可读性，要么导入我们需要使用的某个（些）函数，要么导入整个模块并使用句号（ . ）表示法。</p>\n<h3 id=\"函数编写规范\"><a href=\"#函数编写规范\" class=\"headerlink\" title=\"函数编写规范\"></a>函数编写规范</h3><ul>\n<li>函数命名应该有意义，且只包含小写字母和下划线</li>\n<li>每个函数都应包含简要地阐述其功能的注释，该注释应紧跟在函数定义后面，并采用文档字符串格式</li>\n<li>给形参指定默认值，或者在函数调用中的关键字实参，等号两边不要有空格</li>\n<li>一行的长度不要超过79个字符</li>\n<li>如果程序或模块中包含多个函数，使用两个空行将相邻的函数分开</li>\n<li>所有的import语句都应该放在文件开头，唯一例外的情形是，在文件开头使用了注释来描述整个程序。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>上一小节中，我们学习了基础的函数使用，本节我们将学习更加高级的函数运用，以及函数编写的规范。</p>\n<h3 id=\"传递任意数量的参数\"><a href=\"#传递任意数量的参数\" class=\"headerlink\" title=\"传递任意数量的参数\"></a>传递任意数量的参数</h3><p>有时候，我们预先不知道函数需要接受多少个参数，好在python允许函数从调用语句中获取任意数量的实参。</p>","more":"<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_any_arguments</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"测试任意数量的参数\"\"\"</span></span><br><span class=\"line\">    print(args)</span><br><span class=\"line\">test_any_arguments(<span class=\"string\">\"school of information management\"</span>)</span><br><span class=\"line\">test_any_arguments(<span class=\"string\">\"hegongshan\"</span>,<span class=\"string\">\"https://www.hegongshan.com\"</span>,</span><br><span class=\"line\">                   <span class=\"string\">\"central china normal university\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"string\">'school of information management'</span>,)</span><br><span class=\"line\">(<span class=\"string\">'hegongshan'</span>, <span class=\"string\">'https://www.hegongshan.com'</span>, <span class=\"string\">'central china normal university'</span>)</span><br></pre></td></tr></table></figure>\n<p>在上面代码的第一行中，形参名*args中的星号，表示让python创建一个名为args的空元组，并将收到的所有值都封装到这个元组中。</p>\n<h4 id=\"结合使用位置实参和任意数量的实参\"><a href=\"#结合使用位置实参和任意数量的实参\" class=\"headerlink\" title=\"结合使用位置实参和任意数量的实参\"></a>结合使用位置实参和任意数量的实参</h4><p>如果函数要接收不同类型的参数，必须在函数定义中将接纳任意数量实参的形参放在最后。python先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_any_arguments</span><span class=\"params\">(tip,*args)</span>:</span></span><br><span class=\"line\">    print(tip+<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    print(args)</span><br><span class=\"line\">test_any_arguments(<span class=\"string\">\"hello\"</span>,<span class=\"string\">\"import this\"</span>,<span class=\"string\">\"the zen of python\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello:</span><br><span class=\"line\">(<span class=\"string\">'import this'</span>, <span class=\"string\">'the zen of python'</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用任意数量的关键字实参\"><a href=\"#使用任意数量的关键字实参\" class=\"headerlink\" title=\"使用任意数量的关键字实参\"></a>使用任意数量的关键字实参</h4><p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_user_info</span><span class=\"params\">(name,**user_info)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"创建一个字典包含用户的所有信息\"\"\"</span></span><br><span class=\"line\">    profile = &#123;&#125;</span><br><span class=\"line\">    profile[<span class=\"string\">'name'</span>] = name</span><br><span class=\"line\">    <span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> user_info.items():</span><br><span class=\"line\">        profile[key] = value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> profile</span><br><span class=\"line\">user_info = get_user_info(<span class=\"string\">'hegongshan'</span>,email=<span class=\"string\">'hegongshan@qq.com'</span>,</span><br><span class=\"line\">                          website=<span class=\"string\">\"https://www.hegongshan.com\"</span>,</span><br><span class=\"line\">                          occupation=<span class=\"string\">\"freelance/student\"</span>)</span><br><span class=\"line\">print(user_info)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'hegongshan'</span>, <span class=\"string\">'email'</span>: <span class=\"string\">'hegongshan@qq.com'</span>, <span class=\"string\">'website'</span>: <span class=\"string\">'https://www.hegongshan.com'</span>, <span class=\"string\">'occupation'</span>: <span class=\"string\">'freelance/student'</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码第一行中，函数形参名**user_info，前面的两个星号表示让python创建一个名为user_info的空字典，并将收到的所有键-值对都封装到这个字典中。</p>\n<h3 id=\"将函数存储在模块中\"><a href=\"#将函数存储在模块中\" class=\"headerlink\" title=\"将函数存储在模块中\"></a>将函数存储在模块中</h3><p>通过将函数存储在称为模块的独立文件中，可隐藏程序代码的实现细节，将重点放在程序的高层逻辑上。模块是扩展名为.py的文件。import语句允许在当前运行的程序文件中使用模块中的代码。</p>\n<h4 id=\"导入整个模块\"><a href=\"#导入整个模块\" class=\"headerlink\" title=\"导入整个模块\"></a>导入整个模块</h4><p>我们先创建一个包含函数get_user_info()的模块user.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_user_info</span><span class=\"params\">(name,**user_info)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"创建一个字典包含用户的所有信息\"\"\"</span></span><br><span class=\"line\">    profile = &#123;&#125;</span><br><span class=\"line\">    profile[<span class=\"string\">'name'</span>] = name</span><br><span class=\"line\">    <span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> user_info.items():</span><br><span class=\"line\">        profile[key] = value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> profile</span><br></pre></td></tr></table></figure>\n<p>接下来，在user.py所在目录中创建一个main.py的文件，用于调用get_user_info()函数。</p>\n<p>main.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> user</span><br><span class=\"line\"></span><br><span class=\"line\">user_info = user.get_user_info(<span class=\"string\">'hegongshan'</span>,email=<span class=\"string\">'hegongshan@qq.com'</span>,</span><br><span class=\"line\">                          website=<span class=\"string\">\"https://www.hegongshan.com\"</span>,</span><br><span class=\"line\">                          occupation=<span class=\"string\">\"freelance/student\"</span>)</span><br><span class=\"line\">print(user_info)</span><br></pre></td></tr></table></figure>\n<p>第一行中的import user让python打开文件user.py，并将其中的所有函数都复制到这个程序中。要调用被导入模块中的函数，需要制定模块名user和函数名get_user_info()，并用”.”（成员运算符）分隔它们。</p>\n<p>上述代码的输出结果与之前一般无二</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'hegongshan'</span>, <span class=\"string\">'email'</span>: <span class=\"string\">'hegongshan@qq.com'</span>, <span class=\"string\">'website'</span>: <span class=\"string\">'https://www.hegongshan.com'</span>, <span class=\"string\">'occupation'</span>: <span class=\"string\">'freelance/student'</span>&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"导入特定的函数\"><a href=\"#导入特定的函数\" class=\"headerlink\" title=\"导入特定的函数\"></a>导入特定的函数</h4><p>如果我们不需要导入模块中的所有函数，只想导入某几个函数，也是可以的。</p>\n<p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> 模块名 <span class=\"keyword\">import</span> 函数名<span class=\"number\">1</span>,函数名<span class=\"number\">2</span>,...</span><br></pre></td></tr></table></figure>\n<p>现在我们可以改写上面main.py中的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> user <span class=\"keyword\">import</span> get_user_info</span><br><span class=\"line\"></span><br><span class=\"line\">user_info = get_user_info(<span class=\"string\">'hegongshan'</span>,email=<span class=\"string\">'hegongshan@qq.com'</span>,</span><br><span class=\"line\">                          website=<span class=\"string\">\"https://www.hegongshan.com\"</span>,</span><br><span class=\"line\">                          occupation=<span class=\"string\">\"freelance/student\"</span>)</span><br><span class=\"line\">print(user_info)</span><br></pre></td></tr></table></figure>\n<p>若使用这种语法，调用导入的函数时，不能加模块名和 ”.“。</p>\n<p>使用这种方式后，如果我们还像之前那样，用 模块名 . 函数名来调用函数，则会报如下错误：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"main.py\"</span>, line <span class=\"number\">3</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    user_info = user.get_user_info(<span class=\"string\">'hegongshan'</span>,email=<span class=\"string\">'hegongshan@qq.com'</span>,</span><br><span class=\"line\">NameError: name <span class=\"string\">'user'</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用as给函数指定别名\"><a href=\"#使用as给函数指定别名\" class=\"headerlink\" title=\"使用as给函数指定别名\"></a>使用as给函数指定别名</h4><p>如果要导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而独一无二的别名（类似于人的外号）。</p>\n<p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> 模块名 <span class=\"keyword\">import</span> 函数名 <span class=\"keyword\">as</span> 函数的别名</span><br></pre></td></tr></table></figure>\n<p>修改main.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> user <span class=\"keyword\">import</span> get_user_info <span class=\"keyword\">as</span> info</span><br><span class=\"line\"></span><br><span class=\"line\">user_info = info(<span class=\"string\">'hegongshan'</span>,email=<span class=\"string\">'hegongshan@qq.com'</span>,</span><br><span class=\"line\">                          website=<span class=\"string\">\"https://www.hegongshan.com\"</span>,</span><br><span class=\"line\">                          occupation=<span class=\"string\">\"freelance/student\"</span>)</span><br><span class=\"line\">print(user_info)</span><br></pre></td></tr></table></figure>\n<p>值得注意的是，指定了别名后，就不能再使用本来的函数名了。</p>\n<h4 id=\"使用as给模块指定别名\"><a href=\"#使用as给模块指定别名\" class=\"headerlink\" title=\"使用as给模块指定别名\"></a>使用as给模块指定别名</h4><p>我们还可以使用as给模块指定一个简短的别名。</p>\n<p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> 模块名 <span class=\"keyword\">as</span> 模块的别名</span><br></pre></td></tr></table></figure>\n<p>例如，修改main.py，为导入的模块user指定别名u</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> user <span class=\"keyword\">as</span> u</span><br><span class=\"line\"></span><br><span class=\"line\">user_info = u.get_user_info(<span class=\"string\">'hegongshan'</span>,email=<span class=\"string\">'hegongshan@qq.com'</span>,</span><br><span class=\"line\">                          website=<span class=\"string\">\"https://www.hegongshan.com\"</span>,</span><br><span class=\"line\">                          occupation=<span class=\"string\">\"freelance/student\"</span>)</span><br><span class=\"line\">print(user_info)</span><br></pre></td></tr></table></figure>\n<h4 id=\"导入模块中的所有函数\"><a href=\"#导入模块中的所有函数\" class=\"headerlink\" title=\"导入模块中的所有函数\"></a>导入模块中的所有函数</h4><p>使用星号（*）可以导入模块中的所有函数</p>\n<p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> 模块名 <span class=\"keyword\">import</span> *</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> user <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">user_info = get_user_info(<span class=\"string\">'hegongshan'</span>,email=<span class=\"string\">'hegongshan@qq.com'</span>,</span><br><span class=\"line\">                          website=<span class=\"string\">\"https://www.hegongshan.com\"</span>,</span><br><span class=\"line\">                          occupation=<span class=\"string\">\"freelance/student\"</span>)</span><br><span class=\"line\">print(user_info)</span><br></pre></td></tr></table></figure>\n<p>不推荐使用这种用法。为了提高代码的可读性，要么导入我们需要使用的某个（些）函数，要么导入整个模块并使用句号（ . ）表示法。</p>\n<h3 id=\"函数编写规范\"><a href=\"#函数编写规范\" class=\"headerlink\" title=\"函数编写规范\"></a>函数编写规范</h3><ul>\n<li>函数命名应该有意义，且只包含小写字母和下划线</li>\n<li>每个函数都应包含简要地阐述其功能的注释，该注释应紧跟在函数定义后面，并采用文档字符串格式</li>\n<li>给形参指定默认值，或者在函数调用中的关键字实参，等号两边不要有空格</li>\n<li>一行的长度不要超过79个字符</li>\n<li>如果程序或模块中包含多个函数，使用两个空行将相邻的函数分开</li>\n<li>所有的import语句都应该放在文件开头，唯一例外的情形是，在文件开头使用了注释来描述整个程序。</li>\n</ul>"},{"title":"python3教程-第12章 文件","date":"2018-06-19T12:31:19.000Z","updated":"2018-06-27T07:33:30.000Z","_content":"\n前面我们已经学习了python的基础语法和一些数据结构，今天我们来学习下python中的文件操作．\n\n<!--more-->\n\n### 从文件中读取数据\n\n#### 读取整个文件\n\n基本语法：\n\n```python\nwith open(filename) as file_object:\n    对文件的处理\n```\n\nopen()函数用于打开文件，它接受一个参数：要打开的文件的名称，并返回一个表示文件的对象，将其存储在后面使用的变量file_object中，以便接下来对文件的各种操作.\n\n关键字with在不再需要访问文件后会自动将其关闭．\n\n示例\n\n先创建一个test.txt文件，内容如下：\n\n```python\nTo live is to change the world.\nChoice is very significant.\nI love you more than anything else in the world.\n```\n\n下面用python打开并读取这个文件，再将内容打印出来\n\n在上述文件所在目录下，创建一个file.py文件，内容如下：\n\n```python\nwith open('test.txt') as file:\n    # read()读取文件中的全部内容\n    contents = file.read()\n    print(contents)\n```\n\n执行file.py，输出如下：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619122113.png)\n\n可以看到，输出多了一个空行．这是因为read()到达文件末尾时返回一个空字符串，而将空字符串显示出来就是一个空行．可以使用rstrip()删除多余的空白行\n\n将file.py中的代码稍作修改\n\n```python\nwith open('test.txt') as file:\n    # read()读取文件中的全部内容\n    contents = file.read()\n    print(contents.rstrip())\n```\n\n上面的方法**read()从文件中读取全部内容，并将其存储在一个字符串中．**\n\n输出如下：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619122510.png)\n\n事实上，我们也可以不采用上述的语法格式\n\n```python\nfile = open('test.txt')\ncontents = file.read()\nprint(contents)\nfile.close()\n```\n\n这里我们在使用完file后，手动调用了file对象的close()方法．虽然可以这样做，但我们并不推荐这种方式．\n\n因为如果忘记调用close()方法，文件将不会自动关闭．或者如果过早地调用了close()方法，我们在使用文件时它已关闭，从而导致程序执行错误．因此，最好的方式就是使用关键字with，让python在合适的时候自动关闭文件.\n\n#### 逐行读取\n\n如果我们每次只想取一行，可对文件对象使用for 循环．\n\n用下面的代码覆盖file.py中的代码\n\n```python\nfilename = 'test.txt'\nwith open(filename) as file:\n    for line in file:\n        print(line)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619150228.png)\n\n每一行后面都多出了一个空行．这是因为文件中每行的末尾都有一个换行符，而print()语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，一个来自print()语句.可以使用rstrip()去掉多余的换行．\n\n#### 创建一个包含文件各行内容的列表\n\n使用关键字with时，open()返回的文件对象只在with代码块中可用．如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行存储在一个列表中，并在with代码块外使用该列表．\n\n```python\nfilename = 'test.txt'\nwith open(filename) as file:\n    lines = file.readlines()\nfor line in lines:\n    print(line.rstrip())\n```\n\n上面的方法**readlines()从文件中读取每一行，并将其存储在一个列表中．**\n\n### 写入文件\n\nopen()函数在打开文件时可以设置打开模式.\n\n```python\nopen(filename,mode)\n```\n\nmode实参有以下几个可选的值：\n\n* 'w'：**写入模式**\n* 'r'：**读取模式**\n* 'a'：**附加模式**\n* 'r+'：**读取和写入模式**\n* 'ｗb'：**二进制写入模式**\n* 'rb'：**二进制读取模式**\n\n如果省略了模式实参，也就是之前我们采用的open(filename)这种方式，python将以默认的只读模式打开文件．\n\n以'w'模式打开文件，如果要写入的文件不存在，open()将自动创建它．另外，如果指定的文件已经存在，python将在返回文件对象前清空该文件．\n\n* 一个简单的例子\n\nfile_write.py\n\n```python\nfilename = 'websites.txt'\nwith open(filename,'w') as file:\n    file.write('https://www.baidu.com')\n    file.write('https://www.aliyun.com')\n```\n\nwrite()方法将其中的实参字符串写入到指定的文件中．\n\n生成的websites.txt\n\n```python\nhttps://www.baidu.comhttps://www.aliyun.com\n```\n\n可以看到，写入的两行并没有自动换行，这是因为write()方法不会在写入的文本末尾自动添加换行符，如果需要换行，可以在末尾添加换行符．\n\n* 改进版的例子\n\nfile_write.py\n\n```python\nfilename = 'websites.txt'\nwith open(filename,'w') as file:\n    file.write('https://www.baidu.com\\n')\n    file.write('https://www.aliyun.com\\n')\n```\n\n生成的websites.txt\n\n```python\nhttps://www.baidu.com\nhttps://www.aliyun.com\n```\n\n* 附加到文件\n\n如果要给文件添加内容，而不是覆盖原有的内容，可以使用附加模式打开文件．如果指定的文件不存在，python将创建一个空文件．\n\n```python\nfilename = 'websites.txt'\nwith open(filename,'a') as file:\n    file.write('https://www.chsi.com.cn\\n')\n    file.write('https://www.ccnu.edu.cn\\n')\n```\n\n下面是附加模式生成的websites.txt\n\n```python\nhttps://www.baidu.com\nhttps://www.aliyun.com\nhttps://www.chsi.com.cn\nhttps://www.ccnu.edu.cn\n```\n\n可以看到，前面写入的两个url还在，python并没有清空文件，重新写入，而是在文件的末尾附加了新增的两个url．","source":"_posts/python3-tutorial-chapter12-file.md","raw":"---\ntitle: python3教程-第12章 文件\ndate: 2018-06-19 20:31:19\nupdated: 2018-06-27 15:33:30\ntags: python\ncategories: python\n---\n\n前面我们已经学习了python的基础语法和一些数据结构，今天我们来学习下python中的文件操作．\n\n<!--more-->\n\n### 从文件中读取数据\n\n#### 读取整个文件\n\n基本语法：\n\n```python\nwith open(filename) as file_object:\n    对文件的处理\n```\n\nopen()函数用于打开文件，它接受一个参数：要打开的文件的名称，并返回一个表示文件的对象，将其存储在后面使用的变量file_object中，以便接下来对文件的各种操作.\n\n关键字with在不再需要访问文件后会自动将其关闭．\n\n示例\n\n先创建一个test.txt文件，内容如下：\n\n```python\nTo live is to change the world.\nChoice is very significant.\nI love you more than anything else in the world.\n```\n\n下面用python打开并读取这个文件，再将内容打印出来\n\n在上述文件所在目录下，创建一个file.py文件，内容如下：\n\n```python\nwith open('test.txt') as file:\n    # read()读取文件中的全部内容\n    contents = file.read()\n    print(contents)\n```\n\n执行file.py，输出如下：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619122113.png)\n\n可以看到，输出多了一个空行．这是因为read()到达文件末尾时返回一个空字符串，而将空字符串显示出来就是一个空行．可以使用rstrip()删除多余的空白行\n\n将file.py中的代码稍作修改\n\n```python\nwith open('test.txt') as file:\n    # read()读取文件中的全部内容\n    contents = file.read()\n    print(contents.rstrip())\n```\n\n上面的方法**read()从文件中读取全部内容，并将其存储在一个字符串中．**\n\n输出如下：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619122510.png)\n\n事实上，我们也可以不采用上述的语法格式\n\n```python\nfile = open('test.txt')\ncontents = file.read()\nprint(contents)\nfile.close()\n```\n\n这里我们在使用完file后，手动调用了file对象的close()方法．虽然可以这样做，但我们并不推荐这种方式．\n\n因为如果忘记调用close()方法，文件将不会自动关闭．或者如果过早地调用了close()方法，我们在使用文件时它已关闭，从而导致程序执行错误．因此，最好的方式就是使用关键字with，让python在合适的时候自动关闭文件.\n\n#### 逐行读取\n\n如果我们每次只想取一行，可对文件对象使用for 循环．\n\n用下面的代码覆盖file.py中的代码\n\n```python\nfilename = 'test.txt'\nwith open(filename) as file:\n    for line in file:\n        print(line)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619150228.png)\n\n每一行后面都多出了一个空行．这是因为文件中每行的末尾都有一个换行符，而print()语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，一个来自print()语句.可以使用rstrip()去掉多余的换行．\n\n#### 创建一个包含文件各行内容的列表\n\n使用关键字with时，open()返回的文件对象只在with代码块中可用．如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行存储在一个列表中，并在with代码块外使用该列表．\n\n```python\nfilename = 'test.txt'\nwith open(filename) as file:\n    lines = file.readlines()\nfor line in lines:\n    print(line.rstrip())\n```\n\n上面的方法**readlines()从文件中读取每一行，并将其存储在一个列表中．**\n\n### 写入文件\n\nopen()函数在打开文件时可以设置打开模式.\n\n```python\nopen(filename,mode)\n```\n\nmode实参有以下几个可选的值：\n\n* 'w'：**写入模式**\n* 'r'：**读取模式**\n* 'a'：**附加模式**\n* 'r+'：**读取和写入模式**\n* 'ｗb'：**二进制写入模式**\n* 'rb'：**二进制读取模式**\n\n如果省略了模式实参，也就是之前我们采用的open(filename)这种方式，python将以默认的只读模式打开文件．\n\n以'w'模式打开文件，如果要写入的文件不存在，open()将自动创建它．另外，如果指定的文件已经存在，python将在返回文件对象前清空该文件．\n\n* 一个简单的例子\n\nfile_write.py\n\n```python\nfilename = 'websites.txt'\nwith open(filename,'w') as file:\n    file.write('https://www.baidu.com')\n    file.write('https://www.aliyun.com')\n```\n\nwrite()方法将其中的实参字符串写入到指定的文件中．\n\n生成的websites.txt\n\n```python\nhttps://www.baidu.comhttps://www.aliyun.com\n```\n\n可以看到，写入的两行并没有自动换行，这是因为write()方法不会在写入的文本末尾自动添加换行符，如果需要换行，可以在末尾添加换行符．\n\n* 改进版的例子\n\nfile_write.py\n\n```python\nfilename = 'websites.txt'\nwith open(filename,'w') as file:\n    file.write('https://www.baidu.com\\n')\n    file.write('https://www.aliyun.com\\n')\n```\n\n生成的websites.txt\n\n```python\nhttps://www.baidu.com\nhttps://www.aliyun.com\n```\n\n* 附加到文件\n\n如果要给文件添加内容，而不是覆盖原有的内容，可以使用附加模式打开文件．如果指定的文件不存在，python将创建一个空文件．\n\n```python\nfilename = 'websites.txt'\nwith open(filename,'a') as file:\n    file.write('https://www.chsi.com.cn\\n')\n    file.write('https://www.ccnu.edu.cn\\n')\n```\n\n下面是附加模式生成的websites.txt\n\n```python\nhttps://www.baidu.com\nhttps://www.aliyun.com\nhttps://www.chsi.com.cn\nhttps://www.ccnu.edu.cn\n```\n\n可以看到，前面写入的两个url还在，python并没有清空文件，重新写入，而是在文件的末尾附加了新增的两个url．","slug":"python3-tutorial-chapter12-file","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9aru005wj1q0f5b50fas","content":"<p>前面我们已经学习了python的基础语法和一些数据结构，今天我们来学习下python中的文件操作．</p>\n<a id=\"more\"></a>\n<h3 id=\"从文件中读取数据\"><a href=\"#从文件中读取数据\" class=\"headerlink\" title=\"从文件中读取数据\"></a>从文件中读取数据</h3><h4 id=\"读取整个文件\"><a href=\"#读取整个文件\" class=\"headerlink\" title=\"读取整个文件\"></a>读取整个文件</h4><p>基本语法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(filename) <span class=\"keyword\">as</span> file_object:</span><br><span class=\"line\">    对文件的处理</span><br></pre></td></tr></table></figure>\n<p>open()函数用于打开文件，它接受一个参数：要打开的文件的名称，并返回一个表示文件的对象，将其存储在后面使用的变量file_object中，以便接下来对文件的各种操作.</p>\n<p>关键字with在不再需要访问文件后会自动将其关闭．</p>\n<p>示例</p>\n<p>先创建一个test.txt文件，内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">To live <span class=\"keyword\">is</span> to change the world.</span><br><span class=\"line\">Choice <span class=\"keyword\">is</span> very significant.</span><br><span class=\"line\">I love you more than anything <span class=\"keyword\">else</span> <span class=\"keyword\">in</span> the world.</span><br></pre></td></tr></table></figure>\n<p>下面用python打开并读取这个文件，再将内容打印出来</p>\n<p>在上述文件所在目录下，创建一个file.py文件，内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'test.txt'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    <span class=\"comment\"># read()读取文件中的全部内容</span></span><br><span class=\"line\">    contents = file.read()</span><br><span class=\"line\">    print(contents)</span><br></pre></td></tr></table></figure>\n<p>执行file.py，输出如下：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619122113.png\" alt=\"\"></p>\n<p>可以看到，输出多了一个空行．这是因为read()到达文件末尾时返回一个空字符串，而将空字符串显示出来就是一个空行．可以使用rstrip()删除多余的空白行</p>\n<p>将file.py中的代码稍作修改</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'test.txt'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    <span class=\"comment\"># read()读取文件中的全部内容</span></span><br><span class=\"line\">    contents = file.read()</span><br><span class=\"line\">    print(contents.rstrip())</span><br></pre></td></tr></table></figure>\n<p>上面的方法<strong>read()从文件中读取全部内容，并将其存储在一个字符串中．</strong></p>\n<p>输出如下：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619122510.png\" alt=\"\"></p>\n<p>事实上，我们也可以不采用上述的语法格式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = open(<span class=\"string\">'test.txt'</span>)</span><br><span class=\"line\">contents = file.read()</span><br><span class=\"line\">print(contents)</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n<p>这里我们在使用完file后，手动调用了file对象的close()方法．虽然可以这样做，但我们并不推荐这种方式．</p>\n<p>因为如果忘记调用close()方法，文件将不会自动关闭．或者如果过早地调用了close()方法，我们在使用文件时它已关闭，从而导致程序执行错误．因此，最好的方式就是使用关键字with，让python在合适的时候自动关闭文件.</p>\n<h4 id=\"逐行读取\"><a href=\"#逐行读取\" class=\"headerlink\" title=\"逐行读取\"></a>逐行读取</h4><p>如果我们每次只想取一行，可对文件对象使用for 循环．</p>\n<p>用下面的代码覆盖file.py中的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename = <span class=\"string\">'test.txt'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(filename) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file:</span><br><span class=\"line\">        print(line)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619150228.png\" alt=\"\"></p>\n<p>每一行后面都多出了一个空行．这是因为文件中每行的末尾都有一个换行符，而print()语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，一个来自print()语句.可以使用rstrip()去掉多余的换行．</p>\n<h4 id=\"创建一个包含文件各行内容的列表\"><a href=\"#创建一个包含文件各行内容的列表\" class=\"headerlink\" title=\"创建一个包含文件各行内容的列表\"></a>创建一个包含文件各行内容的列表</h4><p>使用关键字with时，open()返回的文件对象只在with代码块中可用．如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行存储在一个列表中，并在with代码块外使用该列表．</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename = <span class=\"string\">'test.txt'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(filename) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    lines = file.readlines()</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    print(line.rstrip())</span><br></pre></td></tr></table></figure>\n<p>上面的方法<strong>readlines()从文件中读取每一行，并将其存储在一个列表中．</strong></p>\n<h3 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h3><p>open()函数在打开文件时可以设置打开模式.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open(filename,mode)</span><br></pre></td></tr></table></figure>\n<p>mode实参有以下几个可选的值：</p>\n<ul>\n<li>‘w’：<strong>写入模式</strong></li>\n<li>‘r’：<strong>读取模式</strong></li>\n<li>‘a’：<strong>附加模式</strong></li>\n<li>‘r+’：<strong>读取和写入模式</strong></li>\n<li>‘ｗb’：<strong>二进制写入模式</strong></li>\n<li>‘rb’：<strong>二进制读取模式</strong></li>\n</ul>\n<p>如果省略了模式实参，也就是之前我们采用的open(filename)这种方式，python将以默认的只读模式打开文件．</p>\n<p>以’w’模式打开文件，如果要写入的文件不存在，open()将自动创建它．另外，如果指定的文件已经存在，python将在返回文件对象前清空该文件．</p>\n<ul>\n<li>一个简单的例子</li>\n</ul>\n<p>file_write.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename = <span class=\"string\">'websites.txt'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(filename,<span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    file.write(<span class=\"string\">'https://www.baidu.com'</span>)</span><br><span class=\"line\">    file.write(<span class=\"string\">'https://www.aliyun.com'</span>)</span><br></pre></td></tr></table></figure>\n<p>write()方法将其中的实参字符串写入到指定的文件中．</p>\n<p>生成的websites.txt</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.baidu.comhttps://www.aliyun.com</span><br></pre></td></tr></table></figure>\n<p>可以看到，写入的两行并没有自动换行，这是因为write()方法不会在写入的文本末尾自动添加换行符，如果需要换行，可以在末尾添加换行符．</p>\n<ul>\n<li>改进版的例子</li>\n</ul>\n<p>file_write.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename = <span class=\"string\">'websites.txt'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(filename,<span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    file.write(<span class=\"string\">'https://www.baidu.com\\n'</span>)</span><br><span class=\"line\">    file.write(<span class=\"string\">'https://www.aliyun.com\\n'</span>)</span><br></pre></td></tr></table></figure>\n<p>生成的websites.txt</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.baidu.com</span><br><span class=\"line\">https://www.aliyun.com</span><br></pre></td></tr></table></figure>\n<ul>\n<li>附加到文件</li>\n</ul>\n<p>如果要给文件添加内容，而不是覆盖原有的内容，可以使用附加模式打开文件．如果指定的文件不存在，python将创建一个空文件．</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename = <span class=\"string\">'websites.txt'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(filename,<span class=\"string\">'a'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    file.write(<span class=\"string\">'https://www.chsi.com.cn\\n'</span>)</span><br><span class=\"line\">    file.write(<span class=\"string\">'https://www.ccnu.edu.cn\\n'</span>)</span><br></pre></td></tr></table></figure>\n<p>下面是附加模式生成的websites.txt</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.baidu.com</span><br><span class=\"line\">https://www.aliyun.com</span><br><span class=\"line\">https://www.chsi.com.cn</span><br><span class=\"line\">https://www.ccnu.edu.cn</span><br></pre></td></tr></table></figure>\n<p>可以看到，前面写入的两个url还在，python并没有清空文件，重新写入，而是在文件的末尾附加了新增的两个url．</p>\n","site":{"data":{}},"excerpt":"<p>前面我们已经学习了python的基础语法和一些数据结构，今天我们来学习下python中的文件操作．</p>","more":"<h3 id=\"从文件中读取数据\"><a href=\"#从文件中读取数据\" class=\"headerlink\" title=\"从文件中读取数据\"></a>从文件中读取数据</h3><h4 id=\"读取整个文件\"><a href=\"#读取整个文件\" class=\"headerlink\" title=\"读取整个文件\"></a>读取整个文件</h4><p>基本语法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(filename) <span class=\"keyword\">as</span> file_object:</span><br><span class=\"line\">    对文件的处理</span><br></pre></td></tr></table></figure>\n<p>open()函数用于打开文件，它接受一个参数：要打开的文件的名称，并返回一个表示文件的对象，将其存储在后面使用的变量file_object中，以便接下来对文件的各种操作.</p>\n<p>关键字with在不再需要访问文件后会自动将其关闭．</p>\n<p>示例</p>\n<p>先创建一个test.txt文件，内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">To live <span class=\"keyword\">is</span> to change the world.</span><br><span class=\"line\">Choice <span class=\"keyword\">is</span> very significant.</span><br><span class=\"line\">I love you more than anything <span class=\"keyword\">else</span> <span class=\"keyword\">in</span> the world.</span><br></pre></td></tr></table></figure>\n<p>下面用python打开并读取这个文件，再将内容打印出来</p>\n<p>在上述文件所在目录下，创建一个file.py文件，内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'test.txt'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    <span class=\"comment\"># read()读取文件中的全部内容</span></span><br><span class=\"line\">    contents = file.read()</span><br><span class=\"line\">    print(contents)</span><br></pre></td></tr></table></figure>\n<p>执行file.py，输出如下：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619122113.png\" alt=\"\"></p>\n<p>可以看到，输出多了一个空行．这是因为read()到达文件末尾时返回一个空字符串，而将空字符串显示出来就是一个空行．可以使用rstrip()删除多余的空白行</p>\n<p>将file.py中的代码稍作修改</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'test.txt'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    <span class=\"comment\"># read()读取文件中的全部内容</span></span><br><span class=\"line\">    contents = file.read()</span><br><span class=\"line\">    print(contents.rstrip())</span><br></pre></td></tr></table></figure>\n<p>上面的方法<strong>read()从文件中读取全部内容，并将其存储在一个字符串中．</strong></p>\n<p>输出如下：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619122510.png\" alt=\"\"></p>\n<p>事实上，我们也可以不采用上述的语法格式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = open(<span class=\"string\">'test.txt'</span>)</span><br><span class=\"line\">contents = file.read()</span><br><span class=\"line\">print(contents)</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n<p>这里我们在使用完file后，手动调用了file对象的close()方法．虽然可以这样做，但我们并不推荐这种方式．</p>\n<p>因为如果忘记调用close()方法，文件将不会自动关闭．或者如果过早地调用了close()方法，我们在使用文件时它已关闭，从而导致程序执行错误．因此，最好的方式就是使用关键字with，让python在合适的时候自动关闭文件.</p>\n<h4 id=\"逐行读取\"><a href=\"#逐行读取\" class=\"headerlink\" title=\"逐行读取\"></a>逐行读取</h4><p>如果我们每次只想取一行，可对文件对象使用for 循环．</p>\n<p>用下面的代码覆盖file.py中的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename = <span class=\"string\">'test.txt'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(filename) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file:</span><br><span class=\"line\">        print(line)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619150228.png\" alt=\"\"></p>\n<p>每一行后面都多出了一个空行．这是因为文件中每行的末尾都有一个换行符，而print()语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，一个来自print()语句.可以使用rstrip()去掉多余的换行．</p>\n<h4 id=\"创建一个包含文件各行内容的列表\"><a href=\"#创建一个包含文件各行内容的列表\" class=\"headerlink\" title=\"创建一个包含文件各行内容的列表\"></a>创建一个包含文件各行内容的列表</h4><p>使用关键字with时，open()返回的文件对象只在with代码块中可用．如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行存储在一个列表中，并在with代码块外使用该列表．</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename = <span class=\"string\">'test.txt'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(filename) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    lines = file.readlines()</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    print(line.rstrip())</span><br></pre></td></tr></table></figure>\n<p>上面的方法<strong>readlines()从文件中读取每一行，并将其存储在一个列表中．</strong></p>\n<h3 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h3><p>open()函数在打开文件时可以设置打开模式.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open(filename,mode)</span><br></pre></td></tr></table></figure>\n<p>mode实参有以下几个可选的值：</p>\n<ul>\n<li>‘w’：<strong>写入模式</strong></li>\n<li>‘r’：<strong>读取模式</strong></li>\n<li>‘a’：<strong>附加模式</strong></li>\n<li>‘r+’：<strong>读取和写入模式</strong></li>\n<li>‘ｗb’：<strong>二进制写入模式</strong></li>\n<li>‘rb’：<strong>二进制读取模式</strong></li>\n</ul>\n<p>如果省略了模式实参，也就是之前我们采用的open(filename)这种方式，python将以默认的只读模式打开文件．</p>\n<p>以’w’模式打开文件，如果要写入的文件不存在，open()将自动创建它．另外，如果指定的文件已经存在，python将在返回文件对象前清空该文件．</p>\n<ul>\n<li>一个简单的例子</li>\n</ul>\n<p>file_write.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename = <span class=\"string\">'websites.txt'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(filename,<span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    file.write(<span class=\"string\">'https://www.baidu.com'</span>)</span><br><span class=\"line\">    file.write(<span class=\"string\">'https://www.aliyun.com'</span>)</span><br></pre></td></tr></table></figure>\n<p>write()方法将其中的实参字符串写入到指定的文件中．</p>\n<p>生成的websites.txt</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.baidu.comhttps://www.aliyun.com</span><br></pre></td></tr></table></figure>\n<p>可以看到，写入的两行并没有自动换行，这是因为write()方法不会在写入的文本末尾自动添加换行符，如果需要换行，可以在末尾添加换行符．</p>\n<ul>\n<li>改进版的例子</li>\n</ul>\n<p>file_write.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename = <span class=\"string\">'websites.txt'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(filename,<span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    file.write(<span class=\"string\">'https://www.baidu.com\\n'</span>)</span><br><span class=\"line\">    file.write(<span class=\"string\">'https://www.aliyun.com\\n'</span>)</span><br></pre></td></tr></table></figure>\n<p>生成的websites.txt</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.baidu.com</span><br><span class=\"line\">https://www.aliyun.com</span><br></pre></td></tr></table></figure>\n<ul>\n<li>附加到文件</li>\n</ul>\n<p>如果要给文件添加内容，而不是覆盖原有的内容，可以使用附加模式打开文件．如果指定的文件不存在，python将创建一个空文件．</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename = <span class=\"string\">'websites.txt'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(filename,<span class=\"string\">'a'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    file.write(<span class=\"string\">'https://www.chsi.com.cn\\n'</span>)</span><br><span class=\"line\">    file.write(<span class=\"string\">'https://www.ccnu.edu.cn\\n'</span>)</span><br></pre></td></tr></table></figure>\n<p>下面是附加模式生成的websites.txt</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.baidu.com</span><br><span class=\"line\">https://www.aliyun.com</span><br><span class=\"line\">https://www.chsi.com.cn</span><br><span class=\"line\">https://www.ccnu.edu.cn</span><br></pre></td></tr></table></figure>\n<p>可以看到，前面写入的两个url还在，python并没有清空文件，重新写入，而是在文件的末尾附加了新增的两个url．</p>"},{"title":"python3教程-第13章 异常","date":"2018-06-19T12:31:33.000Z","updated":"2018-06-27T06:30:23.000Z","_content":"\npython使用被称为异常的特殊对象来管理程序执行期间发生的错误．每当发生让python不知所措的错误时，它都会创建一个异常对象．\n\n如果你编写了处理该异常的代码，程序将继续运行；如果你未对异常进行处理，程序将停止，并显示一个traceback，其中包含有关异常的报告．\n\n<!--more-->\n\n就像下面这样\n\n```python\nprint(2/0)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619194751.png)\n\n这里报了一个ZeroDivisionError，如果不想让python报错，则可以使用异常处理．\n\n异常是使用try-except代码块处理的．\n\n语法如下：\n\n```python\ntry:\n    指定的操作\nexcept 需要处理的异常:\n\t发生异常时需要执行的操作\nelse:\n    try中操作成功执行后，需要执行的操作\n```\n\n上述结构中，else 部分是可选的．\n\n### 简单的异常处理\n\n示例：\n\nexcept.py\n\n```python\ntry:\n    result = 2/0\nexcept ZeroDivisionError:\n    print(\"can't divide by zero\")\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619195645.png)\n\n### 带else的异常处理\n\n下面我们来尝试读取一个不存在的文件．\n\nexcept.py\n\n```python\n# 当前目录下不存在except.txt\nfilename = 'except.txt'\nwith open(filename) as file:\n    content = file.read()\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619200740.png)\n\n这里报了一个FileNotFoundError，顾名思义，python找不到except.txt这个不存在的文件．下面我们用try-except-else来处理FileNotFoundError．\n\nexcept.py\n\n```python\nfilename = 'except.txt'\ntry:\n    with open(filename) as file:\n        content = file.read().rstrip()\nexcept FileNotFoundError:\n    print(\"This directory can't found \"+filename)\nelse:\n    print(content)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619201632.png)\n\n可以看到，这里没有执行print(content)\n\n现在我们创建except.txt这个文件，内容如下：\n\n```python\nhttps://www.baidu.com\nhttps://www.aliyun.com\n```\n\n然后重新执行except.py，输出如下：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619202434.png)\n\n### 不处理异常\n\n如果发生异常时，我们不想处理它，也不想告诉用户程序出错了，就像什么都没有发生一样继续运行，可以使用**pass**语句．\n\nexcept.py\n\n```python\ndef count_words(filename):\n    try:\n        with open(filename) as file:\n\t    content = file.read()\n    except FileNotFoundError:\n        pass\n    else:\n        words = content.split()\n        numOfWords = len(words)\n        print(\"文件'\"+filename+\"'有\"+numOfWords+\"个词\")\n\nfilenames = ['except.txt','websites.txt','schools.txt']\nfor filename in filenames:\n    count_words(filename)\n```\n\nexcept.txt\n\n```python\nZeroDivisionError\nFileNotFoundError\n```\n\nwebsites.txt\n\n```python\nhttps://www.baidu.com\nhttps://www.aliyun.com\n```\n\n这里我故意多写了一个不存在的schools.txt文件，看下会产生什么结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619204051.png)\n\n可以看到，虽然有一个不存在的schools.txt，但是程序在处理的时候，什么信息也没有．","source":"_posts/python3-tutorial-chapter13-error.md","raw":"---\ntitle: python3教程-第13章 异常\ndate: 2018-06-19 20:31:33\nupdated: 2018-06-27 14:30:23\ntags: python\ncategories: python\n---\n\npython使用被称为异常的特殊对象来管理程序执行期间发生的错误．每当发生让python不知所措的错误时，它都会创建一个异常对象．\n\n如果你编写了处理该异常的代码，程序将继续运行；如果你未对异常进行处理，程序将停止，并显示一个traceback，其中包含有关异常的报告．\n\n<!--more-->\n\n就像下面这样\n\n```python\nprint(2/0)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619194751.png)\n\n这里报了一个ZeroDivisionError，如果不想让python报错，则可以使用异常处理．\n\n异常是使用try-except代码块处理的．\n\n语法如下：\n\n```python\ntry:\n    指定的操作\nexcept 需要处理的异常:\n\t发生异常时需要执行的操作\nelse:\n    try中操作成功执行后，需要执行的操作\n```\n\n上述结构中，else 部分是可选的．\n\n### 简单的异常处理\n\n示例：\n\nexcept.py\n\n```python\ntry:\n    result = 2/0\nexcept ZeroDivisionError:\n    print(\"can't divide by zero\")\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619195645.png)\n\n### 带else的异常处理\n\n下面我们来尝试读取一个不存在的文件．\n\nexcept.py\n\n```python\n# 当前目录下不存在except.txt\nfilename = 'except.txt'\nwith open(filename) as file:\n    content = file.read()\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619200740.png)\n\n这里报了一个FileNotFoundError，顾名思义，python找不到except.txt这个不存在的文件．下面我们用try-except-else来处理FileNotFoundError．\n\nexcept.py\n\n```python\nfilename = 'except.txt'\ntry:\n    with open(filename) as file:\n        content = file.read().rstrip()\nexcept FileNotFoundError:\n    print(\"This directory can't found \"+filename)\nelse:\n    print(content)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619201632.png)\n\n可以看到，这里没有执行print(content)\n\n现在我们创建except.txt这个文件，内容如下：\n\n```python\nhttps://www.baidu.com\nhttps://www.aliyun.com\n```\n\n然后重新执行except.py，输出如下：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619202434.png)\n\n### 不处理异常\n\n如果发生异常时，我们不想处理它，也不想告诉用户程序出错了，就像什么都没有发生一样继续运行，可以使用**pass**语句．\n\nexcept.py\n\n```python\ndef count_words(filename):\n    try:\n        with open(filename) as file:\n\t    content = file.read()\n    except FileNotFoundError:\n        pass\n    else:\n        words = content.split()\n        numOfWords = len(words)\n        print(\"文件'\"+filename+\"'有\"+numOfWords+\"个词\")\n\nfilenames = ['except.txt','websites.txt','schools.txt']\nfor filename in filenames:\n    count_words(filename)\n```\n\nexcept.txt\n\n```python\nZeroDivisionError\nFileNotFoundError\n```\n\nwebsites.txt\n\n```python\nhttps://www.baidu.com\nhttps://www.aliyun.com\n```\n\n这里我故意多写了一个不存在的schools.txt文件，看下会产生什么结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619204051.png)\n\n可以看到，虽然有一个不存在的schools.txt，但是程序在处理的时候，什么信息也没有．","slug":"python3-tutorial-chapter13-error","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9arv005yj1q077lhola6","content":"<p>python使用被称为异常的特殊对象来管理程序执行期间发生的错误．每当发生让python不知所措的错误时，它都会创建一个异常对象．</p>\n<p>如果你编写了处理该异常的代码，程序将继续运行；如果你未对异常进行处理，程序将停止，并显示一个traceback，其中包含有关异常的报告．</p>\n<a id=\"more\"></a>\n<p>就像下面这样</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"number\">2</span>/<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619194751.png\" alt=\"\"></p>\n<p>这里报了一个ZeroDivisionError，如果不想让python报错，则可以使用异常处理．</p>\n<p>异常是使用try-except代码块处理的．</p>\n<p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    指定的操作</span><br><span class=\"line\"><span class=\"keyword\">except</span> 需要处理的异常:</span><br><span class=\"line\">\t发生异常时需要执行的操作</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>中操作成功执行后，需要执行的操作</span><br></pre></td></tr></table></figure>\n<p>上述结构中，else 部分是可选的．</p>\n<h3 id=\"简单的异常处理\"><a href=\"#简单的异常处理\" class=\"headerlink\" title=\"简单的异常处理\"></a>简单的异常处理</h3><p>示例：</p>\n<p>except.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    result = <span class=\"number\">2</span>/<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError:</span><br><span class=\"line\">    print(<span class=\"string\">\"can't divide by zero\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619195645.png\" alt=\"\"></p>\n<h3 id=\"带else的异常处理\"><a href=\"#带else的异常处理\" class=\"headerlink\" title=\"带else的异常处理\"></a>带else的异常处理</h3><p>下面我们来尝试读取一个不存在的文件．</p>\n<p>except.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当前目录下不存在except.txt</span></span><br><span class=\"line\">filename = <span class=\"string\">'except.txt'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(filename) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    content = file.read()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619200740.png\" alt=\"\"></p>\n<p>这里报了一个FileNotFoundError，顾名思义，python找不到except.txt这个不存在的文件．下面我们用try-except-else来处理FileNotFoundError．</p>\n<p>except.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename = <span class=\"string\">'except.txt'</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(filename) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">        content = file.read().rstrip()</span><br><span class=\"line\"><span class=\"keyword\">except</span> FileNotFoundError:</span><br><span class=\"line\">    print(<span class=\"string\">\"This directory can't found \"</span>+filename)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(content)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619201632.png\" alt=\"\"></p>\n<p>可以看到，这里没有执行print(content)</p>\n<p>现在我们创建except.txt这个文件，内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.baidu.com</span><br><span class=\"line\">https://www.aliyun.com</span><br></pre></td></tr></table></figure>\n<p>然后重新执行except.py，输出如下：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619202434.png\" alt=\"\"></p>\n<h3 id=\"不处理异常\"><a href=\"#不处理异常\" class=\"headerlink\" title=\"不处理异常\"></a>不处理异常</h3><p>如果发生异常时，我们不想处理它，也不想告诉用户程序出错了，就像什么都没有发生一样继续运行，可以使用<strong>pass</strong>语句．</p>\n<p>except.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_words</span><span class=\"params\">(filename)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(filename) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">\t    content = file.read()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> FileNotFoundError:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        words = content.split()</span><br><span class=\"line\">        numOfWords = len(words)</span><br><span class=\"line\">        print(<span class=\"string\">\"文件'\"</span>+filename+<span class=\"string\">\"'有\"</span>+numOfWords+<span class=\"string\">\"个词\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">filenames = [<span class=\"string\">'except.txt'</span>,<span class=\"string\">'websites.txt'</span>,<span class=\"string\">'schools.txt'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">    count_words(filename)</span><br></pre></td></tr></table></figure>\n<p>except.txt</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZeroDivisionError</span><br><span class=\"line\">FileNotFoundError</span><br></pre></td></tr></table></figure>\n<p>websites.txt</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.baidu.com</span><br><span class=\"line\">https://www.aliyun.com</span><br></pre></td></tr></table></figure>\n<p>这里我故意多写了一个不存在的schools.txt文件，看下会产生什么结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619204051.png\" alt=\"\"></p>\n<p>可以看到，虽然有一个不存在的schools.txt，但是程序在处理的时候，什么信息也没有．</p>\n","site":{"data":{}},"excerpt":"<p>python使用被称为异常的特殊对象来管理程序执行期间发生的错误．每当发生让python不知所措的错误时，它都会创建一个异常对象．</p>\n<p>如果你编写了处理该异常的代码，程序将继续运行；如果你未对异常进行处理，程序将停止，并显示一个traceback，其中包含有关异常的报告．</p>","more":"<p>就像下面这样</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"number\">2</span>/<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619194751.png\" alt=\"\"></p>\n<p>这里报了一个ZeroDivisionError，如果不想让python报错，则可以使用异常处理．</p>\n<p>异常是使用try-except代码块处理的．</p>\n<p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    指定的操作</span><br><span class=\"line\"><span class=\"keyword\">except</span> 需要处理的异常:</span><br><span class=\"line\">\t发生异常时需要执行的操作</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>中操作成功执行后，需要执行的操作</span><br></pre></td></tr></table></figure>\n<p>上述结构中，else 部分是可选的．</p>\n<h3 id=\"简单的异常处理\"><a href=\"#简单的异常处理\" class=\"headerlink\" title=\"简单的异常处理\"></a>简单的异常处理</h3><p>示例：</p>\n<p>except.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    result = <span class=\"number\">2</span>/<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError:</span><br><span class=\"line\">    print(<span class=\"string\">\"can't divide by zero\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619195645.png\" alt=\"\"></p>\n<h3 id=\"带else的异常处理\"><a href=\"#带else的异常处理\" class=\"headerlink\" title=\"带else的异常处理\"></a>带else的异常处理</h3><p>下面我们来尝试读取一个不存在的文件．</p>\n<p>except.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当前目录下不存在except.txt</span></span><br><span class=\"line\">filename = <span class=\"string\">'except.txt'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(filename) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    content = file.read()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619200740.png\" alt=\"\"></p>\n<p>这里报了一个FileNotFoundError，顾名思义，python找不到except.txt这个不存在的文件．下面我们用try-except-else来处理FileNotFoundError．</p>\n<p>except.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename = <span class=\"string\">'except.txt'</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(filename) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">        content = file.read().rstrip()</span><br><span class=\"line\"><span class=\"keyword\">except</span> FileNotFoundError:</span><br><span class=\"line\">    print(<span class=\"string\">\"This directory can't found \"</span>+filename)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(content)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619201632.png\" alt=\"\"></p>\n<p>可以看到，这里没有执行print(content)</p>\n<p>现在我们创建except.txt这个文件，内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.baidu.com</span><br><span class=\"line\">https://www.aliyun.com</span><br></pre></td></tr></table></figure>\n<p>然后重新执行except.py，输出如下：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619202434.png\" alt=\"\"></p>\n<h3 id=\"不处理异常\"><a href=\"#不处理异常\" class=\"headerlink\" title=\"不处理异常\"></a>不处理异常</h3><p>如果发生异常时，我们不想处理它，也不想告诉用户程序出错了，就像什么都没有发生一样继续运行，可以使用<strong>pass</strong>语句．</p>\n<p>except.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_words</span><span class=\"params\">(filename)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(filename) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">\t    content = file.read()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> FileNotFoundError:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        words = content.split()</span><br><span class=\"line\">        numOfWords = len(words)</span><br><span class=\"line\">        print(<span class=\"string\">\"文件'\"</span>+filename+<span class=\"string\">\"'有\"</span>+numOfWords+<span class=\"string\">\"个词\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">filenames = [<span class=\"string\">'except.txt'</span>,<span class=\"string\">'websites.txt'</span>,<span class=\"string\">'schools.txt'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">    count_words(filename)</span><br></pre></td></tr></table></figure>\n<p>except.txt</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZeroDivisionError</span><br><span class=\"line\">FileNotFoundError</span><br></pre></td></tr></table></figure>\n<p>websites.txt</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.baidu.com</span><br><span class=\"line\">https://www.aliyun.com</span><br></pre></td></tr></table></figure>\n<p>这里我故意多写了一个不存在的schools.txt文件，看下会产生什么结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619204051.png\" alt=\"\"></p>\n<p>可以看到，虽然有一个不存在的schools.txt，但是程序在处理的时候，什么信息也没有．</p>"},{"title":"python3教程-第14章 json","date":"2018-06-20T12:31:33.000Z","updated":"2018-06-27T06:35:23.000Z","_content":"\n使用json函数，需要导入json库：import json\n\n<!--more-->\n\n### 保存数据\n\n函数json.dump()可以将数据保存到json文件中，它接受两个实参：要存储的数据以及可用于存储数据的文件对象．\n\njson_dump.py\n\n```python\nimport json\n\nsettings = {'username':'hegongshan','password':'2018!'}\nfilename = \"settings.json\"\nwith open(filename,'w') as file:\n    json.dump(settings,file)\n```\n\n执行该文件后，目录下多了一个settings.json，内容如下：\n\n```python\n{\"username\": \"hegongshan\", \"password\": \"2018!\"}\n```\n\n### 读取数据\n\n使用函数json.load()可以将json文件中的内容读取到内存中，它接受一个实参：一个文件对象．\n\njson_load.py\n\n```python\nimport json\n\nfilename = 'settings.json'\nwith open(filename) as file:\n    settings = json.load(file)\nprint(settings)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619213231.png)\n\n","source":"_posts/python3-tutorial-chapter14-json.md","raw":"---\ntitle: python3教程-第14章 json\ndate: 2018-06-20 20:31:33\nupdated: 2018-06-27 14:35:23\ntags: python\ncategories: python\n---\n\n使用json函数，需要导入json库：import json\n\n<!--more-->\n\n### 保存数据\n\n函数json.dump()可以将数据保存到json文件中，它接受两个实参：要存储的数据以及可用于存储数据的文件对象．\n\njson_dump.py\n\n```python\nimport json\n\nsettings = {'username':'hegongshan','password':'2018!'}\nfilename = \"settings.json\"\nwith open(filename,'w') as file:\n    json.dump(settings,file)\n```\n\n执行该文件后，目录下多了一个settings.json，内容如下：\n\n```python\n{\"username\": \"hegongshan\", \"password\": \"2018!\"}\n```\n\n### 读取数据\n\n使用函数json.load()可以将json文件中的内容读取到内存中，它接受一个实参：一个文件对象．\n\njson_load.py\n\n```python\nimport json\n\nfilename = 'settings.json'\nwith open(filename) as file:\n    settings = json.load(file)\nprint(settings)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619213231.png)\n\n","slug":"python3-tutorial-chapter14-json","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9arw0063j1q0uaujxep7","content":"<p>使用json函数，需要导入json库：import json</p>\n<a id=\"more\"></a>\n<h3 id=\"保存数据\"><a href=\"#保存数据\" class=\"headerlink\" title=\"保存数据\"></a>保存数据</h3><p>函数json.dump()可以将数据保存到json文件中，它接受两个实参：要存储的数据以及可用于存储数据的文件对象．</p>\n<p>json_dump.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">settings = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'password'</span>:<span class=\"string\">'2018!'</span>&#125;</span><br><span class=\"line\">filename = <span class=\"string\">\"settings.json\"</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(filename,<span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    json.dump(settings,file)</span><br></pre></td></tr></table></figure>\n<p>执行该文件后，目录下多了一个settings.json，内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"username\"</span>: <span class=\"string\">\"hegongshan\"</span>, <span class=\"string\">\"password\"</span>: <span class=\"string\">\"2018!\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"读取数据\"><a href=\"#读取数据\" class=\"headerlink\" title=\"读取数据\"></a>读取数据</h3><p>使用函数json.load()可以将json文件中的内容读取到内存中，它接受一个实参：一个文件对象．</p>\n<p>json_load.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">filename = <span class=\"string\">'settings.json'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(filename) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    settings = json.load(file)</span><br><span class=\"line\">print(settings)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619213231.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>使用json函数，需要导入json库：import json</p>","more":"<h3 id=\"保存数据\"><a href=\"#保存数据\" class=\"headerlink\" title=\"保存数据\"></a>保存数据</h3><p>函数json.dump()可以将数据保存到json文件中，它接受两个实参：要存储的数据以及可用于存储数据的文件对象．</p>\n<p>json_dump.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">settings = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'password'</span>:<span class=\"string\">'2018!'</span>&#125;</span><br><span class=\"line\">filename = <span class=\"string\">\"settings.json\"</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(filename,<span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    json.dump(settings,file)</span><br></pre></td></tr></table></figure>\n<p>执行该文件后，目录下多了一个settings.json，内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"username\"</span>: <span class=\"string\">\"hegongshan\"</span>, <span class=\"string\">\"password\"</span>: <span class=\"string\">\"2018!\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"读取数据\"><a href=\"#读取数据\" class=\"headerlink\" title=\"读取数据\"></a>读取数据</h3><p>使用函数json.load()可以将json文件中的内容读取到内存中，它接受一个实参：一个文件对象．</p>\n<p>json_load.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">filename = <span class=\"string\">'settings.json'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(filename) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    settings = json.load(file)</span><br><span class=\"line\">print(settings)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/19/20180619213231.png\" alt=\"\"></p>"},{"title":"python3教程-第2章 标准输入和输出","date":"2018-06-12T08:26:17.000Z","_content":"\n### 标准输出print()\n\n* 简单输出\n\n函数print()接受一个参数：需要打印的信息，如字符串，整数，列表等。\n\n示例：\n\n```python\nprint(\"hello print\")\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612155807.png)\n\n<!--more-->\n\n### 标准输入input()\n\n函数input()让程序暂停运行，等待用户输入一些文本。获取输入后，python将其存储在一个变量中，以便后续使用。input()接受一个参数：要向用户显示的提示或说明信息。\n\n示例：\n\n```python\nstr = input(\"请输入一句话:\")\n```\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612160622.png)\n\n需要注意的是，使用input()函数时，python将用户输入解读为字符串。\n\n示例：\n\n```python\nage = input(\"请输入您的年龄:\")\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612160842.png)\n\n可以看到，输出的age是带引号的，也就是说它确实被python解读为字符串。\n\n如果需要将输入的数字转换为数值型，可以使用int()函数，将字符串转换为整型某某某\n\n示例：\n\n```python\nage = input(\"请输入您的年龄:\")\nage = int(age)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612161251.png)\n\n可以看到，使用int()函数转换后，输出的age是不带引号的，age 确实变成了整型。","source":"_posts/python3-tutorial-chapter2-input-and-print.md","raw":"---\ntitle: python3教程-第2章 标准输入和输出\ndate: 2018-06-12 16:26:17\ntags: python\ncategories: python\n---\n\n### 标准输出print()\n\n* 简单输出\n\n函数print()接受一个参数：需要打印的信息，如字符串，整数，列表等。\n\n示例：\n\n```python\nprint(\"hello print\")\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612155807.png)\n\n<!--more-->\n\n### 标准输入input()\n\n函数input()让程序暂停运行，等待用户输入一些文本。获取输入后，python将其存储在一个变量中，以便后续使用。input()接受一个参数：要向用户显示的提示或说明信息。\n\n示例：\n\n```python\nstr = input(\"请输入一句话:\")\n```\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612160622.png)\n\n需要注意的是，使用input()函数时，python将用户输入解读为字符串。\n\n示例：\n\n```python\nage = input(\"请输入您的年龄:\")\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612160842.png)\n\n可以看到，输出的age是带引号的，也就是说它确实被python解读为字符串。\n\n如果需要将输入的数字转换为数值型，可以使用int()函数，将字符串转换为整型某某某\n\n示例：\n\n```python\nage = input(\"请输入您的年龄:\")\nage = int(age)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612161251.png)\n\n可以看到，使用int()函数转换后，输出的age是不带引号的，age 确实变成了整型。","slug":"python3-tutorial-chapter2-input-and-print","published":1,"updated":"2019-01-19T07:23:57.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9arw0065j1q0naffhbps","content":"<h3 id=\"标准输出print\"><a href=\"#标准输出print\" class=\"headerlink\" title=\"标准输出print()\"></a>标准输出print()</h3><ul>\n<li>简单输出</li>\n</ul>\n<p>函数print()接受一个参数：需要打印的信息，如字符串，整数，列表等。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"hello print\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612155807.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h3 id=\"标准输入input\"><a href=\"#标准输入input\" class=\"headerlink\" title=\"标准输入input()\"></a>标准输入input()</h3><p>函数input()让程序暂停运行，等待用户输入一些文本。获取输入后，python将其存储在一个变量中，以便后续使用。input()接受一个参数：要向用户显示的提示或说明信息。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = input(<span class=\"string\">\"请输入一句话:\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612160622.png\" alt=\"\"></p>\n<p>需要注意的是，使用input()函数时，python将用户输入解读为字符串。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = input(<span class=\"string\">\"请输入您的年龄:\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612160842.png\" alt=\"\"></p>\n<p>可以看到，输出的age是带引号的，也就是说它确实被python解读为字符串。</p>\n<p>如果需要将输入的数字转换为数值型，可以使用int()函数，将字符串转换为整型某某某</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = input(<span class=\"string\">\"请输入您的年龄:\"</span>)</span><br><span class=\"line\">age = int(age)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612161251.png\" alt=\"\"></p>\n<p>可以看到，使用int()函数转换后，输出的age是不带引号的，age 确实变成了整型。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"标准输出print\"><a href=\"#标准输出print\" class=\"headerlink\" title=\"标准输出print()\"></a>标准输出print()</h3><ul>\n<li>简单输出</li>\n</ul>\n<p>函数print()接受一个参数：需要打印的信息，如字符串，整数，列表等。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"hello print\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612155807.png\" alt=\"\"></p>","more":"<h3 id=\"标准输入input\"><a href=\"#标准输入input\" class=\"headerlink\" title=\"标准输入input()\"></a>标准输入input()</h3><p>函数input()让程序暂停运行，等待用户输入一些文本。获取输入后，python将其存储在一个变量中，以便后续使用。input()接受一个参数：要向用户显示的提示或说明信息。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = input(<span class=\"string\">\"请输入一句话:\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612160622.png\" alt=\"\"></p>\n<p>需要注意的是，使用input()函数时，python将用户输入解读为字符串。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = input(<span class=\"string\">\"请输入您的年龄:\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612160842.png\" alt=\"\"></p>\n<p>可以看到，输出的age是带引号的，也就是说它确实被python解读为字符串。</p>\n<p>如果需要将输入的数字转换为数值型，可以使用int()函数，将字符串转换为整型某某某</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = input(<span class=\"string\">\"请输入您的年龄:\"</span>)</span><br><span class=\"line\">age = int(age)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612161251.png\" alt=\"\"></p>\n<p>可以看到，使用int()函数转换后，输出的age是不带引号的，age 确实变成了整型。</p>"},{"title":"python3教程-第4章 字符串","date":"2018-06-12T08:32:13.000Z","_content":"\n字符串是一系列字符。在python中，用引号括起来的都是字符串，这里的引号可以是单引号，也可以是双引号。\n\n<!--more-->\n\n### 修改字符串的大小写\n\n涉及的字符串方法有upper()、isupper()、lower()、islower()\n\n示例：\n\n```python\nname = \"hegongshan\"\n# 判断是否为大写字符串\nprint(name.isupper())\n# 将字符串中的字母均转为大写\nprint(name.upper())\n\nname2 = \"heGONGshan\"\n# 判断字符串是否为小写\nprint(name2.islower())\n#　将字符串中的字母均转为小写\nprint(name2.lower())\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623211639.png)\n\n\n\n### 拼接字符串\n\n和大多数高级编程语言一样，python使用加号（+）来拼接字符串。\n\n示例：\n\n```python\nmessage = \"I \" + \"love \"\nmessage = message + \"you.\"\nprint(message)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623211949.png)\n\n### 首字母大写\n\n涉及的方法有title()、capitalize()\n\n示例：\n\n```python\nname = \"he gong shan\"\nprint(name.title())\nprint(name.capitalize())\n\nname2 = \"123 hegongshan\"\nprint(name2.title())\nprint(name2.capitalize())\n\nmessage = \"123hgs520\"\nprint(message.title())\nprint(message.capitalize())\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623213455.png)\n\n从上面的结果，我们可以很容易地看出title()和capitalize()的区别：\n\ntitle()方法会将字符串中所有单词的首字母都转为大写，而capitalize()方法只会将字符串的首字母转为大写\n\n### 去掉字符串中的空白字符\n\n涉及的方法有strip()、rstrip()和lstrip()\n\nstrip()：去掉字符串**左右**的空白字符\n\nlstrip()：去掉字符串**左边**的空白字符\n\nrstrip()：去掉字符串**右边**的空白字符\n\n示例：\n\n```python\nmessage = \"   I love you !   \"\nprint(message.lstrip())\n\nprint(message.rstrip() + \"hhh\")\n\nprint(message.strip() + \"233\")\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623214342.png)\n\n","source":"_posts/python3-tutorial-chapter4-string.md","raw":"---\ntitle: python3教程-第4章 字符串\ndate: 2018-06-12 16:32:13\ntags: python\ncategories: python\n---\n\n字符串是一系列字符。在python中，用引号括起来的都是字符串，这里的引号可以是单引号，也可以是双引号。\n\n<!--more-->\n\n### 修改字符串的大小写\n\n涉及的字符串方法有upper()、isupper()、lower()、islower()\n\n示例：\n\n```python\nname = \"hegongshan\"\n# 判断是否为大写字符串\nprint(name.isupper())\n# 将字符串中的字母均转为大写\nprint(name.upper())\n\nname2 = \"heGONGshan\"\n# 判断字符串是否为小写\nprint(name2.islower())\n#　将字符串中的字母均转为小写\nprint(name2.lower())\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623211639.png)\n\n\n\n### 拼接字符串\n\n和大多数高级编程语言一样，python使用加号（+）来拼接字符串。\n\n示例：\n\n```python\nmessage = \"I \" + \"love \"\nmessage = message + \"you.\"\nprint(message)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623211949.png)\n\n### 首字母大写\n\n涉及的方法有title()、capitalize()\n\n示例：\n\n```python\nname = \"he gong shan\"\nprint(name.title())\nprint(name.capitalize())\n\nname2 = \"123 hegongshan\"\nprint(name2.title())\nprint(name2.capitalize())\n\nmessage = \"123hgs520\"\nprint(message.title())\nprint(message.capitalize())\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623213455.png)\n\n从上面的结果，我们可以很容易地看出title()和capitalize()的区别：\n\ntitle()方法会将字符串中所有单词的首字母都转为大写，而capitalize()方法只会将字符串的首字母转为大写\n\n### 去掉字符串中的空白字符\n\n涉及的方法有strip()、rstrip()和lstrip()\n\nstrip()：去掉字符串**左右**的空白字符\n\nlstrip()：去掉字符串**左边**的空白字符\n\nrstrip()：去掉字符串**右边**的空白字符\n\n示例：\n\n```python\nmessage = \"   I love you !   \"\nprint(message.lstrip())\n\nprint(message.rstrip() + \"hhh\")\n\nprint(message.strip() + \"233\")\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623214342.png)\n\n","slug":"python3-tutorial-chapter4-string","published":1,"updated":"2019-01-19T07:23:57.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9arx0069j1q04bs8c9yh","content":"<p>字符串是一系列字符。在python中，用引号括起来的都是字符串，这里的引号可以是单引号，也可以是双引号。</p>\n<a id=\"more\"></a>\n<h3 id=\"修改字符串的大小写\"><a href=\"#修改字符串的大小写\" class=\"headerlink\" title=\"修改字符串的大小写\"></a>修改字符串的大小写</h3><p>涉及的字符串方法有upper()、isupper()、lower()、islower()</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">\"hegongshan\"</span></span><br><span class=\"line\"><span class=\"comment\"># 判断是否为大写字符串</span></span><br><span class=\"line\">print(name.isupper())</span><br><span class=\"line\"><span class=\"comment\"># 将字符串中的字母均转为大写</span></span><br><span class=\"line\">print(name.upper())</span><br><span class=\"line\"></span><br><span class=\"line\">name2 = <span class=\"string\">\"heGONGshan\"</span></span><br><span class=\"line\"><span class=\"comment\"># 判断字符串是否为小写</span></span><br><span class=\"line\">print(name2.islower())</span><br><span class=\"line\"><span class=\"comment\">#　将字符串中的字母均转为小写</span></span><br><span class=\"line\">print(name2.lower())</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623211639.png\" alt=\"\"></p>\n<h3 id=\"拼接字符串\"><a href=\"#拼接字符串\" class=\"headerlink\" title=\"拼接字符串\"></a>拼接字符串</h3><p>和大多数高级编程语言一样，python使用加号（+）来拼接字符串。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = <span class=\"string\">\"I \"</span> + <span class=\"string\">\"love \"</span></span><br><span class=\"line\">message = message + <span class=\"string\">\"you.\"</span></span><br><span class=\"line\">print(message)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623211949.png\" alt=\"\"></p>\n<h3 id=\"首字母大写\"><a href=\"#首字母大写\" class=\"headerlink\" title=\"首字母大写\"></a>首字母大写</h3><p>涉及的方法有title()、capitalize()</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">\"he gong shan\"</span></span><br><span class=\"line\">print(name.title())</span><br><span class=\"line\">print(name.capitalize())</span><br><span class=\"line\"></span><br><span class=\"line\">name2 = <span class=\"string\">\"123 hegongshan\"</span></span><br><span class=\"line\">print(name2.title())</span><br><span class=\"line\">print(name2.capitalize())</span><br><span class=\"line\"></span><br><span class=\"line\">message = <span class=\"string\">\"123hgs520\"</span></span><br><span class=\"line\">print(message.title())</span><br><span class=\"line\">print(message.capitalize())</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623213455.png\" alt=\"\"></p>\n<p>从上面的结果，我们可以很容易地看出title()和capitalize()的区别：</p>\n<p>title()方法会将字符串中所有单词的首字母都转为大写，而capitalize()方法只会将字符串的首字母转为大写</p>\n<h3 id=\"去掉字符串中的空白字符\"><a href=\"#去掉字符串中的空白字符\" class=\"headerlink\" title=\"去掉字符串中的空白字符\"></a>去掉字符串中的空白字符</h3><p>涉及的方法有strip()、rstrip()和lstrip()</p>\n<p>strip()：去掉字符串<strong>左右</strong>的空白字符</p>\n<p>lstrip()：去掉字符串<strong>左边</strong>的空白字符</p>\n<p>rstrip()：去掉字符串<strong>右边</strong>的空白字符</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = <span class=\"string\">\"   I love you !   \"</span></span><br><span class=\"line\">print(message.lstrip())</span><br><span class=\"line\"></span><br><span class=\"line\">print(message.rstrip() + <span class=\"string\">\"hhh\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(message.strip() + <span class=\"string\">\"233\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623214342.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>字符串是一系列字符。在python中，用引号括起来的都是字符串，这里的引号可以是单引号，也可以是双引号。</p>","more":"<h3 id=\"修改字符串的大小写\"><a href=\"#修改字符串的大小写\" class=\"headerlink\" title=\"修改字符串的大小写\"></a>修改字符串的大小写</h3><p>涉及的字符串方法有upper()、isupper()、lower()、islower()</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">\"hegongshan\"</span></span><br><span class=\"line\"><span class=\"comment\"># 判断是否为大写字符串</span></span><br><span class=\"line\">print(name.isupper())</span><br><span class=\"line\"><span class=\"comment\"># 将字符串中的字母均转为大写</span></span><br><span class=\"line\">print(name.upper())</span><br><span class=\"line\"></span><br><span class=\"line\">name2 = <span class=\"string\">\"heGONGshan\"</span></span><br><span class=\"line\"><span class=\"comment\"># 判断字符串是否为小写</span></span><br><span class=\"line\">print(name2.islower())</span><br><span class=\"line\"><span class=\"comment\">#　将字符串中的字母均转为小写</span></span><br><span class=\"line\">print(name2.lower())</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623211639.png\" alt=\"\"></p>\n<h3 id=\"拼接字符串\"><a href=\"#拼接字符串\" class=\"headerlink\" title=\"拼接字符串\"></a>拼接字符串</h3><p>和大多数高级编程语言一样，python使用加号（+）来拼接字符串。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = <span class=\"string\">\"I \"</span> + <span class=\"string\">\"love \"</span></span><br><span class=\"line\">message = message + <span class=\"string\">\"you.\"</span></span><br><span class=\"line\">print(message)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623211949.png\" alt=\"\"></p>\n<h3 id=\"首字母大写\"><a href=\"#首字母大写\" class=\"headerlink\" title=\"首字母大写\"></a>首字母大写</h3><p>涉及的方法有title()、capitalize()</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">\"he gong shan\"</span></span><br><span class=\"line\">print(name.title())</span><br><span class=\"line\">print(name.capitalize())</span><br><span class=\"line\"></span><br><span class=\"line\">name2 = <span class=\"string\">\"123 hegongshan\"</span></span><br><span class=\"line\">print(name2.title())</span><br><span class=\"line\">print(name2.capitalize())</span><br><span class=\"line\"></span><br><span class=\"line\">message = <span class=\"string\">\"123hgs520\"</span></span><br><span class=\"line\">print(message.title())</span><br><span class=\"line\">print(message.capitalize())</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623213455.png\" alt=\"\"></p>\n<p>从上面的结果，我们可以很容易地看出title()和capitalize()的区别：</p>\n<p>title()方法会将字符串中所有单词的首字母都转为大写，而capitalize()方法只会将字符串的首字母转为大写</p>\n<h3 id=\"去掉字符串中的空白字符\"><a href=\"#去掉字符串中的空白字符\" class=\"headerlink\" title=\"去掉字符串中的空白字符\"></a>去掉字符串中的空白字符</h3><p>涉及的方法有strip()、rstrip()和lstrip()</p>\n<p>strip()：去掉字符串<strong>左右</strong>的空白字符</p>\n<p>lstrip()：去掉字符串<strong>左边</strong>的空白字符</p>\n<p>rstrip()：去掉字符串<strong>右边</strong>的空白字符</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = <span class=\"string\">\"   I love you !   \"</span></span><br><span class=\"line\">print(message.lstrip())</span><br><span class=\"line\"></span><br><span class=\"line\">print(message.rstrip() + <span class=\"string\">\"hhh\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(message.strip() + <span class=\"string\">\"233\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623214342.png\" alt=\"\"></p>"},{"title":"python3教程-第5章 条件判断","date":"2018-06-13T10:11:32.000Z","_content":"\n### 简单的if语句\n\n语法如下：\n\n```python\nif 判断条件:\n    执行语句\n```\n\n<!--more-->\n\n示例：\n\n```python\nmessage = 'python'\nif message.islower():\n    print(message.upper()) # print在if的基础上缩进了四个空格\n```\n\n注意第二行末尾的冒号，不要忘记了哦。\n\n另外，需要注意的是，大多数编程语言使用{ }将条件判断中的执行语句包裹起来，而python并不如此，它以缩进作为条件判断中执行语句的标志。条件判后的执行语句在条件判断的基础上**缩进四个空格**。比如上面的例子，print()函数在if的基础上缩进了四个空格。后面要讲的循环也是一样，执行语句需要缩进四个空格。\n\n### if-else语句\n\n在大多数情况下，我们经常需要在条件判断通过时执行一个操作，在没有通过时执行另一个操作。这时候就需要使用到if-else语句。语法如下：\n\n```python\nif 判断条件:\n    执行语句\nelse:\n    执行语句\n```\n\n示例：\n\n```python\nmessage = 'python'\nif message.islower():\n    print(message.upper())\nelse:\n    print(message.lower())\n```\n\n\n\n### if-elif-else结构\n\n如果需要处理的条件判断不止两种，则可以使用if-elif-else结构。语法如下：\n\n```python\nif 判断条件:\n\t执行语句\nelif 判断条件: \n\t执行语句\nelif 判断条件: \n\t执行语句\n...\nelse:    \n\t执行语句\n```\n\n示例：\n\n```python\nage = 20\nif age < 18:\n    print('未成年')\n    \nelif age >= 18 & age <= 30:\n\tprint('青年人')\n    \nelif age > 30 & age < 60:\n    print('中年人')\n    \nelse:\n    print('老年人')    \n```\n\n需要注意的是，**if-elif-else结构中，else并不是必须的**。例如，下面的代码也是正确的\n\n```python\nage = 20\nif age < 18:\n    print('未成年')\n    \nelif age >= 18 and age <= 30:\n\tprint('青年人')\n    \nelif age > 30 and age < 60:\n    print('中年人')\n```\n\n","source":"_posts/python3-tutorial-chapter5-if-else.md","raw":"---\ntitle: python3教程-第5章 条件判断\ndate: 2018-06-13 18:11:32\ntags: python\ncategories: python\n---\n\n### 简单的if语句\n\n语法如下：\n\n```python\nif 判断条件:\n    执行语句\n```\n\n<!--more-->\n\n示例：\n\n```python\nmessage = 'python'\nif message.islower():\n    print(message.upper()) # print在if的基础上缩进了四个空格\n```\n\n注意第二行末尾的冒号，不要忘记了哦。\n\n另外，需要注意的是，大多数编程语言使用{ }将条件判断中的执行语句包裹起来，而python并不如此，它以缩进作为条件判断中执行语句的标志。条件判后的执行语句在条件判断的基础上**缩进四个空格**。比如上面的例子，print()函数在if的基础上缩进了四个空格。后面要讲的循环也是一样，执行语句需要缩进四个空格。\n\n### if-else语句\n\n在大多数情况下，我们经常需要在条件判断通过时执行一个操作，在没有通过时执行另一个操作。这时候就需要使用到if-else语句。语法如下：\n\n```python\nif 判断条件:\n    执行语句\nelse:\n    执行语句\n```\n\n示例：\n\n```python\nmessage = 'python'\nif message.islower():\n    print(message.upper())\nelse:\n    print(message.lower())\n```\n\n\n\n### if-elif-else结构\n\n如果需要处理的条件判断不止两种，则可以使用if-elif-else结构。语法如下：\n\n```python\nif 判断条件:\n\t执行语句\nelif 判断条件: \n\t执行语句\nelif 判断条件: \n\t执行语句\n...\nelse:    \n\t执行语句\n```\n\n示例：\n\n```python\nage = 20\nif age < 18:\n    print('未成年')\n    \nelif age >= 18 & age <= 30:\n\tprint('青年人')\n    \nelif age > 30 & age < 60:\n    print('中年人')\n    \nelse:\n    print('老年人')    \n```\n\n需要注意的是，**if-elif-else结构中，else并不是必须的**。例如，下面的代码也是正确的\n\n```python\nage = 20\nif age < 18:\n    print('未成年')\n    \nelif age >= 18 and age <= 30:\n\tprint('青年人')\n    \nelif age > 30 and age < 60:\n    print('中年人')\n```\n\n","slug":"python3-tutorial-chapter5-if-else","published":1,"updated":"2019-01-19T07:23:57.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9ary006cj1q0a9gtcdqg","content":"<h3 id=\"简单的if语句\"><a href=\"#简单的if语句\" class=\"headerlink\" title=\"简单的if语句\"></a>简单的if语句</h3><p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 判断条件:</span><br><span class=\"line\">    执行语句</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = <span class=\"string\">'python'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> message.islower():</span><br><span class=\"line\">    print(message.upper()) <span class=\"comment\"># print在if的基础上缩进了四个空格</span></span><br></pre></td></tr></table></figure>\n<p>注意第二行末尾的冒号，不要忘记了哦。</p>\n<p>另外，需要注意的是，大多数编程语言使用{ }将条件判断中的执行语句包裹起来，而python并不如此，它以缩进作为条件判断中执行语句的标志。条件判后的执行语句在条件判断的基础上<strong>缩进四个空格</strong>。比如上面的例子，print()函数在if的基础上缩进了四个空格。后面要讲的循环也是一样，执行语句需要缩进四个空格。</p>\n<h3 id=\"if-else语句\"><a href=\"#if-else语句\" class=\"headerlink\" title=\"if-else语句\"></a>if-else语句</h3><p>在大多数情况下，我们经常需要在条件判断通过时执行一个操作，在没有通过时执行另一个操作。这时候就需要使用到if-else语句。语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 判断条件:</span><br><span class=\"line\">    执行语句</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    执行语句</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = <span class=\"string\">'python'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> message.islower():</span><br><span class=\"line\">    print(message.upper())</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(message.lower())</span><br></pre></td></tr></table></figure>\n<h3 id=\"if-elif-else结构\"><a href=\"#if-elif-else结构\" class=\"headerlink\" title=\"if-elif-else结构\"></a>if-elif-else结构</h3><p>如果需要处理的条件判断不止两种，则可以使用if-elif-else结构。语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 判断条件:</span><br><span class=\"line\">\t执行语句</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 判断条件: </span><br><span class=\"line\">\t执行语句</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 判断条件: </span><br><span class=\"line\">\t执行语句</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">else</span>:    </span><br><span class=\"line\">\t执行语句</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &lt; <span class=\"number\">18</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'未成年'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt;= <span class=\"number\">18</span> &amp; age &lt;= <span class=\"number\">30</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">'青年人'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt; <span class=\"number\">30</span> &amp; age &lt; <span class=\"number\">60</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'中年人'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'老年人'</span>)</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，<strong>if-elif-else结构中，else并不是必须的</strong>。例如，下面的代码也是正确的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &lt; <span class=\"number\">18</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'未成年'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt;= <span class=\"number\">18</span> <span class=\"keyword\">and</span> age &lt;= <span class=\"number\">30</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">'青年人'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt; <span class=\"number\">30</span> <span class=\"keyword\">and</span> age &lt; <span class=\"number\">60</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'中年人'</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"简单的if语句\"><a href=\"#简单的if语句\" class=\"headerlink\" title=\"简单的if语句\"></a>简单的if语句</h3><p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 判断条件:</span><br><span class=\"line\">    执行语句</span><br></pre></td></tr></table></figure>","more":"<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = <span class=\"string\">'python'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> message.islower():</span><br><span class=\"line\">    print(message.upper()) <span class=\"comment\"># print在if的基础上缩进了四个空格</span></span><br></pre></td></tr></table></figure>\n<p>注意第二行末尾的冒号，不要忘记了哦。</p>\n<p>另外，需要注意的是，大多数编程语言使用{ }将条件判断中的执行语句包裹起来，而python并不如此，它以缩进作为条件判断中执行语句的标志。条件判后的执行语句在条件判断的基础上<strong>缩进四个空格</strong>。比如上面的例子，print()函数在if的基础上缩进了四个空格。后面要讲的循环也是一样，执行语句需要缩进四个空格。</p>\n<h3 id=\"if-else语句\"><a href=\"#if-else语句\" class=\"headerlink\" title=\"if-else语句\"></a>if-else语句</h3><p>在大多数情况下，我们经常需要在条件判断通过时执行一个操作，在没有通过时执行另一个操作。这时候就需要使用到if-else语句。语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 判断条件:</span><br><span class=\"line\">    执行语句</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    执行语句</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = <span class=\"string\">'python'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> message.islower():</span><br><span class=\"line\">    print(message.upper())</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(message.lower())</span><br></pre></td></tr></table></figure>\n<h3 id=\"if-elif-else结构\"><a href=\"#if-elif-else结构\" class=\"headerlink\" title=\"if-elif-else结构\"></a>if-elif-else结构</h3><p>如果需要处理的条件判断不止两种，则可以使用if-elif-else结构。语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 判断条件:</span><br><span class=\"line\">\t执行语句</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 判断条件: </span><br><span class=\"line\">\t执行语句</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 判断条件: </span><br><span class=\"line\">\t执行语句</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">else</span>:    </span><br><span class=\"line\">\t执行语句</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &lt; <span class=\"number\">18</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'未成年'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt;= <span class=\"number\">18</span> &amp; age &lt;= <span class=\"number\">30</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">'青年人'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt; <span class=\"number\">30</span> &amp; age &lt; <span class=\"number\">60</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'中年人'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'老年人'</span>)</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，<strong>if-elif-else结构中，else并不是必须的</strong>。例如，下面的代码也是正确的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> age &lt; <span class=\"number\">18</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'未成年'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt;= <span class=\"number\">18</span> <span class=\"keyword\">and</span> age &lt;= <span class=\"number\">30</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">'青年人'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt; <span class=\"number\">30</span> <span class=\"keyword\">and</span> age &lt; <span class=\"number\">60</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'中年人'</span>)</span><br></pre></td></tr></table></figure>"},{"title":"python3教程-第6章 循环","date":"2018-06-13T10:11:53.000Z","_content":"\n### for循环\n\n语法如下：\n\n```python\nfor 变量名 in　集合(字符串|列表|元组|字典):\n    循环体\n```\n\n<!--more-->\n\n示例：\n\n```python\nstr = \"I love you!\"\nfor c in str:\n    print(c)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623193854.png)\n\n### while循环\n\n语法如下：\n\n```python\nwhile 条件表达式:\n    循环体\n```\n\n示例如下：\n\n```python\ncurrent_number = 1\nwhile current_number < 5:\n    print(current_number)\n    current_number += 1\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623195647.png)\n\n### 使用标志结束循环\n\n在要求很多条件都满足才继续运行的程序中，可定义一个变量，用于判断整个程序是否处于活动状态。这个变量称为标志，充当程序的交通信号灯，决定循环是否继续进行，还是结束。\n\n示例：\n\n```python\nactive = True\nwhile active:\n    message = input(\"\\n请输入一个字符串，\\n如果输入exit则退出循环：\")\n    if message == 'exit':\n        active = False\n    else:\n        print(message)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623200803.png)\n\n### 使用break结束循环\n\n使用break语句，可以直接退出循环，不再继续执行循环中余下的代码\n\n示例：\n\n```python\n# 循环输入一串字符串，如果输入的是exit，则退出循环\nwhile True:\n    message = input(\"\\n请输入一个字符串，\\n如果输入exit则退出循环：\")\n    if message == 'exit':\n    \tbreak    \n    else:\n        print(message)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623201350.png)\n\n### 在循环中使用continue\n\n使用continue语句，继续执行下一次循环，不再执行当前循环中余下的代码。\n\n示例：\n\n```python\n# 打印１-10中的所有奇数\ncurrent_number = 0\nwhile current_number < 10:\n    current_number += 1\n    if current_number % 2 == 0:\n        continue\n    print(current_number)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623202848.png)","source":"_posts/python3-tutorial-chapter6-loop.md","raw":"---\ntitle: python3教程-第6章 循环\ndate: 2018-06-13 18:11:53\ntags: python\ncategories: python\n---\n\n### for循环\n\n语法如下：\n\n```python\nfor 变量名 in　集合(字符串|列表|元组|字典):\n    循环体\n```\n\n<!--more-->\n\n示例：\n\n```python\nstr = \"I love you!\"\nfor c in str:\n    print(c)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623193854.png)\n\n### while循环\n\n语法如下：\n\n```python\nwhile 条件表达式:\n    循环体\n```\n\n示例如下：\n\n```python\ncurrent_number = 1\nwhile current_number < 5:\n    print(current_number)\n    current_number += 1\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623195647.png)\n\n### 使用标志结束循环\n\n在要求很多条件都满足才继续运行的程序中，可定义一个变量，用于判断整个程序是否处于活动状态。这个变量称为标志，充当程序的交通信号灯，决定循环是否继续进行，还是结束。\n\n示例：\n\n```python\nactive = True\nwhile active:\n    message = input(\"\\n请输入一个字符串，\\n如果输入exit则退出循环：\")\n    if message == 'exit':\n        active = False\n    else:\n        print(message)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623200803.png)\n\n### 使用break结束循环\n\n使用break语句，可以直接退出循环，不再继续执行循环中余下的代码\n\n示例：\n\n```python\n# 循环输入一串字符串，如果输入的是exit，则退出循环\nwhile True:\n    message = input(\"\\n请输入一个字符串，\\n如果输入exit则退出循环：\")\n    if message == 'exit':\n    \tbreak    \n    else:\n        print(message)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623201350.png)\n\n### 在循环中使用continue\n\n使用continue语句，继续执行下一次循环，不再执行当前循环中余下的代码。\n\n示例：\n\n```python\n# 打印１-10中的所有奇数\ncurrent_number = 0\nwhile current_number < 10:\n    current_number += 1\n    if current_number % 2 == 0:\n        continue\n    print(current_number)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623202848.png)","slug":"python3-tutorial-chapter6-loop","published":1,"updated":"2019-01-19T07:23:57.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9arz006fj1q0dmysluvx","content":"<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> 变量名 <span class=\"keyword\">in</span>　集合(字符串|列表|元组|字典):</span><br><span class=\"line\">    循环体</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">\"I love you!\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> str:</span><br><span class=\"line\">    print(c)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623193854.png\" alt=\"\"></p>\n<h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> 条件表达式:</span><br><span class=\"line\">    循环体</span><br></pre></td></tr></table></figure>\n<p>示例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">current_number = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> current_number &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">    print(current_number)</span><br><span class=\"line\">    current_number += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623195647.png\" alt=\"\"></p>\n<h3 id=\"使用标志结束循环\"><a href=\"#使用标志结束循环\" class=\"headerlink\" title=\"使用标志结束循环\"></a>使用标志结束循环</h3><p>在要求很多条件都满足才继续运行的程序中，可定义一个变量，用于判断整个程序是否处于活动状态。这个变量称为标志，充当程序的交通信号灯，决定循环是否继续进行，还是结束。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">active = <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> active:</span><br><span class=\"line\">    message = input(<span class=\"string\">\"\\n请输入一个字符串，\\n如果输入exit则退出循环：\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> message == <span class=\"string\">'exit'</span>:</span><br><span class=\"line\">        active = <span class=\"keyword\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(message)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623200803.png\" alt=\"\"></p>\n<h3 id=\"使用break结束循环\"><a href=\"#使用break结束循环\" class=\"headerlink\" title=\"使用break结束循环\"></a>使用break结束循环</h3><p>使用break语句，可以直接退出循环，不再继续执行循环中余下的代码</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 循环输入一串字符串，如果输入的是exit，则退出循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    message = input(<span class=\"string\">\"\\n请输入一个字符串，\\n如果输入exit则退出循环：\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> message == <span class=\"string\">'exit'</span>:</span><br><span class=\"line\">    \t<span class=\"keyword\">break</span>    </span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(message)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623201350.png\" alt=\"\"></p>\n<h3 id=\"在循环中使用continue\"><a href=\"#在循环中使用continue\" class=\"headerlink\" title=\"在循环中使用continue\"></a>在循环中使用continue</h3><p>使用continue语句，继续执行下一次循环，不再执行当前循环中余下的代码。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印１-10中的所有奇数</span></span><br><span class=\"line\">current_number = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> current_number &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    current_number += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> current_number % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    print(current_number)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623202848.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> 变量名 <span class=\"keyword\">in</span>　集合(字符串|列表|元组|字典):</span><br><span class=\"line\">    循环体</span><br></pre></td></tr></table></figure>","more":"<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">\"I love you!\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> str:</span><br><span class=\"line\">    print(c)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623193854.png\" alt=\"\"></p>\n<h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> 条件表达式:</span><br><span class=\"line\">    循环体</span><br></pre></td></tr></table></figure>\n<p>示例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">current_number = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> current_number &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">    print(current_number)</span><br><span class=\"line\">    current_number += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623195647.png\" alt=\"\"></p>\n<h3 id=\"使用标志结束循环\"><a href=\"#使用标志结束循环\" class=\"headerlink\" title=\"使用标志结束循环\"></a>使用标志结束循环</h3><p>在要求很多条件都满足才继续运行的程序中，可定义一个变量，用于判断整个程序是否处于活动状态。这个变量称为标志，充当程序的交通信号灯，决定循环是否继续进行，还是结束。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">active = <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> active:</span><br><span class=\"line\">    message = input(<span class=\"string\">\"\\n请输入一个字符串，\\n如果输入exit则退出循环：\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> message == <span class=\"string\">'exit'</span>:</span><br><span class=\"line\">        active = <span class=\"keyword\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(message)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623200803.png\" alt=\"\"></p>\n<h3 id=\"使用break结束循环\"><a href=\"#使用break结束循环\" class=\"headerlink\" title=\"使用break结束循环\"></a>使用break结束循环</h3><p>使用break语句，可以直接退出循环，不再继续执行循环中余下的代码</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 循环输入一串字符串，如果输入的是exit，则退出循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    message = input(<span class=\"string\">\"\\n请输入一个字符串，\\n如果输入exit则退出循环：\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> message == <span class=\"string\">'exit'</span>:</span><br><span class=\"line\">    \t<span class=\"keyword\">break</span>    </span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(message)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623201350.png\" alt=\"\"></p>\n<h3 id=\"在循环中使用continue\"><a href=\"#在循环中使用continue\" class=\"headerlink\" title=\"在循环中使用continue\"></a>在循环中使用continue</h3><p>使用continue语句，继续执行下一次循环，不再执行当前循环中余下的代码。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印１-10中的所有奇数</span></span><br><span class=\"line\">current_number = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> current_number &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    current_number += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> current_number % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    print(current_number)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623202848.png\" alt=\"\"></p>"},{"title":"python3教程-第8章 元组","date":"2018-06-15T10:23:12.000Z","_content":"\n列表非常适合用于存储在程序运行期间可能变化的数据集。列表是可以修改的。如果需要创建一系列不可修改的元素，可以使用python中的元组。简单来说，**元组就是数据元素不可变的列表**。\n\n<!--more-->\n\n### 定义元组\n\n用**圆括号**定义元组。语法如下：\n\n```python\n(元素１,元素２,...)\n```\n\n访问元组中元素的方法，与访问列表中的元素类似。\n\n示例：\n\n```python\npositions = (5,20)\nprint(positions[0])\nprint(positions[1])\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623185318.png)\n\n下面我们尝试修改下元组positions中的元素\n\n```python\npositions = (5,20)\npositions[1] = 21\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623183800.png)\n\npython解释器告诉我们，元组（tuple）不支持元素赋值。\n\n### 修改元组变量\n\n虽然不能修改元组中的元素，但可以给存储元组的变量赋值。\n\n```python\npositions = (5,20)\nprint(positions)\npositions = (23,33)\nprint(positions)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623184949.png)","source":"_posts/python3-tutorial-chapter8-tuple.md","raw":"---\ntitle: python3教程-第8章 元组\ndate: 2018-06-15 18:23:12\ntags: python\ncategories: python\n---\n\n列表非常适合用于存储在程序运行期间可能变化的数据集。列表是可以修改的。如果需要创建一系列不可修改的元素，可以使用python中的元组。简单来说，**元组就是数据元素不可变的列表**。\n\n<!--more-->\n\n### 定义元组\n\n用**圆括号**定义元组。语法如下：\n\n```python\n(元素１,元素２,...)\n```\n\n访问元组中元素的方法，与访问列表中的元素类似。\n\n示例：\n\n```python\npositions = (5,20)\nprint(positions[0])\nprint(positions[1])\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623185318.png)\n\n下面我们尝试修改下元组positions中的元素\n\n```python\npositions = (5,20)\npositions[1] = 21\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623183800.png)\n\npython解释器告诉我们，元组（tuple）不支持元素赋值。\n\n### 修改元组变量\n\n虽然不能修改元组中的元素，但可以给存储元组的变量赋值。\n\n```python\npositions = (5,20)\nprint(positions)\npositions = (23,33)\nprint(positions)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623184949.png)","slug":"python3-tutorial-chapter8-tuple","published":1,"updated":"2019-01-19T07:23:57.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9as0006jj1q0gv4l7mb6","content":"<p>列表非常适合用于存储在程序运行期间可能变化的数据集。列表是可以修改的。如果需要创建一系列不可修改的元素，可以使用python中的元组。简单来说，<strong>元组就是数据元素不可变的列表</strong>。</p>\n<a id=\"more\"></a>\n<h3 id=\"定义元组\"><a href=\"#定义元组\" class=\"headerlink\" title=\"定义元组\"></a>定义元组</h3><p>用<strong>圆括号</strong>定义元组。语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(元素１,元素２,...)</span><br></pre></td></tr></table></figure>\n<p>访问元组中元素的方法，与访问列表中的元素类似。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">positions = (<span class=\"number\">5</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">print(positions[<span class=\"number\">0</span>])</span><br><span class=\"line\">print(positions[<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623185318.png\" alt=\"\"></p>\n<p>下面我们尝试修改下元组positions中的元素</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">positions = (<span class=\"number\">5</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">positions[<span class=\"number\">1</span>] = <span class=\"number\">21</span></span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623183800.png\" alt=\"\"></p>\n<p>python解释器告诉我们，元组（tuple）不支持元素赋值。</p>\n<h3 id=\"修改元组变量\"><a href=\"#修改元组变量\" class=\"headerlink\" title=\"修改元组变量\"></a>修改元组变量</h3><p>虽然不能修改元组中的元素，但可以给存储元组的变量赋值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">positions = (<span class=\"number\">5</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">print(positions)</span><br><span class=\"line\">positions = (<span class=\"number\">23</span>,<span class=\"number\">33</span>)</span><br><span class=\"line\">print(positions)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623184949.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>列表非常适合用于存储在程序运行期间可能变化的数据集。列表是可以修改的。如果需要创建一系列不可修改的元素，可以使用python中的元组。简单来说，<strong>元组就是数据元素不可变的列表</strong>。</p>","more":"<h3 id=\"定义元组\"><a href=\"#定义元组\" class=\"headerlink\" title=\"定义元组\"></a>定义元组</h3><p>用<strong>圆括号</strong>定义元组。语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(元素１,元素２,...)</span><br></pre></td></tr></table></figure>\n<p>访问元组中元素的方法，与访问列表中的元素类似。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">positions = (<span class=\"number\">5</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">print(positions[<span class=\"number\">0</span>])</span><br><span class=\"line\">print(positions[<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623185318.png\" alt=\"\"></p>\n<p>下面我们尝试修改下元组positions中的元素</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">positions = (<span class=\"number\">5</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">positions[<span class=\"number\">1</span>] = <span class=\"number\">21</span></span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623183800.png\" alt=\"\"></p>\n<p>python解释器告诉我们，元组（tuple）不支持元素赋值。</p>\n<h3 id=\"修改元组变量\"><a href=\"#修改元组变量\" class=\"headerlink\" title=\"修改元组变量\"></a>修改元组变量</h3><p>虽然不能修改元组中的元素，但可以给存储元组的变量赋值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">positions = (<span class=\"number\">5</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">print(positions)</span><br><span class=\"line\">positions = (<span class=\"number\">23</span>,<span class=\"number\">33</span>)</span><br><span class=\"line\">print(positions)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/23/20180623184949.png\" alt=\"\"></p>"},{"title":"python3教程","date":"2018-06-21T08:08:03.000Z","sticky":2,"_content":"\n<p class='text-center'>python3教程目录</p>\n\n<!--more-->\n\n* [第1章 入门](https://www.hegongshan.com/2018/06/11/python3-tutorial-chapter1-helloworld//)\n* [第2章 标准输入和输出](https://www.hegongshan.com/2018/06/12/python3-tutorial-chapter2-input-and-print/)\n* 第3章 \n* [第4章 字符串](https://www.hegongshan.com/2018/06/12/python3-tutorial-chapter4-string/)\n* [第5章 条件判断](https://www.hegongshan.com/2018/06/13/python3-tutorial-chapter5-if-else/)\n* [第6章 循环](https://www.hegongshan.com/2018/06/13/python3-tutorial-chapter6-loop/)\n* [第7章 列表](https://www.hegongshan.com/2018/06/14/python3-tutorial-chapter7-list/)\n* [第8章 元组](https://www.hegongshan.com/2018/06/15/python3-tutorial-chapter8-tuple/)\n* [第9章 字典](https://www.hegongshan.com/2018/06/16/python3-tutorial-chapter9-dictionary/)\n* [第10章 函数(1)](https://www.hegongshan.com/2018/06/17/python3-tutorial-chapter10-function-1/)\n* [第10章 函数(2)](https://www.hegongshan.com/2018/06/17/python3-tutorial-chapter10-function-2/)\n* [第11章 类](https://www.hegongshan.com/2018/06/19/python3-tutorial-chapter11-class/)\n* [第12章 文件](https://www.hegongshan.com/2018/06/19/python3-tutorial-chapter12-file/)\n* [第13章 异常](https://www.hegongshan.com/2018/06/29/python3-tutorial-chapter13-error/)\n* [第14章 json](https://www.hegongshan.com/2018/06/19/python3-tutorial-chapter14-json/)","source":"_posts/python3-tutorial-content.md","raw":"---\ntitle: python3教程\ndate: 2018-06-21 16:08:03\ntags: python\ncategories: python\nsticky: 2\n---\n\n<p class='text-center'>python3教程目录</p>\n\n<!--more-->\n\n* [第1章 入门](https://www.hegongshan.com/2018/06/11/python3-tutorial-chapter1-helloworld//)\n* [第2章 标准输入和输出](https://www.hegongshan.com/2018/06/12/python3-tutorial-chapter2-input-and-print/)\n* 第3章 \n* [第4章 字符串](https://www.hegongshan.com/2018/06/12/python3-tutorial-chapter4-string/)\n* [第5章 条件判断](https://www.hegongshan.com/2018/06/13/python3-tutorial-chapter5-if-else/)\n* [第6章 循环](https://www.hegongshan.com/2018/06/13/python3-tutorial-chapter6-loop/)\n* [第7章 列表](https://www.hegongshan.com/2018/06/14/python3-tutorial-chapter7-list/)\n* [第8章 元组](https://www.hegongshan.com/2018/06/15/python3-tutorial-chapter8-tuple/)\n* [第9章 字典](https://www.hegongshan.com/2018/06/16/python3-tutorial-chapter9-dictionary/)\n* [第10章 函数(1)](https://www.hegongshan.com/2018/06/17/python3-tutorial-chapter10-function-1/)\n* [第10章 函数(2)](https://www.hegongshan.com/2018/06/17/python3-tutorial-chapter10-function-2/)\n* [第11章 类](https://www.hegongshan.com/2018/06/19/python3-tutorial-chapter11-class/)\n* [第12章 文件](https://www.hegongshan.com/2018/06/19/python3-tutorial-chapter12-file/)\n* [第13章 异常](https://www.hegongshan.com/2018/06/29/python3-tutorial-chapter13-error/)\n* [第14章 json](https://www.hegongshan.com/2018/06/19/python3-tutorial-chapter14-json/)","slug":"python3-tutorial-content","published":1,"updated":"2019-01-19T07:23:57.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9as1006lj1q04swar8du","content":"<p class=\"text-center\">python3教程目录</p>\n\n<a id=\"more\"></a>\n<ul>\n<li><a href=\"https://www.hegongshan.com/2018/06/11/python3-tutorial-chapter1-helloworld//\">第1章 入门</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/12/python3-tutorial-chapter2-input-and-print/\">第2章 标准输入和输出</a></li>\n<li>第3章 </li>\n<li><a href=\"https://www.hegongshan.com/2018/06/12/python3-tutorial-chapter4-string/\">第4章 字符串</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/13/python3-tutorial-chapter5-if-else/\">第5章 条件判断</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/13/python3-tutorial-chapter6-loop/\">第6章 循环</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/14/python3-tutorial-chapter7-list/\">第7章 列表</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/15/python3-tutorial-chapter8-tuple/\">第8章 元组</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/16/python3-tutorial-chapter9-dictionary/\">第9章 字典</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/17/python3-tutorial-chapter10-function-1/\">第10章 函数(1)</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/17/python3-tutorial-chapter10-function-2/\">第10章 函数(2)</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/19/python3-tutorial-chapter11-class/\">第11章 类</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/19/python3-tutorial-chapter12-file/\">第12章 文件</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/29/python3-tutorial-chapter13-error/\">第13章 异常</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/19/python3-tutorial-chapter14-json/\">第14章 json</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p class=\"text-center\">python3教程目录</p>","more":"<ul>\n<li><a href=\"https://www.hegongshan.com/2018/06/11/python3-tutorial-chapter1-helloworld//\">第1章 入门</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/12/python3-tutorial-chapter2-input-and-print/\">第2章 标准输入和输出</a></li>\n<li>第3章 </li>\n<li><a href=\"https://www.hegongshan.com/2018/06/12/python3-tutorial-chapter4-string/\">第4章 字符串</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/13/python3-tutorial-chapter5-if-else/\">第5章 条件判断</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/13/python3-tutorial-chapter6-loop/\">第6章 循环</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/14/python3-tutorial-chapter7-list/\">第7章 列表</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/15/python3-tutorial-chapter8-tuple/\">第8章 元组</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/16/python3-tutorial-chapter9-dictionary/\">第9章 字典</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/17/python3-tutorial-chapter10-function-1/\">第10章 函数(1)</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/17/python3-tutorial-chapter10-function-2/\">第10章 函数(2)</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/19/python3-tutorial-chapter11-class/\">第11章 类</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/19/python3-tutorial-chapter12-file/\">第12章 文件</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/29/python3-tutorial-chapter13-error/\">第13章 异常</a></li>\n<li><a href=\"https://www.hegongshan.com/2018/06/19/python3-tutorial-chapter14-json/\">第14章 json</a></li>\n</ul>"},{"title":"《推荐系统实践》4.推荐系统冷启动问题","date":"2019-03-14T03:43:54.000Z","mathjax":true,"_content":"\n推荐系统需要根据用户的历史行为和兴趣预测用户未来的行为和兴趣，因此大量的用户行为数据就成为推荐系统的重要组成部分和先决条件。 \n\n如何在没有大量用户数据的情况下设计个性化推荐系统并且让用户对推荐结果满意从而愿意使用推荐系统，就是**冷启动问题（cold start）**。\n\n<!--more-->\n\n### 冷启动分类\n\n* 用户冷启动：如何给新用户做个性化推荐。\n* 物品冷启动：如何将新的物品推荐给可能对它感兴趣的用户。\n* 系统冷启动：如何在一个新开发的网站上（还没有用户，也没有用户行为，只有一些物品的信息）设计个性化推荐系统，从而在网站刚发布时就让用户体验到个性化推荐服务。\n\n### 利用用户注册信息\n\n1.利用用户的注册信息可以很好地解决注册用户的冷启动问题。\n\n当新用户刚注册时，我们不知道他喜欢什么物品，于是只能给他推荐一些热门的商品。但如果我们知道她是一位女性，那么可以给她推荐女性都喜欢的热门商品。虽然这种个性化的粒度很粗，因为所有刚注册的女性看到的都是同样的结果，但相对于不区分男女的方式，这种推荐的精度已经大大提高了。\n\n2.用户的注册信息分3种：\n\n* 人口统计学信息：包括用户的年龄、性别、职业、民族、学历和居住地。\n* 用户兴趣的描述：有一些网站会让用户用文字描述他们的兴趣。\n* 从其他网站导入的用户站外行为数据：比如用户通过豆瓣、新浪微博的账号登录，就可以在得到用户同意的情况下获取用户在豆瓣或者新浪微博的一些行为数据和社交网络数据。\n\n3.基于注册信息的个性化推荐流程基本如下:\n\n(1) 获取用户的注册信息;\n\n(2) 根据用户的注册信息对用户分类;\n\n(3) 给用户推荐他所属分类中用户喜欢的物品。\n\n4.基于用户注册信息的推荐算法的**核心问题**是计算每种特征的用户喜欢的物品。也就是说，对于\n\n每种特征f，计算具有这种特征的用户对各个物品的喜好程度preference(f, i)。\n\npreference( f ,i ) 可以简单地定义为**物品i在具有特征f的用户中的热门程度**：\n$$\npreference(f,i) = |N(i) \\cap U(f)| \\tag{1}\n$$\n其中，N(i)是喜欢物品i的用户集合，U(f)是具有特征f的用户集合。\n\n上面这种定义可以比较准确地预测具有某种特征的用户是否喜欢某个物品。但是，在这种定义下，往往热门的物品会在各种特征的用户中都具有比较高的权重。 \n\n因此，我们可以将 preference(f,i) 定义为**喜欢物品i的用户中具有特征f的比例**:\n$$\npreference(f,i) = \\frac{|N(i) \\cap U(f)|}{|N(i)|+ \\alpha} \\tag{2}\n$$\n这里分母中使用参数$\\alpha​$的目的是**解决数据稀疏问题**。比如有一个物品只被1个用户喜欢过，而这个用户刚好就有特征f，那么就有preference(f,i)=1 。但是，这种情况并没有统计意义，因此我们为分母加上一个比较大的数，可以避免这样的物品产生比较大的权重。\n\n### 选择合适的物品启动用户的兴趣\n\n解决用户冷启动问题的另一个方法是在新用户第一次访问推荐系统时，不立即给用户展示推荐结果，而是给用户提供一些物品，让用户反馈他们对这些物品的兴趣，然后根据用户反馈给提供个性化推荐。\n\n该方法的**首要问题**是**如何选择物品让用户进行反馈**。\n\n一般来说，能够用来启动用户兴趣的物品需要具有以下特点:\n\n* 比较热门\n\n如果要让用户对一个物品进行反馈，前提是用户知道这个物品是什么东西。\n\n以电影为例，如果一开始让用户进行反馈的电影都很冷门，而用户不知道这些电影的情节和内容，也就无法对它们做出准确的反馈。\n\n* 具有代表性和区分性：\n\n启动用户兴趣的物品不能是大众化或老少咸宜的，因为这样的物品对用户的兴趣没有区分性。\n\n* 启动物品集合需要有多样性：\n\n在冷启动时，我们不知道用户的兴趣，而用户兴趣的可能性非常多，为了匹配多样的兴趣，我们需要提供具有很高覆盖率的启动物品集合，这些物品能覆盖几乎所有主流的用户兴趣。\n\n### 利用物品的内容信息\n\n对于基于物品的协同过滤算法（以下简称ItemCF）算法来说，物品冷启动是一个严重的问题了。因为ItemCF算法的原理是给用户推荐和他之前喜欢的物品相似的物品。ItemCF算法会每隔一段时间利用用户行为计算物品相似度表(一般一天计算一次)，在线服务时ItemCF算法会将之前计算好的物品相关度矩阵放在内存中。因此，当新物品加入时，内存中的物品相关表中不会存在这个物品，从而ItemCF算法无法推荐新的物品。\n\n解决这一问题的办法是**频繁更新物品相似度表**，但基于用户行为计算物品相似度是非常\n耗时的事情，主要原因是用户行为日志非常庞大。而且，新物品如果不展示给用户，用户就无法\n对它产生行为，通过行为日志计算是计算不出包含新物品的相关矩阵的。为此，我们只能**利用物品的内容信息计算物品相关表**，并且频繁地更新相关表(比如半小时计算一次)。\n\n一般来说，物品的内容可以通过向量空间模型表示，该模型会将物品表示成一个关键词向量。\n\n从文本生成关键词向量的主要步骤：\n\n（1）对于中文，首先要对文本进行分词，将字流变成词流；\n\n（2）然后从词流中检测出命名实体(如人名、地名、组织名等)，这些实体和一些其他重要的词将组成关键词集合；\n\n（3）最后对关键词进行排名，计算每个关键词的权重，从而生成关键词向量。\n\n对物品d，它的内容表示成一个关键词向量如下:\n$$\nd_i = {\\left((e_1, w_1),(e_2, w_2),\\dots \\right)} \\tag{3}\n$$\n其中，$e_i​$是关键词，$w_i​$是关键词对应的权重。\n\n在给定物品内容的关键词向量后，物品的内容相似度可以通过向量之间的余弦相似度计算\n$$\nw_{ij} = \\frac{d_i \\cdot d_j}{\\sqrt{||d_i||\\times||d_j||}} \\tag{4}\n$$\n得到物品的相似度之后，可以利用ItemCF算法的思想，给用户推荐和他历史上喜欢的物品内容相似的物品。","source":"_posts/recommend-system-cold-start.md","raw":"---\ntitle: 《推荐系统实践》4.推荐系统冷启动问题\ndate: 2019-03-14 11:43:54\ntags: recommend system\ncategories: recommend system\nmathjax: true\n---\n\n推荐系统需要根据用户的历史行为和兴趣预测用户未来的行为和兴趣，因此大量的用户行为数据就成为推荐系统的重要组成部分和先决条件。 \n\n如何在没有大量用户数据的情况下设计个性化推荐系统并且让用户对推荐结果满意从而愿意使用推荐系统，就是**冷启动问题（cold start）**。\n\n<!--more-->\n\n### 冷启动分类\n\n* 用户冷启动：如何给新用户做个性化推荐。\n* 物品冷启动：如何将新的物品推荐给可能对它感兴趣的用户。\n* 系统冷启动：如何在一个新开发的网站上（还没有用户，也没有用户行为，只有一些物品的信息）设计个性化推荐系统，从而在网站刚发布时就让用户体验到个性化推荐服务。\n\n### 利用用户注册信息\n\n1.利用用户的注册信息可以很好地解决注册用户的冷启动问题。\n\n当新用户刚注册时，我们不知道他喜欢什么物品，于是只能给他推荐一些热门的商品。但如果我们知道她是一位女性，那么可以给她推荐女性都喜欢的热门商品。虽然这种个性化的粒度很粗，因为所有刚注册的女性看到的都是同样的结果，但相对于不区分男女的方式，这种推荐的精度已经大大提高了。\n\n2.用户的注册信息分3种：\n\n* 人口统计学信息：包括用户的年龄、性别、职业、民族、学历和居住地。\n* 用户兴趣的描述：有一些网站会让用户用文字描述他们的兴趣。\n* 从其他网站导入的用户站外行为数据：比如用户通过豆瓣、新浪微博的账号登录，就可以在得到用户同意的情况下获取用户在豆瓣或者新浪微博的一些行为数据和社交网络数据。\n\n3.基于注册信息的个性化推荐流程基本如下:\n\n(1) 获取用户的注册信息;\n\n(2) 根据用户的注册信息对用户分类;\n\n(3) 给用户推荐他所属分类中用户喜欢的物品。\n\n4.基于用户注册信息的推荐算法的**核心问题**是计算每种特征的用户喜欢的物品。也就是说，对于\n\n每种特征f，计算具有这种特征的用户对各个物品的喜好程度preference(f, i)。\n\npreference( f ,i ) 可以简单地定义为**物品i在具有特征f的用户中的热门程度**：\n$$\npreference(f,i) = |N(i) \\cap U(f)| \\tag{1}\n$$\n其中，N(i)是喜欢物品i的用户集合，U(f)是具有特征f的用户集合。\n\n上面这种定义可以比较准确地预测具有某种特征的用户是否喜欢某个物品。但是，在这种定义下，往往热门的物品会在各种特征的用户中都具有比较高的权重。 \n\n因此，我们可以将 preference(f,i) 定义为**喜欢物品i的用户中具有特征f的比例**:\n$$\npreference(f,i) = \\frac{|N(i) \\cap U(f)|}{|N(i)|+ \\alpha} \\tag{2}\n$$\n这里分母中使用参数$\\alpha​$的目的是**解决数据稀疏问题**。比如有一个物品只被1个用户喜欢过，而这个用户刚好就有特征f，那么就有preference(f,i)=1 。但是，这种情况并没有统计意义，因此我们为分母加上一个比较大的数，可以避免这样的物品产生比较大的权重。\n\n### 选择合适的物品启动用户的兴趣\n\n解决用户冷启动问题的另一个方法是在新用户第一次访问推荐系统时，不立即给用户展示推荐结果，而是给用户提供一些物品，让用户反馈他们对这些物品的兴趣，然后根据用户反馈给提供个性化推荐。\n\n该方法的**首要问题**是**如何选择物品让用户进行反馈**。\n\n一般来说，能够用来启动用户兴趣的物品需要具有以下特点:\n\n* 比较热门\n\n如果要让用户对一个物品进行反馈，前提是用户知道这个物品是什么东西。\n\n以电影为例，如果一开始让用户进行反馈的电影都很冷门，而用户不知道这些电影的情节和内容，也就无法对它们做出准确的反馈。\n\n* 具有代表性和区分性：\n\n启动用户兴趣的物品不能是大众化或老少咸宜的，因为这样的物品对用户的兴趣没有区分性。\n\n* 启动物品集合需要有多样性：\n\n在冷启动时，我们不知道用户的兴趣，而用户兴趣的可能性非常多，为了匹配多样的兴趣，我们需要提供具有很高覆盖率的启动物品集合，这些物品能覆盖几乎所有主流的用户兴趣。\n\n### 利用物品的内容信息\n\n对于基于物品的协同过滤算法（以下简称ItemCF）算法来说，物品冷启动是一个严重的问题了。因为ItemCF算法的原理是给用户推荐和他之前喜欢的物品相似的物品。ItemCF算法会每隔一段时间利用用户行为计算物品相似度表(一般一天计算一次)，在线服务时ItemCF算法会将之前计算好的物品相关度矩阵放在内存中。因此，当新物品加入时，内存中的物品相关表中不会存在这个物品，从而ItemCF算法无法推荐新的物品。\n\n解决这一问题的办法是**频繁更新物品相似度表**，但基于用户行为计算物品相似度是非常\n耗时的事情，主要原因是用户行为日志非常庞大。而且，新物品如果不展示给用户，用户就无法\n对它产生行为，通过行为日志计算是计算不出包含新物品的相关矩阵的。为此，我们只能**利用物品的内容信息计算物品相关表**，并且频繁地更新相关表(比如半小时计算一次)。\n\n一般来说，物品的内容可以通过向量空间模型表示，该模型会将物品表示成一个关键词向量。\n\n从文本生成关键词向量的主要步骤：\n\n（1）对于中文，首先要对文本进行分词，将字流变成词流；\n\n（2）然后从词流中检测出命名实体(如人名、地名、组织名等)，这些实体和一些其他重要的词将组成关键词集合；\n\n（3）最后对关键词进行排名，计算每个关键词的权重，从而生成关键词向量。\n\n对物品d，它的内容表示成一个关键词向量如下:\n$$\nd_i = {\\left((e_1, w_1),(e_2, w_2),\\dots \\right)} \\tag{3}\n$$\n其中，$e_i​$是关键词，$w_i​$是关键词对应的权重。\n\n在给定物品内容的关键词向量后，物品的内容相似度可以通过向量之间的余弦相似度计算\n$$\nw_{ij} = \\frac{d_i \\cdot d_j}{\\sqrt{||d_i||\\times||d_j||}} \\tag{4}\n$$\n得到物品的相似度之后，可以利用ItemCF算法的思想，给用户推荐和他历史上喜欢的物品内容相似的物品。","slug":"recommend-system-cold-start","published":1,"updated":"2019-03-15T10:48:54.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9as3006qj1q0kcvc98hb","content":"<p>推荐系统需要根据用户的历史行为和兴趣预测用户未来的行为和兴趣，因此大量的用户行为数据就成为推荐系统的重要组成部分和先决条件。 </p>\n<p>如何在没有大量用户数据的情况下设计个性化推荐系统并且让用户对推荐结果满意从而愿意使用推荐系统，就是<strong>冷启动问题（cold start）</strong>。</p>\n<a id=\"more\"></a>\n<h3 id=\"冷启动分类\"><a href=\"#冷启动分类\" class=\"headerlink\" title=\"冷启动分类\"></a>冷启动分类</h3><ul>\n<li>用户冷启动：如何给新用户做个性化推荐。</li>\n<li>物品冷启动：如何将新的物品推荐给可能对它感兴趣的用户。</li>\n<li>系统冷启动：如何在一个新开发的网站上（还没有用户，也没有用户行为，只有一些物品的信息）设计个性化推荐系统，从而在网站刚发布时就让用户体验到个性化推荐服务。</li>\n</ul>\n<h3 id=\"利用用户注册信息\"><a href=\"#利用用户注册信息\" class=\"headerlink\" title=\"利用用户注册信息\"></a>利用用户注册信息</h3><p>1.利用用户的注册信息可以很好地解决注册用户的冷启动问题。</p>\n<p>当新用户刚注册时，我们不知道他喜欢什么物品，于是只能给他推荐一些热门的商品。但如果我们知道她是一位女性，那么可以给她推荐女性都喜欢的热门商品。虽然这种个性化的粒度很粗，因为所有刚注册的女性看到的都是同样的结果，但相对于不区分男女的方式，这种推荐的精度已经大大提高了。</p>\n<p>2.用户的注册信息分3种：</p>\n<ul>\n<li>人口统计学信息：包括用户的年龄、性别、职业、民族、学历和居住地。</li>\n<li>用户兴趣的描述：有一些网站会让用户用文字描述他们的兴趣。</li>\n<li>从其他网站导入的用户站外行为数据：比如用户通过豆瓣、新浪微博的账号登录，就可以在得到用户同意的情况下获取用户在豆瓣或者新浪微博的一些行为数据和社交网络数据。</li>\n</ul>\n<p>3.基于注册信息的个性化推荐流程基本如下:</p>\n<p>(1) 获取用户的注册信息;</p>\n<p>(2) 根据用户的注册信息对用户分类;</p>\n<p>(3) 给用户推荐他所属分类中用户喜欢的物品。</p>\n<p>4.基于用户注册信息的推荐算法的<strong>核心问题</strong>是计算每种特征的用户喜欢的物品。也就是说，对于</p>\n<p>每种特征f，计算具有这种特征的用户对各个物品的喜好程度preference(f, i)。</p>\n<p>preference( f ,i ) 可以简单地定义为<strong>物品i在具有特征f的用户中的热门程度</strong>：<br>$$<br>preference(f,i) = |N(i) \\cap U(f)| \\tag{1}<br>$$<br>其中，N(i)是喜欢物品i的用户集合，U(f)是具有特征f的用户集合。</p>\n<p>上面这种定义可以比较准确地预测具有某种特征的用户是否喜欢某个物品。但是，在这种定义下，往往热门的物品会在各种特征的用户中都具有比较高的权重。 </p>\n<p>因此，我们可以将 preference(f,i) 定义为<strong>喜欢物品i的用户中具有特征f的比例</strong>:<br>$$<br>preference(f,i) = \\frac{|N(i) \\cap U(f)|}{|N(i)|+ \\alpha} \\tag{2}<br>$$<br>这里分母中使用参数$\\alpha​$的目的是<strong>解决数据稀疏问题</strong>。比如有一个物品只被1个用户喜欢过，而这个用户刚好就有特征f，那么就有preference(f,i)=1 。但是，这种情况并没有统计意义，因此我们为分母加上一个比较大的数，可以避免这样的物品产生比较大的权重。</p>\n<h3 id=\"选择合适的物品启动用户的兴趣\"><a href=\"#选择合适的物品启动用户的兴趣\" class=\"headerlink\" title=\"选择合适的物品启动用户的兴趣\"></a>选择合适的物品启动用户的兴趣</h3><p>解决用户冷启动问题的另一个方法是在新用户第一次访问推荐系统时，不立即给用户展示推荐结果，而是给用户提供一些物品，让用户反馈他们对这些物品的兴趣，然后根据用户反馈给提供个性化推荐。</p>\n<p>该方法的<strong>首要问题</strong>是<strong>如何选择物品让用户进行反馈</strong>。</p>\n<p>一般来说，能够用来启动用户兴趣的物品需要具有以下特点:</p>\n<ul>\n<li>比较热门</li>\n</ul>\n<p>如果要让用户对一个物品进行反馈，前提是用户知道这个物品是什么东西。</p>\n<p>以电影为例，如果一开始让用户进行反馈的电影都很冷门，而用户不知道这些电影的情节和内容，也就无法对它们做出准确的反馈。</p>\n<ul>\n<li>具有代表性和区分性：</li>\n</ul>\n<p>启动用户兴趣的物品不能是大众化或老少咸宜的，因为这样的物品对用户的兴趣没有区分性。</p>\n<ul>\n<li>启动物品集合需要有多样性：</li>\n</ul>\n<p>在冷启动时，我们不知道用户的兴趣，而用户兴趣的可能性非常多，为了匹配多样的兴趣，我们需要提供具有很高覆盖率的启动物品集合，这些物品能覆盖几乎所有主流的用户兴趣。</p>\n<h3 id=\"利用物品的内容信息\"><a href=\"#利用物品的内容信息\" class=\"headerlink\" title=\"利用物品的内容信息\"></a>利用物品的内容信息</h3><p>对于基于物品的协同过滤算法（以下简称ItemCF）算法来说，物品冷启动是一个严重的问题了。因为ItemCF算法的原理是给用户推荐和他之前喜欢的物品相似的物品。ItemCF算法会每隔一段时间利用用户行为计算物品相似度表(一般一天计算一次)，在线服务时ItemCF算法会将之前计算好的物品相关度矩阵放在内存中。因此，当新物品加入时，内存中的物品相关表中不会存在这个物品，从而ItemCF算法无法推荐新的物品。</p>\n<p>解决这一问题的办法是<strong>频繁更新物品相似度表</strong>，但基于用户行为计算物品相似度是非常<br>耗时的事情，主要原因是用户行为日志非常庞大。而且，新物品如果不展示给用户，用户就无法<br>对它产生行为，通过行为日志计算是计算不出包含新物品的相关矩阵的。为此，我们只能<strong>利用物品的内容信息计算物品相关表</strong>，并且频繁地更新相关表(比如半小时计算一次)。</p>\n<p>一般来说，物品的内容可以通过向量空间模型表示，该模型会将物品表示成一个关键词向量。</p>\n<p>从文本生成关键词向量的主要步骤：</p>\n<p>（1）对于中文，首先要对文本进行分词，将字流变成词流；</p>\n<p>（2）然后从词流中检测出命名实体(如人名、地名、组织名等)，这些实体和一些其他重要的词将组成关键词集合；</p>\n<p>（3）最后对关键词进行排名，计算每个关键词的权重，从而生成关键词向量。</p>\n<p>对物品d，它的内容表示成一个关键词向量如下:<br>$$<br>d_i = {\\left((e_1, w_1),(e_2, w_2),\\dots \\right)} \\tag{3}<br>$$<br>其中，$e_i​$是关键词，$w_i​$是关键词对应的权重。</p>\n<p>在给定物品内容的关键词向量后，物品的内容相似度可以通过向量之间的余弦相似度计算<br>$$<br>w_{ij} = \\frac{d_i \\cdot d_j}{\\sqrt{||d_i||\\times||d_j||}} \\tag{4}<br>$$<br>得到物品的相似度之后，可以利用ItemCF算法的思想，给用户推荐和他历史上喜欢的物品内容相似的物品。</p>\n","site":{"data":{}},"excerpt":"<p>推荐系统需要根据用户的历史行为和兴趣预测用户未来的行为和兴趣，因此大量的用户行为数据就成为推荐系统的重要组成部分和先决条件。 </p>\n<p>如何在没有大量用户数据的情况下设计个性化推荐系统并且让用户对推荐结果满意从而愿意使用推荐系统，就是<strong>冷启动问题（cold start）</strong>。</p>","more":"<h3 id=\"冷启动分类\"><a href=\"#冷启动分类\" class=\"headerlink\" title=\"冷启动分类\"></a>冷启动分类</h3><ul>\n<li>用户冷启动：如何给新用户做个性化推荐。</li>\n<li>物品冷启动：如何将新的物品推荐给可能对它感兴趣的用户。</li>\n<li>系统冷启动：如何在一个新开发的网站上（还没有用户，也没有用户行为，只有一些物品的信息）设计个性化推荐系统，从而在网站刚发布时就让用户体验到个性化推荐服务。</li>\n</ul>\n<h3 id=\"利用用户注册信息\"><a href=\"#利用用户注册信息\" class=\"headerlink\" title=\"利用用户注册信息\"></a>利用用户注册信息</h3><p>1.利用用户的注册信息可以很好地解决注册用户的冷启动问题。</p>\n<p>当新用户刚注册时，我们不知道他喜欢什么物品，于是只能给他推荐一些热门的商品。但如果我们知道她是一位女性，那么可以给她推荐女性都喜欢的热门商品。虽然这种个性化的粒度很粗，因为所有刚注册的女性看到的都是同样的结果，但相对于不区分男女的方式，这种推荐的精度已经大大提高了。</p>\n<p>2.用户的注册信息分3种：</p>\n<ul>\n<li>人口统计学信息：包括用户的年龄、性别、职业、民族、学历和居住地。</li>\n<li>用户兴趣的描述：有一些网站会让用户用文字描述他们的兴趣。</li>\n<li>从其他网站导入的用户站外行为数据：比如用户通过豆瓣、新浪微博的账号登录，就可以在得到用户同意的情况下获取用户在豆瓣或者新浪微博的一些行为数据和社交网络数据。</li>\n</ul>\n<p>3.基于注册信息的个性化推荐流程基本如下:</p>\n<p>(1) 获取用户的注册信息;</p>\n<p>(2) 根据用户的注册信息对用户分类;</p>\n<p>(3) 给用户推荐他所属分类中用户喜欢的物品。</p>\n<p>4.基于用户注册信息的推荐算法的<strong>核心问题</strong>是计算每种特征的用户喜欢的物品。也就是说，对于</p>\n<p>每种特征f，计算具有这种特征的用户对各个物品的喜好程度preference(f, i)。</p>\n<p>preference( f ,i ) 可以简单地定义为<strong>物品i在具有特征f的用户中的热门程度</strong>：<br>$$<br>preference(f,i) = |N(i) \\cap U(f)| \\tag{1}<br>$$<br>其中，N(i)是喜欢物品i的用户集合，U(f)是具有特征f的用户集合。</p>\n<p>上面这种定义可以比较准确地预测具有某种特征的用户是否喜欢某个物品。但是，在这种定义下，往往热门的物品会在各种特征的用户中都具有比较高的权重。 </p>\n<p>因此，我们可以将 preference(f,i) 定义为<strong>喜欢物品i的用户中具有特征f的比例</strong>:<br>$$<br>preference(f,i) = \\frac{|N(i) \\cap U(f)|}{|N(i)|+ \\alpha} \\tag{2}<br>$$<br>这里分母中使用参数$\\alpha​$的目的是<strong>解决数据稀疏问题</strong>。比如有一个物品只被1个用户喜欢过，而这个用户刚好就有特征f，那么就有preference(f,i)=1 。但是，这种情况并没有统计意义，因此我们为分母加上一个比较大的数，可以避免这样的物品产生比较大的权重。</p>\n<h3 id=\"选择合适的物品启动用户的兴趣\"><a href=\"#选择合适的物品启动用户的兴趣\" class=\"headerlink\" title=\"选择合适的物品启动用户的兴趣\"></a>选择合适的物品启动用户的兴趣</h3><p>解决用户冷启动问题的另一个方法是在新用户第一次访问推荐系统时，不立即给用户展示推荐结果，而是给用户提供一些物品，让用户反馈他们对这些物品的兴趣，然后根据用户反馈给提供个性化推荐。</p>\n<p>该方法的<strong>首要问题</strong>是<strong>如何选择物品让用户进行反馈</strong>。</p>\n<p>一般来说，能够用来启动用户兴趣的物品需要具有以下特点:</p>\n<ul>\n<li>比较热门</li>\n</ul>\n<p>如果要让用户对一个物品进行反馈，前提是用户知道这个物品是什么东西。</p>\n<p>以电影为例，如果一开始让用户进行反馈的电影都很冷门，而用户不知道这些电影的情节和内容，也就无法对它们做出准确的反馈。</p>\n<ul>\n<li>具有代表性和区分性：</li>\n</ul>\n<p>启动用户兴趣的物品不能是大众化或老少咸宜的，因为这样的物品对用户的兴趣没有区分性。</p>\n<ul>\n<li>启动物品集合需要有多样性：</li>\n</ul>\n<p>在冷启动时，我们不知道用户的兴趣，而用户兴趣的可能性非常多，为了匹配多样的兴趣，我们需要提供具有很高覆盖率的启动物品集合，这些物品能覆盖几乎所有主流的用户兴趣。</p>\n<h3 id=\"利用物品的内容信息\"><a href=\"#利用物品的内容信息\" class=\"headerlink\" title=\"利用物品的内容信息\"></a>利用物品的内容信息</h3><p>对于基于物品的协同过滤算法（以下简称ItemCF）算法来说，物品冷启动是一个严重的问题了。因为ItemCF算法的原理是给用户推荐和他之前喜欢的物品相似的物品。ItemCF算法会每隔一段时间利用用户行为计算物品相似度表(一般一天计算一次)，在线服务时ItemCF算法会将之前计算好的物品相关度矩阵放在内存中。因此，当新物品加入时，内存中的物品相关表中不会存在这个物品，从而ItemCF算法无法推荐新的物品。</p>\n<p>解决这一问题的办法是<strong>频繁更新物品相似度表</strong>，但基于用户行为计算物品相似度是非常<br>耗时的事情，主要原因是用户行为日志非常庞大。而且，新物品如果不展示给用户，用户就无法<br>对它产生行为，通过行为日志计算是计算不出包含新物品的相关矩阵的。为此，我们只能<strong>利用物品的内容信息计算物品相关表</strong>，并且频繁地更新相关表(比如半小时计算一次)。</p>\n<p>一般来说，物品的内容可以通过向量空间模型表示，该模型会将物品表示成一个关键词向量。</p>\n<p>从文本生成关键词向量的主要步骤：</p>\n<p>（1）对于中文，首先要对文本进行分词，将字流变成词流；</p>\n<p>（2）然后从词流中检测出命名实体(如人名、地名、组织名等)，这些实体和一些其他重要的词将组成关键词集合；</p>\n<p>（3）最后对关键词进行排名，计算每个关键词的权重，从而生成关键词向量。</p>\n<p>对物品d，它的内容表示成一个关键词向量如下:<br>$$<br>d_i = {\\left((e_1, w_1),(e_2, w_2),\\dots \\right)} \\tag{3}<br>$$<br>其中，$e_i​$是关键词，$w_i​$是关键词对应的权重。</p>\n<p>在给定物品内容的关键词向量后，物品的内容相似度可以通过向量之间的余弦相似度计算<br>$$<br>w_{ij} = \\frac{d_i \\cdot d_j}{\\sqrt{||d_i||\\times||d_j||}} \\tag{4}<br>$$<br>得到物品的相似度之后，可以利用ItemCF算法的思想，给用户推荐和他历史上喜欢的物品内容相似的物品。</p>"},{"title":"《推荐系统实践》1.推荐系统评测","date":"2019-03-04T08:01:27.000Z","mathjax":true,"_content":"\n### 推荐系统实验方法\n\n在推荐系统中，主要有3种评测推荐效果的实验方法，即离线实验(offline experiment)、用户调查(user study) 和在线实验(online experiment)。\n\n#### 离线实验\n\n离线实验的方法一般由如下几个步骤构成:\n\n(1) 通过日志系统获得用户行为数据，并按照一定格式生成一个标准的数据集; \n\n(2) 将数据集按照一定的规则分成训练集和测试集; \n\n(3) 在训练集上训练用户兴趣模型，在测试集上进行预测; \n\n(4) 通过事先定义的离线指标评测算法在测试集上的预测结果。\n\n**好处**：不需要真实用户参与，可以直接快速地计算出来，从而方便、快速地测试大量不同的算法  \n\n**缺点**：无法获得很多商业上关注的指标，如点击率、转化率等\n\n#### 用户调查\n\n用户调查需要有一些真实用户，让他们在需要测试的推荐系统上完成一些任务。在他们完成任务时，我们需要观察和记录他们的行为，并让他们回答一些问题。最后，我们需要通过分析他们的行为和答案了解测试系统的性能。\n\n**优点**：可以获得很多体现用户主观感受的指标，相对在线实验风险很低，出现错误后很容易弥补\n\n**缺点**：招募测试用户代价较大，很难组织大规模的测试用户，因此会使测试结果的统计意义不足。\n\n#### 在线实验\n\n在完成离线实验和必要的用户调查后，可以将推荐系统上线做AB测试，将它和旧的算法进行比较。\n\nAB测试是一种很常用的在线评测算法的实验方法。它通过一定的规则将用户随机分成几组，并对不同组的用户采用不同的算法，然后通过统计不同组用户的各种不同的评测指标比较不同算法，比如可以统计不同组用户的点击率，通过点击率比较不同算法的性能。\n\n**AB测试的优点**：可以公平获得不同算法实际在线时的性能指标，包括商业上关注的指标。\n**AB测试的缺点**：周期比较长，必须进行长期的实验才能得到可靠的结果。\n\n因此一般不会用AB测试测试所有的算法，而只是用它测试那些在离线实验和用户调查中表现很好的算法。\n\n### 评测指标\n\n在《推荐系统实践》中，作者列举了用户满意度、预测准确度、覆盖率、多样性、新颖性、惊喜度、信任度、实时性、健壮性和商业目标共十种推荐系统的评测指标，这里，我只选取了一部分。\n\n#### 用户满意度\n\n用户作为推荐系统的重要参与者，其满意度是评测推荐系统的最重要指标。但是，用户满意度没有办法离线计算，只能通过用户调查或者在线实验获得。\n\n* 用户调查获得用户满意度主要是通过*调查问卷*的形式。\n\n* 在在线系统中，用户满意度主要通过一些对用户行为的统计得到。比如在电子商务网站中，用户如果购买了推荐的商品，就表示他们在一定程度上满意。因此，我们可以利用购买率度量用户的满意度。此外，有些网站会通过设计一些用户反馈界面收集用户满意度。 更一般的情况下，我们可以用点击率、用户停留时间和转化率等指标度量用户的满意度。\n\n#### 预测准确度\n\n预测准确度度量一个推荐系统或者推荐算法预测用户行为的能力。\n\n在计算该指标时需要有一个离线的数据集，该数据集包含用户的历史行为记录。然后，将该数据集通过时间分成训练集和测试集。最后，通过在训练集上建立用户的行为和兴趣模型预测用户在测试集上的行为，并计算预测行为和测试集上实际行为的重合度作为预测准确度。\n\n由于离线的推荐算法有不同的研究方向，因此下面将针对不同的研究方向介绍它们的预测准确度指标。 \n\n* 评分预测\n\n预测用户对物品评分的行为称为评分预测（rating prediction）。\n\n评分预测的预测准确度一般通过**均方根误差(Root Mean Squared Error，简称RMSE)和平均绝对误差(Mean Absolute Error，简称MAE)**计算。对于测试集中的一个用户u和物品i ，令$r_{ui}$是用户对物品i的实际评分，而$\\hat{r}_{ui}$是推荐算法给出的预测评分，那么RMSE的定义为\n\n$$\nRMSE = \\frac {\\sqrt{\\sum_{u,i\\in Test}{(r_{ui}-\\hat{r}_{ui})^2}}} {|Test|}\n$$\n\nMAE采用绝对值计算预测误差，它的定义为:\n\n$$\nMAE = \\frac {\\sum_{u,i\\in Test}{|r_{ui}-\\hat{r}_{ui}|}} {|Test|}\n$$\n\n假设我们用一个列表records存放用户评分数据，令*records[i] = [u,i,rui,pui]*，其中rui是用户u对物品i的实际评分，pui是算法预测出来的用户u对物品i的评分，那么下面的代码分别实现了RMSE和MAE的计算过程。 \n\n```python\nimport math\n\ndef RMSE(records):\n    return math.sqrt(sum([pow(rui-pui,2) for u,i,rui,pui in records])) \\\n        / float(len(records))\n        \ndef MAE(records):\n    return sum([abs(rui-pui) for u,i,rui,pui in records]) \\\n        / float(len(records))\n```\n\n* TopN推荐\n\n网站在提供推荐服务时，一般是给用户一个个性化的推荐列表，这种推荐叫做TopN推荐。 \n\nTopN推荐的预测准确率一般通过准确率(precision)/召回率(recall)度量。 \n\n令R(u)是根据用户在训练集上的行为给用户作出的推荐列表，而T(u)是用户在测试集上的行为列表。那么，推荐结果的召回率定义为:\n$$\nRecall = \\frac {\\sum_{u \\in U}|R(u) \\cap T(u)|} {\\sum_{u \\in U}|T(u)|}\n$$\n推荐结果的准确率定义为：\n$$\nPrecision = \\frac {\\sum_{u \\in U}|R(u) \\cap T(u)|} {\\sum_{u \\in U}|R(u)|}\n$$\n下面用代码同时计算一个推荐算法的准确率和召回率：\n\n```python\ndef PrecisionRecall(test,N):\n    hit = 0\n    n_recall = 0\n    n_precision = 0\n    for user,items in test.items():\n        rank = Recommend(user,N)\n        # &按位与，表示取两个集合的交集\n        hit += len(rank & items)\n        n_recall += len(items)\n        n_precision += N\n    return [hit / (1.0 * n_recall), hit / (1.0 * n_precision)\n```\n\n#### 信任度\n\n度量推荐系统的信任度只能通过**问卷调查**的方式，询问用户是否信任推荐系统的推荐结果。\n\n提高推荐系统的信任度主要有两种方法。\n\n1.首先需要增加推荐系统的**透明度(transparency)**，而增加推荐系统透明度的主要办法是提供推荐解释。只有让用户了解推荐系统的运行机制，让用户认同推荐系统的运行机制，才会提高用户对推荐系统的信任度。\n\n2.其次是考虑用户的社交网络信息，**利用用户的好友信息给用户做推荐**，并且用好友进行推荐解释。这是因为用户对他们的好友一般都比较信任，因此如果推荐的商品是好友购买过的，那么他们对推荐结果就会相对比较信任。\n\n### 参考文献\n\n《推荐系统实践》，项亮","source":"_posts/recommend-system-evaluation-metrics.md","raw":"---\ntitle: 《推荐系统实践》1.推荐系统评测\ndate: 2019-03-04 16:01:27\ntags: recommend system\ncategories: recommend system\nmathjax: true\n---\n\n### 推荐系统实验方法\n\n在推荐系统中，主要有3种评测推荐效果的实验方法，即离线实验(offline experiment)、用户调查(user study) 和在线实验(online experiment)。\n\n#### 离线实验\n\n离线实验的方法一般由如下几个步骤构成:\n\n(1) 通过日志系统获得用户行为数据，并按照一定格式生成一个标准的数据集; \n\n(2) 将数据集按照一定的规则分成训练集和测试集; \n\n(3) 在训练集上训练用户兴趣模型，在测试集上进行预测; \n\n(4) 通过事先定义的离线指标评测算法在测试集上的预测结果。\n\n**好处**：不需要真实用户参与，可以直接快速地计算出来，从而方便、快速地测试大量不同的算法  \n\n**缺点**：无法获得很多商业上关注的指标，如点击率、转化率等\n\n#### 用户调查\n\n用户调查需要有一些真实用户，让他们在需要测试的推荐系统上完成一些任务。在他们完成任务时，我们需要观察和记录他们的行为，并让他们回答一些问题。最后，我们需要通过分析他们的行为和答案了解测试系统的性能。\n\n**优点**：可以获得很多体现用户主观感受的指标，相对在线实验风险很低，出现错误后很容易弥补\n\n**缺点**：招募测试用户代价较大，很难组织大规模的测试用户，因此会使测试结果的统计意义不足。\n\n#### 在线实验\n\n在完成离线实验和必要的用户调查后，可以将推荐系统上线做AB测试，将它和旧的算法进行比较。\n\nAB测试是一种很常用的在线评测算法的实验方法。它通过一定的规则将用户随机分成几组，并对不同组的用户采用不同的算法，然后通过统计不同组用户的各种不同的评测指标比较不同算法，比如可以统计不同组用户的点击率，通过点击率比较不同算法的性能。\n\n**AB测试的优点**：可以公平获得不同算法实际在线时的性能指标，包括商业上关注的指标。\n**AB测试的缺点**：周期比较长，必须进行长期的实验才能得到可靠的结果。\n\n因此一般不会用AB测试测试所有的算法，而只是用它测试那些在离线实验和用户调查中表现很好的算法。\n\n### 评测指标\n\n在《推荐系统实践》中，作者列举了用户满意度、预测准确度、覆盖率、多样性、新颖性、惊喜度、信任度、实时性、健壮性和商业目标共十种推荐系统的评测指标，这里，我只选取了一部分。\n\n#### 用户满意度\n\n用户作为推荐系统的重要参与者，其满意度是评测推荐系统的最重要指标。但是，用户满意度没有办法离线计算，只能通过用户调查或者在线实验获得。\n\n* 用户调查获得用户满意度主要是通过*调查问卷*的形式。\n\n* 在在线系统中，用户满意度主要通过一些对用户行为的统计得到。比如在电子商务网站中，用户如果购买了推荐的商品，就表示他们在一定程度上满意。因此，我们可以利用购买率度量用户的满意度。此外，有些网站会通过设计一些用户反馈界面收集用户满意度。 更一般的情况下，我们可以用点击率、用户停留时间和转化率等指标度量用户的满意度。\n\n#### 预测准确度\n\n预测准确度度量一个推荐系统或者推荐算法预测用户行为的能力。\n\n在计算该指标时需要有一个离线的数据集，该数据集包含用户的历史行为记录。然后，将该数据集通过时间分成训练集和测试集。最后，通过在训练集上建立用户的行为和兴趣模型预测用户在测试集上的行为，并计算预测行为和测试集上实际行为的重合度作为预测准确度。\n\n由于离线的推荐算法有不同的研究方向，因此下面将针对不同的研究方向介绍它们的预测准确度指标。 \n\n* 评分预测\n\n预测用户对物品评分的行为称为评分预测（rating prediction）。\n\n评分预测的预测准确度一般通过**均方根误差(Root Mean Squared Error，简称RMSE)和平均绝对误差(Mean Absolute Error，简称MAE)**计算。对于测试集中的一个用户u和物品i ，令$r_{ui}$是用户对物品i的实际评分，而$\\hat{r}_{ui}$是推荐算法给出的预测评分，那么RMSE的定义为\n\n$$\nRMSE = \\frac {\\sqrt{\\sum_{u,i\\in Test}{(r_{ui}-\\hat{r}_{ui})^2}}} {|Test|}\n$$\n\nMAE采用绝对值计算预测误差，它的定义为:\n\n$$\nMAE = \\frac {\\sum_{u,i\\in Test}{|r_{ui}-\\hat{r}_{ui}|}} {|Test|}\n$$\n\n假设我们用一个列表records存放用户评分数据，令*records[i] = [u,i,rui,pui]*，其中rui是用户u对物品i的实际评分，pui是算法预测出来的用户u对物品i的评分，那么下面的代码分别实现了RMSE和MAE的计算过程。 \n\n```python\nimport math\n\ndef RMSE(records):\n    return math.sqrt(sum([pow(rui-pui,2) for u,i,rui,pui in records])) \\\n        / float(len(records))\n        \ndef MAE(records):\n    return sum([abs(rui-pui) for u,i,rui,pui in records]) \\\n        / float(len(records))\n```\n\n* TopN推荐\n\n网站在提供推荐服务时，一般是给用户一个个性化的推荐列表，这种推荐叫做TopN推荐。 \n\nTopN推荐的预测准确率一般通过准确率(precision)/召回率(recall)度量。 \n\n令R(u)是根据用户在训练集上的行为给用户作出的推荐列表，而T(u)是用户在测试集上的行为列表。那么，推荐结果的召回率定义为:\n$$\nRecall = \\frac {\\sum_{u \\in U}|R(u) \\cap T(u)|} {\\sum_{u \\in U}|T(u)|}\n$$\n推荐结果的准确率定义为：\n$$\nPrecision = \\frac {\\sum_{u \\in U}|R(u) \\cap T(u)|} {\\sum_{u \\in U}|R(u)|}\n$$\n下面用代码同时计算一个推荐算法的准确率和召回率：\n\n```python\ndef PrecisionRecall(test,N):\n    hit = 0\n    n_recall = 0\n    n_precision = 0\n    for user,items in test.items():\n        rank = Recommend(user,N)\n        # &按位与，表示取两个集合的交集\n        hit += len(rank & items)\n        n_recall += len(items)\n        n_precision += N\n    return [hit / (1.0 * n_recall), hit / (1.0 * n_precision)\n```\n\n#### 信任度\n\n度量推荐系统的信任度只能通过**问卷调查**的方式，询问用户是否信任推荐系统的推荐结果。\n\n提高推荐系统的信任度主要有两种方法。\n\n1.首先需要增加推荐系统的**透明度(transparency)**，而增加推荐系统透明度的主要办法是提供推荐解释。只有让用户了解推荐系统的运行机制，让用户认同推荐系统的运行机制，才会提高用户对推荐系统的信任度。\n\n2.其次是考虑用户的社交网络信息，**利用用户的好友信息给用户做推荐**，并且用好友进行推荐解释。这是因为用户对他们的好友一般都比较信任，因此如果推荐的商品是好友购买过的，那么他们对推荐结果就会相对比较信任。\n\n### 参考文献\n\n《推荐系统实践》，项亮","slug":"recommend-system-evaluation-metrics","published":1,"updated":"2019-03-15T10:32:18.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9as4006sj1q0zap3mdaq","content":"<h3 id=\"推荐系统实验方法\"><a href=\"#推荐系统实验方法\" class=\"headerlink\" title=\"推荐系统实验方法\"></a>推荐系统实验方法</h3><p>在推荐系统中，主要有3种评测推荐效果的实验方法，即离线实验(offline experiment)、用户调查(user study) 和在线实验(online experiment)。</p>\n<h4 id=\"离线实验\"><a href=\"#离线实验\" class=\"headerlink\" title=\"离线实验\"></a>离线实验</h4><p>离线实验的方法一般由如下几个步骤构成:</p>\n<p>(1) 通过日志系统获得用户行为数据，并按照一定格式生成一个标准的数据集; </p>\n<p>(2) 将数据集按照一定的规则分成训练集和测试集; </p>\n<p>(3) 在训练集上训练用户兴趣模型，在测试集上进行预测; </p>\n<p>(4) 通过事先定义的离线指标评测算法在测试集上的预测结果。</p>\n<p><strong>好处</strong>：不需要真实用户参与，可以直接快速地计算出来，从而方便、快速地测试大量不同的算法  </p>\n<p><strong>缺点</strong>：无法获得很多商业上关注的指标，如点击率、转化率等</p>\n<h4 id=\"用户调查\"><a href=\"#用户调查\" class=\"headerlink\" title=\"用户调查\"></a>用户调查</h4><p>用户调查需要有一些真实用户，让他们在需要测试的推荐系统上完成一些任务。在他们完成任务时，我们需要观察和记录他们的行为，并让他们回答一些问题。最后，我们需要通过分析他们的行为和答案了解测试系统的性能。</p>\n<p><strong>优点</strong>：可以获得很多体现用户主观感受的指标，相对在线实验风险很低，出现错误后很容易弥补</p>\n<p><strong>缺点</strong>：招募测试用户代价较大，很难组织大规模的测试用户，因此会使测试结果的统计意义不足。</p>\n<h4 id=\"在线实验\"><a href=\"#在线实验\" class=\"headerlink\" title=\"在线实验\"></a>在线实验</h4><p>在完成离线实验和必要的用户调查后，可以将推荐系统上线做AB测试，将它和旧的算法进行比较。</p>\n<p>AB测试是一种很常用的在线评测算法的实验方法。它通过一定的规则将用户随机分成几组，并对不同组的用户采用不同的算法，然后通过统计不同组用户的各种不同的评测指标比较不同算法，比如可以统计不同组用户的点击率，通过点击率比较不同算法的性能。</p>\n<p><strong>AB测试的优点</strong>：可以公平获得不同算法实际在线时的性能指标，包括商业上关注的指标。<br><strong>AB测试的缺点</strong>：周期比较长，必须进行长期的实验才能得到可靠的结果。</p>\n<p>因此一般不会用AB测试测试所有的算法，而只是用它测试那些在离线实验和用户调查中表现很好的算法。</p>\n<h3 id=\"评测指标\"><a href=\"#评测指标\" class=\"headerlink\" title=\"评测指标\"></a>评测指标</h3><p>在《推荐系统实践》中，作者列举了用户满意度、预测准确度、覆盖率、多样性、新颖性、惊喜度、信任度、实时性、健壮性和商业目标共十种推荐系统的评测指标，这里，我只选取了一部分。</p>\n<h4 id=\"用户满意度\"><a href=\"#用户满意度\" class=\"headerlink\" title=\"用户满意度\"></a>用户满意度</h4><p>用户作为推荐系统的重要参与者，其满意度是评测推荐系统的最重要指标。但是，用户满意度没有办法离线计算，只能通过用户调查或者在线实验获得。</p>\n<ul>\n<li><p>用户调查获得用户满意度主要是通过<em>调查问卷</em>的形式。</p>\n</li>\n<li><p>在在线系统中，用户满意度主要通过一些对用户行为的统计得到。比如在电子商务网站中，用户如果购买了推荐的商品，就表示他们在一定程度上满意。因此，我们可以利用购买率度量用户的满意度。此外，有些网站会通过设计一些用户反馈界面收集用户满意度。 更一般的情况下，我们可以用点击率、用户停留时间和转化率等指标度量用户的满意度。</p>\n</li>\n</ul>\n<h4 id=\"预测准确度\"><a href=\"#预测准确度\" class=\"headerlink\" title=\"预测准确度\"></a>预测准确度</h4><p>预测准确度度量一个推荐系统或者推荐算法预测用户行为的能力。</p>\n<p>在计算该指标时需要有一个离线的数据集，该数据集包含用户的历史行为记录。然后，将该数据集通过时间分成训练集和测试集。最后，通过在训练集上建立用户的行为和兴趣模型预测用户在测试集上的行为，并计算预测行为和测试集上实际行为的重合度作为预测准确度。</p>\n<p>由于离线的推荐算法有不同的研究方向，因此下面将针对不同的研究方向介绍它们的预测准确度指标。 </p>\n<ul>\n<li>评分预测</li>\n</ul>\n<p>预测用户对物品评分的行为称为评分预测（rating prediction）。</p>\n<p>评分预测的预测准确度一般通过<strong>均方根误差(Root Mean Squared Error，简称RMSE)和平均绝对误差(Mean Absolute Error，简称MAE)</strong>计算。对于测试集中的一个用户u和物品i ，令$r_{ui}$是用户对物品i的实际评分，而$\\hat{r}_{ui}$是推荐算法给出的预测评分，那么RMSE的定义为</p>\n<p>$$<br>RMSE = \\frac {\\sqrt{\\sum_{u,i\\in Test}{(r_{ui}-\\hat{r}_{ui})^2}}} {|Test|}<br>$$</p>\n<p>MAE采用绝对值计算预测误差，它的定义为:</p>\n<p>$$<br>MAE = \\frac {\\sum_{u,i\\in Test}{|r_{ui}-\\hat{r}_{ui}|}} {|Test|}<br>$$</p>\n<p>假设我们用一个列表records存放用户评分数据，令<em>records[i] = [u,i,rui,pui]</em>，其中rui是用户u对物品i的实际评分，pui是算法预测出来的用户u对物品i的评分，那么下面的代码分别实现了RMSE和MAE的计算过程。 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">RMSE</span><span class=\"params\">(records)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.sqrt(sum([pow(rui-pui,<span class=\"number\">2</span>) <span class=\"keyword\">for</span> u,i,rui,pui <span class=\"keyword\">in</span> records])) \\</span><br><span class=\"line\">        / float(len(records))</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">MAE</span><span class=\"params\">(records)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum([abs(rui-pui) <span class=\"keyword\">for</span> u,i,rui,pui <span class=\"keyword\">in</span> records]) \\</span><br><span class=\"line\">        / float(len(records))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>TopN推荐</li>\n</ul>\n<p>网站在提供推荐服务时，一般是给用户一个个性化的推荐列表，这种推荐叫做TopN推荐。 </p>\n<p>TopN推荐的预测准确率一般通过准确率(precision)/召回率(recall)度量。 </p>\n<p>令R(u)是根据用户在训练集上的行为给用户作出的推荐列表，而T(u)是用户在测试集上的行为列表。那么，推荐结果的召回率定义为:<br>$$<br>Recall = \\frac {\\sum_{u \\in U}|R(u) \\cap T(u)|} {\\sum_{u \\in U}|T(u)|}<br>$$<br>推荐结果的准确率定义为：<br>$$<br>Precision = \\frac {\\sum_{u \\in U}|R(u) \\cap T(u)|} {\\sum_{u \\in U}|R(u)|}<br>$$<br>下面用代码同时计算一个推荐算法的准确率和召回率：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">PrecisionRecall</span><span class=\"params\">(test,N)</span>:</span></span><br><span class=\"line\">    hit = <span class=\"number\">0</span></span><br><span class=\"line\">    n_recall = <span class=\"number\">0</span></span><br><span class=\"line\">    n_precision = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> user,items <span class=\"keyword\">in</span> test.items():</span><br><span class=\"line\">        rank = Recommend(user,N)</span><br><span class=\"line\">        <span class=\"comment\"># &amp;按位与，表示取两个集合的交集</span></span><br><span class=\"line\">        hit += len(rank &amp; items)</span><br><span class=\"line\">        n_recall += len(items)</span><br><span class=\"line\">        n_precision += N</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [hit / (<span class=\"number\">1.0</span> * n_recall), hit / (<span class=\"number\">1.0</span> * n_precision)</span><br></pre></td></tr></table></figure>\n<h4 id=\"信任度\"><a href=\"#信任度\" class=\"headerlink\" title=\"信任度\"></a>信任度</h4><p>度量推荐系统的信任度只能通过<strong>问卷调查</strong>的方式，询问用户是否信任推荐系统的推荐结果。</p>\n<p>提高推荐系统的信任度主要有两种方法。</p>\n<p>1.首先需要增加推荐系统的<strong>透明度(transparency)</strong>，而增加推荐系统透明度的主要办法是提供推荐解释。只有让用户了解推荐系统的运行机制，让用户认同推荐系统的运行机制，才会提高用户对推荐系统的信任度。</p>\n<p>2.其次是考虑用户的社交网络信息，<strong>利用用户的好友信息给用户做推荐</strong>，并且用好友进行推荐解释。这是因为用户对他们的好友一般都比较信任，因此如果推荐的商品是好友购买过的，那么他们对推荐结果就会相对比较信任。</p>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><p>《推荐系统实践》，项亮</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"推荐系统实验方法\"><a href=\"#推荐系统实验方法\" class=\"headerlink\" title=\"推荐系统实验方法\"></a>推荐系统实验方法</h3><p>在推荐系统中，主要有3种评测推荐效果的实验方法，即离线实验(offline experiment)、用户调查(user study) 和在线实验(online experiment)。</p>\n<h4 id=\"离线实验\"><a href=\"#离线实验\" class=\"headerlink\" title=\"离线实验\"></a>离线实验</h4><p>离线实验的方法一般由如下几个步骤构成:</p>\n<p>(1) 通过日志系统获得用户行为数据，并按照一定格式生成一个标准的数据集; </p>\n<p>(2) 将数据集按照一定的规则分成训练集和测试集; </p>\n<p>(3) 在训练集上训练用户兴趣模型，在测试集上进行预测; </p>\n<p>(4) 通过事先定义的离线指标评测算法在测试集上的预测结果。</p>\n<p><strong>好处</strong>：不需要真实用户参与，可以直接快速地计算出来，从而方便、快速地测试大量不同的算法  </p>\n<p><strong>缺点</strong>：无法获得很多商业上关注的指标，如点击率、转化率等</p>\n<h4 id=\"用户调查\"><a href=\"#用户调查\" class=\"headerlink\" title=\"用户调查\"></a>用户调查</h4><p>用户调查需要有一些真实用户，让他们在需要测试的推荐系统上完成一些任务。在他们完成任务时，我们需要观察和记录他们的行为，并让他们回答一些问题。最后，我们需要通过分析他们的行为和答案了解测试系统的性能。</p>\n<p><strong>优点</strong>：可以获得很多体现用户主观感受的指标，相对在线实验风险很低，出现错误后很容易弥补</p>\n<p><strong>缺点</strong>：招募测试用户代价较大，很难组织大规模的测试用户，因此会使测试结果的统计意义不足。</p>\n<h4 id=\"在线实验\"><a href=\"#在线实验\" class=\"headerlink\" title=\"在线实验\"></a>在线实验</h4><p>在完成离线实验和必要的用户调查后，可以将推荐系统上线做AB测试，将它和旧的算法进行比较。</p>\n<p>AB测试是一种很常用的在线评测算法的实验方法。它通过一定的规则将用户随机分成几组，并对不同组的用户采用不同的算法，然后通过统计不同组用户的各种不同的评测指标比较不同算法，比如可以统计不同组用户的点击率，通过点击率比较不同算法的性能。</p>\n<p><strong>AB测试的优点</strong>：可以公平获得不同算法实际在线时的性能指标，包括商业上关注的指标。<br><strong>AB测试的缺点</strong>：周期比较长，必须进行长期的实验才能得到可靠的结果。</p>\n<p>因此一般不会用AB测试测试所有的算法，而只是用它测试那些在离线实验和用户调查中表现很好的算法。</p>\n<h3 id=\"评测指标\"><a href=\"#评测指标\" class=\"headerlink\" title=\"评测指标\"></a>评测指标</h3><p>在《推荐系统实践》中，作者列举了用户满意度、预测准确度、覆盖率、多样性、新颖性、惊喜度、信任度、实时性、健壮性和商业目标共十种推荐系统的评测指标，这里，我只选取了一部分。</p>\n<h4 id=\"用户满意度\"><a href=\"#用户满意度\" class=\"headerlink\" title=\"用户满意度\"></a>用户满意度</h4><p>用户作为推荐系统的重要参与者，其满意度是评测推荐系统的最重要指标。但是，用户满意度没有办法离线计算，只能通过用户调查或者在线实验获得。</p>\n<ul>\n<li><p>用户调查获得用户满意度主要是通过<em>调查问卷</em>的形式。</p>\n</li>\n<li><p>在在线系统中，用户满意度主要通过一些对用户行为的统计得到。比如在电子商务网站中，用户如果购买了推荐的商品，就表示他们在一定程度上满意。因此，我们可以利用购买率度量用户的满意度。此外，有些网站会通过设计一些用户反馈界面收集用户满意度。 更一般的情况下，我们可以用点击率、用户停留时间和转化率等指标度量用户的满意度。</p>\n</li>\n</ul>\n<h4 id=\"预测准确度\"><a href=\"#预测准确度\" class=\"headerlink\" title=\"预测准确度\"></a>预测准确度</h4><p>预测准确度度量一个推荐系统或者推荐算法预测用户行为的能力。</p>\n<p>在计算该指标时需要有一个离线的数据集，该数据集包含用户的历史行为记录。然后，将该数据集通过时间分成训练集和测试集。最后，通过在训练集上建立用户的行为和兴趣模型预测用户在测试集上的行为，并计算预测行为和测试集上实际行为的重合度作为预测准确度。</p>\n<p>由于离线的推荐算法有不同的研究方向，因此下面将针对不同的研究方向介绍它们的预测准确度指标。 </p>\n<ul>\n<li>评分预测</li>\n</ul>\n<p>预测用户对物品评分的行为称为评分预测（rating prediction）。</p>\n<p>评分预测的预测准确度一般通过<strong>均方根误差(Root Mean Squared Error，简称RMSE)和平均绝对误差(Mean Absolute Error，简称MAE)</strong>计算。对于测试集中的一个用户u和物品i ，令$r_{ui}$是用户对物品i的实际评分，而$\\hat{r}_{ui}$是推荐算法给出的预测评分，那么RMSE的定义为</p>\n<p>$$<br>RMSE = \\frac {\\sqrt{\\sum_{u,i\\in Test}{(r_{ui}-\\hat{r}_{ui})^2}}} {|Test|}<br>$$</p>\n<p>MAE采用绝对值计算预测误差，它的定义为:</p>\n<p>$$<br>MAE = \\frac {\\sum_{u,i\\in Test}{|r_{ui}-\\hat{r}_{ui}|}} {|Test|}<br>$$</p>\n<p>假设我们用一个列表records存放用户评分数据，令<em>records[i] = [u,i,rui,pui]</em>，其中rui是用户u对物品i的实际评分，pui是算法预测出来的用户u对物品i的评分，那么下面的代码分别实现了RMSE和MAE的计算过程。 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">RMSE</span><span class=\"params\">(records)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.sqrt(sum([pow(rui-pui,<span class=\"number\">2</span>) <span class=\"keyword\">for</span> u,i,rui,pui <span class=\"keyword\">in</span> records])) \\</span><br><span class=\"line\">        / float(len(records))</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">MAE</span><span class=\"params\">(records)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum([abs(rui-pui) <span class=\"keyword\">for</span> u,i,rui,pui <span class=\"keyword\">in</span> records]) \\</span><br><span class=\"line\">        / float(len(records))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>TopN推荐</li>\n</ul>\n<p>网站在提供推荐服务时，一般是给用户一个个性化的推荐列表，这种推荐叫做TopN推荐。 </p>\n<p>TopN推荐的预测准确率一般通过准确率(precision)/召回率(recall)度量。 </p>\n<p>令R(u)是根据用户在训练集上的行为给用户作出的推荐列表，而T(u)是用户在测试集上的行为列表。那么，推荐结果的召回率定义为:<br>$$<br>Recall = \\frac {\\sum_{u \\in U}|R(u) \\cap T(u)|} {\\sum_{u \\in U}|T(u)|}<br>$$<br>推荐结果的准确率定义为：<br>$$<br>Precision = \\frac {\\sum_{u \\in U}|R(u) \\cap T(u)|} {\\sum_{u \\in U}|R(u)|}<br>$$<br>下面用代码同时计算一个推荐算法的准确率和召回率：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">PrecisionRecall</span><span class=\"params\">(test,N)</span>:</span></span><br><span class=\"line\">    hit = <span class=\"number\">0</span></span><br><span class=\"line\">    n_recall = <span class=\"number\">0</span></span><br><span class=\"line\">    n_precision = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> user,items <span class=\"keyword\">in</span> test.items():</span><br><span class=\"line\">        rank = Recommend(user,N)</span><br><span class=\"line\">        <span class=\"comment\"># &amp;按位与，表示取两个集合的交集</span></span><br><span class=\"line\">        hit += len(rank &amp; items)</span><br><span class=\"line\">        n_recall += len(items)</span><br><span class=\"line\">        n_precision += N</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [hit / (<span class=\"number\">1.0</span> * n_recall), hit / (<span class=\"number\">1.0</span> * n_precision)</span><br></pre></td></tr></table></figure>\n<h4 id=\"信任度\"><a href=\"#信任度\" class=\"headerlink\" title=\"信任度\"></a>信任度</h4><p>度量推荐系统的信任度只能通过<strong>问卷调查</strong>的方式，询问用户是否信任推荐系统的推荐结果。</p>\n<p>提高推荐系统的信任度主要有两种方法。</p>\n<p>1.首先需要增加推荐系统的<strong>透明度(transparency)</strong>，而增加推荐系统透明度的主要办法是提供推荐解释。只有让用户了解推荐系统的运行机制，让用户认同推荐系统的运行机制，才会提高用户对推荐系统的信任度。</p>\n<p>2.其次是考虑用户的社交网络信息，<strong>利用用户的好友信息给用户做推荐</strong>，并且用好友进行推荐解释。这是因为用户对他们的好友一般都比较信任，因此如果推荐的商品是好友购买过的，那么他们对推荐结果就会相对比较信任。</p>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><p>《推荐系统实践》，项亮</p>\n"},{"title":"《推荐系统实践》3.基于物品的协同过滤算法","date":"2019-03-13T03:31:32.000Z","mathjax":true,"_content":"\n基于物品的协同过滤算法（item-based collaborative filtering，以下简称ItemCF）**算法思想**：给用户推荐那些和他们之前喜欢的物品相似的物品。\n\n不过，ItemCF算法**并不利用物品的内容属性计算物品之间的相似度**，它主要**通过分析用户的行为记录计算物品之间的相似度**。该算法认为，物品A和物品B具有很大的相似度是因为喜欢物品A的用户大都也喜欢物品B。\n\n基于物品的协同过滤算法可以**利用用户的历史行为给推荐结果提供推荐解释**，比如给用户推荐《天龙八部》的解释可以是因为用户之前喜欢《射雕英雄传》。 \n\nItemCF算法主要分为两步。\n(1) 计算物品之间的相似度。\n(2) 根据物品的相似度和用户的历史行为给用户生成推荐列表。\n\n<!--more-->\n\n### 计算物品相似度\n\n可以用下面的公式定义物品的相似度:\n$$\nw_{ij} = \\frac {|N(i) \\cap N(j)|} {|N(i)|}\n$$\n这里，分母|N(i)|是喜欢物品i的用户数，而分子 $|N(i) \\cap N(j)|​$ 是同时喜欢物品i和物品j的用户数。因此，上述公式可以理解为**喜欢物品i的用户中有多少比例的用户也喜欢物品j**。\n\n如果物品j很热门，很多人都喜欢， 那么$w_{ij}​$就会很大，接近1。因此，该公式会造成任何物品都会和热门的物品有很大的相似度。为了避免推荐出热门的物品，可以用下面的公式:\n$$\nw_{ij} = \\frac{|N(i) \\cap N(j)|}{\\sqrt{|N(i)||N(j)|}}\n$$\n这个公式惩罚了物品j的权重，因此减轻了热门物品会和很多物品相似的可能性。\n\n计算物品相似度时可以首先建立**用户—物品倒排表**(即对每个用户建立一个包含他喜欢的物品的列表)，然后对于每个用户，将他物品列表中的物品两两在共现矩阵C中加1。\n\n```python\nimport math\nfrom collections import defaultdict\n\ndef item_similarity(self, trainset):\n    # 物品相似度矩阵\n    item_similarity_matrix = {}\n    # 物品流行度\n    item_popularity = {}\n\n    for user, items in trainset.items():\n        for item1 in items:\n            # 构造物品相似度矩阵，计算物品共现次数\n            item_similarity_matrix.setdefault(item1, defaultdict(int))\n            for item2 in items:\n                if item1 == item2:\n                    continue\n                    item_similarity_matrix[item1][item2] += 1\n\n                    # 统计喜欢item1的用户数\n                    if item1 not in item_popularity:\n                        item_popularity[item1] = 0\n                        item_popularity[item1] += 1\n\n                        # 计算最终的相似度矩阵\n                        for item1, releated_items in item_similarity_matrix.items():\n                            for item2, count in releated_items.items():\n                                self.item_similarity_matrix[item1][item2] = count / \\\n                                math.sqrt(item_popularity[item1] * item_popularity[item2])\nreturn item_similarity_matrix\n```\n\n### 产生推荐列表\n\n在得到物品之间的相似度后，ItemCF通过如下公式计算用户u对一个物品j的兴趣:\n$$\nInterestingness_{uj} = \\sum_{i \\in N(u) \\cap S(j,K)} w_{ji}r_{ui}\n$$\n这里N(u)是用户喜欢的物品的集合，S(j,K)是和物品j最相似的K个物品的集合,$w_{ji}​$是物品j和i的相似度，$r_{ui}​$是用户u对物品i的兴趣(对于隐反馈数据集，如果用户u对物品i有过行为，即可令 $r_{ui}=1​$。)该公式的含义是，和用户历史上感兴趣的物品越相似的物品，越有可能在用户的推荐列表中获得比较高的排名。\n\n### 关于物品相似度的一些改进\n\n* 用户活跃度对物品相似度的影响\n\nJohn S. Breese在论文“Empirical Analysis of Predictive Algorithms for Collaborative Filtering ”中提出了一个称为**IUF(Inverse User Frequence)**，即用户活跃度对数的倒数的参数，他认为**活跃用户对物品相似度的贡献应该小于不活跃的用户**，他提出应该增加IUF参数来修正物品相似度的计算公式：\n$$\nw_{ij} = \\frac{\\sum_{u \\in N(i) \\cap N(j)} \\frac{1}{\\log{(1+|N(u)|)}}}{\\sqrt{|N(i)||N(j)|}}\n$$\n当然，上面的公式只是对活跃用户做了一种软性的惩罚，但对于很多过于活跃的用户，为了避免相似度矩阵过于稠密，我们在实际计算中一般直接忽略他的兴趣列表，而不将其纳入到相似度计算的数据集中。\n\n* 物品相似度归一化\n\n研究发现，如果将ItemCF的相似度矩阵按最大值归一化，可以提高推荐的准确率。如果已经得到了物品相似度矩阵w，那么可以用如下公式得到归一化之后的相似度矩阵w':\n$$\nw_{ij}^{'} = \\frac{w_{ij}}{\\max_j {w_{ij}}}\n$$\n归一化的好处不仅仅在于增加推荐的准确度，它还可以提高推荐的覆盖率和多样性。","source":"_posts/recommend-system-item-based-collaborative-filtering.md","raw":"---\ntitle: 《推荐系统实践》3.基于物品的协同过滤算法\ndate: 2019-03-13 11:31:32\ntags: recommend system\ncategories: recommend system\nmathjax: true\n---\n\n基于物品的协同过滤算法（item-based collaborative filtering，以下简称ItemCF）**算法思想**：给用户推荐那些和他们之前喜欢的物品相似的物品。\n\n不过，ItemCF算法**并不利用物品的内容属性计算物品之间的相似度**，它主要**通过分析用户的行为记录计算物品之间的相似度**。该算法认为，物品A和物品B具有很大的相似度是因为喜欢物品A的用户大都也喜欢物品B。\n\n基于物品的协同过滤算法可以**利用用户的历史行为给推荐结果提供推荐解释**，比如给用户推荐《天龙八部》的解释可以是因为用户之前喜欢《射雕英雄传》。 \n\nItemCF算法主要分为两步。\n(1) 计算物品之间的相似度。\n(2) 根据物品的相似度和用户的历史行为给用户生成推荐列表。\n\n<!--more-->\n\n### 计算物品相似度\n\n可以用下面的公式定义物品的相似度:\n$$\nw_{ij} = \\frac {|N(i) \\cap N(j)|} {|N(i)|}\n$$\n这里，分母|N(i)|是喜欢物品i的用户数，而分子 $|N(i) \\cap N(j)|​$ 是同时喜欢物品i和物品j的用户数。因此，上述公式可以理解为**喜欢物品i的用户中有多少比例的用户也喜欢物品j**。\n\n如果物品j很热门，很多人都喜欢， 那么$w_{ij}​$就会很大，接近1。因此，该公式会造成任何物品都会和热门的物品有很大的相似度。为了避免推荐出热门的物品，可以用下面的公式:\n$$\nw_{ij} = \\frac{|N(i) \\cap N(j)|}{\\sqrt{|N(i)||N(j)|}}\n$$\n这个公式惩罚了物品j的权重，因此减轻了热门物品会和很多物品相似的可能性。\n\n计算物品相似度时可以首先建立**用户—物品倒排表**(即对每个用户建立一个包含他喜欢的物品的列表)，然后对于每个用户，将他物品列表中的物品两两在共现矩阵C中加1。\n\n```python\nimport math\nfrom collections import defaultdict\n\ndef item_similarity(self, trainset):\n    # 物品相似度矩阵\n    item_similarity_matrix = {}\n    # 物品流行度\n    item_popularity = {}\n\n    for user, items in trainset.items():\n        for item1 in items:\n            # 构造物品相似度矩阵，计算物品共现次数\n            item_similarity_matrix.setdefault(item1, defaultdict(int))\n            for item2 in items:\n                if item1 == item2:\n                    continue\n                    item_similarity_matrix[item1][item2] += 1\n\n                    # 统计喜欢item1的用户数\n                    if item1 not in item_popularity:\n                        item_popularity[item1] = 0\n                        item_popularity[item1] += 1\n\n                        # 计算最终的相似度矩阵\n                        for item1, releated_items in item_similarity_matrix.items():\n                            for item2, count in releated_items.items():\n                                self.item_similarity_matrix[item1][item2] = count / \\\n                                math.sqrt(item_popularity[item1] * item_popularity[item2])\nreturn item_similarity_matrix\n```\n\n### 产生推荐列表\n\n在得到物品之间的相似度后，ItemCF通过如下公式计算用户u对一个物品j的兴趣:\n$$\nInterestingness_{uj} = \\sum_{i \\in N(u) \\cap S(j,K)} w_{ji}r_{ui}\n$$\n这里N(u)是用户喜欢的物品的集合，S(j,K)是和物品j最相似的K个物品的集合,$w_{ji}​$是物品j和i的相似度，$r_{ui}​$是用户u对物品i的兴趣(对于隐反馈数据集，如果用户u对物品i有过行为，即可令 $r_{ui}=1​$。)该公式的含义是，和用户历史上感兴趣的物品越相似的物品，越有可能在用户的推荐列表中获得比较高的排名。\n\n### 关于物品相似度的一些改进\n\n* 用户活跃度对物品相似度的影响\n\nJohn S. Breese在论文“Empirical Analysis of Predictive Algorithms for Collaborative Filtering ”中提出了一个称为**IUF(Inverse User Frequence)**，即用户活跃度对数的倒数的参数，他认为**活跃用户对物品相似度的贡献应该小于不活跃的用户**，他提出应该增加IUF参数来修正物品相似度的计算公式：\n$$\nw_{ij} = \\frac{\\sum_{u \\in N(i) \\cap N(j)} \\frac{1}{\\log{(1+|N(u)|)}}}{\\sqrt{|N(i)||N(j)|}}\n$$\n当然，上面的公式只是对活跃用户做了一种软性的惩罚，但对于很多过于活跃的用户，为了避免相似度矩阵过于稠密，我们在实际计算中一般直接忽略他的兴趣列表，而不将其纳入到相似度计算的数据集中。\n\n* 物品相似度归一化\n\n研究发现，如果将ItemCF的相似度矩阵按最大值归一化，可以提高推荐的准确率。如果已经得到了物品相似度矩阵w，那么可以用如下公式得到归一化之后的相似度矩阵w':\n$$\nw_{ij}^{'} = \\frac{w_{ij}}{\\max_j {w_{ij}}}\n$$\n归一化的好处不仅仅在于增加推荐的准确度，它还可以提高推荐的覆盖率和多样性。","slug":"recommend-system-item-based-collaborative-filtering","published":1,"updated":"2019-03-13T09:05:51.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9as6006xj1q0p65m2pva","content":"<p>基于物品的协同过滤算法（item-based collaborative filtering，以下简称ItemCF）<strong>算法思想</strong>：给用户推荐那些和他们之前喜欢的物品相似的物品。</p>\n<p>不过，ItemCF算法<strong>并不利用物品的内容属性计算物品之间的相似度</strong>，它主要<strong>通过分析用户的行为记录计算物品之间的相似度</strong>。该算法认为，物品A和物品B具有很大的相似度是因为喜欢物品A的用户大都也喜欢物品B。</p>\n<p>基于物品的协同过滤算法可以<strong>利用用户的历史行为给推荐结果提供推荐解释</strong>，比如给用户推荐《天龙八部》的解释可以是因为用户之前喜欢《射雕英雄传》。 </p>\n<p>ItemCF算法主要分为两步。<br>(1) 计算物品之间的相似度。<br>(2) 根据物品的相似度和用户的历史行为给用户生成推荐列表。</p>\n<a id=\"more\"></a>\n<h3 id=\"计算物品相似度\"><a href=\"#计算物品相似度\" class=\"headerlink\" title=\"计算物品相似度\"></a>计算物品相似度</h3><p>可以用下面的公式定义物品的相似度:<br>$$<br>w_{ij} = \\frac {|N(i) \\cap N(j)|} {|N(i)|}<br>$$<br>这里，分母|N(i)|是喜欢物品i的用户数，而分子 $|N(i) \\cap N(j)|​$ 是同时喜欢物品i和物品j的用户数。因此，上述公式可以理解为<strong>喜欢物品i的用户中有多少比例的用户也喜欢物品j</strong>。</p>\n<p>如果物品j很热门，很多人都喜欢， 那么$w_{ij}​$就会很大，接近1。因此，该公式会造成任何物品都会和热门的物品有很大的相似度。为了避免推荐出热门的物品，可以用下面的公式:<br>$$<br>w_{ij} = \\frac{|N(i) \\cap N(j)|}{\\sqrt{|N(i)||N(j)|}}<br>$$<br>这个公式惩罚了物品j的权重，因此减轻了热门物品会和很多物品相似的可能性。</p>\n<p>计算物品相似度时可以首先建立<strong>用户—物品倒排表</strong>(即对每个用户建立一个包含他喜欢的物品的列表)，然后对于每个用户，将他物品列表中的物品两两在共现矩阵C中加1。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">item_similarity</span><span class=\"params\">(self, trainset)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 物品相似度矩阵</span></span><br><span class=\"line\">    item_similarity_matrix = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\"># 物品流行度</span></span><br><span class=\"line\">    item_popularity = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> user, items <span class=\"keyword\">in</span> trainset.items():</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item1 <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">            <span class=\"comment\"># 构造物品相似度矩阵，计算物品共现次数</span></span><br><span class=\"line\">            item_similarity_matrix.setdefault(item1, defaultdict(int))</span><br><span class=\"line\">            <span class=\"keyword\">for</span> item2 <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> item1 == item2:</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                    item_similarity_matrix[item1][item2] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\"># 统计喜欢item1的用户数</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> item1 <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> item_popularity:</span><br><span class=\"line\">                        item_popularity[item1] = <span class=\"number\">0</span></span><br><span class=\"line\">                        item_popularity[item1] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\"># 计算最终的相似度矩阵</span></span><br><span class=\"line\">                        <span class=\"keyword\">for</span> item1, releated_items <span class=\"keyword\">in</span> item_similarity_matrix.items():</span><br><span class=\"line\">                            <span class=\"keyword\">for</span> item2, count <span class=\"keyword\">in</span> releated_items.items():</span><br><span class=\"line\">                                self.item_similarity_matrix[item1][item2] = count / \\</span><br><span class=\"line\">                                math.sqrt(item_popularity[item1] * item_popularity[item2])</span><br><span class=\"line\"><span class=\"keyword\">return</span> item_similarity_matrix</span><br></pre></td></tr></table></figure>\n<h3 id=\"产生推荐列表\"><a href=\"#产生推荐列表\" class=\"headerlink\" title=\"产生推荐列表\"></a>产生推荐列表</h3><p>在得到物品之间的相似度后，ItemCF通过如下公式计算用户u对一个物品j的兴趣:<br>$$<br>Interestingness_{uj} = \\sum_{i \\in N(u) \\cap S(j,K)} w_{ji}r_{ui}<br>$$<br>这里N(u)是用户喜欢的物品的集合，S(j,K)是和物品j最相似的K个物品的集合,$w_{ji}​$是物品j和i的相似度，$r_{ui}​$是用户u对物品i的兴趣(对于隐反馈数据集，如果用户u对物品i有过行为，即可令 $r_{ui}=1​$。)该公式的含义是，和用户历史上感兴趣的物品越相似的物品，越有可能在用户的推荐列表中获得比较高的排名。</p>\n<h3 id=\"关于物品相似度的一些改进\"><a href=\"#关于物品相似度的一些改进\" class=\"headerlink\" title=\"关于物品相似度的一些改进\"></a>关于物品相似度的一些改进</h3><ul>\n<li>用户活跃度对物品相似度的影响</li>\n</ul>\n<p>John S. Breese在论文“Empirical Analysis of Predictive Algorithms for Collaborative Filtering ”中提出了一个称为<strong>IUF(Inverse User Frequence)</strong>，即用户活跃度对数的倒数的参数，他认为<strong>活跃用户对物品相似度的贡献应该小于不活跃的用户</strong>，他提出应该增加IUF参数来修正物品相似度的计算公式：<br>$$<br>w_{ij} = \\frac{\\sum_{u \\in N(i) \\cap N(j)} \\frac{1}{\\log{(1+|N(u)|)}}}{\\sqrt{|N(i)||N(j)|}}<br>$$<br>当然，上面的公式只是对活跃用户做了一种软性的惩罚，但对于很多过于活跃的用户，为了避免相似度矩阵过于稠密，我们在实际计算中一般直接忽略他的兴趣列表，而不将其纳入到相似度计算的数据集中。</p>\n<ul>\n<li>物品相似度归一化</li>\n</ul>\n<p>研究发现，如果将ItemCF的相似度矩阵按最大值归一化，可以提高推荐的准确率。如果已经得到了物品相似度矩阵w，那么可以用如下公式得到归一化之后的相似度矩阵w’:<br>$$<br>w_{ij}^{‘} = \\frac{w_{ij}}{\\max_j {w_{ij}}}<br>$$<br>归一化的好处不仅仅在于增加推荐的准确度，它还可以提高推荐的覆盖率和多样性。</p>\n","site":{"data":{}},"excerpt":"<p>基于物品的协同过滤算法（item-based collaborative filtering，以下简称ItemCF）<strong>算法思想</strong>：给用户推荐那些和他们之前喜欢的物品相似的物品。</p>\n<p>不过，ItemCF算法<strong>并不利用物品的内容属性计算物品之间的相似度</strong>，它主要<strong>通过分析用户的行为记录计算物品之间的相似度</strong>。该算法认为，物品A和物品B具有很大的相似度是因为喜欢物品A的用户大都也喜欢物品B。</p>\n<p>基于物品的协同过滤算法可以<strong>利用用户的历史行为给推荐结果提供推荐解释</strong>，比如给用户推荐《天龙八部》的解释可以是因为用户之前喜欢《射雕英雄传》。 </p>\n<p>ItemCF算法主要分为两步。<br>(1) 计算物品之间的相似度。<br>(2) 根据物品的相似度和用户的历史行为给用户生成推荐列表。</p>","more":"<h3 id=\"计算物品相似度\"><a href=\"#计算物品相似度\" class=\"headerlink\" title=\"计算物品相似度\"></a>计算物品相似度</h3><p>可以用下面的公式定义物品的相似度:<br>$$<br>w_{ij} = \\frac {|N(i) \\cap N(j)|} {|N(i)|}<br>$$<br>这里，分母|N(i)|是喜欢物品i的用户数，而分子 $|N(i) \\cap N(j)|​$ 是同时喜欢物品i和物品j的用户数。因此，上述公式可以理解为<strong>喜欢物品i的用户中有多少比例的用户也喜欢物品j</strong>。</p>\n<p>如果物品j很热门，很多人都喜欢， 那么$w_{ij}​$就会很大，接近1。因此，该公式会造成任何物品都会和热门的物品有很大的相似度。为了避免推荐出热门的物品，可以用下面的公式:<br>$$<br>w_{ij} = \\frac{|N(i) \\cap N(j)|}{\\sqrt{|N(i)||N(j)|}}<br>$$<br>这个公式惩罚了物品j的权重，因此减轻了热门物品会和很多物品相似的可能性。</p>\n<p>计算物品相似度时可以首先建立<strong>用户—物品倒排表</strong>(即对每个用户建立一个包含他喜欢的物品的列表)，然后对于每个用户，将他物品列表中的物品两两在共现矩阵C中加1。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">item_similarity</span><span class=\"params\">(self, trainset)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 物品相似度矩阵</span></span><br><span class=\"line\">    item_similarity_matrix = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\"># 物品流行度</span></span><br><span class=\"line\">    item_popularity = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> user, items <span class=\"keyword\">in</span> trainset.items():</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item1 <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">            <span class=\"comment\"># 构造物品相似度矩阵，计算物品共现次数</span></span><br><span class=\"line\">            item_similarity_matrix.setdefault(item1, defaultdict(int))</span><br><span class=\"line\">            <span class=\"keyword\">for</span> item2 <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> item1 == item2:</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                    item_similarity_matrix[item1][item2] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\"># 统计喜欢item1的用户数</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> item1 <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> item_popularity:</span><br><span class=\"line\">                        item_popularity[item1] = <span class=\"number\">0</span></span><br><span class=\"line\">                        item_popularity[item1] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\"># 计算最终的相似度矩阵</span></span><br><span class=\"line\">                        <span class=\"keyword\">for</span> item1, releated_items <span class=\"keyword\">in</span> item_similarity_matrix.items():</span><br><span class=\"line\">                            <span class=\"keyword\">for</span> item2, count <span class=\"keyword\">in</span> releated_items.items():</span><br><span class=\"line\">                                self.item_similarity_matrix[item1][item2] = count / \\</span><br><span class=\"line\">                                math.sqrt(item_popularity[item1] * item_popularity[item2])</span><br><span class=\"line\"><span class=\"keyword\">return</span> item_similarity_matrix</span><br></pre></td></tr></table></figure>\n<h3 id=\"产生推荐列表\"><a href=\"#产生推荐列表\" class=\"headerlink\" title=\"产生推荐列表\"></a>产生推荐列表</h3><p>在得到物品之间的相似度后，ItemCF通过如下公式计算用户u对一个物品j的兴趣:<br>$$<br>Interestingness_{uj} = \\sum_{i \\in N(u) \\cap S(j,K)} w_{ji}r_{ui}<br>$$<br>这里N(u)是用户喜欢的物品的集合，S(j,K)是和物品j最相似的K个物品的集合,$w_{ji}​$是物品j和i的相似度，$r_{ui}​$是用户u对物品i的兴趣(对于隐反馈数据集，如果用户u对物品i有过行为，即可令 $r_{ui}=1​$。)该公式的含义是，和用户历史上感兴趣的物品越相似的物品，越有可能在用户的推荐列表中获得比较高的排名。</p>\n<h3 id=\"关于物品相似度的一些改进\"><a href=\"#关于物品相似度的一些改进\" class=\"headerlink\" title=\"关于物品相似度的一些改进\"></a>关于物品相似度的一些改进</h3><ul>\n<li>用户活跃度对物品相似度的影响</li>\n</ul>\n<p>John S. Breese在论文“Empirical Analysis of Predictive Algorithms for Collaborative Filtering ”中提出了一个称为<strong>IUF(Inverse User Frequence)</strong>，即用户活跃度对数的倒数的参数，他认为<strong>活跃用户对物品相似度的贡献应该小于不活跃的用户</strong>，他提出应该增加IUF参数来修正物品相似度的计算公式：<br>$$<br>w_{ij} = \\frac{\\sum_{u \\in N(i) \\cap N(j)} \\frac{1}{\\log{(1+|N(u)|)}}}{\\sqrt{|N(i)||N(j)|}}<br>$$<br>当然，上面的公式只是对活跃用户做了一种软性的惩罚，但对于很多过于活跃的用户，为了避免相似度矩阵过于稠密，我们在实际计算中一般直接忽略他的兴趣列表，而不将其纳入到相似度计算的数据集中。</p>\n<ul>\n<li>物品相似度归一化</li>\n</ul>\n<p>研究发现，如果将ItemCF的相似度矩阵按最大值归一化，可以提高推荐的准确率。如果已经得到了物品相似度矩阵w，那么可以用如下公式得到归一化之后的相似度矩阵w’:<br>$$<br>w_{ij}^{‘} = \\frac{w_{ij}}{\\max_j {w_{ij}}}<br>$$<br>归一化的好处不仅仅在于增加推荐的准确度，它还可以提高推荐的覆盖率和多样性。</p>"},{"title":"SQL中删除表中数据的几种方法","date":"2018-09-19T14:00:09.000Z","_content":"\nSQL中删除表数据有以下三种方法：\n\n1.使用drop table语句；2. 使用delete语句；3. 使用truncate table语句。\n\n<!--more-->\n\n#### drop table\n\n```sql\ndrop table 表名;\n```\n\n功能：删除表，表的结构、表中的数据以及索引等全部被删除。\n\n#### delete\n\n```sql\ndelete from 表名 [where 条件];\n```\n\n功能：根据条件删除表中的数据，但不删除表的定义。\n\n#### truncate table\n\n```sql\ntruncate table 表名;\n```\n\n功能：清空表中的全部数据，但不删除表的定义。\n\ntruncate table 与delete语句不同的地方在于，\n\n1.truncate table语句没有where条件。\n\n2.truncate table语句会使表回到刚创建的初始状态，如重置表中的自增值等，而delete 语句不会。\n\n3.truncate table语句不会触发触发器，而delete语句会触发触发器。\n\n**若要清空表中的数据，但不删除表，推荐使用 truncate table语句。**","source":"_posts/sql-drop-delete-and-truncate-table.md","raw":"---\ntitle: SQL中删除表中数据的几种方法\ndate: 2018-09-19 22:00:09\ntags: sql\ncategories: sql\n---\n\nSQL中删除表数据有以下三种方法：\n\n1.使用drop table语句；2. 使用delete语句；3. 使用truncate table语句。\n\n<!--more-->\n\n#### drop table\n\n```sql\ndrop table 表名;\n```\n\n功能：删除表，表的结构、表中的数据以及索引等全部被删除。\n\n#### delete\n\n```sql\ndelete from 表名 [where 条件];\n```\n\n功能：根据条件删除表中的数据，但不删除表的定义。\n\n#### truncate table\n\n```sql\ntruncate table 表名;\n```\n\n功能：清空表中的全部数据，但不删除表的定义。\n\ntruncate table 与delete语句不同的地方在于，\n\n1.truncate table语句没有where条件。\n\n2.truncate table语句会使表回到刚创建的初始状态，如重置表中的自增值等，而delete 语句不会。\n\n3.truncate table语句不会触发触发器，而delete语句会触发触发器。\n\n**若要清空表中的数据，但不删除表，推荐使用 truncate table语句。**","slug":"sql-drop-delete-and-truncate-table","published":1,"updated":"2019-01-19T07:23:57.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9as6006zj1q0ktgne3p1","content":"<p>SQL中删除表数据有以下三种方法：</p>\n<p>1.使用drop table语句；2. 使用delete语句；3. 使用truncate table语句。</p>\n<a id=\"more\"></a>\n<h4 id=\"drop-table\"><a href=\"#drop-table\" class=\"headerlink\" title=\"drop table\"></a>drop table</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> 表名;</span><br></pre></td></tr></table></figure>\n<p>功能：删除表，表的结构、表中的数据以及索引等全部被删除。</p>\n<h4 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> 表名 [<span class=\"keyword\">where</span> 条件];</span><br></pre></td></tr></table></figure>\n<p>功能：根据条件删除表中的数据，但不删除表的定义。</p>\n<h4 id=\"truncate-table\"><a href=\"#truncate-table\" class=\"headerlink\" title=\"truncate table\"></a>truncate table</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"keyword\">table</span> 表名;</span><br></pre></td></tr></table></figure>\n<p>功能：清空表中的全部数据，但不删除表的定义。</p>\n<p>truncate table 与delete语句不同的地方在于，</p>\n<p>1.truncate table语句没有where条件。</p>\n<p>2.truncate table语句会使表回到刚创建的初始状态，如重置表中的自增值等，而delete 语句不会。</p>\n<p>3.truncate table语句不会触发触发器，而delete语句会触发触发器。</p>\n<p><strong>若要清空表中的数据，但不删除表，推荐使用 truncate table语句。</strong></p>\n","site":{"data":{}},"excerpt":"<p>SQL中删除表数据有以下三种方法：</p>\n<p>1.使用drop table语句；2. 使用delete语句；3. 使用truncate table语句。</p>","more":"<h4 id=\"drop-table\"><a href=\"#drop-table\" class=\"headerlink\" title=\"drop table\"></a>drop table</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> 表名;</span><br></pre></td></tr></table></figure>\n<p>功能：删除表，表的结构、表中的数据以及索引等全部被删除。</p>\n<h4 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> 表名 [<span class=\"keyword\">where</span> 条件];</span><br></pre></td></tr></table></figure>\n<p>功能：根据条件删除表中的数据，但不删除表的定义。</p>\n<h4 id=\"truncate-table\"><a href=\"#truncate-table\" class=\"headerlink\" title=\"truncate table\"></a>truncate table</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"keyword\">table</span> 表名;</span><br></pre></td></tr></table></figure>\n<p>功能：清空表中的全部数据，但不删除表的定义。</p>\n<p>truncate table 与delete语句不同的地方在于，</p>\n<p>1.truncate table语句没有where条件。</p>\n<p>2.truncate table语句会使表回到刚创建的初始状态，如重置表中的自增值等，而delete 语句不会。</p>\n<p>3.truncate table语句不会触发触发器，而delete语句会触发触发器。</p>\n<p><strong>若要清空表中的数据，但不删除表，推荐使用 truncate table语句。</strong></p>"},{"title":"SQL模糊查询并高亮显示查询结果","date":"2018-05-14T13:22:31.000Z","updated":"2018-05-16T10:48:20.000Z","_content":"最近在完善课题组的项目时，遇到了一个问题：项目有个论坛模块，需要实现根据用户输入的关键字检索论坛文章，然后高亮显示检索结果。\n\n本来遇到这个需求，第一反应是用lucene来做全文检索。但是，lucene只是一个全文检索工具包，要用它实现全文检索，需要写一大堆的代码，加之虽然之前用过几次lucene，但是对lucene的API还是不太熟。想想还是算了，等以后专门研究一下lucene再说吧。\n\n有朋友可能要问了：为什么不用solr或者elasticsearch？还不是因为不熟，再说了，一个solr一百多兆，我这就是个小项目，没必要啊。思来想去，最后还是决定就用sql的模糊查询like实现。\n\n<!--more-->\n\n表结构是这样的\n\n```sql\ncreate table article(\n\tid bigint unsigned not null auto_increment,\n\ttitle varchar(255) not null,\n\tsummary varchar(255) not null,\n\tis_public tinyint(1) unsigned not null default 1 comment \"是否公开，1表示公开，0表示私密\",\n\tgmt_create datetime not null,\n\t...,\n\tprimary key(id)\n)\n```\n\n这里以检索“作业“为例，只查询公开的文章，并且按照发表时间降序排列，SQL是这样写的\n\n```sql\nselect id,title,summary,gmt_create,... \nfrom article\nwhere is_public = 1 and (title like \"%作业%\" or summary like \"%作业%\")\norder by gmt_create desc\nlimit 0,10;\n```\n\n这样做确实能实现模糊查询了，但是又一个问题来了：如何实现检索结果高亮显示呢？\n\n寻思了很久，也没想到解决办法。后来灵机一动，想到干嘛不在返回字段的时候在关键字的前后插入一些html标签，或者直接替换返回字段中的关键字，这不就实现高亮显示了吗？于是SQL就成了下面这样。\n\n```sql\nselect id,\nreplace(title,\"作业\",concat(\"<font color='red'><b>\",\"作业\",\"</b></font>\")) as title,\nreplace(summary,\"作业\",concat(\"<font color='red'><b>\",\"作业\",\"</b></font>\")) as summary,\ngmt_create,...\nfrom article\nwhere is_public = 1 and (title like \"%作业%\" or summary like \"%作业%\")\norder by gmt_create desc\nlimit 0,10;\n```\n\n当然，使用全模糊查询，然后通过替换关键字的方式实现检索结果高亮显示，从而实现全文检索，这种方法效率肯定不高。《阿里巴巴Java开发手册》中也明确禁止使用全模糊或左模糊查询，因为全模糊或者左模糊查询无法使用索引。\n","source":"_posts/sql-fuzzy-query-and-highlight-keyword.md","raw":"---\ntitle: SQL模糊查询并高亮显示查询结果\ndate: 2018-05-14 21:22:31\nupdated: 2018-05-16 18:48:20 \ntags: [sql,mysql]\ncategories: sql\n---\n最近在完善课题组的项目时，遇到了一个问题：项目有个论坛模块，需要实现根据用户输入的关键字检索论坛文章，然后高亮显示检索结果。\n\n本来遇到这个需求，第一反应是用lucene来做全文检索。但是，lucene只是一个全文检索工具包，要用它实现全文检索，需要写一大堆的代码，加之虽然之前用过几次lucene，但是对lucene的API还是不太熟。想想还是算了，等以后专门研究一下lucene再说吧。\n\n有朋友可能要问了：为什么不用solr或者elasticsearch？还不是因为不熟，再说了，一个solr一百多兆，我这就是个小项目，没必要啊。思来想去，最后还是决定就用sql的模糊查询like实现。\n\n<!--more-->\n\n表结构是这样的\n\n```sql\ncreate table article(\n\tid bigint unsigned not null auto_increment,\n\ttitle varchar(255) not null,\n\tsummary varchar(255) not null,\n\tis_public tinyint(1) unsigned not null default 1 comment \"是否公开，1表示公开，0表示私密\",\n\tgmt_create datetime not null,\n\t...,\n\tprimary key(id)\n)\n```\n\n这里以检索“作业“为例，只查询公开的文章，并且按照发表时间降序排列，SQL是这样写的\n\n```sql\nselect id,title,summary,gmt_create,... \nfrom article\nwhere is_public = 1 and (title like \"%作业%\" or summary like \"%作业%\")\norder by gmt_create desc\nlimit 0,10;\n```\n\n这样做确实能实现模糊查询了，但是又一个问题来了：如何实现检索结果高亮显示呢？\n\n寻思了很久，也没想到解决办法。后来灵机一动，想到干嘛不在返回字段的时候在关键字的前后插入一些html标签，或者直接替换返回字段中的关键字，这不就实现高亮显示了吗？于是SQL就成了下面这样。\n\n```sql\nselect id,\nreplace(title,\"作业\",concat(\"<font color='red'><b>\",\"作业\",\"</b></font>\")) as title,\nreplace(summary,\"作业\",concat(\"<font color='red'><b>\",\"作业\",\"</b></font>\")) as summary,\ngmt_create,...\nfrom article\nwhere is_public = 1 and (title like \"%作业%\" or summary like \"%作业%\")\norder by gmt_create desc\nlimit 0,10;\n```\n\n当然，使用全模糊查询，然后通过替换关键字的方式实现检索结果高亮显示，从而实现全文检索，这种方法效率肯定不高。《阿里巴巴Java开发手册》中也明确禁止使用全模糊或左模糊查询，因为全模糊或者左模糊查询无法使用索引。\n","slug":"sql-fuzzy-query-and-highlight-keyword","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9as80074j1q0oo4b75o1","content":"<p>最近在完善课题组的项目时，遇到了一个问题：项目有个论坛模块，需要实现根据用户输入的关键字检索论坛文章，然后高亮显示检索结果。</p>\n<p>本来遇到这个需求，第一反应是用lucene来做全文检索。但是，lucene只是一个全文检索工具包，要用它实现全文检索，需要写一大堆的代码，加之虽然之前用过几次lucene，但是对lucene的API还是不太熟。想想还是算了，等以后专门研究一下lucene再说吧。</p>\n<p>有朋友可能要问了：为什么不用solr或者elasticsearch？还不是因为不熟，再说了，一个solr一百多兆，我这就是个小项目，没必要啊。思来想去，最后还是决定就用sql的模糊查询like实现。</p>\n<a id=\"more\"></a>\n<p>表结构是这样的</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> article(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment,</span><br><span class=\"line\">\ttitle <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">\tsummary <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">\tis_public tinyint(<span class=\"number\">1</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">default</span> <span class=\"number\">1</span> <span class=\"keyword\">comment</span> <span class=\"string\">\"是否公开，1表示公开，0表示私密\"</span>,</span><br><span class=\"line\">\tgmt_create datetime <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">\t...,</span><br><span class=\"line\">\tprimary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>这里以检索“作业“为例，只查询公开的文章，并且按照发表时间降序排列，SQL是这样写的</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,title,summary,gmt_create,... </span><br><span class=\"line\"><span class=\"keyword\">from</span> article</span><br><span class=\"line\"><span class=\"keyword\">where</span> is_public = <span class=\"number\">1</span> <span class=\"keyword\">and</span> (title <span class=\"keyword\">like</span> <span class=\"string\">\"%作业%\"</span> <span class=\"keyword\">or</span> summary <span class=\"keyword\">like</span> <span class=\"string\">\"%作业%\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> gmt_create <span class=\"keyword\">desc</span></span><br><span class=\"line\"><span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>这样做确实能实现模糊查询了，但是又一个问题来了：如何实现检索结果高亮显示呢？</p>\n<p>寻思了很久，也没想到解决办法。后来灵机一动，想到干嘛不在返回字段的时候在关键字的前后插入一些html标签，或者直接替换返回字段中的关键字，这不就实现高亮显示了吗？于是SQL就成了下面这样。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,</span><br><span class=\"line\"><span class=\"keyword\">replace</span>(title,<span class=\"string\">\"作业\"</span>,<span class=\"keyword\">concat</span>(<span class=\"string\">\"&lt;font color='red'&gt;&lt;b&gt;\"</span>,<span class=\"string\">\"作业\"</span>,<span class=\"string\">\"&lt;/b&gt;&lt;/font&gt;\"</span>)) <span class=\"keyword\">as</span> title,</span><br><span class=\"line\"><span class=\"keyword\">replace</span>(summary,<span class=\"string\">\"作业\"</span>,<span class=\"keyword\">concat</span>(<span class=\"string\">\"&lt;font color='red'&gt;&lt;b&gt;\"</span>,<span class=\"string\">\"作业\"</span>,<span class=\"string\">\"&lt;/b&gt;&lt;/font&gt;\"</span>)) <span class=\"keyword\">as</span> summary,</span><br><span class=\"line\">gmt_create,...</span><br><span class=\"line\"><span class=\"keyword\">from</span> article</span><br><span class=\"line\"><span class=\"keyword\">where</span> is_public = <span class=\"number\">1</span> <span class=\"keyword\">and</span> (title <span class=\"keyword\">like</span> <span class=\"string\">\"%作业%\"</span> <span class=\"keyword\">or</span> summary <span class=\"keyword\">like</span> <span class=\"string\">\"%作业%\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> gmt_create <span class=\"keyword\">desc</span></span><br><span class=\"line\"><span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>当然，使用全模糊查询，然后通过替换关键字的方式实现检索结果高亮显示，从而实现全文检索，这种方法效率肯定不高。《阿里巴巴Java开发手册》中也明确禁止使用全模糊或左模糊查询，因为全模糊或者左模糊查询无法使用索引。</p>\n","site":{"data":{}},"excerpt":"<p>最近在完善课题组的项目时，遇到了一个问题：项目有个论坛模块，需要实现根据用户输入的关键字检索论坛文章，然后高亮显示检索结果。</p>\n<p>本来遇到这个需求，第一反应是用lucene来做全文检索。但是，lucene只是一个全文检索工具包，要用它实现全文检索，需要写一大堆的代码，加之虽然之前用过几次lucene，但是对lucene的API还是不太熟。想想还是算了，等以后专门研究一下lucene再说吧。</p>\n<p>有朋友可能要问了：为什么不用solr或者elasticsearch？还不是因为不熟，再说了，一个solr一百多兆，我这就是个小项目，没必要啊。思来想去，最后还是决定就用sql的模糊查询like实现。</p>","more":"<p>表结构是这样的</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> article(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment,</span><br><span class=\"line\">\ttitle <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">\tsummary <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">\tis_public tinyint(<span class=\"number\">1</span>) <span class=\"keyword\">unsigned</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">default</span> <span class=\"number\">1</span> <span class=\"keyword\">comment</span> <span class=\"string\">\"是否公开，1表示公开，0表示私密\"</span>,</span><br><span class=\"line\">\tgmt_create datetime <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">\t...,</span><br><span class=\"line\">\tprimary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>这里以检索“作业“为例，只查询公开的文章，并且按照发表时间降序排列，SQL是这样写的</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,title,summary,gmt_create,... </span><br><span class=\"line\"><span class=\"keyword\">from</span> article</span><br><span class=\"line\"><span class=\"keyword\">where</span> is_public = <span class=\"number\">1</span> <span class=\"keyword\">and</span> (title <span class=\"keyword\">like</span> <span class=\"string\">\"%作业%\"</span> <span class=\"keyword\">or</span> summary <span class=\"keyword\">like</span> <span class=\"string\">\"%作业%\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> gmt_create <span class=\"keyword\">desc</span></span><br><span class=\"line\"><span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>这样做确实能实现模糊查询了，但是又一个问题来了：如何实现检索结果高亮显示呢？</p>\n<p>寻思了很久，也没想到解决办法。后来灵机一动，想到干嘛不在返回字段的时候在关键字的前后插入一些html标签，或者直接替换返回字段中的关键字，这不就实现高亮显示了吗？于是SQL就成了下面这样。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,</span><br><span class=\"line\"><span class=\"keyword\">replace</span>(title,<span class=\"string\">\"作业\"</span>,<span class=\"keyword\">concat</span>(<span class=\"string\">\"&lt;font color='red'&gt;&lt;b&gt;\"</span>,<span class=\"string\">\"作业\"</span>,<span class=\"string\">\"&lt;/b&gt;&lt;/font&gt;\"</span>)) <span class=\"keyword\">as</span> title,</span><br><span class=\"line\"><span class=\"keyword\">replace</span>(summary,<span class=\"string\">\"作业\"</span>,<span class=\"keyword\">concat</span>(<span class=\"string\">\"&lt;font color='red'&gt;&lt;b&gt;\"</span>,<span class=\"string\">\"作业\"</span>,<span class=\"string\">\"&lt;/b&gt;&lt;/font&gt;\"</span>)) <span class=\"keyword\">as</span> summary,</span><br><span class=\"line\">gmt_create,...</span><br><span class=\"line\"><span class=\"keyword\">from</span> article</span><br><span class=\"line\"><span class=\"keyword\">where</span> is_public = <span class=\"number\">1</span> <span class=\"keyword\">and</span> (title <span class=\"keyword\">like</span> <span class=\"string\">\"%作业%\"</span> <span class=\"keyword\">or</span> summary <span class=\"keyword\">like</span> <span class=\"string\">\"%作业%\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> gmt_create <span class=\"keyword\">desc</span></span><br><span class=\"line\"><span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>当然，使用全模糊查询，然后通过替换关键字的方式实现检索结果高亮显示，从而实现全文检索，这种方法效率肯定不高。《阿里巴巴Java开发手册》中也明确禁止使用全模糊或左模糊查询，因为全模糊或者左模糊查询无法使用索引。</p>"},{"title":"SQL中的各种join","date":"2018-09-14T06:05:08.000Z","_content":"\nSQL中的连接操作很多，这里总结一下。\n\n<!--more-->\n\n假设有以下两张表\n\n教师表teacher\n\n| teacher_id | teacher_name |\n| :--------: | :----------: |\n|     1      |     刘娟     |\n|     2      |    朱卫平    |\n|     3      |     刘婧     |\n|     4      |    李春葆    |\n\n课程表\n\n| course_id |    course_name     | teacher_id |\n| :-------: | :----------------: | :--------: |\n|     1     |      商务智能      |     2      |\n|     2     | 高级算法分析与设计 |     1      |\n|     3     |   程序设计方法学   |     3      |\n|     4     |      模式识别      |     2      |\n\nsql如下：\n\n```sql\ncreate table teacher (\n    teacher_id int,\n    teacher_name varchar(32),\n    primary key(teacher_id)\n);\ninsert into teacher(teacher_id,teacher_name) values (1,'刘娟');\ninsert into teacher(teacher_id,teacher_name) values (2,'朱卫平');\ninsert into teacher(teacher_id,teacher_name) values (3,'刘婧');\ninsert into teacher(teacher_id,teacher_name) values (4,'李春葆');\ncreate table course(\n    course_id int,\n    course_name varchar(32),\n    teacher_id int,\n    primary key(course_id),\n    foreign key(teacher_id) references teacher(teacher_id)\n);\ninsert into course(course_id,course_name,teacher_id) values (1,'商务智能',2);\ninsert into course(course_id,course_name,teacher_id) values (2,'高级算法分析与设计',1);\ninsert into course(course_id,course_name,teacher_id) values (3,'程序设计方法学',3);\ninsert into course(course_id,course_name,teacher_id) values (4,'模式识别',2);\n```\n\n### cross join\n\n笛卡尔积(cross join)。\n\n### inner join\n\n等值连接（inner join或join）:返回两张表中相互匹配的行。\n\n语法：\n\n```sql\nselect 列名,...\nfrom table1\n[inner] join table2\non table1.column_name = table2.column_name;\n```\n\n其中的inner是可省略的。\n\n示例：\n\n```sql\nselect course.*,teacher.teacher_name from course\ninner join teacher\non course.teacher_id = teacher.teacher_id;\n```\n\n输出：\n\n### natural join\n\n自然连接(natural join)：在inner join的基础上，去除重复的列名。\n\n### left join\n\n左外连接(left outer join)：返回左表中的所有行及右表中满足on条件的行，如果右表没有匹配的行，对应列填充NULL。\n\n其中outer是可省略的，即可写为left join。\n\n示例：\n\n查询所有的教师信息，即使他尚未被安排课程\n\n```sql\nselect course.*,teacher.teacher_name from teacher\nleft outer join course\non course.teacher_id = teacher.teacher_id;\n```\n\n输出：\n\n### right join\n\n右外连接(right outer join)：返回右表有行和左表中满足on条件的行，如果左表没有匹配的行，对应列填充NULL。\n\n其中outer是可省略的，即可写为right join。\n\n示例：\n\n查询所有的教师信息，即使他尚未被安排课程\n\n```sql\nselect * from course\nright outer join teacher\non course.teacher_id = teacher.teacher_id;\n```\n\n输出：\n\n### full join\n\n全外连接(full outer join或full join)：返回左表和右表中的所有行。若某一张表中的行在另一张表中没有匹配的行，对应列填充NULL。\n\n```sql\nselect * from course\nfull outer join teacher\non course.teacher_id = teacher.teacher_id;\n```\n\n**注意：**MySQL不支持full outer join，可以使用左连接和右连接的并来实现。\n\n```sql\nselect * from course\nleft join teacher\non course.teacher_id = teacher.teacher_id\nunion \nselect * from course\nright join teacher\non course.teacher_id = teacher.teacher_id;\n```\n\n\n\n\n\n\n\n","source":"_posts/sql-join.md","raw":"---\ntitle: SQL中的各种join\ndate: 2018-09-14 14:05:08\ntags: sql\ncategories: sql\n---\n\nSQL中的连接操作很多，这里总结一下。\n\n<!--more-->\n\n假设有以下两张表\n\n教师表teacher\n\n| teacher_id | teacher_name |\n| :--------: | :----------: |\n|     1      |     刘娟     |\n|     2      |    朱卫平    |\n|     3      |     刘婧     |\n|     4      |    李春葆    |\n\n课程表\n\n| course_id |    course_name     | teacher_id |\n| :-------: | :----------------: | :--------: |\n|     1     |      商务智能      |     2      |\n|     2     | 高级算法分析与设计 |     1      |\n|     3     |   程序设计方法学   |     3      |\n|     4     |      模式识别      |     2      |\n\nsql如下：\n\n```sql\ncreate table teacher (\n    teacher_id int,\n    teacher_name varchar(32),\n    primary key(teacher_id)\n);\ninsert into teacher(teacher_id,teacher_name) values (1,'刘娟');\ninsert into teacher(teacher_id,teacher_name) values (2,'朱卫平');\ninsert into teacher(teacher_id,teacher_name) values (3,'刘婧');\ninsert into teacher(teacher_id,teacher_name) values (4,'李春葆');\ncreate table course(\n    course_id int,\n    course_name varchar(32),\n    teacher_id int,\n    primary key(course_id),\n    foreign key(teacher_id) references teacher(teacher_id)\n);\ninsert into course(course_id,course_name,teacher_id) values (1,'商务智能',2);\ninsert into course(course_id,course_name,teacher_id) values (2,'高级算法分析与设计',1);\ninsert into course(course_id,course_name,teacher_id) values (3,'程序设计方法学',3);\ninsert into course(course_id,course_name,teacher_id) values (4,'模式识别',2);\n```\n\n### cross join\n\n笛卡尔积(cross join)。\n\n### inner join\n\n等值连接（inner join或join）:返回两张表中相互匹配的行。\n\n语法：\n\n```sql\nselect 列名,...\nfrom table1\n[inner] join table2\non table1.column_name = table2.column_name;\n```\n\n其中的inner是可省略的。\n\n示例：\n\n```sql\nselect course.*,teacher.teacher_name from course\ninner join teacher\non course.teacher_id = teacher.teacher_id;\n```\n\n输出：\n\n### natural join\n\n自然连接(natural join)：在inner join的基础上，去除重复的列名。\n\n### left join\n\n左外连接(left outer join)：返回左表中的所有行及右表中满足on条件的行，如果右表没有匹配的行，对应列填充NULL。\n\n其中outer是可省略的，即可写为left join。\n\n示例：\n\n查询所有的教师信息，即使他尚未被安排课程\n\n```sql\nselect course.*,teacher.teacher_name from teacher\nleft outer join course\non course.teacher_id = teacher.teacher_id;\n```\n\n输出：\n\n### right join\n\n右外连接(right outer join)：返回右表有行和左表中满足on条件的行，如果左表没有匹配的行，对应列填充NULL。\n\n其中outer是可省略的，即可写为right join。\n\n示例：\n\n查询所有的教师信息，即使他尚未被安排课程\n\n```sql\nselect * from course\nright outer join teacher\non course.teacher_id = teacher.teacher_id;\n```\n\n输出：\n\n### full join\n\n全外连接(full outer join或full join)：返回左表和右表中的所有行。若某一张表中的行在另一张表中没有匹配的行，对应列填充NULL。\n\n```sql\nselect * from course\nfull outer join teacher\non course.teacher_id = teacher.teacher_id;\n```\n\n**注意：**MySQL不支持full outer join，可以使用左连接和右连接的并来实现。\n\n```sql\nselect * from course\nleft join teacher\non course.teacher_id = teacher.teacher_id\nunion \nselect * from course\nright join teacher\non course.teacher_id = teacher.teacher_id;\n```\n\n\n\n\n\n\n\n","slug":"sql-join","published":1,"updated":"2019-01-19T07:23:57.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9as90076j1q0ul39k5rd","content":"<p>SQL中的连接操作很多，这里总结一下。</p>\n<a id=\"more\"></a>\n<p>假设有以下两张表</p>\n<p>教师表teacher</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">teacher_id</th>\n<th style=\"text-align:center\">teacher_name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">刘娟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">朱卫平</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">刘婧</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">李春葆</td>\n</tr>\n</tbody>\n</table>\n<p>课程表</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">course_id</th>\n<th style=\"text-align:center\">course_name</th>\n<th style=\"text-align:center\">teacher_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">商务智能</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">高级算法分析与设计</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">程序设计方法学</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">模式识别</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n</tbody>\n</table>\n<p>sql如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> teacher (</span><br><span class=\"line\">    teacher_id <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    teacher_name <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(teacher_id)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> teacher(teacher_id,teacher_name) <span class=\"keyword\">values</span> (<span class=\"number\">1</span>,<span class=\"string\">'刘娟'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> teacher(teacher_id,teacher_name) <span class=\"keyword\">values</span> (<span class=\"number\">2</span>,<span class=\"string\">'朱卫平'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> teacher(teacher_id,teacher_name) <span class=\"keyword\">values</span> (<span class=\"number\">3</span>,<span class=\"string\">'刘婧'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> teacher(teacher_id,teacher_name) <span class=\"keyword\">values</span> (<span class=\"number\">4</span>,<span class=\"string\">'李春葆'</span>);</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> course(</span><br><span class=\"line\">    course_id <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    course_name <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    teacher_id <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(course_id),</span><br><span class=\"line\">    foreign <span class=\"keyword\">key</span>(teacher_id) <span class=\"keyword\">references</span> teacher(teacher_id)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> course(course_id,course_name,teacher_id) <span class=\"keyword\">values</span> (<span class=\"number\">1</span>,<span class=\"string\">'商务智能'</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> course(course_id,course_name,teacher_id) <span class=\"keyword\">values</span> (<span class=\"number\">2</span>,<span class=\"string\">'高级算法分析与设计'</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> course(course_id,course_name,teacher_id) <span class=\"keyword\">values</span> (<span class=\"number\">3</span>,<span class=\"string\">'程序设计方法学'</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> course(course_id,course_name,teacher_id) <span class=\"keyword\">values</span> (<span class=\"number\">4</span>,<span class=\"string\">'模式识别'</span>,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"cross-join\"><a href=\"#cross-join\" class=\"headerlink\" title=\"cross join\"></a>cross join</h3><p>笛卡尔积(cross join)。</p>\n<h3 id=\"inner-join\"><a href=\"#inner-join\" class=\"headerlink\" title=\"inner join\"></a>inner join</h3><p>等值连接（inner join或join）:返回两张表中相互匹配的行。</p>\n<p>语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> 列名,...</span><br><span class=\"line\"><span class=\"keyword\">from</span> table1</span><br><span class=\"line\">[<span class=\"keyword\">inner</span>] <span class=\"keyword\">join</span> table2</span><br><span class=\"line\"><span class=\"keyword\">on</span> table1.column_name = table2.column_name;</span><br></pre></td></tr></table></figure>\n<p>其中的inner是可省略的。</p>\n<p>示例：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> course.*,teacher.teacher_name <span class=\"keyword\">from</span> course</span><br><span class=\"line\"><span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> teacher</span><br><span class=\"line\"><span class=\"keyword\">on</span> course.teacher_id = teacher.teacher_id;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<h3 id=\"natural-join\"><a href=\"#natural-join\" class=\"headerlink\" title=\"natural join\"></a>natural join</h3><p>自然连接(natural join)：在inner join的基础上，去除重复的列名。</p>\n<h3 id=\"left-join\"><a href=\"#left-join\" class=\"headerlink\" title=\"left join\"></a>left join</h3><p>左外连接(left outer join)：返回左表中的所有行及右表中满足on条件的行，如果右表没有匹配的行，对应列填充NULL。</p>\n<p>其中outer是可省略的，即可写为left join。</p>\n<p>示例：</p>\n<p>查询所有的教师信息，即使他尚未被安排课程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> course.*,teacher.teacher_name <span class=\"keyword\">from</span> teacher</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">outer</span> <span class=\"keyword\">join</span> course</span><br><span class=\"line\"><span class=\"keyword\">on</span> course.teacher_id = teacher.teacher_id;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<h3 id=\"right-join\"><a href=\"#right-join\" class=\"headerlink\" title=\"right join\"></a>right join</h3><p>右外连接(right outer join)：返回右表有行和左表中满足on条件的行，如果左表没有匹配的行，对应列填充NULL。</p>\n<p>其中outer是可省略的，即可写为right join。</p>\n<p>示例：</p>\n<p>查询所有的教师信息，即使他尚未被安排课程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> course</span><br><span class=\"line\"><span class=\"keyword\">right</span> <span class=\"keyword\">outer</span> <span class=\"keyword\">join</span> teacher</span><br><span class=\"line\"><span class=\"keyword\">on</span> course.teacher_id = teacher.teacher_id;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<h3 id=\"full-join\"><a href=\"#full-join\" class=\"headerlink\" title=\"full join\"></a>full join</h3><p>全外连接(full outer join或full join)：返回左表和右表中的所有行。若某一张表中的行在另一张表中没有匹配的行，对应列填充NULL。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> course</span><br><span class=\"line\"><span class=\"keyword\">full</span> <span class=\"keyword\">outer</span> <span class=\"keyword\">join</span> teacher</span><br><span class=\"line\"><span class=\"keyword\">on</span> course.teacher_id = teacher.teacher_id;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>MySQL不支持full outer join，可以使用左连接和右连接的并来实现。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> course</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> teacher</span><br><span class=\"line\"><span class=\"keyword\">on</span> course.teacher_id = teacher.teacher_id</span><br><span class=\"line\"><span class=\"keyword\">union</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> course</span><br><span class=\"line\"><span class=\"keyword\">right</span> <span class=\"keyword\">join</span> teacher</span><br><span class=\"line\"><span class=\"keyword\">on</span> course.teacher_id = teacher.teacher_id;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>SQL中的连接操作很多，这里总结一下。</p>","more":"<p>假设有以下两张表</p>\n<p>教师表teacher</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">teacher_id</th>\n<th style=\"text-align:center\">teacher_name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">刘娟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">朱卫平</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">刘婧</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">李春葆</td>\n</tr>\n</tbody>\n</table>\n<p>课程表</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">course_id</th>\n<th style=\"text-align:center\">course_name</th>\n<th style=\"text-align:center\">teacher_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">商务智能</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">高级算法分析与设计</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">程序设计方法学</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">模式识别</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n</tbody>\n</table>\n<p>sql如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> teacher (</span><br><span class=\"line\">    teacher_id <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    teacher_name <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(teacher_id)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> teacher(teacher_id,teacher_name) <span class=\"keyword\">values</span> (<span class=\"number\">1</span>,<span class=\"string\">'刘娟'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> teacher(teacher_id,teacher_name) <span class=\"keyword\">values</span> (<span class=\"number\">2</span>,<span class=\"string\">'朱卫平'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> teacher(teacher_id,teacher_name) <span class=\"keyword\">values</span> (<span class=\"number\">3</span>,<span class=\"string\">'刘婧'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> teacher(teacher_id,teacher_name) <span class=\"keyword\">values</span> (<span class=\"number\">4</span>,<span class=\"string\">'李春葆'</span>);</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> course(</span><br><span class=\"line\">    course_id <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    course_name <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    teacher_id <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(course_id),</span><br><span class=\"line\">    foreign <span class=\"keyword\">key</span>(teacher_id) <span class=\"keyword\">references</span> teacher(teacher_id)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> course(course_id,course_name,teacher_id) <span class=\"keyword\">values</span> (<span class=\"number\">1</span>,<span class=\"string\">'商务智能'</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> course(course_id,course_name,teacher_id) <span class=\"keyword\">values</span> (<span class=\"number\">2</span>,<span class=\"string\">'高级算法分析与设计'</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> course(course_id,course_name,teacher_id) <span class=\"keyword\">values</span> (<span class=\"number\">3</span>,<span class=\"string\">'程序设计方法学'</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> course(course_id,course_name,teacher_id) <span class=\"keyword\">values</span> (<span class=\"number\">4</span>,<span class=\"string\">'模式识别'</span>,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"cross-join\"><a href=\"#cross-join\" class=\"headerlink\" title=\"cross join\"></a>cross join</h3><p>笛卡尔积(cross join)。</p>\n<h3 id=\"inner-join\"><a href=\"#inner-join\" class=\"headerlink\" title=\"inner join\"></a>inner join</h3><p>等值连接（inner join或join）:返回两张表中相互匹配的行。</p>\n<p>语法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> 列名,...</span><br><span class=\"line\"><span class=\"keyword\">from</span> table1</span><br><span class=\"line\">[<span class=\"keyword\">inner</span>] <span class=\"keyword\">join</span> table2</span><br><span class=\"line\"><span class=\"keyword\">on</span> table1.column_name = table2.column_name;</span><br></pre></td></tr></table></figure>\n<p>其中的inner是可省略的。</p>\n<p>示例：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> course.*,teacher.teacher_name <span class=\"keyword\">from</span> course</span><br><span class=\"line\"><span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> teacher</span><br><span class=\"line\"><span class=\"keyword\">on</span> course.teacher_id = teacher.teacher_id;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<h3 id=\"natural-join\"><a href=\"#natural-join\" class=\"headerlink\" title=\"natural join\"></a>natural join</h3><p>自然连接(natural join)：在inner join的基础上，去除重复的列名。</p>\n<h3 id=\"left-join\"><a href=\"#left-join\" class=\"headerlink\" title=\"left join\"></a>left join</h3><p>左外连接(left outer join)：返回左表中的所有行及右表中满足on条件的行，如果右表没有匹配的行，对应列填充NULL。</p>\n<p>其中outer是可省略的，即可写为left join。</p>\n<p>示例：</p>\n<p>查询所有的教师信息，即使他尚未被安排课程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> course.*,teacher.teacher_name <span class=\"keyword\">from</span> teacher</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">outer</span> <span class=\"keyword\">join</span> course</span><br><span class=\"line\"><span class=\"keyword\">on</span> course.teacher_id = teacher.teacher_id;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<h3 id=\"right-join\"><a href=\"#right-join\" class=\"headerlink\" title=\"right join\"></a>right join</h3><p>右外连接(right outer join)：返回右表有行和左表中满足on条件的行，如果左表没有匹配的行，对应列填充NULL。</p>\n<p>其中outer是可省略的，即可写为right join。</p>\n<p>示例：</p>\n<p>查询所有的教师信息，即使他尚未被安排课程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> course</span><br><span class=\"line\"><span class=\"keyword\">right</span> <span class=\"keyword\">outer</span> <span class=\"keyword\">join</span> teacher</span><br><span class=\"line\"><span class=\"keyword\">on</span> course.teacher_id = teacher.teacher_id;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<h3 id=\"full-join\"><a href=\"#full-join\" class=\"headerlink\" title=\"full join\"></a>full join</h3><p>全外连接(full outer join或full join)：返回左表和右表中的所有行。若某一张表中的行在另一张表中没有匹配的行，对应列填充NULL。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> course</span><br><span class=\"line\"><span class=\"keyword\">full</span> <span class=\"keyword\">outer</span> <span class=\"keyword\">join</span> teacher</span><br><span class=\"line\"><span class=\"keyword\">on</span> course.teacher_id = teacher.teacher_id;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>MySQL不支持full outer join，可以使用左连接和右连接的并来实现。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> course</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> teacher</span><br><span class=\"line\"><span class=\"keyword\">on</span> course.teacher_id = teacher.teacher_id</span><br><span class=\"line\"><span class=\"keyword\">union</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> course</span><br><span class=\"line\"><span class=\"keyword\">right</span> <span class=\"keyword\">join</span> teacher</span><br><span class=\"line\"><span class=\"keyword\">on</span> course.teacher_id = teacher.teacher_id;</span><br></pre></td></tr></table></figure>"},{"title":"SQL中的字符匹配（like）","date":"2018-09-19T12:21:39.000Z","_content":"\nlike可以用于字符串的匹配，其一般语法如下：\n\n```sql\n[not] like '<匹配串>' [escape '<换码字符>']\n```\n\n其含义是查找指定的属性列值与<匹配串>相匹配的元组。<匹配串>可以是一个完整的字符串，也可以含有通配符 % 和 _ 。\n\n* %：匹配任意长度(长度可以为0)的字符串\n* _：匹配任意单个字符(一个汉字占两个字符)\n\n<!--more-->\n\n示例：\n\n1.查询所有姓刘的学生的姓名、学号和性别。\n\n```sql\nselect sname,sno,sex\nfrom student\nwhere sname like '刘%';\n```\n\n2.查询所有姓“贺”且全名为两个汉字的学生的姓名\n\n```sql\nselect sname\nfrom student\nwhere sname like '贺__';\n```\n\n**由于一个汉字占两个字符，所以贺字后需要跟两个_**\n\n3.查询名字中第二个字为“扬”字的学生姓名和学号\n\n```sql\nselect sname,sno\nfrom student\nwhere sname like '__扬%';\n```\n\n４.查询名字中包含\"山\"的学生姓名\n\n```sql\nselect sname\nfrom student\nwhere sname like '%山%';\n```\n\n５.查询所有不姓刘的学生姓名\n\n```sql\nselect sname\nfrom student\nwhere sname not like '刘%'\n```\n\n**如果需要查询的匹配字符串本身就含有%和_，可以使用escape '<换码字符>'对通配符进行转义。**\n\n示例：\n\n6.查询Algorithms_Design课程的课程号和学分\n\n```sql\nselect cno,credit\nfrom course\nwhere cname like 'Algorithms\\_Design' escape '\\';\n```\n\n7.查询课程名以“算法_”开头，且倒数第二个汉字为“设”的课程详情。\n\n```sql\nselect *\nfrom course\nwhere cname like '算法\\_%设__' escape '\\';\n```\n\n**注意：**换码字符是可以变化的，一般取不常用的符号。若匹配串中本身含有 \" \\ \"，则换码字符可取 “ ? ”等。","source":"_posts/sql-like.md","raw":"---\ntitle: SQL中的字符匹配（like）\ndate: 2018-09-19 20:21:39\ntags: sql\ncategories: sql\n---\n\nlike可以用于字符串的匹配，其一般语法如下：\n\n```sql\n[not] like '<匹配串>' [escape '<换码字符>']\n```\n\n其含义是查找指定的属性列值与<匹配串>相匹配的元组。<匹配串>可以是一个完整的字符串，也可以含有通配符 % 和 _ 。\n\n* %：匹配任意长度(长度可以为0)的字符串\n* _：匹配任意单个字符(一个汉字占两个字符)\n\n<!--more-->\n\n示例：\n\n1.查询所有姓刘的学生的姓名、学号和性别。\n\n```sql\nselect sname,sno,sex\nfrom student\nwhere sname like '刘%';\n```\n\n2.查询所有姓“贺”且全名为两个汉字的学生的姓名\n\n```sql\nselect sname\nfrom student\nwhere sname like '贺__';\n```\n\n**由于一个汉字占两个字符，所以贺字后需要跟两个_**\n\n3.查询名字中第二个字为“扬”字的学生姓名和学号\n\n```sql\nselect sname,sno\nfrom student\nwhere sname like '__扬%';\n```\n\n４.查询名字中包含\"山\"的学生姓名\n\n```sql\nselect sname\nfrom student\nwhere sname like '%山%';\n```\n\n５.查询所有不姓刘的学生姓名\n\n```sql\nselect sname\nfrom student\nwhere sname not like '刘%'\n```\n\n**如果需要查询的匹配字符串本身就含有%和_，可以使用escape '<换码字符>'对通配符进行转义。**\n\n示例：\n\n6.查询Algorithms_Design课程的课程号和学分\n\n```sql\nselect cno,credit\nfrom course\nwhere cname like 'Algorithms\\_Design' escape '\\';\n```\n\n7.查询课程名以“算法_”开头，且倒数第二个汉字为“设”的课程详情。\n\n```sql\nselect *\nfrom course\nwhere cname like '算法\\_%设__' escape '\\';\n```\n\n**注意：**换码字符是可以变化的，一般取不常用的符号。若匹配串中本身含有 \" \\ \"，则换码字符可取 “ ? ”等。","slug":"sql-like","published":1,"updated":"2019-01-19T07:23:57.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9asb007bj1q0g46kbjz1","content":"<p>like可以用于字符串的匹配，其一般语法如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[not] like '&lt;匹配串&gt;' [escape '&lt;换码字符&gt;']</span><br></pre></td></tr></table></figure>\n<p>其含义是查找指定的属性列值与&lt;匹配串&gt;相匹配的元组。&lt;匹配串&gt;可以是一个完整的字符串，也可以含有通配符 % 和 _ 。</p>\n<ul>\n<li>%：匹配任意长度(长度可以为0)的字符串</li>\n<li>_：匹配任意单个字符(一个汉字占两个字符)</li>\n</ul>\n<a id=\"more\"></a>\n<p>示例：</p>\n<p>1.查询所有姓刘的学生的姓名、学号和性别。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sname,sno,sex</span><br><span class=\"line\"><span class=\"keyword\">from</span> student</span><br><span class=\"line\"><span class=\"keyword\">where</span> sname <span class=\"keyword\">like</span> <span class=\"string\">'刘%'</span>;</span><br></pre></td></tr></table></figure>\n<p>2.查询所有姓“贺”且全名为两个汉字的学生的姓名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sname</span><br><span class=\"line\"><span class=\"keyword\">from</span> student</span><br><span class=\"line\"><span class=\"keyword\">where</span> sname <span class=\"keyword\">like</span> <span class=\"string\">'贺__'</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>由于一个汉字占两个字符，所以贺字后需要跟两个_</strong></p>\n<p>3.查询名字中第二个字为“扬”字的学生姓名和学号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sname,sno</span><br><span class=\"line\"><span class=\"keyword\">from</span> student</span><br><span class=\"line\"><span class=\"keyword\">where</span> sname <span class=\"keyword\">like</span> <span class=\"string\">'__扬%'</span>;</span><br></pre></td></tr></table></figure>\n<p>４.查询名字中包含”山”的学生姓名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sname</span><br><span class=\"line\"><span class=\"keyword\">from</span> student</span><br><span class=\"line\"><span class=\"keyword\">where</span> sname <span class=\"keyword\">like</span> <span class=\"string\">'%山%'</span>;</span><br></pre></td></tr></table></figure>\n<p>５.查询所有不姓刘的学生姓名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sname</span><br><span class=\"line\"><span class=\"keyword\">from</span> student</span><br><span class=\"line\"><span class=\"keyword\">where</span> sname <span class=\"keyword\">not</span> <span class=\"keyword\">like</span> <span class=\"string\">'刘%'</span></span><br></pre></td></tr></table></figure>\n<p><strong>如果需要查询的匹配字符串本身就含有%和_，可以使用escape ‘&lt;换码字符&gt;’对通配符进行转义。</strong></p>\n<p>示例：</p>\n<p>6.查询Algorithms_Design课程的课程号和学分</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> cno,credit</span><br><span class=\"line\"><span class=\"keyword\">from</span> course</span><br><span class=\"line\"><span class=\"keyword\">where</span> cname <span class=\"keyword\">like</span> <span class=\"string\">'Algorithms\\_Design'</span> escape <span class=\"string\">'\\';</span></span><br></pre></td></tr></table></figure>\n<p>7.查询课程名以“算法_”开头，且倒数第二个汉字为“设”的课程详情。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> course</span><br><span class=\"line\"><span class=\"keyword\">where</span> cname <span class=\"keyword\">like</span> <span class=\"string\">'算法\\_%设__'</span> escape <span class=\"string\">'\\';</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>换码字符是可以变化的，一般取不常用的符号。若匹配串中本身含有 “ \\ “，则换码字符可取 “ ? ”等。</p>\n","site":{"data":{}},"excerpt":"<p>like可以用于字符串的匹配，其一般语法如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[not] like '&lt;匹配串&gt;' [escape '&lt;换码字符&gt;']</span><br></pre></td></tr></table></figure>\n<p>其含义是查找指定的属性列值与&lt;匹配串&gt;相匹配的元组。&lt;匹配串&gt;可以是一个完整的字符串，也可以含有通配符 % 和 _ 。</p>\n<ul>\n<li>%：匹配任意长度(长度可以为0)的字符串</li>\n<li>_：匹配任意单个字符(一个汉字占两个字符)</li>\n</ul>","more":"<p>示例：</p>\n<p>1.查询所有姓刘的学生的姓名、学号和性别。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sname,sno,sex</span><br><span class=\"line\"><span class=\"keyword\">from</span> student</span><br><span class=\"line\"><span class=\"keyword\">where</span> sname <span class=\"keyword\">like</span> <span class=\"string\">'刘%'</span>;</span><br></pre></td></tr></table></figure>\n<p>2.查询所有姓“贺”且全名为两个汉字的学生的姓名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sname</span><br><span class=\"line\"><span class=\"keyword\">from</span> student</span><br><span class=\"line\"><span class=\"keyword\">where</span> sname <span class=\"keyword\">like</span> <span class=\"string\">'贺__'</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>由于一个汉字占两个字符，所以贺字后需要跟两个_</strong></p>\n<p>3.查询名字中第二个字为“扬”字的学生姓名和学号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sname,sno</span><br><span class=\"line\"><span class=\"keyword\">from</span> student</span><br><span class=\"line\"><span class=\"keyword\">where</span> sname <span class=\"keyword\">like</span> <span class=\"string\">'__扬%'</span>;</span><br></pre></td></tr></table></figure>\n<p>４.查询名字中包含”山”的学生姓名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sname</span><br><span class=\"line\"><span class=\"keyword\">from</span> student</span><br><span class=\"line\"><span class=\"keyword\">where</span> sname <span class=\"keyword\">like</span> <span class=\"string\">'%山%'</span>;</span><br></pre></td></tr></table></figure>\n<p>５.查询所有不姓刘的学生姓名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sname</span><br><span class=\"line\"><span class=\"keyword\">from</span> student</span><br><span class=\"line\"><span class=\"keyword\">where</span> sname <span class=\"keyword\">not</span> <span class=\"keyword\">like</span> <span class=\"string\">'刘%'</span></span><br></pre></td></tr></table></figure>\n<p><strong>如果需要查询的匹配字符串本身就含有%和_，可以使用escape ‘&lt;换码字符&gt;’对通配符进行转义。</strong></p>\n<p>示例：</p>\n<p>6.查询Algorithms_Design课程的课程号和学分</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> cno,credit</span><br><span class=\"line\"><span class=\"keyword\">from</span> course</span><br><span class=\"line\"><span class=\"keyword\">where</span> cname <span class=\"keyword\">like</span> <span class=\"string\">'Algorithms\\_Design'</span> escape <span class=\"string\">'\\';</span></span><br></pre></td></tr></table></figure>\n<p>7.查询课程名以“算法_”开头，且倒数第二个汉字为“设”的课程详情。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> course</span><br><span class=\"line\"><span class=\"keyword\">where</span> cname <span class=\"keyword\">like</span> <span class=\"string\">'算法\\_%设__'</span> escape <span class=\"string\">'\\';</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>换码字符是可以变化的，一般取不常用的符号。若匹配串中本身含有 “ \\ “，则换码字符可取 “ ? ”等。</p>"},{"title":"SQL中的空值处理(null)","date":"2018-09-19T14:01:39.000Z","_content":"\nSQL中的空值处理主要分为以下两种情况：\n\n1.涉及空值的条件判断；2.涉及空值的更新操作。\n\n<!--more-->\n\n### 涉及空值的条件判断\n\n**where子句中**不能使用 = null 来进行空值判断，**必须使用 is null 和 is not null **。\n\n示例：\n\n某些学生选修某门课程后没有参加考试，所以有选课记录，但没有考试成绩。\n\n* 试查询缺少成绩的学生的学号和相应的课程号。\n\n```sql\nselect sno,cno\nfrom sc\nwhere grade is null;\n```\n\n**注意，\" grade is null \"不能写为“ grade = null”。**\n\n* 查所有有成绩记录的学生的学号和相应的课程号。\n\n```sql\nselect sno,cno\nfrom sc\nwhere grade is not null;\n```\n\n### 涉及空值的更新操作\n\n**在update语句的set中，使用 = null  设置某列为空。**\n\n* 将选修“高级算法分析与设计”课不及格的学生成绩设置为空值。\n\n```sql\nupdate sc\nset grade = null\nwhere grade < 60 and cno in (\n\tselect cno \n    from course\n    where cname = \"高级算法分析与设计\"\n);\n```\n\n","source":"_posts/sql-null-value.md","raw":"---\ntitle: SQL中的空值处理(null)\ndate: 2018-09-19 22:01:39\ntags: sql\ncategories: sql\n---\n\nSQL中的空值处理主要分为以下两种情况：\n\n1.涉及空值的条件判断；2.涉及空值的更新操作。\n\n<!--more-->\n\n### 涉及空值的条件判断\n\n**where子句中**不能使用 = null 来进行空值判断，**必须使用 is null 和 is not null **。\n\n示例：\n\n某些学生选修某门课程后没有参加考试，所以有选课记录，但没有考试成绩。\n\n* 试查询缺少成绩的学生的学号和相应的课程号。\n\n```sql\nselect sno,cno\nfrom sc\nwhere grade is null;\n```\n\n**注意，\" grade is null \"不能写为“ grade = null”。**\n\n* 查所有有成绩记录的学生的学号和相应的课程号。\n\n```sql\nselect sno,cno\nfrom sc\nwhere grade is not null;\n```\n\n### 涉及空值的更新操作\n\n**在update语句的set中，使用 = null  设置某列为空。**\n\n* 将选修“高级算法分析与设计”课不及格的学生成绩设置为空值。\n\n```sql\nupdate sc\nset grade = null\nwhere grade < 60 and cno in (\n\tselect cno \n    from course\n    where cname = \"高级算法分析与设计\"\n);\n```\n\n","slug":"sql-null-value","published":1,"updated":"2019-01-19T07:23:57.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9asc007dj1q0zzyprnzb","content":"<p>SQL中的空值处理主要分为以下两种情况：</p>\n<p>1.涉及空值的条件判断；2.涉及空值的更新操作。</p>\n<a id=\"more\"></a>\n<h3 id=\"涉及空值的条件判断\"><a href=\"#涉及空值的条件判断\" class=\"headerlink\" title=\"涉及空值的条件判断\"></a>涉及空值的条件判断</h3><p><strong>where子句中</strong>不能使用 = null 来进行空值判断，<strong>必须使用 is null 和 is not null </strong>。</p>\n<p>示例：</p>\n<p>某些学生选修某门课程后没有参加考试，所以有选课记录，但没有考试成绩。</p>\n<ul>\n<li>试查询缺少成绩的学生的学号和相应的课程号。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sno,cno</span><br><span class=\"line\"><span class=\"keyword\">from</span> sc</span><br><span class=\"line\"><span class=\"keyword\">where</span> grade <span class=\"keyword\">is</span> <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>注意，” grade is null “不能写为“ grade = null”。</strong></p>\n<ul>\n<li>查所有有成绩记录的学生的学号和相应的课程号。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sno,cno</span><br><span class=\"line\"><span class=\"keyword\">from</span> sc</span><br><span class=\"line\"><span class=\"keyword\">where</span> grade <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"涉及空值的更新操作\"><a href=\"#涉及空值的更新操作\" class=\"headerlink\" title=\"涉及空值的更新操作\"></a>涉及空值的更新操作</h3><p><strong>在update语句的set中，使用 = null  设置某列为空。</strong></p>\n<ul>\n<li>将选修“高级算法分析与设计”课不及格的学生成绩设置为空值。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> sc</span><br><span class=\"line\"><span class=\"keyword\">set</span> grade = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> grade &lt; <span class=\"number\">60</span> <span class=\"keyword\">and</span> cno <span class=\"keyword\">in</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> cno </span><br><span class=\"line\">    <span class=\"keyword\">from</span> course</span><br><span class=\"line\">    <span class=\"keyword\">where</span> cname = <span class=\"string\">\"高级算法分析与设计\"</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>SQL中的空值处理主要分为以下两种情况：</p>\n<p>1.涉及空值的条件判断；2.涉及空值的更新操作。</p>","more":"<h3 id=\"涉及空值的条件判断\"><a href=\"#涉及空值的条件判断\" class=\"headerlink\" title=\"涉及空值的条件判断\"></a>涉及空值的条件判断</h3><p><strong>where子句中</strong>不能使用 = null 来进行空值判断，<strong>必须使用 is null 和 is not null </strong>。</p>\n<p>示例：</p>\n<p>某些学生选修某门课程后没有参加考试，所以有选课记录，但没有考试成绩。</p>\n<ul>\n<li>试查询缺少成绩的学生的学号和相应的课程号。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sno,cno</span><br><span class=\"line\"><span class=\"keyword\">from</span> sc</span><br><span class=\"line\"><span class=\"keyword\">where</span> grade <span class=\"keyword\">is</span> <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>注意，” grade is null “不能写为“ grade = null”。</strong></p>\n<ul>\n<li>查所有有成绩记录的学生的学号和相应的课程号。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> sno,cno</span><br><span class=\"line\"><span class=\"keyword\">from</span> sc</span><br><span class=\"line\"><span class=\"keyword\">where</span> grade <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"涉及空值的更新操作\"><a href=\"#涉及空值的更新操作\" class=\"headerlink\" title=\"涉及空值的更新操作\"></a>涉及空值的更新操作</h3><p><strong>在update语句的set中，使用 = null  设置某列为空。</strong></p>\n<ul>\n<li>将选修“高级算法分析与设计”课不及格的学生成绩设置为空值。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> sc</span><br><span class=\"line\"><span class=\"keyword\">set</span> grade = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> grade &lt; <span class=\"number\">60</span> <span class=\"keyword\">and</span> cno <span class=\"keyword\">in</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> cno </span><br><span class=\"line\">    <span class=\"keyword\">from</span> course</span><br><span class=\"line\">    <span class=\"keyword\">where</span> cname = <span class=\"string\">\"高级算法分析与设计\"</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>"},{"title":"SQL","date":"2018-09-08T11:27:36.000Z","_content":"\n结构化查询语言（structured query language, 简称SQL）分为四类：\n\n数据定义语句（Data Definition Language，简称DDL）、数据查询语句（Data Query Language，简称DQL）、数据更新语句（Data Manipulation Language，简称DML）以及数据控制语句。\n\n<!--more-->\n\n### DDL\n\n* 表的创建\n\n```sql\ncreate table 表名 (\n\t列名 数据类型 列级完整性约束,\n\t...[,表级完整性约束]\n)\n```\n\n\n\n* 表的删除\n\n```sql\ndrop table 表名 [cascade | restrict]\n```\n\n\n\n* 表的扩充和修改\n\n1.增加新列\n\n```sql\nalter table 表名 add (列名 数据类型,...)\n```\n\n2.删除已存在的某个列\n\n```sql\nalter table 表名 drop 列名 [cascade | restrict]\n```\n\n3.修改原有列的类型\n\n```sql\nalter table 表名 modify 列名 数据类型\n```\n\n\n\n### DQL\n\n```sql\nselect [all | distinct]\nfrom 表名或视图名[,表名或视图名...]\n[where 条件表达式]\n[group by 列名1 [having 条件表达式]]\n[order by 列名2 [asc | desc]]\n```\n\n### DML\n\n* 插入数据\n\n1.插入一条数据\n\n```sql\ninsert into 表名 [(列名,列名,...)] values(常量1[,常量2,...])\n```\n\n2.插入子查询结果\n\n```sql\ninsert into 表名 [(列名,列名,...)] 查询语句\n```\n\n* 修改数据\n\n```sql\nupdate 表名 \nset 列名 = 表达式[,列名 = 表达式,...]\n[where 条件]\n```\n\n* 删除数据\n\n```sql\ndelete from 表名 [where 条件]\n```\n\n","source":"_posts/sql-summary.md","raw":"---\ntitle: SQL\ndate: 2018-09-08 19:27:36\ntags: sql\ncategories: sql\n---\n\n结构化查询语言（structured query language, 简称SQL）分为四类：\n\n数据定义语句（Data Definition Language，简称DDL）、数据查询语句（Data Query Language，简称DQL）、数据更新语句（Data Manipulation Language，简称DML）以及数据控制语句。\n\n<!--more-->\n\n### DDL\n\n* 表的创建\n\n```sql\ncreate table 表名 (\n\t列名 数据类型 列级完整性约束,\n\t...[,表级完整性约束]\n)\n```\n\n\n\n* 表的删除\n\n```sql\ndrop table 表名 [cascade | restrict]\n```\n\n\n\n* 表的扩充和修改\n\n1.增加新列\n\n```sql\nalter table 表名 add (列名 数据类型,...)\n```\n\n2.删除已存在的某个列\n\n```sql\nalter table 表名 drop 列名 [cascade | restrict]\n```\n\n3.修改原有列的类型\n\n```sql\nalter table 表名 modify 列名 数据类型\n```\n\n\n\n### DQL\n\n```sql\nselect [all | distinct]\nfrom 表名或视图名[,表名或视图名...]\n[where 条件表达式]\n[group by 列名1 [having 条件表达式]]\n[order by 列名2 [asc | desc]]\n```\n\n### DML\n\n* 插入数据\n\n1.插入一条数据\n\n```sql\ninsert into 表名 [(列名,列名,...)] values(常量1[,常量2,...])\n```\n\n2.插入子查询结果\n\n```sql\ninsert into 表名 [(列名,列名,...)] 查询语句\n```\n\n* 修改数据\n\n```sql\nupdate 表名 \nset 列名 = 表达式[,列名 = 表达式,...]\n[where 条件]\n```\n\n* 删除数据\n\n```sql\ndelete from 表名 [where 条件]\n```\n\n","slug":"sql-summary","published":1,"updated":"2019-01-19T07:23:57.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9asd007ij1q0dedg2rfg","content":"<p>结构化查询语言（structured query language, 简称SQL）分为四类：</p>\n<p>数据定义语句（Data Definition Language，简称DDL）、数据查询语句（Data Query Language，简称DQL）、数据更新语句（Data Manipulation Language，简称DML）以及数据控制语句。</p>\n<a id=\"more\"></a>\n<h3 id=\"DDL\"><a href=\"#DDL\" class=\"headerlink\" title=\"DDL\"></a>DDL</h3><ul>\n<li>表的创建</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> 表名 (</span><br><span class=\"line\">\t列名 数据类型 列级完整性约束,</span><br><span class=\"line\">\t...[,表级完整性约束]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>表的删除</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> 表名 [<span class=\"keyword\">cascade</span> | restrict]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>表的扩充和修改</li>\n</ul>\n<p>1.增加新列</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> 表名 <span class=\"keyword\">add</span> (列名 数据类型,...)</span><br></pre></td></tr></table></figure>\n<p>2.删除已存在的某个列</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> 表名 <span class=\"keyword\">drop</span> 列名 [<span class=\"keyword\">cascade</span> | restrict]</span><br></pre></td></tr></table></figure>\n<p>3.修改原有列的类型</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> 表名 <span class=\"keyword\">modify</span> 列名 数据类型</span><br></pre></td></tr></table></figure>\n<h3 id=\"DQL\"><a href=\"#DQL\" class=\"headerlink\" title=\"DQL\"></a>DQL</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> [all | <span class=\"keyword\">distinct</span>]</span><br><span class=\"line\"><span class=\"keyword\">from</span> 表名或视图名[,表名或视图名...]</span><br><span class=\"line\">[<span class=\"keyword\">where</span> 条件表达式]</span><br><span class=\"line\">[<span class=\"keyword\">group</span> <span class=\"keyword\">by</span> 列名<span class=\"number\">1</span> [<span class=\"keyword\">having</span> 条件表达式]]</span><br><span class=\"line\">[<span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 列名<span class=\"number\">2</span> [<span class=\"keyword\">asc</span> | <span class=\"keyword\">desc</span>]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h3><ul>\n<li>插入数据</li>\n</ul>\n<p>1.插入一条数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名 [(列名,列名,...)] <span class=\"keyword\">values</span>(常量<span class=\"number\">1</span>[,常量<span class=\"number\">2</span>,...])</span><br></pre></td></tr></table></figure>\n<p>2.插入子查询结果</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名 [(列名,列名,...)] 查询语句</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改数据</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> 表名 </span><br><span class=\"line\"><span class=\"keyword\">set</span> 列名 = 表达式[,列名 = 表达式,...]</span><br><span class=\"line\">[<span class=\"keyword\">where</span> 条件]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除数据</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> 表名 [<span class=\"keyword\">where</span> 条件]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>结构化查询语言（structured query language, 简称SQL）分为四类：</p>\n<p>数据定义语句（Data Definition Language，简称DDL）、数据查询语句（Data Query Language，简称DQL）、数据更新语句（Data Manipulation Language，简称DML）以及数据控制语句。</p>","more":"<h3 id=\"DDL\"><a href=\"#DDL\" class=\"headerlink\" title=\"DDL\"></a>DDL</h3><ul>\n<li>表的创建</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> 表名 (</span><br><span class=\"line\">\t列名 数据类型 列级完整性约束,</span><br><span class=\"line\">\t...[,表级完整性约束]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>表的删除</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> 表名 [<span class=\"keyword\">cascade</span> | restrict]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>表的扩充和修改</li>\n</ul>\n<p>1.增加新列</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> 表名 <span class=\"keyword\">add</span> (列名 数据类型,...)</span><br></pre></td></tr></table></figure>\n<p>2.删除已存在的某个列</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> 表名 <span class=\"keyword\">drop</span> 列名 [<span class=\"keyword\">cascade</span> | restrict]</span><br></pre></td></tr></table></figure>\n<p>3.修改原有列的类型</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> 表名 <span class=\"keyword\">modify</span> 列名 数据类型</span><br></pre></td></tr></table></figure>\n<h3 id=\"DQL\"><a href=\"#DQL\" class=\"headerlink\" title=\"DQL\"></a>DQL</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> [all | <span class=\"keyword\">distinct</span>]</span><br><span class=\"line\"><span class=\"keyword\">from</span> 表名或视图名[,表名或视图名...]</span><br><span class=\"line\">[<span class=\"keyword\">where</span> 条件表达式]</span><br><span class=\"line\">[<span class=\"keyword\">group</span> <span class=\"keyword\">by</span> 列名<span class=\"number\">1</span> [<span class=\"keyword\">having</span> 条件表达式]]</span><br><span class=\"line\">[<span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 列名<span class=\"number\">2</span> [<span class=\"keyword\">asc</span> | <span class=\"keyword\">desc</span>]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h3><ul>\n<li>插入数据</li>\n</ul>\n<p>1.插入一条数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名 [(列名,列名,...)] <span class=\"keyword\">values</span>(常量<span class=\"number\">1</span>[,常量<span class=\"number\">2</span>,...])</span><br></pre></td></tr></table></figure>\n<p>2.插入子查询结果</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名 [(列名,列名,...)] 查询语句</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改数据</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> 表名 </span><br><span class=\"line\"><span class=\"keyword\">set</span> 列名 = 表达式[,列名 = 表达式,...]</span><br><span class=\"line\">[<span class=\"keyword\">where</span> 条件]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除数据</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> 表名 [<span class=\"keyword\">where</span> 条件]</span><br></pre></td></tr></table></figure>"},{"title":"SQL中的并运算(union)","date":"2018-09-12T13:59:02.000Z","_content":"union用于合并两个或多个select语句的结果集。\n\n需要注意的是，union合并的两个或多个表必须有相同的列数，且相应的列必须取自同一个域（即数据类型相似，如都是数值型），此外，每条select语句中列的顺序必须相同。\n\n<!--more-->\n\n语法\n```sql\nselect 列名 from table1\nunion \nselect 列名 from table2\n```\n**注意：**union会去除重复行，如果需要保留重复的行，可使用union all。\n\n示例\n假设有以下两张雇员表\n\n```sql\ncreate table employee_cn(\n\teno int,\n    name varchar(32),\n    primary key(eno)\n);\ninsert into employee_cn values(1,'San Zhang');\ninsert into employee_cn values(2,'Xindong Wu');\ninsert into employee_cn values(3,'Gongshan he');\ninsert into employee_cn values(4,'Jiawei Han');\ncreate table employee_us(\n\teno int,\n    name varchar(32),\n    primary key(eno)\n);\ninsert into employee_us values(1,'Jiawei Han');\ninsert into employee_us values(2,'Xindong Wu');\ninsert into employee_us values(3,'Bill Gates');\ninsert into employee_us values(4,'Steve Jobs');\n```\n\n查询中国和美国的所有雇员的姓名\n\n```sql\nselect name from employee_cn\nunion\nselect name from employee_us;\n```\n\n结果：\n\n```sql\n+-------------+\n| name        |\n+-------------+\n| San Zhang   |\n| Xindong Wu  |\n| Gongshan he |\n| Jiawei Han  |\n| Bill Gates  |\n| Steve Jobs  |\n+-------------+\n```\n\n可以看到，union无法查询出所有的中国和美国雇员，一旦出现同名的雇员，则只有一个被列出。\n\n下面使用union all。\n\n```sql\nselect name from employee_cn\nunion all\nselect name from employee_us;\n```\n\n结果:\n\n```sql\n+-------------+\n| name        |\n+-------------+\n| San Zhang   |\n| Xindong Wu  |\n| Gongshan he |\n| Jiawei Han  |\n| Jiawei Han  |\n| Xindong Wu  |\n| Bill Gates  |\n| Steve Jobs  |\n+-------------+\n```\n\n","source":"_posts/sql-union.md","raw":"---\ntitle: SQL中的并运算(union)\ndate: 2018-09-12 21:59:02\ntags: sql\ncategories: sql\n---\nunion用于合并两个或多个select语句的结果集。\n\n需要注意的是，union合并的两个或多个表必须有相同的列数，且相应的列必须取自同一个域（即数据类型相似，如都是数值型），此外，每条select语句中列的顺序必须相同。\n\n<!--more-->\n\n语法\n```sql\nselect 列名 from table1\nunion \nselect 列名 from table2\n```\n**注意：**union会去除重复行，如果需要保留重复的行，可使用union all。\n\n示例\n假设有以下两张雇员表\n\n```sql\ncreate table employee_cn(\n\teno int,\n    name varchar(32),\n    primary key(eno)\n);\ninsert into employee_cn values(1,'San Zhang');\ninsert into employee_cn values(2,'Xindong Wu');\ninsert into employee_cn values(3,'Gongshan he');\ninsert into employee_cn values(4,'Jiawei Han');\ncreate table employee_us(\n\teno int,\n    name varchar(32),\n    primary key(eno)\n);\ninsert into employee_us values(1,'Jiawei Han');\ninsert into employee_us values(2,'Xindong Wu');\ninsert into employee_us values(3,'Bill Gates');\ninsert into employee_us values(4,'Steve Jobs');\n```\n\n查询中国和美国的所有雇员的姓名\n\n```sql\nselect name from employee_cn\nunion\nselect name from employee_us;\n```\n\n结果：\n\n```sql\n+-------------+\n| name        |\n+-------------+\n| San Zhang   |\n| Xindong Wu  |\n| Gongshan he |\n| Jiawei Han  |\n| Bill Gates  |\n| Steve Jobs  |\n+-------------+\n```\n\n可以看到，union无法查询出所有的中国和美国雇员，一旦出现同名的雇员，则只有一个被列出。\n\n下面使用union all。\n\n```sql\nselect name from employee_cn\nunion all\nselect name from employee_us;\n```\n\n结果:\n\n```sql\n+-------------+\n| name        |\n+-------------+\n| San Zhang   |\n| Xindong Wu  |\n| Gongshan he |\n| Jiawei Han  |\n| Jiawei Han  |\n| Xindong Wu  |\n| Bill Gates  |\n| Steve Jobs  |\n+-------------+\n```\n\n","slug":"sql-union","published":1,"updated":"2019-01-19T07:23:57.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9ase007kj1q0ptvk9tvx","content":"<p>union用于合并两个或多个select语句的结果集。</p>\n<p>需要注意的是，union合并的两个或多个表必须有相同的列数，且相应的列必须取自同一个域（即数据类型相似，如都是数值型），此外，每条select语句中列的顺序必须相同。</p>\n<a id=\"more\"></a>\n<p>语法<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> 列名 <span class=\"keyword\">from</span> table1</span><br><span class=\"line\"><span class=\"keyword\">union</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span> 列名 <span class=\"keyword\">from</span> table2</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意：</strong>union会去除重复行，如果需要保留重复的行，可使用union all。</p>\n<p>示例<br>假设有以下两张雇员表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> employee_cn(</span><br><span class=\"line\">\teno <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(eno)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> employee_cn <span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">'San Zhang'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> employee_cn <span class=\"keyword\">values</span>(<span class=\"number\">2</span>,<span class=\"string\">'Xindong Wu'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> employee_cn <span class=\"keyword\">values</span>(<span class=\"number\">3</span>,<span class=\"string\">'Gongshan he'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> employee_cn <span class=\"keyword\">values</span>(<span class=\"number\">4</span>,<span class=\"string\">'Jiawei Han'</span>);</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> employee_us(</span><br><span class=\"line\">\teno <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(eno)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> employee_us <span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">'Jiawei Han'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> employee_us <span class=\"keyword\">values</span>(<span class=\"number\">2</span>,<span class=\"string\">'Xindong Wu'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> employee_us <span class=\"keyword\">values</span>(<span class=\"number\">3</span>,<span class=\"string\">'Bill Gates'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> employee_us <span class=\"keyword\">values</span>(<span class=\"number\">4</span>,<span class=\"string\">'Steve Jobs'</span>);</span><br></pre></td></tr></table></figure>\n<p>查询中国和美国的所有雇员的姓名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> employee_cn</span><br><span class=\"line\"><span class=\"keyword\">union</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> employee_us;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">| name        |</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">| San Zhang   |</span><br><span class=\"line\">| Xindong Wu  |</span><br><span class=\"line\">| Gongshan he |</span><br><span class=\"line\">| Jiawei Han  |</span><br><span class=\"line\">| Bill Gates  |</span><br><span class=\"line\">| Steve Jobs  |</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，union无法查询出所有的中国和美国雇员，一旦出现同名的雇员，则只有一个被列出。</p>\n<p>下面使用union all。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> employee_cn</span><br><span class=\"line\"><span class=\"keyword\">union</span> all</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> employee_us;</span><br></pre></td></tr></table></figure>\n<p>结果:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">| name        |</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">| San Zhang   |</span><br><span class=\"line\">| Xindong Wu  |</span><br><span class=\"line\">| Gongshan he |</span><br><span class=\"line\">| Jiawei Han  |</span><br><span class=\"line\">| Jiawei Han  |</span><br><span class=\"line\">| Xindong Wu  |</span><br><span class=\"line\">| Bill Gates  |</span><br><span class=\"line\">| Steve Jobs  |</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>union用于合并两个或多个select语句的结果集。</p>\n<p>需要注意的是，union合并的两个或多个表必须有相同的列数，且相应的列必须取自同一个域（即数据类型相似，如都是数值型），此外，每条select语句中列的顺序必须相同。</p>","more":"<p>语法<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> 列名 <span class=\"keyword\">from</span> table1</span><br><span class=\"line\"><span class=\"keyword\">union</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span> 列名 <span class=\"keyword\">from</span> table2</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意：</strong>union会去除重复行，如果需要保留重复的行，可使用union all。</p>\n<p>示例<br>假设有以下两张雇员表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> employee_cn(</span><br><span class=\"line\">\teno <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(eno)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> employee_cn <span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">'San Zhang'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> employee_cn <span class=\"keyword\">values</span>(<span class=\"number\">2</span>,<span class=\"string\">'Xindong Wu'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> employee_cn <span class=\"keyword\">values</span>(<span class=\"number\">3</span>,<span class=\"string\">'Gongshan he'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> employee_cn <span class=\"keyword\">values</span>(<span class=\"number\">4</span>,<span class=\"string\">'Jiawei Han'</span>);</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> employee_us(</span><br><span class=\"line\">\teno <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(eno)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> employee_us <span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">'Jiawei Han'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> employee_us <span class=\"keyword\">values</span>(<span class=\"number\">2</span>,<span class=\"string\">'Xindong Wu'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> employee_us <span class=\"keyword\">values</span>(<span class=\"number\">3</span>,<span class=\"string\">'Bill Gates'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> employee_us <span class=\"keyword\">values</span>(<span class=\"number\">4</span>,<span class=\"string\">'Steve Jobs'</span>);</span><br></pre></td></tr></table></figure>\n<p>查询中国和美国的所有雇员的姓名</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> employee_cn</span><br><span class=\"line\"><span class=\"keyword\">union</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> employee_us;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">| name        |</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">| San Zhang   |</span><br><span class=\"line\">| Xindong Wu  |</span><br><span class=\"line\">| Gongshan he |</span><br><span class=\"line\">| Jiawei Han  |</span><br><span class=\"line\">| Bill Gates  |</span><br><span class=\"line\">| Steve Jobs  |</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，union无法查询出所有的中国和美国雇员，一旦出现同名的雇员，则只有一个被列出。</p>\n<p>下面使用union all。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> employee_cn</span><br><span class=\"line\"><span class=\"keyword\">union</span> all</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> employee_us;</span><br></pre></td></tr></table></figure>\n<p>结果:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">| name        |</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">| San Zhang   |</span><br><span class=\"line\">| Xindong Wu  |</span><br><span class=\"line\">| Gongshan he |</span><br><span class=\"line\">| Jiawei Han  |</span><br><span class=\"line\">| Jiawei Han  |</span><br><span class=\"line\">| Xindong Wu  |</span><br><span class=\"line\">| Bill Gates  |</span><br><span class=\"line\">| Steve Jobs  |</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br></pre></td></tr></table></figure>"},{"title":"算法的时间复杂度和空间复杂度","date":"2018-05-31T09:18:23.000Z","mathjax":true,"_content":"\n算法效率的度量是对算法所需要的时间和空间进行估算，分别称为时间复杂度和空间复杂度。\n\n### 时间复杂度\n\n算法的时间效率称为算法的时间复杂度，它是问题规模n的某个函数，记作：T(n) = O(f(n))。\n\n其中问题规模n是指输入量的多少，一般可以从问题描述中得到。如，数组元素的个数、矩阵的阶数等。f(n) 是问题规模n的某个函数。这里的O是Order的简写，意指数量级，表示随问题规模n的增大，算法执行时间的增长率和 f(n) 的增长率相同。\n\n一个没有循环的算法基本运算次数与问题规模无关，记作O(1)，也称为常数阶。\n\n常见的算法时间复杂度由小到大排列如下：\n\nO(1) < O($\\log_{2}n$) < O(n) < O($n\\log_{2}n$) < O($n^2$) < O($n^3$) < ... < O($c^n$) < O(n!)\n\n<!--more-->\n\n#### 时间复杂度的计算\n\n* 不带循环\n\n```c\nx++;//基本语句的执行次数为1，因此时间复杂度为O(1)\n```\n\n* 简单循环\n\n```c\nint x = 0;//语句1，执行1次\nfor( int i = 0 ; i < n ; i++ ) {//语句2，i从0开始到n，执行了n+1次\n    x+=i;//语句3，执行n次\n}\n```\n\n因此，该算法的执行次数为T(n)=1+(n+1)+n=2n+2=O(n)，这种计算方式相对麻烦。\n\n该算法的基本运算为循环中的语句3，它的执行次数为T(n)=n=O(n)。显然，这种计算方式比上面的简单得多，以后均采用这种方式分析算法的时间复杂度。\n\n```c\nfor(int i = 0 ; i < n ; i++) {//该循环执行n次\n    for(int j = 0; j < n ;j++) {//该循环执行n次\n        x++;\n    }\n}\n```\n\n显然，该算法的基本运算为x++，其执行了$n^2$次，因此该算法的时间复杂度为O($n^2$)。\n\n```c\nvoid fun(int n) {\n    int x=0;\n    for(int i = 1 ; i < n ; i++) {//该循环执行n-1次\n        for(int j = i + 1; j <= n ;j++) {//该循环执行n-(i+1)+1=n-i次\n            x++;\n        }\n    }\n}\n```\n\n如何计算该算法的时间复杂度呢？\n\n显然，该算法的基本运算仍为x++，设x++语句执行次数为T(n)，则\n\n$$T(n)=\\sum_{i=1}^{n-1}\\sum_{j=i+1}^n1=\\sum_{i=1}^{n-1}(n-i)=\\frac{n(n-1)}{2}=O(n^2)$$\n\n* 复杂循环\n\n```c\nvoid fun(int n) {\n    int m = 0;\n    for(int i = 1 ; i <= n ; i++) {\n        for(int j = 2*i ; j <= n ;j++) {\n            m++;\n        }\n    }\n}\n```\n\n该算法的基本运算为m++，设其执行次数为T(n)，如果按照上面的方法，则\n\n$$T(n)=\\sum_{i=1}^n\\sum_{j=2i}^{n}1=\\sum_{i=1}^{n}(n-2i+1)=(n+1)n-2\\frac{n(n+1)}{2}=0$$\n\n显然，这种做法是错误的，因为内循环从2i到n，即 i 必须满足: 2i ≤ n => $i<\\frac{n}{2}$，因此正确的做法是：\n\n$$T(n) = \\sum_{i=1}^{\\frac{n}{2}}\\sum_{j=2i}^{n}1=\\sum_{i=1}^{\\frac{n}{2}}(n-2i+1)=(n+1)\\frac{n}{2}-2\\sum_{i=1}^{\\frac{n}{2}}i$$\n\n$$=(n+1)\\frac{n}{2}-2\\frac{(\\frac{n}{2}+1)\\frac{n}{2}}{2}=\\frac{n^2}{4}=O(n^2)$$\n\n* 需要递归\n\n```c\nvoid fun(int a[],int n,int k) {\n    int i;\n    if(k==n-1) {\n        for(i = 0 ; i < n ; i++) {\n            printf(\"%d\\n\",a[i]);\n        }\n    } else {\n        for(i = k ; i < n ; i++) {\n            a[i] = a[i] + i * i;\n        }\n        fun(a,n,k+1);\n    }\n}\n```\n\n如何求fun(a,n,0)的时间复杂度呢？\n\n设fun(a,n,k)的执行时间为T(n,k)，从而，fun(a,n,0)的执行时间为T(n)=T(n,0)。\n\n$$T(n,k)=\\begin{cases} n, & \\text {k=n-1} \\\\\\ (n-k)+T(n,k+1), & \\text{其他} \\end{cases}$$\n\n则，\n\nT(n)=T(n,0)=n+T(n,1)=n+(n-1)+T(n,2)=...=n+(n-1)+...+2+T(n,n-1)\n\n=$\\frac{(n+2)(n-1)}{2}+n=\\frac{n^2}{2}+\\frac{3n}{2}-1=O(n^2)$\n\n### 最好、最坏及平均时间复杂度\n\n实际上，算法效率不仅仅依赖于问题的规模n，还与问题的初始输入有关。例如:\n\n```c\nint fun(int a[],int n,int k) {//该算法用于在给定的数组a[]中查找k\n    for(int i = 0 ; i < n ; i++) {\n        if(a[i] == k) {\n            return i;\n        }\n    }\n    return -1;\n}\n```\n\n循环体的执行次数，不仅与问题规模n有关，还与输入实例中a的各元素取值以及k的取值有关。在最坏的情况下，a中没有与k相等的元素，则循环体执行n次；在最好的情况下，a中的第一个元素a[0]等于K，则循环体执行1次。\n\n故，该算法的最好时间复杂度为O(1)，最坏时间复杂度为O(n)。在这种情况下，可用最坏情况下的时间复杂度作为算法的时间复杂度，因为***最坏情况下的时间复杂度是在任何输入实例上运行时间的上界***。\n\n当然，也可用平均时间复杂度来衡量算法，下面给出平均时间复杂度的定义：\n\n设一个算法的输入规模为n，$D_n$是所有输入的集合，任一输入I∈$D_n$，p(I)是I出现的频率，有$\\sum_{I∈D_n}P(I)=1$，T(I)是算法在输入I下所执行的基本运算次数，则该算法的平均时间复杂度为：\n\n$$T(n)=\\sum_{I∈D_n}{P(I)·T(I)}$$\n\n显然，最坏时间复杂度为$$T(n)=\\max_{I∈D_n}{T(I)}$$\n\n### 空间复杂度\n\n空间复杂度是对一个算法在运行过程中临时占用的存储空间大小的度量。\n\n一个算法在执行过程中所需要的存储空间包括以下3个部分：\n\n1.算法本身占用的空间，取决于算法的长度；\n\n2.输入输出数据占用的空间，取决于问题规模，与算法无关；\n\n3.辅助存储空间，即算法临时开辟的存储空间，与算法有关。\n\n算法的空间复杂度是对算法的执行过程需要的辅助空间进行度量。通常记作 S(n) = O(f(n))，其中n为问题规模，f(n)为问题规模n的一个函数。\n\n下面也举几个例子\n\n```c\nvoid sort(int x[],int n) {//该算法将一个数组按从大到小的顺序排序\n\tint i,j,k,t;\n\tfor(i = 0 ; i < n-1 ; i++) {\n\t\tk = i;\n\t\tfor(j = i + 1 ; j < n ; j++) {\n\t\t\tif(x[j] > x[k]) {\n\t\t\t\tk=j;\n\t\t\t}\n\t\t\tif(k != i) {\n\t\t\t\tt = x[i];\n\t\t\t\tx[i] = x[k];\n\t\t\t\tx[k] = t;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n这里定义了四个辅助变量，临时存储空间与问题规模n无关，故其空间复杂度为O(1)，时间复杂度为O($n^2$)\n\n**一般而言，如果不包含递归调用，则算法的空间复杂度为O(1)**\n\n```c\nvoid mergesort(int a[],int i,int j) {\n    int m;\n    if(i != j) {\n        m = (i+j)/2;\n        mergesort(a,i,m);\n        mergesort(a,m+1,j);\n        merge(a,i,j,m);//假定merge是一个非递归函数，其内部只定义了一个辅助变量\n    }\n}\n```\n\n如何求mergesort(a，0，n-1)的空间复杂度呢？\n\n对于该算法，设mergesort(a，0，n-1)的临时空间大小为S(n)，其中定义了一个辅助变量m，\n\n$$S(n)=\\begin{cases} O(1) , & \\text{n=1} \\\\  2·S(\\frac{n}{2})+1 , & \\text{n>1} \\end{cases}$$\n\n当n > 1 时，S(n) = 2·S($\\frac{n}{2}$) + 1 = 2 ( 2·S($\\frac{n}{2^2}$) + 1) + 1=$2^2S(\\frac{n}{4})$ + 1 + 2=$2^3S(\\frac{n}{8})+1+2+2^2$\n\n=...=$2^kS(\\frac{n}{2^k})+\\sum_{i=1}^{k}2^{i-1}$=$2^kO(1)+2^k-1$\n\n由于$\\frac{n}{2^k}$ -> 1，则k=$\\log_{2}n$\n\n故S(n) = n + n - 1=2n-1，故该算法的空间复杂度为O(n)","source":"_posts/time-and-space-complexity.md","raw":"---\ntitle: 算法的时间复杂度和空间复杂度\ndate: 2018-05-31 17:18:23\ntags: 算法\ncategories: 算法\nmathjax: true\n---\n\n算法效率的度量是对算法所需要的时间和空间进行估算，分别称为时间复杂度和空间复杂度。\n\n### 时间复杂度\n\n算法的时间效率称为算法的时间复杂度，它是问题规模n的某个函数，记作：T(n) = O(f(n))。\n\n其中问题规模n是指输入量的多少，一般可以从问题描述中得到。如，数组元素的个数、矩阵的阶数等。f(n) 是问题规模n的某个函数。这里的O是Order的简写，意指数量级，表示随问题规模n的增大，算法执行时间的增长率和 f(n) 的增长率相同。\n\n一个没有循环的算法基本运算次数与问题规模无关，记作O(1)，也称为常数阶。\n\n常见的算法时间复杂度由小到大排列如下：\n\nO(1) < O($\\log_{2}n$) < O(n) < O($n\\log_{2}n$) < O($n^2$) < O($n^3$) < ... < O($c^n$) < O(n!)\n\n<!--more-->\n\n#### 时间复杂度的计算\n\n* 不带循环\n\n```c\nx++;//基本语句的执行次数为1，因此时间复杂度为O(1)\n```\n\n* 简单循环\n\n```c\nint x = 0;//语句1，执行1次\nfor( int i = 0 ; i < n ; i++ ) {//语句2，i从0开始到n，执行了n+1次\n    x+=i;//语句3，执行n次\n}\n```\n\n因此，该算法的执行次数为T(n)=1+(n+1)+n=2n+2=O(n)，这种计算方式相对麻烦。\n\n该算法的基本运算为循环中的语句3，它的执行次数为T(n)=n=O(n)。显然，这种计算方式比上面的简单得多，以后均采用这种方式分析算法的时间复杂度。\n\n```c\nfor(int i = 0 ; i < n ; i++) {//该循环执行n次\n    for(int j = 0; j < n ;j++) {//该循环执行n次\n        x++;\n    }\n}\n```\n\n显然，该算法的基本运算为x++，其执行了$n^2$次，因此该算法的时间复杂度为O($n^2$)。\n\n```c\nvoid fun(int n) {\n    int x=0;\n    for(int i = 1 ; i < n ; i++) {//该循环执行n-1次\n        for(int j = i + 1; j <= n ;j++) {//该循环执行n-(i+1)+1=n-i次\n            x++;\n        }\n    }\n}\n```\n\n如何计算该算法的时间复杂度呢？\n\n显然，该算法的基本运算仍为x++，设x++语句执行次数为T(n)，则\n\n$$T(n)=\\sum_{i=1}^{n-1}\\sum_{j=i+1}^n1=\\sum_{i=1}^{n-1}(n-i)=\\frac{n(n-1)}{2}=O(n^2)$$\n\n* 复杂循环\n\n```c\nvoid fun(int n) {\n    int m = 0;\n    for(int i = 1 ; i <= n ; i++) {\n        for(int j = 2*i ; j <= n ;j++) {\n            m++;\n        }\n    }\n}\n```\n\n该算法的基本运算为m++，设其执行次数为T(n)，如果按照上面的方法，则\n\n$$T(n)=\\sum_{i=1}^n\\sum_{j=2i}^{n}1=\\sum_{i=1}^{n}(n-2i+1)=(n+1)n-2\\frac{n(n+1)}{2}=0$$\n\n显然，这种做法是错误的，因为内循环从2i到n，即 i 必须满足: 2i ≤ n => $i<\\frac{n}{2}$，因此正确的做法是：\n\n$$T(n) = \\sum_{i=1}^{\\frac{n}{2}}\\sum_{j=2i}^{n}1=\\sum_{i=1}^{\\frac{n}{2}}(n-2i+1)=(n+1)\\frac{n}{2}-2\\sum_{i=1}^{\\frac{n}{2}}i$$\n\n$$=(n+1)\\frac{n}{2}-2\\frac{(\\frac{n}{2}+1)\\frac{n}{2}}{2}=\\frac{n^2}{4}=O(n^2)$$\n\n* 需要递归\n\n```c\nvoid fun(int a[],int n,int k) {\n    int i;\n    if(k==n-1) {\n        for(i = 0 ; i < n ; i++) {\n            printf(\"%d\\n\",a[i]);\n        }\n    } else {\n        for(i = k ; i < n ; i++) {\n            a[i] = a[i] + i * i;\n        }\n        fun(a,n,k+1);\n    }\n}\n```\n\n如何求fun(a,n,0)的时间复杂度呢？\n\n设fun(a,n,k)的执行时间为T(n,k)，从而，fun(a,n,0)的执行时间为T(n)=T(n,0)。\n\n$$T(n,k)=\\begin{cases} n, & \\text {k=n-1} \\\\\\ (n-k)+T(n,k+1), & \\text{其他} \\end{cases}$$\n\n则，\n\nT(n)=T(n,0)=n+T(n,1)=n+(n-1)+T(n,2)=...=n+(n-1)+...+2+T(n,n-1)\n\n=$\\frac{(n+2)(n-1)}{2}+n=\\frac{n^2}{2}+\\frac{3n}{2}-1=O(n^2)$\n\n### 最好、最坏及平均时间复杂度\n\n实际上，算法效率不仅仅依赖于问题的规模n，还与问题的初始输入有关。例如:\n\n```c\nint fun(int a[],int n,int k) {//该算法用于在给定的数组a[]中查找k\n    for(int i = 0 ; i < n ; i++) {\n        if(a[i] == k) {\n            return i;\n        }\n    }\n    return -1;\n}\n```\n\n循环体的执行次数，不仅与问题规模n有关，还与输入实例中a的各元素取值以及k的取值有关。在最坏的情况下，a中没有与k相等的元素，则循环体执行n次；在最好的情况下，a中的第一个元素a[0]等于K，则循环体执行1次。\n\n故，该算法的最好时间复杂度为O(1)，最坏时间复杂度为O(n)。在这种情况下，可用最坏情况下的时间复杂度作为算法的时间复杂度，因为***最坏情况下的时间复杂度是在任何输入实例上运行时间的上界***。\n\n当然，也可用平均时间复杂度来衡量算法，下面给出平均时间复杂度的定义：\n\n设一个算法的输入规模为n，$D_n$是所有输入的集合，任一输入I∈$D_n$，p(I)是I出现的频率，有$\\sum_{I∈D_n}P(I)=1$，T(I)是算法在输入I下所执行的基本运算次数，则该算法的平均时间复杂度为：\n\n$$T(n)=\\sum_{I∈D_n}{P(I)·T(I)}$$\n\n显然，最坏时间复杂度为$$T(n)=\\max_{I∈D_n}{T(I)}$$\n\n### 空间复杂度\n\n空间复杂度是对一个算法在运行过程中临时占用的存储空间大小的度量。\n\n一个算法在执行过程中所需要的存储空间包括以下3个部分：\n\n1.算法本身占用的空间，取决于算法的长度；\n\n2.输入输出数据占用的空间，取决于问题规模，与算法无关；\n\n3.辅助存储空间，即算法临时开辟的存储空间，与算法有关。\n\n算法的空间复杂度是对算法的执行过程需要的辅助空间进行度量。通常记作 S(n) = O(f(n))，其中n为问题规模，f(n)为问题规模n的一个函数。\n\n下面也举几个例子\n\n```c\nvoid sort(int x[],int n) {//该算法将一个数组按从大到小的顺序排序\n\tint i,j,k,t;\n\tfor(i = 0 ; i < n-1 ; i++) {\n\t\tk = i;\n\t\tfor(j = i + 1 ; j < n ; j++) {\n\t\t\tif(x[j] > x[k]) {\n\t\t\t\tk=j;\n\t\t\t}\n\t\t\tif(k != i) {\n\t\t\t\tt = x[i];\n\t\t\t\tx[i] = x[k];\n\t\t\t\tx[k] = t;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n这里定义了四个辅助变量，临时存储空间与问题规模n无关，故其空间复杂度为O(1)，时间复杂度为O($n^2$)\n\n**一般而言，如果不包含递归调用，则算法的空间复杂度为O(1)**\n\n```c\nvoid mergesort(int a[],int i,int j) {\n    int m;\n    if(i != j) {\n        m = (i+j)/2;\n        mergesort(a,i,m);\n        mergesort(a,m+1,j);\n        merge(a,i,j,m);//假定merge是一个非递归函数，其内部只定义了一个辅助变量\n    }\n}\n```\n\n如何求mergesort(a，0，n-1)的空间复杂度呢？\n\n对于该算法，设mergesort(a，0，n-1)的临时空间大小为S(n)，其中定义了一个辅助变量m，\n\n$$S(n)=\\begin{cases} O(1) , & \\text{n=1} \\\\  2·S(\\frac{n}{2})+1 , & \\text{n>1} \\end{cases}$$\n\n当n > 1 时，S(n) = 2·S($\\frac{n}{2}$) + 1 = 2 ( 2·S($\\frac{n}{2^2}$) + 1) + 1=$2^2S(\\frac{n}{4})$ + 1 + 2=$2^3S(\\frac{n}{8})+1+2+2^2$\n\n=...=$2^kS(\\frac{n}{2^k})+\\sum_{i=1}^{k}2^{i-1}$=$2^kO(1)+2^k-1$\n\n由于$\\frac{n}{2^k}$ -> 1，则k=$\\log_{2}n$\n\n故S(n) = n + n - 1=2n-1，故该算法的空间复杂度为O(n)","slug":"time-and-space-complexity","published":1,"updated":"2019-01-19T07:23:57.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9asf007pj1q0x86wscdh","content":"<p>算法效率的度量是对算法所需要的时间和空间进行估算，分别称为时间复杂度和空间复杂度。</p>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><p>算法的时间效率称为算法的时间复杂度，它是问题规模n的某个函数，记作：T(n) = O(f(n))。</p>\n<p>其中问题规模n是指输入量的多少，一般可以从问题描述中得到。如，数组元素的个数、矩阵的阶数等。f(n) 是问题规模n的某个函数。这里的O是Order的简写，意指数量级，表示随问题规模n的增大，算法执行时间的增长率和 f(n) 的增长率相同。</p>\n<p>一个没有循环的算法基本运算次数与问题规模无关，记作O(1)，也称为常数阶。</p>\n<p>常见的算法时间复杂度由小到大排列如下：</p>\n<p>O(1) &lt; O($\\log_{2}n$) &lt; O(n) &lt; O($n\\log_{2}n$) &lt; O($n^2$) &lt; O($n^3$) &lt; … &lt; O($c^n$) &lt; O(n!)</p>\n<a id=\"more\"></a>\n<h4 id=\"时间复杂度的计算\"><a href=\"#时间复杂度的计算\" class=\"headerlink\" title=\"时间复杂度的计算\"></a>时间复杂度的计算</h4><ul>\n<li>不带循环</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x++;<span class=\"comment\">//基本语句的执行次数为1，因此时间复杂度为O(1)</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>简单循环</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;<span class=\"comment\">//语句1，执行1次</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++ ) &#123;<span class=\"comment\">//语句2，i从0开始到n，执行了n+1次</span></span><br><span class=\"line\">    x+=i;<span class=\"comment\">//语句3，执行n次</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因此，该算法的执行次数为T(n)=1+(n+1)+n=2n+2=O(n)，这种计算方式相对麻烦。</p>\n<p>该算法的基本运算为循环中的语句3，它的执行次数为T(n)=n=O(n)。显然，这种计算方式比上面的简单得多，以后均采用这种方式分析算法的时间复杂度。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++) &#123;<span class=\"comment\">//该循环执行n次</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n ;j++) &#123;<span class=\"comment\">//该循环执行n次</span></span><br><span class=\"line\">        x++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>显然，该算法的基本运算为x++，其执行了$n^2$次，因此该算法的时间复杂度为O($n^2$)。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> ; i &lt; n ; i++) &#123;<span class=\"comment\">//该循环执行n-1次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt;= n ;j++) &#123;<span class=\"comment\">//该循环执行n-(i+1)+1=n-i次</span></span><br><span class=\"line\">            x++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何计算该算法的时间复杂度呢？</p>\n<p>显然，该算法的基本运算仍为x++，设x++语句执行次数为T(n)，则</p>\n<p>$$T(n)=\\sum_{i=1}^{n-1}\\sum_{j=i+1}^n1=\\sum_{i=1}^{n-1}(n-i)=\\frac{n(n-1)}{2}=O(n^2)$$</p>\n<ul>\n<li>复杂循环</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>*i ; j &lt;= n ;j++) &#123;</span><br><span class=\"line\">            m++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该算法的基本运算为m++，设其执行次数为T(n)，如果按照上面的方法，则</p>\n<p>$$T(n)=\\sum_{i=1}^n\\sum_{j=2i}^{n}1=\\sum_{i=1}^{n}(n-2i+1)=(n+1)n-2\\frac{n(n+1)}{2}=0$$</p>\n<p>显然，这种做法是错误的，因为内循环从2i到n，即 i 必须满足: 2i ≤ n =&gt; $i&lt;\\frac{n}{2}$，因此正确的做法是：</p>\n<p>$$T(n) = \\sum_{i=1}^{\\frac{n}{2}}\\sum_{j=2i}^{n}1=\\sum_{i=1}^{\\frac{n}{2}}(n-2i+1)=(n+1)\\frac{n}{2}-2\\sum_{i=1}^{\\frac{n}{2}}i$$</p>\n<p>$$=(n+1)\\frac{n}{2}-2\\frac{(\\frac{n}{2}+1)\\frac{n}{2}}{2}=\\frac{n^2}{4}=O(n^2)$$</p>\n<ul>\n<li>需要递归</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==n<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; i &lt; n ; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = k ; i &lt; n ; i++) &#123;</span><br><span class=\"line\">            a[i] = a[i] + i * i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fun(a,n,k+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何求fun(a,n,0)的时间复杂度呢？</p>\n<p>设fun(a,n,k)的执行时间为T(n,k)，从而，fun(a,n,0)的执行时间为T(n)=T(n,0)。</p>\n<p>$$T(n,k)=\\begin{cases} n, &amp; \\text {k=n-1} \\\\ (n-k)+T(n,k+1), &amp; \\text{其他} \\end{cases}$$</p>\n<p>则，</p>\n<p>T(n)=T(n,0)=n+T(n,1)=n+(n-1)+T(n,2)=…=n+(n-1)+…+2+T(n,n-1)</p>\n<p>=$\\frac{(n+2)(n-1)}{2}+n=\\frac{n^2}{2}+\\frac{3n}{2}-1=O(n^2)$</p>\n<h3 id=\"最好、最坏及平均时间复杂度\"><a href=\"#最好、最坏及平均时间复杂度\" class=\"headerlink\" title=\"最好、最坏及平均时间复杂度\"></a>最好、最坏及平均时间复杂度</h3><p>实际上，算法效率不仅仅依赖于问题的规模n，还与问题的初始输入有关。例如:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> k)</span> </span>&#123;<span class=\"comment\">//该算法用于在给定的数组a[]中查找k</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i] == k) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>循环体的执行次数，不仅与问题规模n有关，还与输入实例中a的各元素取值以及k的取值有关。在最坏的情况下，a中没有与k相等的元素，则循环体执行n次；在最好的情况下，a中的第一个元素a[0]等于K，则循环体执行1次。</p>\n<p>故，该算法的最好时间复杂度为O(1)，最坏时间复杂度为O(n)。在这种情况下，可用最坏情况下的时间复杂度作为算法的时间复杂度，因为<strong><em>最坏情况下的时间复杂度是在任何输入实例上运行时间的上界</em></strong>。</p>\n<p>当然，也可用平均时间复杂度来衡量算法，下面给出平均时间复杂度的定义：</p>\n<p>设一个算法的输入规模为n，$D_n$是所有输入的集合，任一输入I∈$D_n$，p(I)是I出现的频率，有$\\sum_{I∈D_n}P(I)=1$，T(I)是算法在输入I下所执行的基本运算次数，则该算法的平均时间复杂度为：</p>\n<p>$$T(n)=\\sum_{I∈D_n}{P(I)·T(I)}$$</p>\n<p>显然，最坏时间复杂度为$$T(n)=\\max_{I∈D_n}{T(I)}$$</p>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><p>空间复杂度是对一个算法在运行过程中临时占用的存储空间大小的度量。</p>\n<p>一个算法在执行过程中所需要的存储空间包括以下3个部分：</p>\n<p>1.算法本身占用的空间，取决于算法的长度；</p>\n<p>2.输入输出数据占用的空间，取决于问题规模，与算法无关；</p>\n<p>3.辅助存储空间，即算法临时开辟的存储空间，与算法有关。</p>\n<p>算法的空间复杂度是对算法的执行过程需要的辅助空间进行度量。通常记作 S(n) = O(f(n))，其中n为问题规模，f(n)为问题规模n的一个函数。</p>\n<p>下面也举几个例子</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span> x[],<span class=\"keyword\">int</span> n)</span> </span>&#123;<span class=\"comment\">//该算法将一个数组按从大到小的顺序排序</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i,j,k,t;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; i &lt; n<span class=\"number\">-1</span> ; i++) &#123;</span><br><span class=\"line\">\t\tk = i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j = i + <span class=\"number\">1</span> ; j &lt; n ; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(x[j] &gt; x[k]) &#123;</span><br><span class=\"line\">\t\t\t\tk=j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(k != i) &#123;</span><br><span class=\"line\">\t\t\t\tt = x[i];</span><br><span class=\"line\">\t\t\t\tx[i] = x[k];</span><br><span class=\"line\">\t\t\t\tx[k] = t;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里定义了四个辅助变量，临时存储空间与问题规模n无关，故其空间复杂度为O(1)，时间复杂度为O($n^2$)</p>\n<p><strong>一般而言，如果不包含递归调用，则算法的空间复杂度为O(1)</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mergesort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i != j) &#123;</span><br><span class=\"line\">        m = (i+j)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        mergesort(a,i,m);</span><br><span class=\"line\">        mergesort(a,m+<span class=\"number\">1</span>,j);</span><br><span class=\"line\">        merge(a,i,j,m);<span class=\"comment\">//假定merge是一个非递归函数，其内部只定义了一个辅助变量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何求mergesort(a，0，n-1)的空间复杂度呢？</p>\n<p>对于该算法，设mergesort(a，0，n-1)的临时空间大小为S(n)，其中定义了一个辅助变量m，</p>\n<p>$$S(n)=\\begin{cases} O(1) , &amp; \\text{n=1} \\  2·S(\\frac{n}{2})+1 , &amp; \\text{n&gt;1} \\end{cases}$$</p>\n<p>当n &gt; 1 时，S(n) = 2·S($\\frac{n}{2}$) + 1 = 2 ( 2·S($\\frac{n}{2^2}$) + 1) + 1=$2^2S(\\frac{n}{4})$ + 1 + 2=$2^3S(\\frac{n}{8})+1+2+2^2$</p>\n<p>=…=$2^kS(\\frac{n}{2^k})+\\sum_{i=1}^{k}2^{i-1}$=$2^kO(1)+2^k-1$</p>\n<p>由于$\\frac{n}{2^k}$ -&gt; 1，则k=$\\log_{2}n$</p>\n<p>故S(n) = n + n - 1=2n-1，故该算法的空间复杂度为O(n)</p>\n","site":{"data":{}},"excerpt":"<p>算法效率的度量是对算法所需要的时间和空间进行估算，分别称为时间复杂度和空间复杂度。</p>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><p>算法的时间效率称为算法的时间复杂度，它是问题规模n的某个函数，记作：T(n) = O(f(n))。</p>\n<p>其中问题规模n是指输入量的多少，一般可以从问题描述中得到。如，数组元素的个数、矩阵的阶数等。f(n) 是问题规模n的某个函数。这里的O是Order的简写，意指数量级，表示随问题规模n的增大，算法执行时间的增长率和 f(n) 的增长率相同。</p>\n<p>一个没有循环的算法基本运算次数与问题规模无关，记作O(1)，也称为常数阶。</p>\n<p>常见的算法时间复杂度由小到大排列如下：</p>\n<p>O(1) &lt; O($\\log_{2}n$) &lt; O(n) &lt; O($n\\log_{2}n$) &lt; O($n^2$) &lt; O($n^3$) &lt; … &lt; O($c^n$) &lt; O(n!)</p>","more":"<h4 id=\"时间复杂度的计算\"><a href=\"#时间复杂度的计算\" class=\"headerlink\" title=\"时间复杂度的计算\"></a>时间复杂度的计算</h4><ul>\n<li>不带循环</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x++;<span class=\"comment\">//基本语句的执行次数为1，因此时间复杂度为O(1)</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>简单循环</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;<span class=\"comment\">//语句1，执行1次</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++ ) &#123;<span class=\"comment\">//语句2，i从0开始到n，执行了n+1次</span></span><br><span class=\"line\">    x+=i;<span class=\"comment\">//语句3，执行n次</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因此，该算法的执行次数为T(n)=1+(n+1)+n=2n+2=O(n)，这种计算方式相对麻烦。</p>\n<p>该算法的基本运算为循环中的语句3，它的执行次数为T(n)=n=O(n)。显然，这种计算方式比上面的简单得多，以后均采用这种方式分析算法的时间复杂度。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++) &#123;<span class=\"comment\">//该循环执行n次</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n ;j++) &#123;<span class=\"comment\">//该循环执行n次</span></span><br><span class=\"line\">        x++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>显然，该算法的基本运算为x++，其执行了$n^2$次，因此该算法的时间复杂度为O($n^2$)。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> ; i &lt; n ; i++) &#123;<span class=\"comment\">//该循环执行n-1次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt;= n ;j++) &#123;<span class=\"comment\">//该循环执行n-(i+1)+1=n-i次</span></span><br><span class=\"line\">            x++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何计算该算法的时间复杂度呢？</p>\n<p>显然，该算法的基本运算仍为x++，设x++语句执行次数为T(n)，则</p>\n<p>$$T(n)=\\sum_{i=1}^{n-1}\\sum_{j=i+1}^n1=\\sum_{i=1}^{n-1}(n-i)=\\frac{n(n-1)}{2}=O(n^2)$$</p>\n<ul>\n<li>复杂循环</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> ; i &lt;= n ; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>*i ; j &lt;= n ;j++) &#123;</span><br><span class=\"line\">            m++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该算法的基本运算为m++，设其执行次数为T(n)，如果按照上面的方法，则</p>\n<p>$$T(n)=\\sum_{i=1}^n\\sum_{j=2i}^{n}1=\\sum_{i=1}^{n}(n-2i+1)=(n+1)n-2\\frac{n(n+1)}{2}=0$$</p>\n<p>显然，这种做法是错误的，因为内循环从2i到n，即 i 必须满足: 2i ≤ n =&gt; $i&lt;\\frac{n}{2}$，因此正确的做法是：</p>\n<p>$$T(n) = \\sum_{i=1}^{\\frac{n}{2}}\\sum_{j=2i}^{n}1=\\sum_{i=1}^{\\frac{n}{2}}(n-2i+1)=(n+1)\\frac{n}{2}-2\\sum_{i=1}^{\\frac{n}{2}}i$$</p>\n<p>$$=(n+1)\\frac{n}{2}-2\\frac{(\\frac{n}{2}+1)\\frac{n}{2}}{2}=\\frac{n^2}{4}=O(n^2)$$</p>\n<ul>\n<li>需要递归</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k==n<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; i &lt; n ; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = k ; i &lt; n ; i++) &#123;</span><br><span class=\"line\">            a[i] = a[i] + i * i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fun(a,n,k+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何求fun(a,n,0)的时间复杂度呢？</p>\n<p>设fun(a,n,k)的执行时间为T(n,k)，从而，fun(a,n,0)的执行时间为T(n)=T(n,0)。</p>\n<p>$$T(n,k)=\\begin{cases} n, &amp; \\text {k=n-1} \\\\ (n-k)+T(n,k+1), &amp; \\text{其他} \\end{cases}$$</p>\n<p>则，</p>\n<p>T(n)=T(n,0)=n+T(n,1)=n+(n-1)+T(n,2)=…=n+(n-1)+…+2+T(n,n-1)</p>\n<p>=$\\frac{(n+2)(n-1)}{2}+n=\\frac{n^2}{2}+\\frac{3n}{2}-1=O(n^2)$</p>\n<h3 id=\"最好、最坏及平均时间复杂度\"><a href=\"#最好、最坏及平均时间复杂度\" class=\"headerlink\" title=\"最好、最坏及平均时间复杂度\"></a>最好、最坏及平均时间复杂度</h3><p>实际上，算法效率不仅仅依赖于问题的规模n，还与问题的初始输入有关。例如:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> k)</span> </span>&#123;<span class=\"comment\">//该算法用于在给定的数组a[]中查找k</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; n ; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i] == k) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>循环体的执行次数，不仅与问题规模n有关，还与输入实例中a的各元素取值以及k的取值有关。在最坏的情况下，a中没有与k相等的元素，则循环体执行n次；在最好的情况下，a中的第一个元素a[0]等于K，则循环体执行1次。</p>\n<p>故，该算法的最好时间复杂度为O(1)，最坏时间复杂度为O(n)。在这种情况下，可用最坏情况下的时间复杂度作为算法的时间复杂度，因为<strong><em>最坏情况下的时间复杂度是在任何输入实例上运行时间的上界</em></strong>。</p>\n<p>当然，也可用平均时间复杂度来衡量算法，下面给出平均时间复杂度的定义：</p>\n<p>设一个算法的输入规模为n，$D_n$是所有输入的集合，任一输入I∈$D_n$，p(I)是I出现的频率，有$\\sum_{I∈D_n}P(I)=1$，T(I)是算法在输入I下所执行的基本运算次数，则该算法的平均时间复杂度为：</p>\n<p>$$T(n)=\\sum_{I∈D_n}{P(I)·T(I)}$$</p>\n<p>显然，最坏时间复杂度为$$T(n)=\\max_{I∈D_n}{T(I)}$$</p>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><p>空间复杂度是对一个算法在运行过程中临时占用的存储空间大小的度量。</p>\n<p>一个算法在执行过程中所需要的存储空间包括以下3个部分：</p>\n<p>1.算法本身占用的空间，取决于算法的长度；</p>\n<p>2.输入输出数据占用的空间，取决于问题规模，与算法无关；</p>\n<p>3.辅助存储空间，即算法临时开辟的存储空间，与算法有关。</p>\n<p>算法的空间复杂度是对算法的执行过程需要的辅助空间进行度量。通常记作 S(n) = O(f(n))，其中n为问题规模，f(n)为问题规模n的一个函数。</p>\n<p>下面也举几个例子</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span> x[],<span class=\"keyword\">int</span> n)</span> </span>&#123;<span class=\"comment\">//该算法将一个数组按从大到小的顺序排序</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i,j,k,t;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; i &lt; n<span class=\"number\">-1</span> ; i++) &#123;</span><br><span class=\"line\">\t\tk = i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j = i + <span class=\"number\">1</span> ; j &lt; n ; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(x[j] &gt; x[k]) &#123;</span><br><span class=\"line\">\t\t\t\tk=j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(k != i) &#123;</span><br><span class=\"line\">\t\t\t\tt = x[i];</span><br><span class=\"line\">\t\t\t\tx[i] = x[k];</span><br><span class=\"line\">\t\t\t\tx[k] = t;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里定义了四个辅助变量，临时存储空间与问题规模n无关，故其空间复杂度为O(1)，时间复杂度为O($n^2$)</p>\n<p><strong>一般而言，如果不包含递归调用，则算法的空间复杂度为O(1)</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mergesort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i != j) &#123;</span><br><span class=\"line\">        m = (i+j)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        mergesort(a,i,m);</span><br><span class=\"line\">        mergesort(a,m+<span class=\"number\">1</span>,j);</span><br><span class=\"line\">        merge(a,i,j,m);<span class=\"comment\">//假定merge是一个非递归函数，其内部只定义了一个辅助变量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何求mergesort(a，0，n-1)的空间复杂度呢？</p>\n<p>对于该算法，设mergesort(a，0，n-1)的临时空间大小为S(n)，其中定义了一个辅助变量m，</p>\n<p>$$S(n)=\\begin{cases} O(1) , &amp; \\text{n=1} \\  2·S(\\frac{n}{2})+1 , &amp; \\text{n&gt;1} \\end{cases}$$</p>\n<p>当n &gt; 1 时，S(n) = 2·S($\\frac{n}{2}$) + 1 = 2 ( 2·S($\\frac{n}{2^2}$) + 1) + 1=$2^2S(\\frac{n}{4})$ + 1 + 2=$2^3S(\\frac{n}{8})+1+2+2^2$</p>\n<p>=…=$2^kS(\\frac{n}{2^k})+\\sum_{i=1}^{k}2^{i-1}$=$2^kO(1)+2^k-1$</p>\n<p>由于$\\frac{n}{2^k}$ -&gt; 1，则k=$\\log_{2}n$</p>\n<p>故S(n) = n + n - 1=2n-1，故该算法的空间复杂度为O(n)</p>"},{"title":"向量和矩阵的范数","date":"2018-08-27T10:49:12.000Z","mathjax":true,"_content":"\n阅读《机器学习》和《机器学习实战》的时候，都碰到过**范数（norm）**这个概念，这里记录一下。\n\n<!--more-->\n\n### 向量范数\n\n* 定义\n\n设V是数域P上的线性空间，$\\lVert \\alpha \\rVert$是以V中的向量$\\alpha$为自变量的非负实值函数，如果它满足以下三个条件：\n\n（1）非负性：当$\\alpha \\neq 0$时，$\\lVert \\alpha \\rVert > 0$；当$\\alpha = 0$时，$\\lVert \\alpha \\rVert = 0$；\n\n（2）齐次性：对任意$k \\in P，\\alpha \\in V$，有$\\lVert k \\alpha \\rVert = \\lvert k \\rvert\\ \\lVert\\alpha \\rVert $；\n\n（3）三角不等式：对任意$\\alpha，\\beta \\in V$，有$\\lVert \\alpha + \\beta \\rVert \\leq \\lVert \\alpha \\rVert + \\lVert \\beta \\rVert$，\n\n则称$\\lVert \\alpha \\rVert$ 为向量$\\alpha$的**范数**，并称定义了范数的线性空间为**赋范线性空间**。\n\n> 什么是数域？\n>\n> 设P是包含0和1在内的数集，如果P中任意两个数的和、差、积、商（除数不为0）仍是P中的数，则称P为一个**数域**。\n\n* 常见的向量范数\n\n在n维向量空间$C^n$中，对任意的向量$x = (x_1,x_2,\\dots,x_n)^{T} \\in C^{n} $,有\n$$\n\\lVert x \\rVert_{1} = \\sum_{i=1}^{n} \\lvert x_{i} \\rvert \\tag{1}\n$$\n\n$$\n\\lVert x \\rVert_{2} = (\\sum_{i=1}^{n} \\lvert x_{i} \\rvert^{2})^{\\frac{1}{2}} \\tag{2}\n$$\n\n$$\n\\lVert x \\rVert_{\\infty} = \\max_{1 \\leq i \\leq n} \\lvert x_{i} \\rvert \\tag{3}\n$$\n\n其中，$\\lVert x \\rVert_{1}、\\lVert x \\rVert_{2}、\\lVert x \\rVert_{\\infty}$分别称为**1范数，2范数（Euclid范数或欧式范数）和$\\infty$范数**。\n\n对$1\\leq p < +\\infty$，在$C^{n}$上定义\n$$\n\\lVert x \\rVert_{p} = (\\sum_{i=1}^{n} \\lvert x_{i} \\rvert^{p})^{\\frac{1}{p}}，1 \\leq p < +\\infty \\tag{4}\n$$\n$\\lVert x \\rVert_{p}$称为**p范数**。若未标明p，则默认为2范数。\n\n### 矩阵范数\n\n* 定义\n\n设$\\lVert \\mathbf{A} \\rVert$是以$C^{m \\times n}$中的矩阵$\\mathbf{A}$为自变量的非负实值函数，如果它满足以下三个条件：\n\n（1）非负性：当$\\mathbf{A} \\neq 0$时，$\\lVert \\mathbf{A} \\rVert> 0$；当$\\mathbf{A}= 0$时，$\\lVert \\mathbf{A} \\rVert = 0$；\n\n（2）齐次性：对任意$k \\in C，\\mathbf{A} \\in C^{m \\times n}$，有$\\lVert k \\mathbf{A} \\rVert = \\lvert k \\rvert\\ \\lVert A \\rVert $；\n\n（3）三角不等式：对任意$\\mathbf{A}，\\mathbf{B} \\in C^{m \\times n}$，有$\\lVert \\mathbf{A} + \\mathbf{B} \\rVert \\leq \\lVert \\mathbf{A} \\rVert + \\lVert \\mathbf{B} \\rVert$，\n\n则称$\\lVert \\mathbf{A} \\rVert$ 为$m \\times n$矩阵$\\mathbf{A}$的**范数**。\n\n* 常见的矩阵范数\n\n对于$\\mathbf{A} = (a_{ij}) \\in \\mathbf{C}^{m \\times n}$，令\n$$\n\\lVert \\mathbf{A} \\rVert_{1} \\equiv \\sum_{i=1}^{m}\\sum_{j=1}^{n}\\ \\lvert a_{ij} \\rvert \\tag{5}\n$$\n\n$$\n\\lVert \\mathbf{A} \\rVert_{\\infty} \\equiv \\max_{i,\\ j}\\ \\lvert a_{ij} \\rvert \\tag{6}\n$$\n\n$$\n\\lVert \\mathbf{A} \\rVert_{F} \\equiv (\\sum_{i=1}^{m}\\sum_{j=1}^{n}\\ \\lvert a_{ij} \\rvert^{2})^{\\frac{1}{2}}= (tr({\\mathbf{A}^{H}\\mathbf{A}}))^{\\frac{1}{2}} \\tag{7}\n$$\n\n其中，$\\lVert \\mathbf{A} \\rVert_{F}$称为$\\mathbf{A}$的**Frobenius范数**，$A^{H}$是$A$的共轭转置矩阵。\n\n### 补充知识\n\n1.复矩阵：元素中含有复数的矩阵。\n\n2.共轭矩阵：\n\n当$A=(a_{ij})$为复矩阵时，用 $ \\overline{a} $ 表示 $a $的共轭复数，记 $\\overline{A} = (\\overline{a_{ji}})$，则$\\overline{A}$为A的共轭矩阵。\n\n例如，\n$$\nA = \n\\begin{vmatrix}\n3+i & 5\\\\\\\\\n2-2i & i\n\\end{vmatrix}\n$$\n其共轭矩阵$\\overline{A}$为\n$$\n\\overline{A} = \n\\begin{vmatrix}\n3-i & 5 \\\\\\\\\n2+2i & -i\n\\end{vmatrix}\n$$\n3.共轭转置矩阵\n\n当$A=(a_{ij})$为复矩阵时，用 $ \\overline{a} $ 表示 $a $的共轭复数，记 $\\overline{A} = (\\overline{a_{ji}})$，则$（\\overline{A}）^{T} = \\overline{A^{T}}$为A的共轭转置矩阵。\n\n还是用上面的例子，\n$$\n(\\overline{A})^{T}  =\n\\begin{vmatrix}\n3-i & 5 \\\\\\\\\n2+2i & -i\n\\end{vmatrix}^{T} \n =\n\\begin{vmatrix}\n3-i & 2+2i \\\\\\\\\n5 & -i\n\\end{vmatrix}\n$$\n\n\n4.Hermite矩阵\n\nn阶复方阵A的对称元素互为共轭，即A的共轭转置矩阵等于它本身，则A是Hermite矩阵。\n\n例如，\n$$\nB = \n\\begin{vmatrix}\n3 & 2+i \\\\\\\\\n2-i & 2\n\\end{vmatrix}\n$$\nB的共轭转置矩阵如下\n$$\n\\overline{B}^{T} =\n\\begin{vmatrix}\n3 & 2-i \\\\\\\\\n2+i & 2\n\\end{vmatrix}^{T} \n=\n\\begin{vmatrix}\n3 & 2+i \\\\\\\\\n2-i & 2\n\\end{vmatrix} = B\n$$\n故，B是一个Hermite矩阵。\n\n<hr>\n\n参考资料\n\n* 戴华，矩阵论，科学出版社","source":"_posts/vector-and-matrix-norm.md","raw":"---\ntitle: 向量和矩阵的范数\ndate: 2018-08-27 18:49:12\ntags: 线性代数\ncategories: 机器学习\nmathjax: true\n---\n\n阅读《机器学习》和《机器学习实战》的时候，都碰到过**范数（norm）**这个概念，这里记录一下。\n\n<!--more-->\n\n### 向量范数\n\n* 定义\n\n设V是数域P上的线性空间，$\\lVert \\alpha \\rVert$是以V中的向量$\\alpha$为自变量的非负实值函数，如果它满足以下三个条件：\n\n（1）非负性：当$\\alpha \\neq 0$时，$\\lVert \\alpha \\rVert > 0$；当$\\alpha = 0$时，$\\lVert \\alpha \\rVert = 0$；\n\n（2）齐次性：对任意$k \\in P，\\alpha \\in V$，有$\\lVert k \\alpha \\rVert = \\lvert k \\rvert\\ \\lVert\\alpha \\rVert $；\n\n（3）三角不等式：对任意$\\alpha，\\beta \\in V$，有$\\lVert \\alpha + \\beta \\rVert \\leq \\lVert \\alpha \\rVert + \\lVert \\beta \\rVert$，\n\n则称$\\lVert \\alpha \\rVert$ 为向量$\\alpha$的**范数**，并称定义了范数的线性空间为**赋范线性空间**。\n\n> 什么是数域？\n>\n> 设P是包含0和1在内的数集，如果P中任意两个数的和、差、积、商（除数不为0）仍是P中的数，则称P为一个**数域**。\n\n* 常见的向量范数\n\n在n维向量空间$C^n$中，对任意的向量$x = (x_1,x_2,\\dots,x_n)^{T} \\in C^{n} $,有\n$$\n\\lVert x \\rVert_{1} = \\sum_{i=1}^{n} \\lvert x_{i} \\rvert \\tag{1}\n$$\n\n$$\n\\lVert x \\rVert_{2} = (\\sum_{i=1}^{n} \\lvert x_{i} \\rvert^{2})^{\\frac{1}{2}} \\tag{2}\n$$\n\n$$\n\\lVert x \\rVert_{\\infty} = \\max_{1 \\leq i \\leq n} \\lvert x_{i} \\rvert \\tag{3}\n$$\n\n其中，$\\lVert x \\rVert_{1}、\\lVert x \\rVert_{2}、\\lVert x \\rVert_{\\infty}$分别称为**1范数，2范数（Euclid范数或欧式范数）和$\\infty$范数**。\n\n对$1\\leq p < +\\infty$，在$C^{n}$上定义\n$$\n\\lVert x \\rVert_{p} = (\\sum_{i=1}^{n} \\lvert x_{i} \\rvert^{p})^{\\frac{1}{p}}，1 \\leq p < +\\infty \\tag{4}\n$$\n$\\lVert x \\rVert_{p}$称为**p范数**。若未标明p，则默认为2范数。\n\n### 矩阵范数\n\n* 定义\n\n设$\\lVert \\mathbf{A} \\rVert$是以$C^{m \\times n}$中的矩阵$\\mathbf{A}$为自变量的非负实值函数，如果它满足以下三个条件：\n\n（1）非负性：当$\\mathbf{A} \\neq 0$时，$\\lVert \\mathbf{A} \\rVert> 0$；当$\\mathbf{A}= 0$时，$\\lVert \\mathbf{A} \\rVert = 0$；\n\n（2）齐次性：对任意$k \\in C，\\mathbf{A} \\in C^{m \\times n}$，有$\\lVert k \\mathbf{A} \\rVert = \\lvert k \\rvert\\ \\lVert A \\rVert $；\n\n（3）三角不等式：对任意$\\mathbf{A}，\\mathbf{B} \\in C^{m \\times n}$，有$\\lVert \\mathbf{A} + \\mathbf{B} \\rVert \\leq \\lVert \\mathbf{A} \\rVert + \\lVert \\mathbf{B} \\rVert$，\n\n则称$\\lVert \\mathbf{A} \\rVert$ 为$m \\times n$矩阵$\\mathbf{A}$的**范数**。\n\n* 常见的矩阵范数\n\n对于$\\mathbf{A} = (a_{ij}) \\in \\mathbf{C}^{m \\times n}$，令\n$$\n\\lVert \\mathbf{A} \\rVert_{1} \\equiv \\sum_{i=1}^{m}\\sum_{j=1}^{n}\\ \\lvert a_{ij} \\rvert \\tag{5}\n$$\n\n$$\n\\lVert \\mathbf{A} \\rVert_{\\infty} \\equiv \\max_{i,\\ j}\\ \\lvert a_{ij} \\rvert \\tag{6}\n$$\n\n$$\n\\lVert \\mathbf{A} \\rVert_{F} \\equiv (\\sum_{i=1}^{m}\\sum_{j=1}^{n}\\ \\lvert a_{ij} \\rvert^{2})^{\\frac{1}{2}}= (tr({\\mathbf{A}^{H}\\mathbf{A}}))^{\\frac{1}{2}} \\tag{7}\n$$\n\n其中，$\\lVert \\mathbf{A} \\rVert_{F}$称为$\\mathbf{A}$的**Frobenius范数**，$A^{H}$是$A$的共轭转置矩阵。\n\n### 补充知识\n\n1.复矩阵：元素中含有复数的矩阵。\n\n2.共轭矩阵：\n\n当$A=(a_{ij})$为复矩阵时，用 $ \\overline{a} $ 表示 $a $的共轭复数，记 $\\overline{A} = (\\overline{a_{ji}})$，则$\\overline{A}$为A的共轭矩阵。\n\n例如，\n$$\nA = \n\\begin{vmatrix}\n3+i & 5\\\\\\\\\n2-2i & i\n\\end{vmatrix}\n$$\n其共轭矩阵$\\overline{A}$为\n$$\n\\overline{A} = \n\\begin{vmatrix}\n3-i & 5 \\\\\\\\\n2+2i & -i\n\\end{vmatrix}\n$$\n3.共轭转置矩阵\n\n当$A=(a_{ij})$为复矩阵时，用 $ \\overline{a} $ 表示 $a $的共轭复数，记 $\\overline{A} = (\\overline{a_{ji}})$，则$（\\overline{A}）^{T} = \\overline{A^{T}}$为A的共轭转置矩阵。\n\n还是用上面的例子，\n$$\n(\\overline{A})^{T}  =\n\\begin{vmatrix}\n3-i & 5 \\\\\\\\\n2+2i & -i\n\\end{vmatrix}^{T} \n =\n\\begin{vmatrix}\n3-i & 2+2i \\\\\\\\\n5 & -i\n\\end{vmatrix}\n$$\n\n\n4.Hermite矩阵\n\nn阶复方阵A的对称元素互为共轭，即A的共轭转置矩阵等于它本身，则A是Hermite矩阵。\n\n例如，\n$$\nB = \n\\begin{vmatrix}\n3 & 2+i \\\\\\\\\n2-i & 2\n\\end{vmatrix}\n$$\nB的共轭转置矩阵如下\n$$\n\\overline{B}^{T} =\n\\begin{vmatrix}\n3 & 2-i \\\\\\\\\n2+i & 2\n\\end{vmatrix}^{T} \n=\n\\begin{vmatrix}\n3 & 2+i \\\\\\\\\n2-i & 2\n\\end{vmatrix} = B\n$$\n故，B是一个Hermite矩阵。\n\n<hr>\n\n参考资料\n\n* 戴华，矩阵论，科学出版社","slug":"vector-and-matrix-norm","published":1,"updated":"2019-01-19T07:23:57.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9asg007rj1q0sec2cx6t","content":"<p>阅读《机器学习》和《机器学习实战》的时候，都碰到过<strong>范数（norm）</strong>这个概念，这里记录一下。</p>\n<a id=\"more\"></a>\n<h3 id=\"向量范数\"><a href=\"#向量范数\" class=\"headerlink\" title=\"向量范数\"></a>向量范数</h3><ul>\n<li>定义</li>\n</ul>\n<p>设V是数域P上的线性空间，$\\lVert \\alpha \\rVert$是以V中的向量$\\alpha$为自变量的非负实值函数，如果它满足以下三个条件：</p>\n<p>（1）非负性：当$\\alpha \\neq 0$时，$\\lVert \\alpha \\rVert &gt; 0$；当$\\alpha = 0$时，$\\lVert \\alpha \\rVert = 0$；</p>\n<p>（2）齐次性：对任意$k \\in P，\\alpha \\in V$，有$\\lVert k \\alpha \\rVert = \\lvert k \\rvert\\ \\lVert\\alpha \\rVert $；</p>\n<p>（3）三角不等式：对任意$\\alpha，\\beta \\in V$，有$\\lVert \\alpha + \\beta \\rVert \\leq \\lVert \\alpha \\rVert + \\lVert \\beta \\rVert$，</p>\n<p>则称$\\lVert \\alpha \\rVert$ 为向量$\\alpha$的<strong>范数</strong>，并称定义了范数的线性空间为<strong>赋范线性空间</strong>。</p>\n<blockquote>\n<p>什么是数域？</p>\n<p>设P是包含0和1在内的数集，如果P中任意两个数的和、差、积、商（除数不为0）仍是P中的数，则称P为一个<strong>数域</strong>。</p>\n</blockquote>\n<ul>\n<li>常见的向量范数</li>\n</ul>\n<p>在n维向量空间$C^n$中，对任意的向量$x = (x_1,x_2,\\dots,x_n)^{T} \\in C^{n} $,有<br>$$<br>\\lVert x \\rVert_{1} = \\sum_{i=1}^{n} \\lvert x_{i} \\rvert \\tag{1}<br>$$</p>\n<p>$$<br>\\lVert x \\rVert_{2} = (\\sum_{i=1}^{n} \\lvert x_{i} \\rvert^{2})^{\\frac{1}{2}} \\tag{2}<br>$$</p>\n<p>$$<br>\\lVert x \\rVert_{\\infty} = \\max_{1 \\leq i \\leq n} \\lvert x_{i} \\rvert \\tag{3}<br>$$</p>\n<p>其中，$\\lVert x \\rVert_{1}、\\lVert x \\rVert_{2}、\\lVert x \\rVert_{\\infty}$分别称为<strong>1范数，2范数（Euclid范数或欧式范数）和$\\infty$范数</strong>。</p>\n<p>对$1\\leq p &lt; +\\infty$，在$C^{n}$上定义<br>$$<br>\\lVert x \\rVert_{p} = (\\sum_{i=1}^{n} \\lvert x_{i} \\rvert^{p})^{\\frac{1}{p}}，1 \\leq p &lt; +\\infty \\tag{4}<br>$$<br>$\\lVert x \\rVert_{p}$称为<strong>p范数</strong>。若未标明p，则默认为2范数。</p>\n<h3 id=\"矩阵范数\"><a href=\"#矩阵范数\" class=\"headerlink\" title=\"矩阵范数\"></a>矩阵范数</h3><ul>\n<li>定义</li>\n</ul>\n<p>设$\\lVert \\mathbf{A} \\rVert$是以$C^{m \\times n}$中的矩阵$\\mathbf{A}$为自变量的非负实值函数，如果它满足以下三个条件：</p>\n<p>（1）非负性：当$\\mathbf{A} \\neq 0$时，$\\lVert \\mathbf{A} \\rVert&gt; 0$；当$\\mathbf{A}= 0$时，$\\lVert \\mathbf{A} \\rVert = 0$；</p>\n<p>（2）齐次性：对任意$k \\in C，\\mathbf{A} \\in C^{m \\times n}$，有$\\lVert k \\mathbf{A} \\rVert = \\lvert k \\rvert\\ \\lVert A \\rVert $；</p>\n<p>（3）三角不等式：对任意$\\mathbf{A}，\\mathbf{B} \\in C^{m \\times n}$，有$\\lVert \\mathbf{A} + \\mathbf{B} \\rVert \\leq \\lVert \\mathbf{A} \\rVert + \\lVert \\mathbf{B} \\rVert$，</p>\n<p>则称$\\lVert \\mathbf{A} \\rVert$ 为$m \\times n$矩阵$\\mathbf{A}$的<strong>范数</strong>。</p>\n<ul>\n<li>常见的矩阵范数</li>\n</ul>\n<p>对于$\\mathbf{A} = (a_{ij}) \\in \\mathbf{C}^{m \\times n}$，令<br>$$<br>\\lVert \\mathbf{A} \\rVert_{1} \\equiv \\sum_{i=1}^{m}\\sum_{j=1}^{n}\\ \\lvert a_{ij} \\rvert \\tag{5}<br>$$</p>\n<p>$$<br>\\lVert \\mathbf{A} \\rVert_{\\infty} \\equiv \\max_{i,\\ j}\\ \\lvert a_{ij} \\rvert \\tag{6}<br>$$</p>\n<p>$$<br>\\lVert \\mathbf{A} \\rVert_{F} \\equiv (\\sum_{i=1}^{m}\\sum_{j=1}^{n}\\ \\lvert a_{ij} \\rvert^{2})^{\\frac{1}{2}}= (tr({\\mathbf{A}^{H}\\mathbf{A}}))^{\\frac{1}{2}} \\tag{7}<br>$$</p>\n<p>其中，$\\lVert \\mathbf{A} \\rVert_{F}$称为$\\mathbf{A}$的<strong>Frobenius范数</strong>，$A^{H}$是$A$的共轭转置矩阵。</p>\n<h3 id=\"补充知识\"><a href=\"#补充知识\" class=\"headerlink\" title=\"补充知识\"></a>补充知识</h3><p>1.复矩阵：元素中含有复数的矩阵。</p>\n<p>2.共轭矩阵：</p>\n<p>当$A=(a_{ij})$为复矩阵时，用 $ \\overline{a} $ 表示 $a $的共轭复数，记 $\\overline{A} = (\\overline{a_{ji}})$，则$\\overline{A}$为A的共轭矩阵。</p>\n<p>例如，<br>$$<br>A =<br>\\begin{vmatrix}<br>3+i &amp; 5\\\\<br>2-2i &amp; i<br>\\end{vmatrix}<br>$$<br>其共轭矩阵$\\overline{A}$为<br>$$<br>\\overline{A} =<br>\\begin{vmatrix}<br>3-i &amp; 5 \\\\<br>2+2i &amp; -i<br>\\end{vmatrix}<br>$$<br>3.共轭转置矩阵</p>\n<p>当$A=(a_{ij})$为复矩阵时，用 $ \\overline{a} $ 表示 $a $的共轭复数，记 $\\overline{A} = (\\overline{a_{ji}})$，则$（\\overline{A}）^{T} = \\overline{A^{T}}$为A的共轭转置矩阵。</p>\n<p>还是用上面的例子，<br>$$<br>(\\overline{A})^{T}  =<br>\\begin{vmatrix}<br>3-i &amp; 5 \\\\<br>2+2i &amp; -i<br>\\end{vmatrix}^{T}<br> =<br>\\begin{vmatrix}<br>3-i &amp; 2+2i \\\\<br>5 &amp; -i<br>\\end{vmatrix}<br>$$</p>\n<p>4.Hermite矩阵</p>\n<p>n阶复方阵A的对称元素互为共轭，即A的共轭转置矩阵等于它本身，则A是Hermite矩阵。</p>\n<p>例如，<br>$$<br>B =<br>\\begin{vmatrix}<br>3 &amp; 2+i \\\\<br>2-i &amp; 2<br>\\end{vmatrix}<br>$$<br>B的共轭转置矩阵如下<br>$$<br>\\overline{B}^{T} =<br>\\begin{vmatrix}<br>3 &amp; 2-i \\\\<br>2+i &amp; 2<br>\\end{vmatrix}^{T}<br>=<br>\\begin{vmatrix}<br>3 &amp; 2+i \\\\<br>2-i &amp; 2<br>\\end{vmatrix} = B<br>$$<br>故，B是一个Hermite矩阵。</p>\n<hr>\n\n<p>参考资料</p>\n<ul>\n<li>戴华，矩阵论，科学出版社</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>阅读《机器学习》和《机器学习实战》的时候，都碰到过<strong>范数（norm）</strong>这个概念，这里记录一下。</p>","more":"<h3 id=\"向量范数\"><a href=\"#向量范数\" class=\"headerlink\" title=\"向量范数\"></a>向量范数</h3><ul>\n<li>定义</li>\n</ul>\n<p>设V是数域P上的线性空间，$\\lVert \\alpha \\rVert$是以V中的向量$\\alpha$为自变量的非负实值函数，如果它满足以下三个条件：</p>\n<p>（1）非负性：当$\\alpha \\neq 0$时，$\\lVert \\alpha \\rVert &gt; 0$；当$\\alpha = 0$时，$\\lVert \\alpha \\rVert = 0$；</p>\n<p>（2）齐次性：对任意$k \\in P，\\alpha \\in V$，有$\\lVert k \\alpha \\rVert = \\lvert k \\rvert\\ \\lVert\\alpha \\rVert $；</p>\n<p>（3）三角不等式：对任意$\\alpha，\\beta \\in V$，有$\\lVert \\alpha + \\beta \\rVert \\leq \\lVert \\alpha \\rVert + \\lVert \\beta \\rVert$，</p>\n<p>则称$\\lVert \\alpha \\rVert$ 为向量$\\alpha$的<strong>范数</strong>，并称定义了范数的线性空间为<strong>赋范线性空间</strong>。</p>\n<blockquote>\n<p>什么是数域？</p>\n<p>设P是包含0和1在内的数集，如果P中任意两个数的和、差、积、商（除数不为0）仍是P中的数，则称P为一个<strong>数域</strong>。</p>\n</blockquote>\n<ul>\n<li>常见的向量范数</li>\n</ul>\n<p>在n维向量空间$C^n$中，对任意的向量$x = (x_1,x_2,\\dots,x_n)^{T} \\in C^{n} $,有<br>$$<br>\\lVert x \\rVert_{1} = \\sum_{i=1}^{n} \\lvert x_{i} \\rvert \\tag{1}<br>$$</p>\n<p>$$<br>\\lVert x \\rVert_{2} = (\\sum_{i=1}^{n} \\lvert x_{i} \\rvert^{2})^{\\frac{1}{2}} \\tag{2}<br>$$</p>\n<p>$$<br>\\lVert x \\rVert_{\\infty} = \\max_{1 \\leq i \\leq n} \\lvert x_{i} \\rvert \\tag{3}<br>$$</p>\n<p>其中，$\\lVert x \\rVert_{1}、\\lVert x \\rVert_{2}、\\lVert x \\rVert_{\\infty}$分别称为<strong>1范数，2范数（Euclid范数或欧式范数）和$\\infty$范数</strong>。</p>\n<p>对$1\\leq p &lt; +\\infty$，在$C^{n}$上定义<br>$$<br>\\lVert x \\rVert_{p} = (\\sum_{i=1}^{n} \\lvert x_{i} \\rvert^{p})^{\\frac{1}{p}}，1 \\leq p &lt; +\\infty \\tag{4}<br>$$<br>$\\lVert x \\rVert_{p}$称为<strong>p范数</strong>。若未标明p，则默认为2范数。</p>\n<h3 id=\"矩阵范数\"><a href=\"#矩阵范数\" class=\"headerlink\" title=\"矩阵范数\"></a>矩阵范数</h3><ul>\n<li>定义</li>\n</ul>\n<p>设$\\lVert \\mathbf{A} \\rVert$是以$C^{m \\times n}$中的矩阵$\\mathbf{A}$为自变量的非负实值函数，如果它满足以下三个条件：</p>\n<p>（1）非负性：当$\\mathbf{A} \\neq 0$时，$\\lVert \\mathbf{A} \\rVert&gt; 0$；当$\\mathbf{A}= 0$时，$\\lVert \\mathbf{A} \\rVert = 0$；</p>\n<p>（2）齐次性：对任意$k \\in C，\\mathbf{A} \\in C^{m \\times n}$，有$\\lVert k \\mathbf{A} \\rVert = \\lvert k \\rvert\\ \\lVert A \\rVert $；</p>\n<p>（3）三角不等式：对任意$\\mathbf{A}，\\mathbf{B} \\in C^{m \\times n}$，有$\\lVert \\mathbf{A} + \\mathbf{B} \\rVert \\leq \\lVert \\mathbf{A} \\rVert + \\lVert \\mathbf{B} \\rVert$，</p>\n<p>则称$\\lVert \\mathbf{A} \\rVert$ 为$m \\times n$矩阵$\\mathbf{A}$的<strong>范数</strong>。</p>\n<ul>\n<li>常见的矩阵范数</li>\n</ul>\n<p>对于$\\mathbf{A} = (a_{ij}) \\in \\mathbf{C}^{m \\times n}$，令<br>$$<br>\\lVert \\mathbf{A} \\rVert_{1} \\equiv \\sum_{i=1}^{m}\\sum_{j=1}^{n}\\ \\lvert a_{ij} \\rvert \\tag{5}<br>$$</p>\n<p>$$<br>\\lVert \\mathbf{A} \\rVert_{\\infty} \\equiv \\max_{i,\\ j}\\ \\lvert a_{ij} \\rvert \\tag{6}<br>$$</p>\n<p>$$<br>\\lVert \\mathbf{A} \\rVert_{F} \\equiv (\\sum_{i=1}^{m}\\sum_{j=1}^{n}\\ \\lvert a_{ij} \\rvert^{2})^{\\frac{1}{2}}= (tr({\\mathbf{A}^{H}\\mathbf{A}}))^{\\frac{1}{2}} \\tag{7}<br>$$</p>\n<p>其中，$\\lVert \\mathbf{A} \\rVert_{F}$称为$\\mathbf{A}$的<strong>Frobenius范数</strong>，$A^{H}$是$A$的共轭转置矩阵。</p>\n<h3 id=\"补充知识\"><a href=\"#补充知识\" class=\"headerlink\" title=\"补充知识\"></a>补充知识</h3><p>1.复矩阵：元素中含有复数的矩阵。</p>\n<p>2.共轭矩阵：</p>\n<p>当$A=(a_{ij})$为复矩阵时，用 $ \\overline{a} $ 表示 $a $的共轭复数，记 $\\overline{A} = (\\overline{a_{ji}})$，则$\\overline{A}$为A的共轭矩阵。</p>\n<p>例如，<br>$$<br>A =<br>\\begin{vmatrix}<br>3+i &amp; 5\\\\<br>2-2i &amp; i<br>\\end{vmatrix}<br>$$<br>其共轭矩阵$\\overline{A}$为<br>$$<br>\\overline{A} =<br>\\begin{vmatrix}<br>3-i &amp; 5 \\\\<br>2+2i &amp; -i<br>\\end{vmatrix}<br>$$<br>3.共轭转置矩阵</p>\n<p>当$A=(a_{ij})$为复矩阵时，用 $ \\overline{a} $ 表示 $a $的共轭复数，记 $\\overline{A} = (\\overline{a_{ji}})$，则$（\\overline{A}）^{T} = \\overline{A^{T}}$为A的共轭转置矩阵。</p>\n<p>还是用上面的例子，<br>$$<br>(\\overline{A})^{T}  =<br>\\begin{vmatrix}<br>3-i &amp; 5 \\\\<br>2+2i &amp; -i<br>\\end{vmatrix}^{T}<br> =<br>\\begin{vmatrix}<br>3-i &amp; 2+2i \\\\<br>5 &amp; -i<br>\\end{vmatrix}<br>$$</p>\n<p>4.Hermite矩阵</p>\n<p>n阶复方阵A的对称元素互为共轭，即A的共轭转置矩阵等于它本身，则A是Hermite矩阵。</p>\n<p>例如，<br>$$<br>B =<br>\\begin{vmatrix}<br>3 &amp; 2+i \\\\<br>2-i &amp; 2<br>\\end{vmatrix}<br>$$<br>B的共轭转置矩阵如下<br>$$<br>\\overline{B}^{T} =<br>\\begin{vmatrix}<br>3 &amp; 2-i \\\\<br>2+i &amp; 2<br>\\end{vmatrix}^{T}<br>=<br>\\begin{vmatrix}<br>3 &amp; 2+i \\\\<br>2-i &amp; 2<br>\\end{vmatrix} = B<br>$$<br>故，B是一个Hermite矩阵。</p>\n<hr>\n\n<p>参考资料</p>\n<ul>\n<li>戴华，矩阵论，科学出版社</li>\n</ul>"},{"title":"Windows下搭建nginx和tomcat整合开发环境","date":"2018-05-19T10:26:32.000Z","updated":"2018-05-19T10:26:32.000Z","_content":"\n> 遇到的问题越多，人成长的越快。算下日子，接手课题组的项目，已经一月有余。期间碰到了很多问题，也一直在积极面对。\n\n#### 问题引出 \n\n接手课题组的项目后，遇到过一个很严重的问题：项目在本地tomcat上能完美运行，但是到了服务器上，就出问题了——JSP文件中el表达式${pageContext.request.contextPath}取到的上下文路径始终为空，即***“”。由于之前深受项目必须使用绝对路径这一思想的影响，我在JSP文件中定义了如下变量，用来表示外部js文件中的ajax请求地址的前缀。\n\n```javascript\n<script src=\"text/javascript\">\n\tvar contextPath = \"${pageContext.request.contextPath}\";\n</script>\n```\n\n<!--more-->\n\n对于一个常规的java web项目，我们在部署到服务器tomcat中的时候，一般会先配置server.xml文件\n\n```xml\n<!--端口号改为80-->\n<Connector port=\"8080\" protocol=\"HTTP/1.1\"\n               connectionTimeout=\"20000\"\n               redirectPort=\"8443\" />\n<!--defaultHost和主机的name均改为项目的域名-->\n<Engine name=\"Catalina\" defaultHost=\"localhost\">\n     <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n     </Realm>\n\t<Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n          <!--如果项目名不为ROOT，还要配置Context-->\n          <!--<Context docBase=\"\" path=\"\"/>-->\n\t</Host>\n</Engine>\n```\n\n但是，最开始不知道的是，服务器上使用了nginx作为反向代理服务器，所有的http请求，都由nginx转发给tomcat，tomcat的server.xml根本就没有配置（或者说是使用了默认配置），这就很好的解释了为什么${pageContext.request.contextPath}为空了，因为项目名为ROOT的项目，默认的path就是空。\n\n当时的解决办法是，把上面jsp中定义的js变量contextPath直接改为项目域名。这样一改，域名是写死的，不带www前缀的时候，出现了ajax跨域。\n\n后来想想，干脆直接改为“.”，也就是用相对路径。这样一改，似乎解决了原来的问题。但这只是假象，一旦原来的路径多起来，\".\"表示与当前页面同级，ajax请求的地址可能就不对了。\n\n最后干脆弃用${pageContext.request.contextPath}，所有的请求以\"/\"开头，并且为了防止再出现本机运行效果和服务器上运行效果不一致的情况，我在我的电脑上搭建了nginx和tomcat整合开发环境。\n\n废话不多说了，赶紧进入正题。\n\n#### 安装nginx \n\n首先，从[nginx官网](http://nginx.org/)下载最新的稳定版nginx，[下载地址](http://nginx.org/en/download.html)\n\n当前最新的稳定版本是1.14.0，根据自己的操作系统选择对应的版本，我这里选择[nginx/Windows-1.14.0](http://nginx.org/download/nginx-1.14.0.zip)\n\n下载下来后，直接解压缩就可以了，下面是解压后的目录结构\n\n![](http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519202131.png)\n\n* 启动nginx\n\n启动nginx有两种方式，一是点击nginx.exe直接启动，二是在命令行模式下切换到nginx解压目录（当然，也可以将nginx路径添加到系统环境变量path中，以后就不需要切换到解压目录那么麻烦了），使用命令\n\n***start nginx***来启动nginx（推荐使用这种方法）。\n\n进入命令行模式，切换到nginx解压目录，我直接解压在桌面上了，输入start nginx，屏幕一闪，然后出现下一个命令行，这就表示nginx已经启动啦。\n\n![](http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519211405.png)\n\n现在我们来测试下nginx是不是真的成功启动了，在浏览器里输入localhost，不出意外的话应该会出现nginx的欢迎页面。\n\n\n\n![](http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519211328.png)\n\n* 关闭nginx\n\n使用命令***nginx.exe -s stop***来关闭nginx\n\n* 重启nginx\n\n使用命令***nginx.exe -s reload***来重启nginx\n\n* 配置nginx\n\n在conf目录下有一个叫做nginx.conf文件，这是nginx的配置文件。\n\n这里我不会详细讲nginx.conf中的各种配置（因为我现在也不会啊^_^），以后会专门开一个系列来讲nginx以及Linux上nginx和tomcat实现反向代理和负载均衡。\n\n![](http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519202234.png)\n\n主要来看下与开发环境搭建相关的server的配置\n\n```python\n#配置虚拟主机\nserver {\n    listen       80; #指定需要nginx监听的端口\n    server_name  localhost; #需要访问的域名\n\n    #charset koi8-r;\n\n    #access_log  logs/host.access.log  main;\n    #转发\n    location / {\n        root   html; #指定根目录\n        index  index.html index.htm; #指定首页及优先顺序\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   html;\n    }\n}\n```\n\n主要需要改下location /里面的配置\n\n```python\nlocation / {\n    proxy_pass http://localhost:8080; # proxy_pass 指定被代理服务器的URL\n    proxy_set_header Host $host; # 将nginx接收到的请求头信息中的host转发给被代理服务器\n}\n```\n\n到这里，nginx就基本配置好了。\n\n#### 配置eclipse（可选）\n\n在eclipse中运行我们的项目，然后修改eclipse引入的tomcat配置文件server.xml\n\n![](http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519205728.png)\n\n```xml\n<!--eclipse默认情况下会用项目名作为上下文路径，这里我们改为空或者/，\n不改的话，访问的时候需要加上项目名-->\n<Context docBase=\"demo\" path=\"\" reloadable=\"true\" \n         source=\"org.eclipse.jst.jee.server:course\"/>\n```\n\n我们在浏览器中直接访问localhost，看能否访问到我们的项目\n\n![](http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519213000.png)\n\n出现了Hello World! 这表明nginx确实把我们的请求转发给了tomcat。","source":"_posts/windows-nginx-tomcat-development-environment.md","raw":"---\ntitle: Windows下搭建nginx和tomcat整合开发环境\ndate: 2018-05-19 18:26:32\nupdated: 2018-05-19 18:26:32\ntags: [nginx,tomcat]\ncategories: nginx\n---\n\n> 遇到的问题越多，人成长的越快。算下日子，接手课题组的项目，已经一月有余。期间碰到了很多问题，也一直在积极面对。\n\n#### 问题引出 \n\n接手课题组的项目后，遇到过一个很严重的问题：项目在本地tomcat上能完美运行，但是到了服务器上，就出问题了——JSP文件中el表达式${pageContext.request.contextPath}取到的上下文路径始终为空，即***“”。由于之前深受项目必须使用绝对路径这一思想的影响，我在JSP文件中定义了如下变量，用来表示外部js文件中的ajax请求地址的前缀。\n\n```javascript\n<script src=\"text/javascript\">\n\tvar contextPath = \"${pageContext.request.contextPath}\";\n</script>\n```\n\n<!--more-->\n\n对于一个常规的java web项目，我们在部署到服务器tomcat中的时候，一般会先配置server.xml文件\n\n```xml\n<!--端口号改为80-->\n<Connector port=\"8080\" protocol=\"HTTP/1.1\"\n               connectionTimeout=\"20000\"\n               redirectPort=\"8443\" />\n<!--defaultHost和主机的name均改为项目的域名-->\n<Engine name=\"Catalina\" defaultHost=\"localhost\">\n     <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n     </Realm>\n\t<Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n          <!--如果项目名不为ROOT，还要配置Context-->\n          <!--<Context docBase=\"\" path=\"\"/>-->\n\t</Host>\n</Engine>\n```\n\n但是，最开始不知道的是，服务器上使用了nginx作为反向代理服务器，所有的http请求，都由nginx转发给tomcat，tomcat的server.xml根本就没有配置（或者说是使用了默认配置），这就很好的解释了为什么${pageContext.request.contextPath}为空了，因为项目名为ROOT的项目，默认的path就是空。\n\n当时的解决办法是，把上面jsp中定义的js变量contextPath直接改为项目域名。这样一改，域名是写死的，不带www前缀的时候，出现了ajax跨域。\n\n后来想想，干脆直接改为“.”，也就是用相对路径。这样一改，似乎解决了原来的问题。但这只是假象，一旦原来的路径多起来，\".\"表示与当前页面同级，ajax请求的地址可能就不对了。\n\n最后干脆弃用${pageContext.request.contextPath}，所有的请求以\"/\"开头，并且为了防止再出现本机运行效果和服务器上运行效果不一致的情况，我在我的电脑上搭建了nginx和tomcat整合开发环境。\n\n废话不多说了，赶紧进入正题。\n\n#### 安装nginx \n\n首先，从[nginx官网](http://nginx.org/)下载最新的稳定版nginx，[下载地址](http://nginx.org/en/download.html)\n\n当前最新的稳定版本是1.14.0，根据自己的操作系统选择对应的版本，我这里选择[nginx/Windows-1.14.0](http://nginx.org/download/nginx-1.14.0.zip)\n\n下载下来后，直接解压缩就可以了，下面是解压后的目录结构\n\n![](http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519202131.png)\n\n* 启动nginx\n\n启动nginx有两种方式，一是点击nginx.exe直接启动，二是在命令行模式下切换到nginx解压目录（当然，也可以将nginx路径添加到系统环境变量path中，以后就不需要切换到解压目录那么麻烦了），使用命令\n\n***start nginx***来启动nginx（推荐使用这种方法）。\n\n进入命令行模式，切换到nginx解压目录，我直接解压在桌面上了，输入start nginx，屏幕一闪，然后出现下一个命令行，这就表示nginx已经启动啦。\n\n![](http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519211405.png)\n\n现在我们来测试下nginx是不是真的成功启动了，在浏览器里输入localhost，不出意外的话应该会出现nginx的欢迎页面。\n\n\n\n![](http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519211328.png)\n\n* 关闭nginx\n\n使用命令***nginx.exe -s stop***来关闭nginx\n\n* 重启nginx\n\n使用命令***nginx.exe -s reload***来重启nginx\n\n* 配置nginx\n\n在conf目录下有一个叫做nginx.conf文件，这是nginx的配置文件。\n\n这里我不会详细讲nginx.conf中的各种配置（因为我现在也不会啊^_^），以后会专门开一个系列来讲nginx以及Linux上nginx和tomcat实现反向代理和负载均衡。\n\n![](http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519202234.png)\n\n主要来看下与开发环境搭建相关的server的配置\n\n```python\n#配置虚拟主机\nserver {\n    listen       80; #指定需要nginx监听的端口\n    server_name  localhost; #需要访问的域名\n\n    #charset koi8-r;\n\n    #access_log  logs/host.access.log  main;\n    #转发\n    location / {\n        root   html; #指定根目录\n        index  index.html index.htm; #指定首页及优先顺序\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   html;\n    }\n}\n```\n\n主要需要改下location /里面的配置\n\n```python\nlocation / {\n    proxy_pass http://localhost:8080; # proxy_pass 指定被代理服务器的URL\n    proxy_set_header Host $host; # 将nginx接收到的请求头信息中的host转发给被代理服务器\n}\n```\n\n到这里，nginx就基本配置好了。\n\n#### 配置eclipse（可选）\n\n在eclipse中运行我们的项目，然后修改eclipse引入的tomcat配置文件server.xml\n\n![](http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519205728.png)\n\n```xml\n<!--eclipse默认情况下会用项目名作为上下文路径，这里我们改为空或者/，\n不改的话，访问的时候需要加上项目名-->\n<Context docBase=\"demo\" path=\"\" reloadable=\"true\" \n         source=\"org.eclipse.jst.jee.server:course\"/>\n```\n\n我们在浏览器中直接访问localhost，看能否访问到我们的项目\n\n![](http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519213000.png)\n\n出现了Hello World! 这表明nginx确实把我们的请求转发给了tomcat。","slug":"windows-nginx-tomcat-development-environment","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9ash007wj1q0gmtijvw7","content":"<blockquote>\n<p>遇到的问题越多，人成长的越快。算下日子，接手课题组的项目，已经一月有余。期间碰到了很多问题，也一直在积极面对。</p>\n</blockquote>\n<h4 id=\"问题引出\"><a href=\"#问题引出\" class=\"headerlink\" title=\"问题引出\"></a>问题引出</h4><p>接手课题组的项目后，遇到过一个很严重的问题：项目在本地tomcat上能完美运行，但是到了服务器上，就出问题了——JSP文件中el表达式${pageContext.request.contextPath}取到的上下文路径始终为空，即***“”。由于之前深受项目必须使用绝对路径这一思想的影响，我在JSP文件中定义了如下变量，用来表示外部js文件中的ajax请求地址的前缀。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> contextPath = <span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;\"</span>;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>对于一个常规的java web项目，我们在部署到服务器tomcat中的时候，一般会先配置server.xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--端口号改为80--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8080\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--defaultHost和主机的name均改为项目的域名--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Engine</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span> <span class=\"attr\">defaultHost</span>=<span class=\"string\">\"localhost\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.LockOutRealm\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.UserDatabaseRealm\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">resourceName</span>=<span class=\"string\">\"UserDatabase\"</span>/&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">Realm</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">name</span>=<span class=\"string\">\"localhost\"</span>  <span class=\"attr\">appBase</span>=<span class=\"string\">\"webapps\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">unpackWARs</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.valves.AccessLogValve\"</span> <span class=\"attr\">directory</span>=<span class=\"string\">\"logs\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">prefix</span>=<span class=\"string\">\"localhost_access_log\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\".txt\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">pattern</span>=<span class=\"string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!--如果项目名不为ROOT，还要配置Context--&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!--&lt;Context docBase=\"\" path=\"\"/&gt;--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">Host</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Engine</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>但是，最开始不知道的是，服务器上使用了nginx作为反向代理服务器，所有的http请求，都由nginx转发给tomcat，tomcat的server.xml根本就没有配置（或者说是使用了默认配置），这就很好的解释了为什么${pageContext.request.contextPath}为空了，因为项目名为ROOT的项目，默认的path就是空。</p>\n<p>当时的解决办法是，把上面jsp中定义的js变量contextPath直接改为项目域名。这样一改，域名是写死的，不带www前缀的时候，出现了ajax跨域。</p>\n<p>后来想想，干脆直接改为“.”，也就是用相对路径。这样一改，似乎解决了原来的问题。但这只是假象，一旦原来的路径多起来，”.”表示与当前页面同级，ajax请求的地址可能就不对了。</p>\n<p>最后干脆弃用${pageContext.request.contextPath}，所有的请求以”/“开头，并且为了防止再出现本机运行效果和服务器上运行效果不一致的情况，我在我的电脑上搭建了nginx和tomcat整合开发环境。</p>\n<p>废话不多说了，赶紧进入正题。</p>\n<h4 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h4><p>首先，从<a href=\"http://nginx.org/\" target=\"_blank\" rel=\"noopener\">nginx官网</a>下载最新的稳定版nginx，<a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n<p>当前最新的稳定版本是1.14.0，根据自己的操作系统选择对应的版本，我这里选择<a href=\"http://nginx.org/download/nginx-1.14.0.zip\" target=\"_blank\" rel=\"noopener\">nginx/Windows-1.14.0</a></p>\n<p>下载下来后，直接解压缩就可以了，下面是解压后的目录结构</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519202131.png\" alt=\"\"></p>\n<ul>\n<li>启动nginx</li>\n</ul>\n<p>启动nginx有两种方式，一是点击nginx.exe直接启动，二是在命令行模式下切换到nginx解压目录（当然，也可以将nginx路径添加到系统环境变量path中，以后就不需要切换到解压目录那么麻烦了），使用命令</p>\n<p><strong><em>start nginx</em></strong>来启动nginx（推荐使用这种方法）。</p>\n<p>进入命令行模式，切换到nginx解压目录，我直接解压在桌面上了，输入start nginx，屏幕一闪，然后出现下一个命令行，这就表示nginx已经启动啦。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519211405.png\" alt=\"\"></p>\n<p>现在我们来测试下nginx是不是真的成功启动了，在浏览器里输入localhost，不出意外的话应该会出现nginx的欢迎页面。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519211328.png\" alt=\"\"></p>\n<ul>\n<li>关闭nginx</li>\n</ul>\n<p>使用命令<strong><em>nginx.exe -s stop</em></strong>来关闭nginx</p>\n<ul>\n<li>重启nginx</li>\n</ul>\n<p>使用命令<strong><em>nginx.exe -s reload</em></strong>来重启nginx</p>\n<ul>\n<li>配置nginx</li>\n</ul>\n<p>在conf目录下有一个叫做nginx.conf文件，这是nginx的配置文件。</p>\n<p>这里我不会详细讲nginx.conf中的各种配置（因为我现在也不会啊^_^），以后会专门开一个系列来讲nginx以及Linux上nginx和tomcat实现反向代理和负载均衡。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519202234.png\" alt=\"\"></p>\n<p>主要来看下与开发环境搭建相关的server的配置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#配置虚拟主机</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       <span class=\"number\">80</span>; <span class=\"comment\">#指定需要nginx监听的端口</span></span><br><span class=\"line\">    server_name  localhost; <span class=\"comment\">#需要访问的域名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#charset koi8-r;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#access_log  logs/host.access.log  main;</span></span><br><span class=\"line\">    <span class=\"comment\">#转发</span></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   html; <span class=\"comment\">#指定根目录</span></span><br><span class=\"line\">        index  index.html index.htm; <span class=\"comment\">#指定首页及优先顺序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#error_page  404              /404.html;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># redirect server error pages to the static page /50x.html</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    error_page   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /<span class=\"number\">50</span>x.html;</span><br><span class=\"line\">    location = /<span class=\"number\">50</span>x.html &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要需要改下location /里面的配置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">    proxy_pass http://localhost:<span class=\"number\">8080</span>; <span class=\"comment\"># proxy_pass 指定被代理服务器的URL</span></span><br><span class=\"line\">    proxy_set_header Host $host; <span class=\"comment\"># 将nginx接收到的请求头信息中的host转发给被代理服务器</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这里，nginx就基本配置好了。</p>\n<h4 id=\"配置eclipse（可选）\"><a href=\"#配置eclipse（可选）\" class=\"headerlink\" title=\"配置eclipse（可选）\"></a>配置eclipse（可选）</h4><p>在eclipse中运行我们的项目，然后修改eclipse引入的tomcat配置文件server.xml</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519205728.png\" alt=\"\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--eclipse默认情况下会用项目名作为上下文路径，这里我们改为空或者/，</span></span><br><span class=\"line\"><span class=\"comment\">不改的话，访问的时候需要加上项目名--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Context</span> <span class=\"attr\">docBase</span>=<span class=\"string\">\"demo\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">reloadable</span>=<span class=\"string\">\"true\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">source</span>=<span class=\"string\">\"org.eclipse.jst.jee.server:course\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们在浏览器中直接访问localhost，看能否访问到我们的项目</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519213000.png\" alt=\"\"></p>\n<p>出现了Hello World! 这表明nginx确实把我们的请求转发给了tomcat。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>遇到的问题越多，人成长的越快。算下日子，接手课题组的项目，已经一月有余。期间碰到了很多问题，也一直在积极面对。</p>\n</blockquote>\n<h4 id=\"问题引出\"><a href=\"#问题引出\" class=\"headerlink\" title=\"问题引出\"></a>问题引出</h4><p>接手课题组的项目后，遇到过一个很严重的问题：项目在本地tomcat上能完美运行，但是到了服务器上，就出问题了——JSP文件中el表达式${pageContext.request.contextPath}取到的上下文路径始终为空，即***“”。由于之前深受项目必须使用绝对路径这一思想的影响，我在JSP文件中定义了如下变量，用来表示外部js文件中的ajax请求地址的前缀。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> contextPath = <span class=\"string\">\"$&#123;pageContext.request.contextPath&#125;\"</span>;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>","more":"<p>对于一个常规的java web项目，我们在部署到服务器tomcat中的时候，一般会先配置server.xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--端口号改为80--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8080\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--defaultHost和主机的name均改为项目的域名--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Engine</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span> <span class=\"attr\">defaultHost</span>=<span class=\"string\">\"localhost\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.LockOutRealm\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.UserDatabaseRealm\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">resourceName</span>=<span class=\"string\">\"UserDatabase\"</span>/&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">Realm</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">name</span>=<span class=\"string\">\"localhost\"</span>  <span class=\"attr\">appBase</span>=<span class=\"string\">\"webapps\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">unpackWARs</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.valves.AccessLogValve\"</span> <span class=\"attr\">directory</span>=<span class=\"string\">\"logs\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">prefix</span>=<span class=\"string\">\"localhost_access_log\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\".txt\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">pattern</span>=<span class=\"string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!--如果项目名不为ROOT，还要配置Context--&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!--&lt;Context docBase=\"\" path=\"\"/&gt;--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">Host</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Engine</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>但是，最开始不知道的是，服务器上使用了nginx作为反向代理服务器，所有的http请求，都由nginx转发给tomcat，tomcat的server.xml根本就没有配置（或者说是使用了默认配置），这就很好的解释了为什么${pageContext.request.contextPath}为空了，因为项目名为ROOT的项目，默认的path就是空。</p>\n<p>当时的解决办法是，把上面jsp中定义的js变量contextPath直接改为项目域名。这样一改，域名是写死的，不带www前缀的时候，出现了ajax跨域。</p>\n<p>后来想想，干脆直接改为“.”，也就是用相对路径。这样一改，似乎解决了原来的问题。但这只是假象，一旦原来的路径多起来，”.”表示与当前页面同级，ajax请求的地址可能就不对了。</p>\n<p>最后干脆弃用${pageContext.request.contextPath}，所有的请求以”/“开头，并且为了防止再出现本机运行效果和服务器上运行效果不一致的情况，我在我的电脑上搭建了nginx和tomcat整合开发环境。</p>\n<p>废话不多说了，赶紧进入正题。</p>\n<h4 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h4><p>首先，从<a href=\"http://nginx.org/\" target=\"_blank\" rel=\"noopener\">nginx官网</a>下载最新的稳定版nginx，<a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n<p>当前最新的稳定版本是1.14.0，根据自己的操作系统选择对应的版本，我这里选择<a href=\"http://nginx.org/download/nginx-1.14.0.zip\" target=\"_blank\" rel=\"noopener\">nginx/Windows-1.14.0</a></p>\n<p>下载下来后，直接解压缩就可以了，下面是解压后的目录结构</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519202131.png\" alt=\"\"></p>\n<ul>\n<li>启动nginx</li>\n</ul>\n<p>启动nginx有两种方式，一是点击nginx.exe直接启动，二是在命令行模式下切换到nginx解压目录（当然，也可以将nginx路径添加到系统环境变量path中，以后就不需要切换到解压目录那么麻烦了），使用命令</p>\n<p><strong><em>start nginx</em></strong>来启动nginx（推荐使用这种方法）。</p>\n<p>进入命令行模式，切换到nginx解压目录，我直接解压在桌面上了，输入start nginx，屏幕一闪，然后出现下一个命令行，这就表示nginx已经启动啦。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519211405.png\" alt=\"\"></p>\n<p>现在我们来测试下nginx是不是真的成功启动了，在浏览器里输入localhost，不出意外的话应该会出现nginx的欢迎页面。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519211328.png\" alt=\"\"></p>\n<ul>\n<li>关闭nginx</li>\n</ul>\n<p>使用命令<strong><em>nginx.exe -s stop</em></strong>来关闭nginx</p>\n<ul>\n<li>重启nginx</li>\n</ul>\n<p>使用命令<strong><em>nginx.exe -s reload</em></strong>来重启nginx</p>\n<ul>\n<li>配置nginx</li>\n</ul>\n<p>在conf目录下有一个叫做nginx.conf文件，这是nginx的配置文件。</p>\n<p>这里我不会详细讲nginx.conf中的各种配置（因为我现在也不会啊^_^），以后会专门开一个系列来讲nginx以及Linux上nginx和tomcat实现反向代理和负载均衡。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519202234.png\" alt=\"\"></p>\n<p>主要来看下与开发环境搭建相关的server的配置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#配置虚拟主机</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       <span class=\"number\">80</span>; <span class=\"comment\">#指定需要nginx监听的端口</span></span><br><span class=\"line\">    server_name  localhost; <span class=\"comment\">#需要访问的域名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#charset koi8-r;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#access_log  logs/host.access.log  main;</span></span><br><span class=\"line\">    <span class=\"comment\">#转发</span></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   html; <span class=\"comment\">#指定根目录</span></span><br><span class=\"line\">        index  index.html index.htm; <span class=\"comment\">#指定首页及优先顺序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#error_page  404              /404.html;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># redirect server error pages to the static page /50x.html</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    error_page   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /<span class=\"number\">50</span>x.html;</span><br><span class=\"line\">    location = /<span class=\"number\">50</span>x.html &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主要需要改下location /里面的配置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">    proxy_pass http://localhost:<span class=\"number\">8080</span>; <span class=\"comment\"># proxy_pass 指定被代理服务器的URL</span></span><br><span class=\"line\">    proxy_set_header Host $host; <span class=\"comment\"># 将nginx接收到的请求头信息中的host转发给被代理服务器</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这里，nginx就基本配置好了。</p>\n<h4 id=\"配置eclipse（可选）\"><a href=\"#配置eclipse（可选）\" class=\"headerlink\" title=\"配置eclipse（可选）\"></a>配置eclipse（可选）</h4><p>在eclipse中运行我们的项目，然后修改eclipse引入的tomcat配置文件server.xml</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519205728.png\" alt=\"\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--eclipse默认情况下会用项目名作为上下文路径，这里我们改为空或者/，</span></span><br><span class=\"line\"><span class=\"comment\">不改的话，访问的时候需要加上项目名--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Context</span> <span class=\"attr\">docBase</span>=<span class=\"string\">\"demo\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">reloadable</span>=<span class=\"string\">\"true\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">source</span>=<span class=\"string\">\"org.eclipse.jst.jee.server:course\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们在浏览器中直接访问localhost，看能否访问到我们的项目</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519213000.png\" alt=\"\"></p>\n<p>出现了Hello World! 这表明nginx确实把我们的请求转发给了tomcat。</p>"},{"title":"python3教程-第9章 字典","date":"2018-06-16T10:12:43.000Z","_content":"\n在python中，字典是一系列键-值对。每个键都与一个值相关联，该值可以是数字、字符串、列表乃至字典。\n\n字典用放在**花括号{ }**中的一系列键-值对表示。键和值之间用**冒号**分隔开，而键-值对之间用**逗号**分隔开。\n\n示例如下\n\n```python\nuser={'name':'hegongshan','age':23,'gender','M'}\n```\n\n<!--more-->\n\n### 访问字典中的值\n\n语法如下：\n\n```python\n字典名[键名]\n```\n\n示例：\n\n```python\n# 获取user中与‘name’相关联的值\nuser={'name':'hegongshan','age':23,'gender':'M'}\nprint(user['name'])\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616170128.png)\n\n### 添加/修改键-值对\n\n语法如下：\n\n```python\n字典名[键名] = 值\n```\n\n示例：\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M'}\n# 在user中添加'degree':'bachelor'\nuser['degree']='bachelor'\nprint(user)\n# 修改user中'gender'的值为‘F’\nuser['gender']='F'\nprint(user)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616171848.png)\n\n需要注意的是，**字典在初始化的时候，键名是可以重复的**。\n\n示例：\n\n```python\n# 相当于user={'name':'hegongshan','age':23}\n# user['name']='M'\nuser={'name':'hegongshan','age':23,'name':'M'}\nprint(user)\n```\n\n以上代码中的user={'name':'hegongshan','age':23,'name':'M'}，隐式地修改了‘name’的值，其等价于以下两条语句\n\n```python\nuser={'name':'hegongshan','age':23}\nuser['name']='M'\n```\n\n推荐在初始化时，不要出现重复的键名，这样做可以提高代码的可读性。\n\n### 删除键-值对\n\n在字典中删除键-值对，类似于在列表中删除元素，使用**del语句将相应的键-值对彻底删除**。\n\n示例：\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M'}\ndel user['age']\nprint(user)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616172307.png)\n\n### 遍历字典\n\n#### 遍历所有的键-值对\n\n使用字典的**items()方法**，可以返回一个包含字典中所有键-值对的列表\n\n示例：\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M'}\nfor key,value in user.items():\n    print(key.title()+\":\"+value.title())\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616172930.png)\n\n可以看到，for循环在执行第二遍时报错了，python解释器告诉我们：int对象没有title属性，这是因为在执行第二次时，age的值23是整型，不是字符串，没有title()，那怎么办呢？\n\n如果在for循环里面不用字符串的title()方法，还会报错吗？\n\n我们来尝试下:\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616173838.png)\n\n可以看到，程序还是报错了，python解释器告诉我们：value必须是字符串，不能是整型，这是因为\n\nkey.title() + \":\"是字符串，而字符串只能和字符串拼接。\n\n我们可以使用python中的**str()函数**，将age的值23转换为字符串，然后就可以正常输出了。如果学过Java的话，可以发现str()函数和Java中的toString()很像。\n\n改进后的示例：\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M'}\nfor key,value in user.items():\n    print(key.title()+\":\"+str(value).title())\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616173545.png)\n\n如果我们在for循环中只定义了一个变量，\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M'}\nfor key_value in user.items():\n    print(key_value)\n```\n\n那么会输出如下结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616184058.png)\n\n#### 遍历字典中的所有键\n\n* 简单遍历\n\n某些时候，我们不需要使用字典中的值，只想获取所有的键，这时候可以使用字典的**keys()方法**。\n\n示例：\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M'}\nfor key in user.keys():\n    print(key.title())\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616174613.png)\n\n事实上，遍历字典时，会默认遍历所有的键，因此，上述代码中for key in user.keys():替换为\n\nfor key in user:，输出结果将不变。\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616175006.png)\n\n推荐显式地使用keys()方法，使代码更容易理解。\n\n* 按顺序遍历\n\n在for循环中**使用sorted()函数**，对返回的键进行排序。\n\n示例：\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M'}\nfor key in sorted(user.keys()):\n    print(key.title())\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616175657.png)\n\n可以看到，输出的键名确实按照字母顺序排序了。\n\n#### 遍历字典中的所有值\n\n如果我们只想要字典中的所有值，可以使用字典的**values()方法**，它将返回一个值列表。\n\n示例：\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M'}\nfor value in user.values():\n    print(value)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616180124.png)\n\n如果值列表中包含大量重复的值，为剔除重复项，可以使用**集合set**，集合类似于列表，但每个元素都必须是独一无二的。\n\n示例：\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M','full_name':\"hegongshan\"}\nfor value in set(user.values()):\n    print(value)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616181205.png)\n\n可以看到重复的'hegongshan'，只输出了一次。\n\n### 嵌套\n\n#### 在列表中嵌套字典\n\n示例：\n\n```python\nusers=[{'name':'hegongshan','age':23,'gender':'M'},\n       {'name':'hgs','age':24,'gender':'F'},\n       {'name':'gongshanhe','age':25,'gender':'M'}]\nfor user in users:\n    print(user)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616182025.png)\n\n#### 在字典中嵌套列表\n\n示例：\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M','address':['hubei','wuhan']}\nfor key,value in user.items():\n    print(key.title()+\":\"+str(value))\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616182559.png)\n\n#### 在字典中嵌套字典\n\n示例：\n\n```python\nuser={'name':{'first':'he','last':'gongshan'},\n      'age':23,\n      'gender':'M',\n      'address':{\n          'province':'hubei',\n          'city':'wuhan'\n          }\n      }\nfor key,value in user.items():\n    print(key.capitalize()+\":\"+str(value))\n```\n\n输出：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616183145.png)","source":"_posts/python3-tutorial-chapter9-dictionary.md","raw":"---\ntitle: python3教程-第9章 字典\ndate: 2018-06-16 18:12:43\ntags: python\ncategories: python\n---\n\n在python中，字典是一系列键-值对。每个键都与一个值相关联，该值可以是数字、字符串、列表乃至字典。\n\n字典用放在**花括号{ }**中的一系列键-值对表示。键和值之间用**冒号**分隔开，而键-值对之间用**逗号**分隔开。\n\n示例如下\n\n```python\nuser={'name':'hegongshan','age':23,'gender','M'}\n```\n\n<!--more-->\n\n### 访问字典中的值\n\n语法如下：\n\n```python\n字典名[键名]\n```\n\n示例：\n\n```python\n# 获取user中与‘name’相关联的值\nuser={'name':'hegongshan','age':23,'gender':'M'}\nprint(user['name'])\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616170128.png)\n\n### 添加/修改键-值对\n\n语法如下：\n\n```python\n字典名[键名] = 值\n```\n\n示例：\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M'}\n# 在user中添加'degree':'bachelor'\nuser['degree']='bachelor'\nprint(user)\n# 修改user中'gender'的值为‘F’\nuser['gender']='F'\nprint(user)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616171848.png)\n\n需要注意的是，**字典在初始化的时候，键名是可以重复的**。\n\n示例：\n\n```python\n# 相当于user={'name':'hegongshan','age':23}\n# user['name']='M'\nuser={'name':'hegongshan','age':23,'name':'M'}\nprint(user)\n```\n\n以上代码中的user={'name':'hegongshan','age':23,'name':'M'}，隐式地修改了‘name’的值，其等价于以下两条语句\n\n```python\nuser={'name':'hegongshan','age':23}\nuser['name']='M'\n```\n\n推荐在初始化时，不要出现重复的键名，这样做可以提高代码的可读性。\n\n### 删除键-值对\n\n在字典中删除键-值对，类似于在列表中删除元素，使用**del语句将相应的键-值对彻底删除**。\n\n示例：\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M'}\ndel user['age']\nprint(user)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616172307.png)\n\n### 遍历字典\n\n#### 遍历所有的键-值对\n\n使用字典的**items()方法**，可以返回一个包含字典中所有键-值对的列表\n\n示例：\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M'}\nfor key,value in user.items():\n    print(key.title()+\":\"+value.title())\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616172930.png)\n\n可以看到，for循环在执行第二遍时报错了，python解释器告诉我们：int对象没有title属性，这是因为在执行第二次时，age的值23是整型，不是字符串，没有title()，那怎么办呢？\n\n如果在for循环里面不用字符串的title()方法，还会报错吗？\n\n我们来尝试下:\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616173838.png)\n\n可以看到，程序还是报错了，python解释器告诉我们：value必须是字符串，不能是整型，这是因为\n\nkey.title() + \":\"是字符串，而字符串只能和字符串拼接。\n\n我们可以使用python中的**str()函数**，将age的值23转换为字符串，然后就可以正常输出了。如果学过Java的话，可以发现str()函数和Java中的toString()很像。\n\n改进后的示例：\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M'}\nfor key,value in user.items():\n    print(key.title()+\":\"+str(value).title())\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616173545.png)\n\n如果我们在for循环中只定义了一个变量，\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M'}\nfor key_value in user.items():\n    print(key_value)\n```\n\n那么会输出如下结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616184058.png)\n\n#### 遍历字典中的所有键\n\n* 简单遍历\n\n某些时候，我们不需要使用字典中的值，只想获取所有的键，这时候可以使用字典的**keys()方法**。\n\n示例：\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M'}\nfor key in user.keys():\n    print(key.title())\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616174613.png)\n\n事实上，遍历字典时，会默认遍历所有的键，因此，上述代码中for key in user.keys():替换为\n\nfor key in user:，输出结果将不变。\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616175006.png)\n\n推荐显式地使用keys()方法，使代码更容易理解。\n\n* 按顺序遍历\n\n在for循环中**使用sorted()函数**，对返回的键进行排序。\n\n示例：\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M'}\nfor key in sorted(user.keys()):\n    print(key.title())\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616175657.png)\n\n可以看到，输出的键名确实按照字母顺序排序了。\n\n#### 遍历字典中的所有值\n\n如果我们只想要字典中的所有值，可以使用字典的**values()方法**，它将返回一个值列表。\n\n示例：\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M'}\nfor value in user.values():\n    print(value)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616180124.png)\n\n如果值列表中包含大量重复的值，为剔除重复项，可以使用**集合set**，集合类似于列表，但每个元素都必须是独一无二的。\n\n示例：\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M','full_name':\"hegongshan\"}\nfor value in set(user.values()):\n    print(value)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616181205.png)\n\n可以看到重复的'hegongshan'，只输出了一次。\n\n### 嵌套\n\n#### 在列表中嵌套字典\n\n示例：\n\n```python\nusers=[{'name':'hegongshan','age':23,'gender':'M'},\n       {'name':'hgs','age':24,'gender':'F'},\n       {'name':'gongshanhe','age':25,'gender':'M'}]\nfor user in users:\n    print(user)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616182025.png)\n\n#### 在字典中嵌套列表\n\n示例：\n\n```python\nuser={'name':'hegongshan','age':23,'gender':'M','address':['hubei','wuhan']}\nfor key,value in user.items():\n    print(key.title()+\":\"+str(value))\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616182559.png)\n\n#### 在字典中嵌套字典\n\n示例：\n\n```python\nuser={'name':{'first':'he','last':'gongshan'},\n      'age':23,\n      'gender':'M',\n      'address':{\n          'province':'hubei',\n          'city':'wuhan'\n          }\n      }\nfor key,value in user.items():\n    print(key.capitalize()+\":\"+str(value))\n```\n\n输出：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616183145.png)","slug":"python3-tutorial-chapter9-dictionary","published":1,"updated":"2019-01-19T07:23:57.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9asi007yj1q0j8w6wrmt","content":"<p>在python中，字典是一系列键-值对。每个键都与一个值相关联，该值可以是数字、字符串、列表乃至字典。</p>\n<p>字典用放在<strong>花括号{ }</strong>中的一系列键-值对表示。键和值之间用<strong>冒号</strong>分隔开，而键-值对之间用<strong>逗号</strong>分隔开。</p>\n<p>示例如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>,<span class=\"string\">'M'</span>&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"访问字典中的值\"><a href=\"#访问字典中的值\" class=\"headerlink\" title=\"访问字典中的值\"></a>访问字典中的值</h3><p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字典名[键名]</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取user中与‘name’相关联的值</span></span><br><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\">print(user[<span class=\"string\">'name'</span>])</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616170128.png\" alt=\"\"></p>\n<h3 id=\"添加-修改键-值对\"><a href=\"#添加-修改键-值对\" class=\"headerlink\" title=\"添加/修改键-值对\"></a>添加/修改键-值对</h3><p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字典名[键名] = 值</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 在user中添加'degree':'bachelor'</span></span><br><span class=\"line\">user[<span class=\"string\">'degree'</span>]=<span class=\"string\">'bachelor'</span></span><br><span class=\"line\">print(user)</span><br><span class=\"line\"><span class=\"comment\"># 修改user中'gender'的值为‘F’</span></span><br><span class=\"line\">user[<span class=\"string\">'gender'</span>]=<span class=\"string\">'F'</span></span><br><span class=\"line\">print(user)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616171848.png\" alt=\"\"></p>\n<p>需要注意的是，<strong>字典在初始化的时候，键名是可以重复的</strong>。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 相当于user=&#123;'name':'hegongshan','age':23&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># user['name']='M'</span></span><br><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'name'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\">print(user)</span><br></pre></td></tr></table></figure>\n<p>以上代码中的user={‘name’:’hegongshan’,’age’:23,’name’:’M’}，隐式地修改了‘name’的值，其等价于以下两条语句</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>&#125;</span><br><span class=\"line\">user[<span class=\"string\">'name'</span>]=<span class=\"string\">'M'</span></span><br></pre></td></tr></table></figure>\n<p>推荐在初始化时，不要出现重复的键名，这样做可以提高代码的可读性。</p>\n<h3 id=\"删除键-值对\"><a href=\"#删除键-值对\" class=\"headerlink\" title=\"删除键-值对\"></a>删除键-值对</h3><p>在字典中删除键-值对，类似于在列表中删除元素，使用<strong>del语句将相应的键-值对彻底删除</strong>。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">del</span> user[<span class=\"string\">'age'</span>]</span><br><span class=\"line\">print(user)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616172307.png\" alt=\"\"></p>\n<h3 id=\"遍历字典\"><a href=\"#遍历字典\" class=\"headerlink\" title=\"遍历字典\"></a>遍历字典</h3><h4 id=\"遍历所有的键-值对\"><a href=\"#遍历所有的键-值对\" class=\"headerlink\" title=\"遍历所有的键-值对\"></a>遍历所有的键-值对</h4><p>使用字典的<strong>items()方法</strong>，可以返回一个包含字典中所有键-值对的列表</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> user.items():</span><br><span class=\"line\">    print(key.title()+<span class=\"string\">\":\"</span>+value.title())</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616172930.png\" alt=\"\"></p>\n<p>可以看到，for循环在执行第二遍时报错了，python解释器告诉我们：int对象没有title属性，这是因为在执行第二次时，age的值23是整型，不是字符串，没有title()，那怎么办呢？</p>\n<p>如果在for循环里面不用字符串的title()方法，还会报错吗？</p>\n<p>我们来尝试下:</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616173838.png\" alt=\"\"></p>\n<p>可以看到，程序还是报错了，python解释器告诉我们：value必须是字符串，不能是整型，这是因为</p>\n<p>key.title() + “:”是字符串，而字符串只能和字符串拼接。</p>\n<p>我们可以使用python中的<strong>str()函数</strong>，将age的值23转换为字符串，然后就可以正常输出了。如果学过Java的话，可以发现str()函数和Java中的toString()很像。</p>\n<p>改进后的示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> user.items():</span><br><span class=\"line\">    print(key.title()+<span class=\"string\">\":\"</span>+str(value).title())</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616173545.png\" alt=\"\"></p>\n<p>如果我们在for循环中只定义了一个变量，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key_value <span class=\"keyword\">in</span> user.items():</span><br><span class=\"line\">    print(key_value)</span><br></pre></td></tr></table></figure>\n<p>那么会输出如下结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616184058.png\" alt=\"\"></p>\n<h4 id=\"遍历字典中的所有键\"><a href=\"#遍历字典中的所有键\" class=\"headerlink\" title=\"遍历字典中的所有键\"></a>遍历字典中的所有键</h4><ul>\n<li>简单遍历</li>\n</ul>\n<p>某些时候，我们不需要使用字典中的值，只想获取所有的键，这时候可以使用字典的<strong>keys()方法</strong>。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> user.keys():</span><br><span class=\"line\">    print(key.title())</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616174613.png\" alt=\"\"></p>\n<p>事实上，遍历字典时，会默认遍历所有的键，因此，上述代码中for key in user.keys():替换为</p>\n<p>for key in user:，输出结果将不变。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616175006.png\" alt=\"\"></p>\n<p>推荐显式地使用keys()方法，使代码更容易理解。</p>\n<ul>\n<li>按顺序遍历</li>\n</ul>\n<p>在for循环中<strong>使用sorted()函数</strong>，对返回的键进行排序。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> sorted(user.keys()):</span><br><span class=\"line\">    print(key.title())</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616175657.png\" alt=\"\"></p>\n<p>可以看到，输出的键名确实按照字母顺序排序了。</p>\n<h4 id=\"遍历字典中的所有值\"><a href=\"#遍历字典中的所有值\" class=\"headerlink\" title=\"遍历字典中的所有值\"></a>遍历字典中的所有值</h4><p>如果我们只想要字典中的所有值，可以使用字典的<strong>values()方法</strong>，它将返回一个值列表。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> user.values():</span><br><span class=\"line\">    print(value)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616180124.png\" alt=\"\"></p>\n<p>如果值列表中包含大量重复的值，为剔除重复项，可以使用<strong>集合set</strong>，集合类似于列表，但每个元素都必须是独一无二的。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>,<span class=\"string\">'full_name'</span>:<span class=\"string\">\"hegongshan\"</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> set(user.values()):</span><br><span class=\"line\">    print(value)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616181205.png\" alt=\"\"></p>\n<p>可以看到重复的’hegongshan’，只输出了一次。</p>\n<h3 id=\"嵌套\"><a href=\"#嵌套\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h3><h4 id=\"在列表中嵌套字典\"><a href=\"#在列表中嵌套字典\" class=\"headerlink\" title=\"在列表中嵌套字典\"></a>在列表中嵌套字典</h4><p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">users=[&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;,</span><br><span class=\"line\">       &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hgs'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">24</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'F'</span>&#125;,</span><br><span class=\"line\">       &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'gongshanhe'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">25</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> users:</span><br><span class=\"line\">    print(user)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616182025.png\" alt=\"\"></p>\n<h4 id=\"在字典中嵌套列表\"><a href=\"#在字典中嵌套列表\" class=\"headerlink\" title=\"在字典中嵌套列表\"></a>在字典中嵌套列表</h4><p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>,<span class=\"string\">'address'</span>:[<span class=\"string\">'hubei'</span>,<span class=\"string\">'wuhan'</span>]&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> user.items():</span><br><span class=\"line\">    print(key.title()+<span class=\"string\">\":\"</span>+str(value))</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616182559.png\" alt=\"\"></p>\n<h4 id=\"在字典中嵌套字典\"><a href=\"#在字典中嵌套字典\" class=\"headerlink\" title=\"在字典中嵌套字典\"></a>在字典中嵌套字典</h4><p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:&#123;<span class=\"string\">'first'</span>:<span class=\"string\">'he'</span>,<span class=\"string\">'last'</span>:<span class=\"string\">'gongshan'</span>&#125;,</span><br><span class=\"line\">      <span class=\"string\">'age'</span>:<span class=\"number\">23</span>,</span><br><span class=\"line\">      <span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>,</span><br><span class=\"line\">      <span class=\"string\">'address'</span>:&#123;</span><br><span class=\"line\">          <span class=\"string\">'province'</span>:<span class=\"string\">'hubei'</span>,</span><br><span class=\"line\">          <span class=\"string\">'city'</span>:<span class=\"string\">'wuhan'</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> user.items():</span><br><span class=\"line\">    print(key.capitalize()+<span class=\"string\">\":\"</span>+str(value))</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616183145.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>在python中，字典是一系列键-值对。每个键都与一个值相关联，该值可以是数字、字符串、列表乃至字典。</p>\n<p>字典用放在<strong>花括号{ }</strong>中的一系列键-值对表示。键和值之间用<strong>冒号</strong>分隔开，而键-值对之间用<strong>逗号</strong>分隔开。</p>\n<p>示例如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>,<span class=\"string\">'M'</span>&#125;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"访问字典中的值\"><a href=\"#访问字典中的值\" class=\"headerlink\" title=\"访问字典中的值\"></a>访问字典中的值</h3><p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字典名[键名]</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取user中与‘name’相关联的值</span></span><br><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\">print(user[<span class=\"string\">'name'</span>])</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616170128.png\" alt=\"\"></p>\n<h3 id=\"添加-修改键-值对\"><a href=\"#添加-修改键-值对\" class=\"headerlink\" title=\"添加/修改键-值对\"></a>添加/修改键-值对</h3><p>语法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字典名[键名] = 值</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 在user中添加'degree':'bachelor'</span></span><br><span class=\"line\">user[<span class=\"string\">'degree'</span>]=<span class=\"string\">'bachelor'</span></span><br><span class=\"line\">print(user)</span><br><span class=\"line\"><span class=\"comment\"># 修改user中'gender'的值为‘F’</span></span><br><span class=\"line\">user[<span class=\"string\">'gender'</span>]=<span class=\"string\">'F'</span></span><br><span class=\"line\">print(user)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616171848.png\" alt=\"\"></p>\n<p>需要注意的是，<strong>字典在初始化的时候，键名是可以重复的</strong>。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 相当于user=&#123;'name':'hegongshan','age':23&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># user['name']='M'</span></span><br><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'name'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\">print(user)</span><br></pre></td></tr></table></figure>\n<p>以上代码中的user={‘name’:’hegongshan’,’age’:23,’name’:’M’}，隐式地修改了‘name’的值，其等价于以下两条语句</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>&#125;</span><br><span class=\"line\">user[<span class=\"string\">'name'</span>]=<span class=\"string\">'M'</span></span><br></pre></td></tr></table></figure>\n<p>推荐在初始化时，不要出现重复的键名，这样做可以提高代码的可读性。</p>\n<h3 id=\"删除键-值对\"><a href=\"#删除键-值对\" class=\"headerlink\" title=\"删除键-值对\"></a>删除键-值对</h3><p>在字典中删除键-值对，类似于在列表中删除元素，使用<strong>del语句将相应的键-值对彻底删除</strong>。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">del</span> user[<span class=\"string\">'age'</span>]</span><br><span class=\"line\">print(user)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616172307.png\" alt=\"\"></p>\n<h3 id=\"遍历字典\"><a href=\"#遍历字典\" class=\"headerlink\" title=\"遍历字典\"></a>遍历字典</h3><h4 id=\"遍历所有的键-值对\"><a href=\"#遍历所有的键-值对\" class=\"headerlink\" title=\"遍历所有的键-值对\"></a>遍历所有的键-值对</h4><p>使用字典的<strong>items()方法</strong>，可以返回一个包含字典中所有键-值对的列表</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> user.items():</span><br><span class=\"line\">    print(key.title()+<span class=\"string\">\":\"</span>+value.title())</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616172930.png\" alt=\"\"></p>\n<p>可以看到，for循环在执行第二遍时报错了，python解释器告诉我们：int对象没有title属性，这是因为在执行第二次时，age的值23是整型，不是字符串，没有title()，那怎么办呢？</p>\n<p>如果在for循环里面不用字符串的title()方法，还会报错吗？</p>\n<p>我们来尝试下:</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616173838.png\" alt=\"\"></p>\n<p>可以看到，程序还是报错了，python解释器告诉我们：value必须是字符串，不能是整型，这是因为</p>\n<p>key.title() + “:”是字符串，而字符串只能和字符串拼接。</p>\n<p>我们可以使用python中的<strong>str()函数</strong>，将age的值23转换为字符串，然后就可以正常输出了。如果学过Java的话，可以发现str()函数和Java中的toString()很像。</p>\n<p>改进后的示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> user.items():</span><br><span class=\"line\">    print(key.title()+<span class=\"string\">\":\"</span>+str(value).title())</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616173545.png\" alt=\"\"></p>\n<p>如果我们在for循环中只定义了一个变量，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key_value <span class=\"keyword\">in</span> user.items():</span><br><span class=\"line\">    print(key_value)</span><br></pre></td></tr></table></figure>\n<p>那么会输出如下结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616184058.png\" alt=\"\"></p>\n<h4 id=\"遍历字典中的所有键\"><a href=\"#遍历字典中的所有键\" class=\"headerlink\" title=\"遍历字典中的所有键\"></a>遍历字典中的所有键</h4><ul>\n<li>简单遍历</li>\n</ul>\n<p>某些时候，我们不需要使用字典中的值，只想获取所有的键，这时候可以使用字典的<strong>keys()方法</strong>。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> user.keys():</span><br><span class=\"line\">    print(key.title())</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616174613.png\" alt=\"\"></p>\n<p>事实上，遍历字典时，会默认遍历所有的键，因此，上述代码中for key in user.keys():替换为</p>\n<p>for key in user:，输出结果将不变。</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616175006.png\" alt=\"\"></p>\n<p>推荐显式地使用keys()方法，使代码更容易理解。</p>\n<ul>\n<li>按顺序遍历</li>\n</ul>\n<p>在for循环中<strong>使用sorted()函数</strong>，对返回的键进行排序。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> sorted(user.keys()):</span><br><span class=\"line\">    print(key.title())</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616175657.png\" alt=\"\"></p>\n<p>可以看到，输出的键名确实按照字母顺序排序了。</p>\n<h4 id=\"遍历字典中的所有值\"><a href=\"#遍历字典中的所有值\" class=\"headerlink\" title=\"遍历字典中的所有值\"></a>遍历字典中的所有值</h4><p>如果我们只想要字典中的所有值，可以使用字典的<strong>values()方法</strong>，它将返回一个值列表。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> user.values():</span><br><span class=\"line\">    print(value)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616180124.png\" alt=\"\"></p>\n<p>如果值列表中包含大量重复的值，为剔除重复项，可以使用<strong>集合set</strong>，集合类似于列表，但每个元素都必须是独一无二的。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>,<span class=\"string\">'full_name'</span>:<span class=\"string\">\"hegongshan\"</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> set(user.values()):</span><br><span class=\"line\">    print(value)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616181205.png\" alt=\"\"></p>\n<p>可以看到重复的’hegongshan’，只输出了一次。</p>\n<h3 id=\"嵌套\"><a href=\"#嵌套\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h3><h4 id=\"在列表中嵌套字典\"><a href=\"#在列表中嵌套字典\" class=\"headerlink\" title=\"在列表中嵌套字典\"></a>在列表中嵌套字典</h4><p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">users=[&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;,</span><br><span class=\"line\">       &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hgs'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">24</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'F'</span>&#125;,</span><br><span class=\"line\">       &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'gongshanhe'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">25</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> users:</span><br><span class=\"line\">    print(user)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616182025.png\" alt=\"\"></p>\n<h4 id=\"在字典中嵌套列表\"><a href=\"#在字典中嵌套列表\" class=\"headerlink\" title=\"在字典中嵌套列表\"></a>在字典中嵌套列表</h4><p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'hegongshan'</span>,<span class=\"string\">'age'</span>:<span class=\"number\">23</span>,<span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>,<span class=\"string\">'address'</span>:[<span class=\"string\">'hubei'</span>,<span class=\"string\">'wuhan'</span>]&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> user.items():</span><br><span class=\"line\">    print(key.title()+<span class=\"string\">\":\"</span>+str(value))</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616182559.png\" alt=\"\"></p>\n<h4 id=\"在字典中嵌套字典\"><a href=\"#在字典中嵌套字典\" class=\"headerlink\" title=\"在字典中嵌套字典\"></a>在字典中嵌套字典</h4><p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=&#123;<span class=\"string\">'name'</span>:&#123;<span class=\"string\">'first'</span>:<span class=\"string\">'he'</span>,<span class=\"string\">'last'</span>:<span class=\"string\">'gongshan'</span>&#125;,</span><br><span class=\"line\">      <span class=\"string\">'age'</span>:<span class=\"number\">23</span>,</span><br><span class=\"line\">      <span class=\"string\">'gender'</span>:<span class=\"string\">'M'</span>,</span><br><span class=\"line\">      <span class=\"string\">'address'</span>:&#123;</span><br><span class=\"line\">          <span class=\"string\">'province'</span>:<span class=\"string\">'hubei'</span>,</span><br><span class=\"line\">          <span class=\"string\">'city'</span>:<span class=\"string\">'wuhan'</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> user.items():</span><br><span class=\"line\">    print(key.capitalize()+<span class=\"string\">\":\"</span>+str(value))</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/16/20180616183145.png\" alt=\"\"></p>"},{"title":"Java中的命令行工具javap","date":"2019-01-15T10:11:43.000Z","updated":"2019-01-15T10:11:43.000Z","_content":"\n`javap`，全称`java printer`，是JDK中的一个基础命令行工具，用于反编译一个或多个class文件。其输出取决于使用的选项。如果未使用任何选项，则`javap`命令将打印具有包，protected和public权限的字段和方法，并将其输出打印到标准输出`stdout`。\n\n<!--more-->\n\n关于`javap`的详细用法如下：\n\n```java\n用法: javap <options> <classes>\n其中, 可能的选项包括:\n  -help  --help  -?        输出此用法消息\n  -version                 版本信息\n  -v  -verbose             输出附加信息\n  -l                       输出行号和本地变量表\n  -public                  仅显示公共类和成员\n  -protected               显示受保护的/公共类和成员\n  -package                 显示程序包/受保护的/公共类\n                           和成员 (默认)\n  -p  -private             显示所有类和成员\n  -c                       对代码进行反汇编\n  -s                       输出内部类型签名\n  -sysinfo                 显示正在处理的类的\n                           系统信息 (路径, 大小, 日期, MD5 散列)\n  -constants               显示最终常量\n  -classpath <path>        指定查找用户类文件的位置\n  -cp <path>               指定查找用户类文件的位置\n  -bootclasspath <path>    覆盖引导类文件的位置\n```\n\n其中，常用的选项有\n\n```java\n-public\n-protected\n-package\n-p -private\n-c \n-s\n```\n\n以下面的程序为例，Main类包含了private、default(缺省)、protected和public四种访问权限的字段和方法。\n\n```java\npublic class Main {\t\n\tprivate int number = 1;\n\t\n\tint UID = 1234;\n\t\n\tprotected String name = \"Main\";\n\t\n\tpublic String javaVersion = \"1.8\";\n\t\n\tpublic Main() {\n\t\tprintNumber();\n\t}\n\t\n\tprivate void printNumber() {\n\t\tSystem.out.println(\"number:\"+number);\n\t}\n\t\n\tvoid printUID() {\n\t\tSystem.out.println(\"UID:\"+UID);\n\t}\n\t\n\tprotected void printName() {\n\t\tSystem.out.println(\"name:\"+name);\t\t\n\t}\t\n\t\n\tpublic void printVersion() {\n\t\tSystem.out.println(\"javaVersion:\"+javaVersion);\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tMain main = new Main();\n\t\tmain.printUID();\n\t\tmain.printName();\n\t\tmain.printVersion();\n\t}\n}\n```\n\n编译Main.java，得到Main.class文件\n\n1.`javap`的默认选项为`-package`，只输出具有包、protected和public的字段和方法。在命令行中使用`javap`或者`javap -package`查看Main.class，输出的内容如下：\n\n```java\nhgs:~ hegongshan$ javap Main.class \nCompiled from \"Main.java\"\npublic class Main {\n  int UID;\n  protected java.lang.String name;\n  public java.lang.String javaVersion;\n  public Main();\n  void printUID();\n  protected void printName();\n  public void printVersion();\n  public static void main(java.lang.String[]);\n}\n```\n\n2.使用`javap -public`将只输出class文件中的public字段和方法。以Main.class为例，输出内容如下：\n\n```java\nhgs:~ hegongshan$ javap -public Main.class\nCompiled from \"Main.java\"\npublic class com.hegongshan.Main {\n  public java.lang.String javaVersion;\n  public com.hegongshan.Main();\n  public void printVersion();\n  public static void main(java.lang.String[]);\n}\n```\n\n3.`javap -protected`将输出类中的public和protected的字段和方法。以Main.class为例，输出内容如下：\n\n```java\nhgs:~ hegongshan$ javap -protected Main.class\nCompiled from \"Main.java\"\npublic class com.hegongshan.Main {\n  protected java.lang.String name;\n  public java.lang.String javaVersion;\n  public com.hegongshan.Main();\n  protected void printName();\n  public void printVersion();\n  public static void main(java.lang.String[]);\n}\n```\n\n4.`javap -p`或者`javap -private`将输出类中的所有字段和方法。以Main.class为例，输出内容如下：\n\n```java\nhgs:~ hegongshan$ javap -p Main.class\nCompiled from \"Main.java\"\npublic class com.hegongshan.Main {\n  private int number;\n  int UID;\n  protected java.lang.String name;\n  public java.lang.String javaVersion;\n  public com.hegongshan.Main();\n  private void printNumber();\n  void printUID();\n  protected void printName();\n  public void printVersion();\n  public static void main(java.lang.String[]);\n}\n```\n\n5.`javap -c`将对class文件进行反编译。以Main.class为例，输出内容如下：\n\n```java\nhgs:~ hegongshan$ javap -c Main.class\nCompiled from \"Main.java\"\npublic class com.hegongshan.Main {\n  int UID;\n\n  protected java.lang.String name;\n\n  public java.lang.String javaVersion;\n\n  public com.hegongshan.Main();\n    Code:\n       0: aload_0\n       1: invokespecial #14                 // Method java/lang/Object.\"<init>\":()V\n       4: aload_0\n       5: iconst_1\n       6: putfield      #16                 // Field number:I\n       9: aload_0\n      10: sipush        1234\n      13: putfield      #18                 // Field UID:I\n      16: aload_0\n      17: ldc           #20                 // String Main\n      19: putfield      #22                 // Field name:Ljava/lang/String;\n      22: aload_0\n      23: ldc           #24                 // String 1.8\n      25: putfield      #26                 // Field javaVersion:Ljava/lang/String;\n      28: aload_0\n      29: invokespecial #28                 // Method printNumber:()V\n      32: return\n\n  void printUID();\n    Code:\n       0: getstatic     #35                 // Field java/lang/System.out:Ljava/io/PrintStream;\n       3: new           #41                 // class java/lang/StringBuilder\n       6: dup\n       7: ldc           #62                 // String UID:\n       9: invokespecial #45                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n      12: aload_0\n      13: getfield      #18                 // Field UID:I\n      16: invokevirtual #48                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n      19: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      22: invokevirtual #56                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      25: return\n\n  protected void printName();\n    Code:\n       0: getstatic     #35                 // Field java/lang/System.out:Ljava/io/PrintStream;\n       3: new           #41                 // class java/lang/StringBuilder\n       6: dup\n       7: ldc           #65                 // String name:\n       9: invokespecial #45                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n      12: aload_0\n      13: getfield      #22                 // Field name:Ljava/lang/String;\n      16: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      19: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      22: invokevirtual #56                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      25: return\n\n  public void printVersion();\n    Code:\n       0: getstatic     #35                 // Field java/lang/System.out:Ljava/io/PrintStream;\n       3: new           #41                 // class java/lang/StringBuilder\n       6: dup\n       7: ldc           #71                 // String javaVersion:\n       9: invokespecial #45                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n      12: aload_0\n      13: getfield      #26                 // Field javaVersion:Ljava/lang/String;\n      16: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      19: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      22: invokevirtual #56                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      25: return\n\n  public static void main(java.lang.String[]);\n    Code:\n       0: new           #1                  // class com/hegongshan/Main\n       3: dup\n       4: invokespecial #75                 // Method \"<init>\":()V\n       7: astore_1\n       8: aload_1\n       9: invokevirtual #76                 // Method printUID:()V\n      12: aload_1\n      13: invokevirtual #78                 // Method printName:()V\n      16: aload_1\n      17: invokevirtual #80                 // Method printVersion:()V\n      20: return\n}\n```\n\n6.`javap -s`将输出内部类型签名。以Main.class为例，输出内容如下：\n\n```java\nhgs:~ hegongshan$ javap -s Main.class\nCompiled from \"Main.java\"\npublic class com.hegongshan.Main {\n  int UID;\n    descriptor: I\n  protected java.lang.String name;\n    descriptor: Ljava/lang/String;\n  public java.lang.String javaVersion;\n    descriptor: Ljava/lang/String;\n  public com.hegongshan.Main();\n    descriptor: ()V\n\n  void printUID();\n    descriptor: ()V\n\n  protected void printName();\n    descriptor: ()V\n\n  public void printVersion();\n    descriptor: ()V\n\n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n}\n```\n\n上述输出内容中，对于字段，`descriptor:`后的字符，表示字段的类型，对应关系如下：\n\n```java\nB      : byte\nC      : char\nD      : double\nF      : float\nI      : int\nJ      : long\nL类名;  : 引用类型,如Ljava/lang/String; 表示 String类型\nS      : short\nZ      : boolean\n[      : 数组,如[Ljava/lang/String; 表示String[]\n```\n\n对于方法，`descriptor:`后的字符`(参数类型描述)返回值类型描述`，表示方法的参数及其返回值的类型。\n\n```java\nV : void,表示没有返回值\n```\n\n\n\n\n\n","source":"_posts/java-command-javap.md","raw":"---\ntitle: Java中的命令行工具javap\ndate: 2019-01-15 18:11:43\nupdated: 2019-01-15 18:11:43\ntags: java\ncategories: java\n---\n\n`javap`，全称`java printer`，是JDK中的一个基础命令行工具，用于反编译一个或多个class文件。其输出取决于使用的选项。如果未使用任何选项，则`javap`命令将打印具有包，protected和public权限的字段和方法，并将其输出打印到标准输出`stdout`。\n\n<!--more-->\n\n关于`javap`的详细用法如下：\n\n```java\n用法: javap <options> <classes>\n其中, 可能的选项包括:\n  -help  --help  -?        输出此用法消息\n  -version                 版本信息\n  -v  -verbose             输出附加信息\n  -l                       输出行号和本地变量表\n  -public                  仅显示公共类和成员\n  -protected               显示受保护的/公共类和成员\n  -package                 显示程序包/受保护的/公共类\n                           和成员 (默认)\n  -p  -private             显示所有类和成员\n  -c                       对代码进行反汇编\n  -s                       输出内部类型签名\n  -sysinfo                 显示正在处理的类的\n                           系统信息 (路径, 大小, 日期, MD5 散列)\n  -constants               显示最终常量\n  -classpath <path>        指定查找用户类文件的位置\n  -cp <path>               指定查找用户类文件的位置\n  -bootclasspath <path>    覆盖引导类文件的位置\n```\n\n其中，常用的选项有\n\n```java\n-public\n-protected\n-package\n-p -private\n-c \n-s\n```\n\n以下面的程序为例，Main类包含了private、default(缺省)、protected和public四种访问权限的字段和方法。\n\n```java\npublic class Main {\t\n\tprivate int number = 1;\n\t\n\tint UID = 1234;\n\t\n\tprotected String name = \"Main\";\n\t\n\tpublic String javaVersion = \"1.8\";\n\t\n\tpublic Main() {\n\t\tprintNumber();\n\t}\n\t\n\tprivate void printNumber() {\n\t\tSystem.out.println(\"number:\"+number);\n\t}\n\t\n\tvoid printUID() {\n\t\tSystem.out.println(\"UID:\"+UID);\n\t}\n\t\n\tprotected void printName() {\n\t\tSystem.out.println(\"name:\"+name);\t\t\n\t}\t\n\t\n\tpublic void printVersion() {\n\t\tSystem.out.println(\"javaVersion:\"+javaVersion);\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tMain main = new Main();\n\t\tmain.printUID();\n\t\tmain.printName();\n\t\tmain.printVersion();\n\t}\n}\n```\n\n编译Main.java，得到Main.class文件\n\n1.`javap`的默认选项为`-package`，只输出具有包、protected和public的字段和方法。在命令行中使用`javap`或者`javap -package`查看Main.class，输出的内容如下：\n\n```java\nhgs:~ hegongshan$ javap Main.class \nCompiled from \"Main.java\"\npublic class Main {\n  int UID;\n  protected java.lang.String name;\n  public java.lang.String javaVersion;\n  public Main();\n  void printUID();\n  protected void printName();\n  public void printVersion();\n  public static void main(java.lang.String[]);\n}\n```\n\n2.使用`javap -public`将只输出class文件中的public字段和方法。以Main.class为例，输出内容如下：\n\n```java\nhgs:~ hegongshan$ javap -public Main.class\nCompiled from \"Main.java\"\npublic class com.hegongshan.Main {\n  public java.lang.String javaVersion;\n  public com.hegongshan.Main();\n  public void printVersion();\n  public static void main(java.lang.String[]);\n}\n```\n\n3.`javap -protected`将输出类中的public和protected的字段和方法。以Main.class为例，输出内容如下：\n\n```java\nhgs:~ hegongshan$ javap -protected Main.class\nCompiled from \"Main.java\"\npublic class com.hegongshan.Main {\n  protected java.lang.String name;\n  public java.lang.String javaVersion;\n  public com.hegongshan.Main();\n  protected void printName();\n  public void printVersion();\n  public static void main(java.lang.String[]);\n}\n```\n\n4.`javap -p`或者`javap -private`将输出类中的所有字段和方法。以Main.class为例，输出内容如下：\n\n```java\nhgs:~ hegongshan$ javap -p Main.class\nCompiled from \"Main.java\"\npublic class com.hegongshan.Main {\n  private int number;\n  int UID;\n  protected java.lang.String name;\n  public java.lang.String javaVersion;\n  public com.hegongshan.Main();\n  private void printNumber();\n  void printUID();\n  protected void printName();\n  public void printVersion();\n  public static void main(java.lang.String[]);\n}\n```\n\n5.`javap -c`将对class文件进行反编译。以Main.class为例，输出内容如下：\n\n```java\nhgs:~ hegongshan$ javap -c Main.class\nCompiled from \"Main.java\"\npublic class com.hegongshan.Main {\n  int UID;\n\n  protected java.lang.String name;\n\n  public java.lang.String javaVersion;\n\n  public com.hegongshan.Main();\n    Code:\n       0: aload_0\n       1: invokespecial #14                 // Method java/lang/Object.\"<init>\":()V\n       4: aload_0\n       5: iconst_1\n       6: putfield      #16                 // Field number:I\n       9: aload_0\n      10: sipush        1234\n      13: putfield      #18                 // Field UID:I\n      16: aload_0\n      17: ldc           #20                 // String Main\n      19: putfield      #22                 // Field name:Ljava/lang/String;\n      22: aload_0\n      23: ldc           #24                 // String 1.8\n      25: putfield      #26                 // Field javaVersion:Ljava/lang/String;\n      28: aload_0\n      29: invokespecial #28                 // Method printNumber:()V\n      32: return\n\n  void printUID();\n    Code:\n       0: getstatic     #35                 // Field java/lang/System.out:Ljava/io/PrintStream;\n       3: new           #41                 // class java/lang/StringBuilder\n       6: dup\n       7: ldc           #62                 // String UID:\n       9: invokespecial #45                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n      12: aload_0\n      13: getfield      #18                 // Field UID:I\n      16: invokevirtual #48                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n      19: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      22: invokevirtual #56                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      25: return\n\n  protected void printName();\n    Code:\n       0: getstatic     #35                 // Field java/lang/System.out:Ljava/io/PrintStream;\n       3: new           #41                 // class java/lang/StringBuilder\n       6: dup\n       7: ldc           #65                 // String name:\n       9: invokespecial #45                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n      12: aload_0\n      13: getfield      #22                 // Field name:Ljava/lang/String;\n      16: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      19: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      22: invokevirtual #56                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      25: return\n\n  public void printVersion();\n    Code:\n       0: getstatic     #35                 // Field java/lang/System.out:Ljava/io/PrintStream;\n       3: new           #41                 // class java/lang/StringBuilder\n       6: dup\n       7: ldc           #71                 // String javaVersion:\n       9: invokespecial #45                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n      12: aload_0\n      13: getfield      #26                 // Field javaVersion:Ljava/lang/String;\n      16: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      19: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      22: invokevirtual #56                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      25: return\n\n  public static void main(java.lang.String[]);\n    Code:\n       0: new           #1                  // class com/hegongshan/Main\n       3: dup\n       4: invokespecial #75                 // Method \"<init>\":()V\n       7: astore_1\n       8: aload_1\n       9: invokevirtual #76                 // Method printUID:()V\n      12: aload_1\n      13: invokevirtual #78                 // Method printName:()V\n      16: aload_1\n      17: invokevirtual #80                 // Method printVersion:()V\n      20: return\n}\n```\n\n6.`javap -s`将输出内部类型签名。以Main.class为例，输出内容如下：\n\n```java\nhgs:~ hegongshan$ javap -s Main.class\nCompiled from \"Main.java\"\npublic class com.hegongshan.Main {\n  int UID;\n    descriptor: I\n  protected java.lang.String name;\n    descriptor: Ljava/lang/String;\n  public java.lang.String javaVersion;\n    descriptor: Ljava/lang/String;\n  public com.hegongshan.Main();\n    descriptor: ()V\n\n  void printUID();\n    descriptor: ()V\n\n  protected void printName();\n    descriptor: ()V\n\n  public void printVersion();\n    descriptor: ()V\n\n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n}\n```\n\n上述输出内容中，对于字段，`descriptor:`后的字符，表示字段的类型，对应关系如下：\n\n```java\nB      : byte\nC      : char\nD      : double\nF      : float\nI      : int\nJ      : long\nL类名;  : 引用类型,如Ljava/lang/String; 表示 String类型\nS      : short\nZ      : boolean\n[      : 数组,如[Ljava/lang/String; 表示String[]\n```\n\n对于方法，`descriptor:`后的字符`(参数类型描述)返回值类型描述`，表示方法的参数及其返回值的类型。\n\n```java\nV : void,表示没有返回值\n```\n\n\n\n\n\n","slug":"java-command-javap","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9au700dmj1q049iyu12x","content":"<p><code>javap</code>，全称<code>java printer</code>，是JDK中的一个基础命令行工具，用于反编译一个或多个class文件。其输出取决于使用的选项。如果未使用任何选项，则<code>javap</code>命令将打印具有包，protected和public权限的字段和方法，并将其输出打印到标准输出<code>stdout</code>。</p>\n<a id=\"more\"></a>\n<p>关于<code>javap</code>的详细用法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法: javap &lt;options&gt; &lt;classes&gt;</span><br><span class=\"line\">其中, 可能的选项包括:</span><br><span class=\"line\">  -help  --help  -?        输出此用法消息</span><br><span class=\"line\">  -version                 版本信息</span><br><span class=\"line\">  -v  -verbose             输出附加信息</span><br><span class=\"line\">  -l                       输出行号和本地变量表</span><br><span class=\"line\">  -<span class=\"keyword\">public</span>                  仅显示公共类和成员</span><br><span class=\"line\">  -<span class=\"keyword\">protected</span>               显示受保护的/公共类和成员</span><br><span class=\"line\">  -<span class=\"keyword\">package</span>                 显示程序包/受保护的/公共类</span><br><span class=\"line\">                           和成员 (默认)</span><br><span class=\"line\">  -p  -<span class=\"keyword\">private</span>             显示所有类和成员</span><br><span class=\"line\">  -c                       对代码进行反汇编</span><br><span class=\"line\">  -s                       输出内部类型签名</span><br><span class=\"line\">  -sysinfo                 显示正在处理的类的</span><br><span class=\"line\">                           系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class=\"line\">  -constants               显示最终常量</span><br><span class=\"line\">  -classpath &lt;path&gt;        指定查找用户类文件的位置</span><br><span class=\"line\">  -cp &lt;path&gt;               指定查找用户类文件的位置</span><br><span class=\"line\">  -bootclasspath &lt;path&gt;    覆盖引导类文件的位置</span><br></pre></td></tr></table></figure>\n<p>其中，常用的选项有</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"keyword\">public</span></span><br><span class=\"line\">-<span class=\"keyword\">protected</span></span><br><span class=\"line\">-<span class=\"keyword\">package</span></span><br><span class=\"line\">-p -<span class=\"keyword\">private</span></span><br><span class=\"line\">-c </span><br><span class=\"line\">-s</span><br></pre></td></tr></table></figure>\n<p>以下面的程序为例，Main类包含了private、default(缺省)、protected和public四种访问权限的字段和方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> number = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> UID = <span class=\"number\">1234</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> String name = <span class=\"string\">\"Main\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String javaVersion = <span class=\"string\">\"1.8\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tprintNumber();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printNumber</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"number:\"</span>+number);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printUID</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"UID:\"</span>+UID);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"name:\"</span>+name);\t\t</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printVersion</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"javaVersion:\"</span>+javaVersion);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tMain main = <span class=\"keyword\">new</span> Main();</span><br><span class=\"line\">\t\tmain.printUID();</span><br><span class=\"line\">\t\tmain.printName();</span><br><span class=\"line\">\t\tmain.printVersion();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译Main.java，得到Main.class文件</p>\n<p>1.<code>javap</code>的默认选项为<code>-package</code>，只输出具有包、protected和public的字段和方法。在命令行中使用<code>javap</code>或者<code>javap -package</code>查看Main.class，输出的内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hgs:~ hegongshan$ javap Main.class </span><br><span class=\"line\">Compiled from <span class=\"string\">\"Main.java\"</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> UID;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> java.lang.String name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> java.lang.String javaVersion;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Main</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printUID</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printVersion</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(java.lang.String[])</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.使用<code>javap -public</code>将只输出class文件中的public字段和方法。以Main.class为例，输出内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hgs:~ hegongshan$ javap -<span class=\"keyword\">public</span> Main.class</span><br><span class=\"line\">Compiled from <span class=\"string\">\"Main.java\"</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">hegongshan</span>.<span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> java.lang.String javaVersion;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> com.hegongshan.Main();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printVersion</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(java.lang.String[])</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.<code>javap -protected</code>将输出类中的public和protected的字段和方法。以Main.class为例，输出内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hgs:~ hegongshan$ javap -<span class=\"keyword\">protected</span> Main.class</span><br><span class=\"line\">Compiled from <span class=\"string\">\"Main.java\"</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">hegongshan</span>.<span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> java.lang.String name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> java.lang.String javaVersion;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> com.hegongshan.Main();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printVersion</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(java.lang.String[])</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.<code>javap -p</code>或者<code>javap -private</code>将输出类中的所有字段和方法。以Main.class为例，输出内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hgs:~ hegongshan$ javap -p Main.class</span><br><span class=\"line\">Compiled from <span class=\"string\">\"Main.java\"</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">hegongshan</span>.<span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> number;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> UID;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> java.lang.String name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> java.lang.String javaVersion;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> com.hegongshan.Main();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printNumber</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printUID</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printVersion</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(java.lang.String[])</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5.<code>javap -c</code>将对class文件进行反编译。以Main.class为例，输出内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hgs:~ hegongshan$ javap -c Main.class</span><br><span class=\"line\">Compiled from <span class=\"string\">\"Main.java\"</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">hegongshan</span>.<span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> UID;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> java.lang.String name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> java.lang.String javaVersion;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> com.hegongshan.Main();</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">       1: invokespecial #14                 // Method java/lang/Object.\"&lt;init&gt;\":()V</span><br><span class=\"line\">       <span class=\"number\">4</span>: aload_0</span><br><span class=\"line\">       <span class=\"number\">5</span>: iconst_1</span><br><span class=\"line\">       6: putfield      #16                 // Field number:I</span><br><span class=\"line\">       <span class=\"number\">9</span>: aload_0</span><br><span class=\"line\">      <span class=\"number\">10</span>: sipush        <span class=\"number\">1234</span></span><br><span class=\"line\">      13: putfield      #18                 // Field UID:I</span><br><span class=\"line\">      <span class=\"number\">16</span>: aload_0</span><br><span class=\"line\">      17: ldc           #20                 // String Main</span><br><span class=\"line\">      19: putfield      #22                 // Field name:Ljava/lang/String;</span><br><span class=\"line\">      <span class=\"number\">22</span>: aload_0</span><br><span class=\"line\">      23: ldc           #24                 // String 1.8</span><br><span class=\"line\">      25: putfield      #26                 // Field javaVersion:Ljava/lang/String;</span><br><span class=\"line\">      <span class=\"number\">28</span>: aload_0</span><br><span class=\"line\">      29: invokespecial #28                 // Method printNumber:()V</span><br><span class=\"line\">      <span class=\"number\">32</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printUID</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       0: getstatic     #35                 // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">       3: new           #41                 // class java/lang/StringBuilder</span><br><span class=\"line\">       <span class=\"number\">6</span>: dup</span><br><span class=\"line\">       7: ldc           #62                 // String UID:</span><br><span class=\"line\">       9: invokespecial #45                 // Method java/lang/StringBuilder.\"&lt;init&gt;\":(Ljava/lang/String;)V</span><br><span class=\"line\">      <span class=\"number\">12</span>: aload_0</span><br><span class=\"line\">      13: getfield      #18                 // Field UID:I</span><br><span class=\"line\">      16: invokevirtual #48                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span><br><span class=\"line\">      19: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class=\"line\">      22: invokevirtual #56                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class=\"line\">      <span class=\"number\">25</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       0: getstatic     #35                 // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">       3: new           #41                 // class java/lang/StringBuilder</span><br><span class=\"line\">       <span class=\"number\">6</span>: dup</span><br><span class=\"line\">       7: ldc           #65                 // String name:</span><br><span class=\"line\">       9: invokespecial #45                 // Method java/lang/StringBuilder.\"&lt;init&gt;\":(Ljava/lang/String;)V</span><br><span class=\"line\">      <span class=\"number\">12</span>: aload_0</span><br><span class=\"line\">      13: getfield      #22                 // Field name:Ljava/lang/String;</span><br><span class=\"line\">      16: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class=\"line\">      19: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class=\"line\">      22: invokevirtual #56                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class=\"line\">      <span class=\"number\">25</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printVersion</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       0: getstatic     #35                 // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">       3: new           #41                 // class java/lang/StringBuilder</span><br><span class=\"line\">       <span class=\"number\">6</span>: dup</span><br><span class=\"line\">       7: ldc           #71                 // String javaVersion:</span><br><span class=\"line\">       9: invokespecial #45                 // Method java/lang/StringBuilder.\"&lt;init&gt;\":(Ljava/lang/String;)V</span><br><span class=\"line\">      <span class=\"number\">12</span>: aload_0</span><br><span class=\"line\">      13: getfield      #26                 // Field javaVersion:Ljava/lang/String;</span><br><span class=\"line\">      16: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class=\"line\">      19: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class=\"line\">      22: invokevirtual #56                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class=\"line\">      <span class=\"number\">25</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(java.lang.String[])</span></span>;</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       0: new           #1                  // class com/hegongshan/Main</span><br><span class=\"line\">       <span class=\"number\">3</span>: dup</span><br><span class=\"line\">       4: invokespecial #75                 // Method \"&lt;init&gt;\":()V</span><br><span class=\"line\">       <span class=\"number\">7</span>: astore_1</span><br><span class=\"line\">       <span class=\"number\">8</span>: aload_1</span><br><span class=\"line\">       9: invokevirtual #76                 // Method printUID:()V</span><br><span class=\"line\">      <span class=\"number\">12</span>: aload_1</span><br><span class=\"line\">      13: invokevirtual #78                 // Method printName:()V</span><br><span class=\"line\">      <span class=\"number\">16</span>: aload_1</span><br><span class=\"line\">      17: invokevirtual #80                 // Method printVersion:()V</span><br><span class=\"line\">      <span class=\"number\">20</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>6.<code>javap -s</code>将输出内部类型签名。以Main.class为例，输出内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hgs:~ hegongshan$ javap -s Main.class</span><br><span class=\"line\">Compiled from <span class=\"string\">\"Main.java\"</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">hegongshan</span>.<span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> UID;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> java.lang.String name;</span><br><span class=\"line\">    descriptor: Ljava/lang/String;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> java.lang.String javaVersion;</span><br><span class=\"line\">    descriptor: Ljava/lang/String;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> com.hegongshan.Main();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printUID</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printVersion</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(java.lang.String[])</span></span>;</span><br><span class=\"line\">    descriptor: ([Ljava/lang/String;)V</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述输出内容中，对于字段，<code>descriptor:</code>后的字符，表示字段的类型，对应关系如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B      : <span class=\"keyword\">byte</span></span><br><span class=\"line\">C      : <span class=\"keyword\">char</span></span><br><span class=\"line\">D      : <span class=\"keyword\">double</span></span><br><span class=\"line\">F      : <span class=\"keyword\">float</span></span><br><span class=\"line\">I      : <span class=\"keyword\">int</span></span><br><span class=\"line\">J      : <span class=\"keyword\">long</span></span><br><span class=\"line\">L类名;  : 引用类型,如Ljava/lang/String; 表示 String类型</span><br><span class=\"line\">S      : <span class=\"keyword\">short</span></span><br><span class=\"line\">Z      : <span class=\"keyword\">boolean</span></span><br><span class=\"line\">[      : 数组,如[Ljava/lang/String; 表示String[]</span><br></pre></td></tr></table></figure>\n<p>对于方法，<code>descriptor:</code>后的字符<code>(参数类型描述)返回值类型描述</code>，表示方法的参数及其返回值的类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">V : <span class=\"keyword\">void</span>,表示没有返回值</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><code>javap</code>，全称<code>java printer</code>，是JDK中的一个基础命令行工具，用于反编译一个或多个class文件。其输出取决于使用的选项。如果未使用任何选项，则<code>javap</code>命令将打印具有包，protected和public权限的字段和方法，并将其输出打印到标准输出<code>stdout</code>。</p>","more":"<p>关于<code>javap</code>的详细用法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法: javap &lt;options&gt; &lt;classes&gt;</span><br><span class=\"line\">其中, 可能的选项包括:</span><br><span class=\"line\">  -help  --help  -?        输出此用法消息</span><br><span class=\"line\">  -version                 版本信息</span><br><span class=\"line\">  -v  -verbose             输出附加信息</span><br><span class=\"line\">  -l                       输出行号和本地变量表</span><br><span class=\"line\">  -<span class=\"keyword\">public</span>                  仅显示公共类和成员</span><br><span class=\"line\">  -<span class=\"keyword\">protected</span>               显示受保护的/公共类和成员</span><br><span class=\"line\">  -<span class=\"keyword\">package</span>                 显示程序包/受保护的/公共类</span><br><span class=\"line\">                           和成员 (默认)</span><br><span class=\"line\">  -p  -<span class=\"keyword\">private</span>             显示所有类和成员</span><br><span class=\"line\">  -c                       对代码进行反汇编</span><br><span class=\"line\">  -s                       输出内部类型签名</span><br><span class=\"line\">  -sysinfo                 显示正在处理的类的</span><br><span class=\"line\">                           系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class=\"line\">  -constants               显示最终常量</span><br><span class=\"line\">  -classpath &lt;path&gt;        指定查找用户类文件的位置</span><br><span class=\"line\">  -cp &lt;path&gt;               指定查找用户类文件的位置</span><br><span class=\"line\">  -bootclasspath &lt;path&gt;    覆盖引导类文件的位置</span><br></pre></td></tr></table></figure>\n<p>其中，常用的选项有</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"keyword\">public</span></span><br><span class=\"line\">-<span class=\"keyword\">protected</span></span><br><span class=\"line\">-<span class=\"keyword\">package</span></span><br><span class=\"line\">-p -<span class=\"keyword\">private</span></span><br><span class=\"line\">-c </span><br><span class=\"line\">-s</span><br></pre></td></tr></table></figure>\n<p>以下面的程序为例，Main类包含了private、default(缺省)、protected和public四种访问权限的字段和方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> number = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> UID = <span class=\"number\">1234</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> String name = <span class=\"string\">\"Main\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String javaVersion = <span class=\"string\">\"1.8\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tprintNumber();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printNumber</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"number:\"</span>+number);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printUID</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"UID:\"</span>+UID);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"name:\"</span>+name);\t\t</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printVersion</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"javaVersion:\"</span>+javaVersion);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tMain main = <span class=\"keyword\">new</span> Main();</span><br><span class=\"line\">\t\tmain.printUID();</span><br><span class=\"line\">\t\tmain.printName();</span><br><span class=\"line\">\t\tmain.printVersion();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译Main.java，得到Main.class文件</p>\n<p>1.<code>javap</code>的默认选项为<code>-package</code>，只输出具有包、protected和public的字段和方法。在命令行中使用<code>javap</code>或者<code>javap -package</code>查看Main.class，输出的内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hgs:~ hegongshan$ javap Main.class </span><br><span class=\"line\">Compiled from <span class=\"string\">\"Main.java\"</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> UID;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> java.lang.String name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> java.lang.String javaVersion;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Main</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printUID</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printVersion</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(java.lang.String[])</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.使用<code>javap -public</code>将只输出class文件中的public字段和方法。以Main.class为例，输出内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hgs:~ hegongshan$ javap -<span class=\"keyword\">public</span> Main.class</span><br><span class=\"line\">Compiled from <span class=\"string\">\"Main.java\"</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">hegongshan</span>.<span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> java.lang.String javaVersion;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> com.hegongshan.Main();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printVersion</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(java.lang.String[])</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.<code>javap -protected</code>将输出类中的public和protected的字段和方法。以Main.class为例，输出内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hgs:~ hegongshan$ javap -<span class=\"keyword\">protected</span> Main.class</span><br><span class=\"line\">Compiled from <span class=\"string\">\"Main.java\"</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">hegongshan</span>.<span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> java.lang.String name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> java.lang.String javaVersion;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> com.hegongshan.Main();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printVersion</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(java.lang.String[])</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.<code>javap -p</code>或者<code>javap -private</code>将输出类中的所有字段和方法。以Main.class为例，输出内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hgs:~ hegongshan$ javap -p Main.class</span><br><span class=\"line\">Compiled from <span class=\"string\">\"Main.java\"</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">hegongshan</span>.<span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> number;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> UID;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> java.lang.String name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> java.lang.String javaVersion;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> com.hegongshan.Main();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">printNumber</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printUID</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printVersion</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(java.lang.String[])</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5.<code>javap -c</code>将对class文件进行反编译。以Main.class为例，输出内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hgs:~ hegongshan$ javap -c Main.class</span><br><span class=\"line\">Compiled from <span class=\"string\">\"Main.java\"</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">hegongshan</span>.<span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> UID;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> java.lang.String name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> java.lang.String javaVersion;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> com.hegongshan.Main();</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">       1: invokespecial #14                 // Method java/lang/Object.\"&lt;init&gt;\":()V</span><br><span class=\"line\">       <span class=\"number\">4</span>: aload_0</span><br><span class=\"line\">       <span class=\"number\">5</span>: iconst_1</span><br><span class=\"line\">       6: putfield      #16                 // Field number:I</span><br><span class=\"line\">       <span class=\"number\">9</span>: aload_0</span><br><span class=\"line\">      <span class=\"number\">10</span>: sipush        <span class=\"number\">1234</span></span><br><span class=\"line\">      13: putfield      #18                 // Field UID:I</span><br><span class=\"line\">      <span class=\"number\">16</span>: aload_0</span><br><span class=\"line\">      17: ldc           #20                 // String Main</span><br><span class=\"line\">      19: putfield      #22                 // Field name:Ljava/lang/String;</span><br><span class=\"line\">      <span class=\"number\">22</span>: aload_0</span><br><span class=\"line\">      23: ldc           #24                 // String 1.8</span><br><span class=\"line\">      25: putfield      #26                 // Field javaVersion:Ljava/lang/String;</span><br><span class=\"line\">      <span class=\"number\">28</span>: aload_0</span><br><span class=\"line\">      29: invokespecial #28                 // Method printNumber:()V</span><br><span class=\"line\">      <span class=\"number\">32</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printUID</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       0: getstatic     #35                 // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">       3: new           #41                 // class java/lang/StringBuilder</span><br><span class=\"line\">       <span class=\"number\">6</span>: dup</span><br><span class=\"line\">       7: ldc           #62                 // String UID:</span><br><span class=\"line\">       9: invokespecial #45                 // Method java/lang/StringBuilder.\"&lt;init&gt;\":(Ljava/lang/String;)V</span><br><span class=\"line\">      <span class=\"number\">12</span>: aload_0</span><br><span class=\"line\">      13: getfield      #18                 // Field UID:I</span><br><span class=\"line\">      16: invokevirtual #48                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span><br><span class=\"line\">      19: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class=\"line\">      22: invokevirtual #56                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class=\"line\">      <span class=\"number\">25</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       0: getstatic     #35                 // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">       3: new           #41                 // class java/lang/StringBuilder</span><br><span class=\"line\">       <span class=\"number\">6</span>: dup</span><br><span class=\"line\">       7: ldc           #65                 // String name:</span><br><span class=\"line\">       9: invokespecial #45                 // Method java/lang/StringBuilder.\"&lt;init&gt;\":(Ljava/lang/String;)V</span><br><span class=\"line\">      <span class=\"number\">12</span>: aload_0</span><br><span class=\"line\">      13: getfield      #22                 // Field name:Ljava/lang/String;</span><br><span class=\"line\">      16: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class=\"line\">      19: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class=\"line\">      22: invokevirtual #56                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class=\"line\">      <span class=\"number\">25</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printVersion</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       0: getstatic     #35                 // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class=\"line\">       3: new           #41                 // class java/lang/StringBuilder</span><br><span class=\"line\">       <span class=\"number\">6</span>: dup</span><br><span class=\"line\">       7: ldc           #71                 // String javaVersion:</span><br><span class=\"line\">       9: invokespecial #45                 // Method java/lang/StringBuilder.\"&lt;init&gt;\":(Ljava/lang/String;)V</span><br><span class=\"line\">      <span class=\"number\">12</span>: aload_0</span><br><span class=\"line\">      13: getfield      #26                 // Field javaVersion:Ljava/lang/String;</span><br><span class=\"line\">      16: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class=\"line\">      19: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class=\"line\">      22: invokevirtual #56                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class=\"line\">      <span class=\"number\">25</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(java.lang.String[])</span></span>;</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       0: new           #1                  // class com/hegongshan/Main</span><br><span class=\"line\">       <span class=\"number\">3</span>: dup</span><br><span class=\"line\">       4: invokespecial #75                 // Method \"&lt;init&gt;\":()V</span><br><span class=\"line\">       <span class=\"number\">7</span>: astore_1</span><br><span class=\"line\">       <span class=\"number\">8</span>: aload_1</span><br><span class=\"line\">       9: invokevirtual #76                 // Method printUID:()V</span><br><span class=\"line\">      <span class=\"number\">12</span>: aload_1</span><br><span class=\"line\">      13: invokevirtual #78                 // Method printName:()V</span><br><span class=\"line\">      <span class=\"number\">16</span>: aload_1</span><br><span class=\"line\">      17: invokevirtual #80                 // Method printVersion:()V</span><br><span class=\"line\">      <span class=\"number\">20</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>6.<code>javap -s</code>将输出内部类型签名。以Main.class为例，输出内容如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hgs:~ hegongshan$ javap -s Main.class</span><br><span class=\"line\">Compiled from <span class=\"string\">\"Main.java\"</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">hegongshan</span>.<span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> UID;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> java.lang.String name;</span><br><span class=\"line\">    descriptor: Ljava/lang/String;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> java.lang.String javaVersion;</span><br><span class=\"line\">    descriptor: Ljava/lang/String;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> com.hegongshan.Main();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printUID</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printVersion</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(java.lang.String[])</span></span>;</span><br><span class=\"line\">    descriptor: ([Ljava/lang/String;)V</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述输出内容中，对于字段，<code>descriptor:</code>后的字符，表示字段的类型，对应关系如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B      : <span class=\"keyword\">byte</span></span><br><span class=\"line\">C      : <span class=\"keyword\">char</span></span><br><span class=\"line\">D      : <span class=\"keyword\">double</span></span><br><span class=\"line\">F      : <span class=\"keyword\">float</span></span><br><span class=\"line\">I      : <span class=\"keyword\">int</span></span><br><span class=\"line\">J      : <span class=\"keyword\">long</span></span><br><span class=\"line\">L类名;  : 引用类型,如Ljava/lang/String; 表示 String类型</span><br><span class=\"line\">S      : <span class=\"keyword\">short</span></span><br><span class=\"line\">Z      : <span class=\"keyword\">boolean</span></span><br><span class=\"line\">[      : 数组,如[Ljava/lang/String; 表示String[]</span><br></pre></td></tr></table></figure>\n<p>对于方法，<code>descriptor:</code>后的字符<code>(参数类型描述)返回值类型描述</code>，表示方法的参数及其返回值的类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">V : <span class=\"keyword\">void</span>,表示没有返回值</span><br></pre></td></tr></table></figure>"},{"title":"python3教程-第11章 类","date":"2018-06-19T12:28:59.000Z","_content":"\n### 创建和使用类\n\n语法：\n\n```python\nclass 类名():\n    # 类中的所有方法都需要一个名为self的形参\n    类中的方法\n   \n```\n\n<!--more-->\n\n示例：\n\n```python\nclass Book():\n    \"\"\"书籍\"\"\"\n    def __init__(self,name,price):\n        \"\"\"\"初始化书名和价格\"\"\"\n        self.name = name\n        self.price = price\n    \n    def describe(self):\n        \"\"\"打印书的所有描述信息\"\"\"\n        print(\"name:\"+self.name+\",price:\"+str(self.price))\n```\n\n上面的代码创建了一个Book类。类中的函数称为方法，前一节中关于函数的一切介绍都适用于方法。\n\n第三行中的\\_\\_init\\_\\_()是一个特殊的方法（实例化方法，类似于Java中的构造器），开头和末尾各有两个下划线。每当我们根据Book类创建实例时，python都会自动运行它。\n\n值得注意的是，**\\_\\_init\\_\\_()中的形参self是必不可少的，且必须位于其他形参的前面**，它代表的是某一次实例化所产生的实例。当我们通过实参向Book()传递名字和价格的时候，self会自动传递，不需要我们去传递它。\n\n第五、六行中定义的两个变量都有前缀self。python中，**以self为前缀的变量都可供类中的所有方法使用**，也可以通过类的任意实例来访问这些变量。像这样可以通过实例访问的变量称为属性。\n\n#### 创建类的实例\n\n```python\n# 使用上面定义的Book类创建实例    \nbook = Book('Java8 in action',59.8)\nbook.describe()\n```\n\n遇到第二行代码时，python使用实参'Java8 in action'和59.0调用Book类的\\_\\_init\\_\\_()，创建一个特定的书籍实例，并使用我们提供的值来设置name和price。方法\\_\\_init\\_\\_()并未显示地包含return语句，但python会自动返回一个书籍实例。\n\n输出结果：\n\n```python\nname:Java8 in action,price:59.8\n```\n\n#### 访问属性\n\n要访问实例的属性，可使用句点表示法( . )。\n\n示例：\n\n```python\nprint(book.name)\n```\n\n输出结果：\n\n```python\nJava8 in action\n```\n\n#### 调用方法\n\n要调用类中的方法，也是用句点表示法( . )。\n\n### 使用实例\n\n#### 给属性指定默认值\n\n类中的每个属性都必须有初始值，哪怕这个值为0或者空字符串。在有些情况下，如设置默认值时，可以在方法\\_\\_init\\_\\_()内指定属性的初始值，从而无需包含为该属性提供初始值的形参。\n\n示例：\n\n```python\nclass Book():\n    \"\"\"书籍\"\"\"\n    def __init__(self,name,price):\n        \"\"\"\"初始化书名和价格\"\"\"\n        self.name = name\n        self.price = price\n        self.publish_time = 2018\n    \n    def describe(self):\n        \"\"\"打印书的所有描述信息\"\"\"\n        print(\"name:\"+self.name\n              +\",price:\"+str(self.price)\n              +\",publish_time:\"+str(self.publish_time))\n        \nbook = Book('Java8 in action',59.8)\nbook.describe()\n```\n\n输出结果：\n\n```python\nname:Java8 in action,price:59.8,publish_time:2018\n```\n\n#### 修改属性的值\n\n* 直接修改属性的值\n\n通过类的实例直接修改属性的值。\n\n示例：\n\n```python\nbook = Book('Java8 in action',59.8)\nbook.publish_time = 2020\nbook.describe()\n```\n\n输出结果：\n\n```python\nname:Java8 in action,price:59.8,publish_time:2020\n```\n\n* 通过方法修改属性的值\n\n通过类中定义的方法修改属性的值，从而隐藏实现细节。\n\n示例：\n\n```python\n\t# 在上面的Book类中新增一个update_price(self)方法    \n    def update_price(self,price):\n        \"\"\"更改书的价格\"\"\"\n        self.price = price\n\nbook = Book('Java8 in action',59.8)\nbook.update_price(66.6)\nbook.describe()\n```\n\n输出结果：\n\n```python\nname:Java8 in action,price:66.6,publish_time:2018\n```\n\n### 继承\n\n编写类时，并非总是要从头开始。如果我们编写的类是另一个现成类的某种特殊情况，可以使用继承。一个类继承另一个类时，它将自动获得另一个类的所有属性和方法。原有的类称为父类，新的类称为子类。子类在继承父类所有属性和方法的同时，还可以定义自己特有的属性和方法。\n\n基本语法：\n\n```python\n# 在定义子类时，必须在括号中指定父类的名称。\nclass 类名(父类名):\n    类中的方法\n```\n\n#### 子类的\\_\\_init\\_\\_()\n\n子类在实例化的时候，首先需要为父类的所有属性赋值。下面定义了一个Book类的子类CultureBook。\n\n```python\nclass CultureBook(Book):\n    def __init__(self,name,price):\n        # 调用父类Book的__init__()方法\n        super().__init__(name,price)\n     \nbook2 = CultureBook('红楼梦',45.5)\nbook2.describe()\n```\n\n创建子类时，父类必须包含在当前文件中，且位于子类的前面。\n\n上面第三行中的函数super()，将父类Book和子类CultureBook关联起来，这行代码让python调用父类Book中的\\_\\_init\\_\\_()，从而使CultureBook的实例包含了父类的所有属性。\n\n输出结果：\n\n```python\nname:红楼梦,price:45.5,publish_time:2018\n```\n\n#### 定义子类独有的属性和方法\n\n```python\nclass CultureBook(Book):\n    \"\"\"文学书\"\"\"\n    def __init__(self,name,price,author):\n        super().__init__(name,price)\n        self.author = author\n    \n    def get_book_info(self):\n        \"\"\"描述文学书的相关信息\"\"\"\n        print(\"{'name':'\" + self.name + \n              \"','price':\" + str(self.price) +\n              \",'author':'\"+self.author+\"'}\")\n     \nbook2 = CultureBook('红楼梦',45.5,'曹雪芹')\nbook2.get_book_info()\n```\n\n输出结果：\n\n```python\n{'name':'红楼梦','price':45.5,'author':'曹雪芹'}\n```\n\n需要注意的是，第四行中的super().\\_\\_init\\_\\_()并不一定要写在子类\\_\\_init\\_\\_()方法的第一行。事实上，第四、五行的顺序完全可以颠倒过来（这在Java中是不可以的）。\n\n#### 重写父类的方法\n\n如果父类的某个（些）方法不适合子类，完全可以在子类中重写父类的方法，只需要**在子类中定义一个与父类方法同名的方法**即可。这样，python将不会考虑这个父类方法，而只关注子类中定义的同名方法。\n\n示例：\n\n```python\n# 父类Book没有author属性，在CultureBook中重写父类的describe()方法\nclass CultureBook(Book):\n    \n    # 省略之前的代码\n    \n    def describe(self):\n        print(\"name:\"+self.name+\n              \",price:\"+str(self.price)+\n              \",publish_time:\"+str(self.publish_time)+\n              \",author:\"+self.author)\n\nbook2 = CultureBook('红楼梦',45.5,'曹雪芹')\nbook2.describe()\n```\n\n输出结果：\n\n```python\nname:红楼梦,price:45.5,publish_time:2018,author:曹雪芹\n```\n\n可以看到，调用describe()后，确实将父类Book中没有的author属性也打印出来了。\n\n### 导入类\n\n为了使程序尽可能整洁，我们可以将类存储在模块中，然后在需要使用的程序中导入该模块。这部分的内容与前面将的从模块中导入函数基本一致。\n\n#### 导入单（多）个类\n\n语法：\n\n```python\nfrom 模块名 import 类名,类名,...\n```\n\n将Book类存储在一个名为book.py的模块中\n\nbook.py\n\n```python\nclass Book():\n    \"\"\"书籍\"\"\"\n    def __init__(self,name,price):\n        \"\"\"\"初始化书名和价格\"\"\"\n        self.name = name\n        self.price = price\n        self.publish_time = 2018\n    \n    def describe(self):\n        \"\"\"打印书的所有描述信息\"\"\"\n        print(\"name:\"+self.name+\n              \",price:\"+str(self.price)+\n              \",publish_time:\"+str(self.publish_time))\n    \n    def update_price(self,price):\n        \"\"\"更改书的价格\"\"\"\n        self.price = price\n\nclass CultureBook(Book):\n    \"\"\"文学书\"\"\"\n    def __init__(self,name,price,author):\n        self.author = author\n        super().__init__(name,price)\n    \n    def get_book_info(self):\n        \"\"\"描述文学书的相关信息\"\"\"\n        print(\"{'name':'\" + self.name + \n              \"','price':\" + str(self.price) +\n              \",'author':'\"+self.author+\"'}\")\n    \n    def describe(self):\n        print(\"name:\"+self.name+\n              \",price:\"+str(self.price)+\n              \",publish_time:\"+str(self.publish_time)+\n              \",author:\"+self.author)\n```\n\n创建一个新的文件my_book.py，在其中导入Book类并创建实例\n\n```python\nfrom book import Book,CultureBook\n\nbook = Book('Java8 in action',59.8)\nbook.update_price(66.6)\nbook.describe()\nprint(book.name)\n\nbook2 = CultureBook('红楼梦',45.5,'曹雪芹')\nbook2.describe()\n```\n\n输出结果：\n\n```python\nname:Java8 in action,price:66.6,publish_time:2018\nJava8 in action\nname:红楼梦,price:45.5,publish_time:2018,author:曹雪芹\n```\n\n#### 导入整个模块\n\n示例：\n\nmy_books.py\n\n```python\nimport book\n\nbook = book.Book('Java8 in action',59.8)\nbook.update_price(66.6)\nbook.describe()\nprint(book.name)\n\nbook2 = book.CultureBook('红楼梦',45.5,'曹雪芹')\nbook2.describe()\n```\n\n输出与之前一般无二。\n\n#### 导入模块中的所有类\n\n语法：\n\n```python\nfrom 模块名 import *\n```\n\n像之前讲的从模块中导入函数一样，不推荐使用该方式，理由类似。\n\n","source":"_posts/python3-tutorial-chapter11-class.md","raw":"---\ntitle: python3教程-第11章 类\ndate: 2018-06-19 20:28:59\ntags: python\ncategories: python\n---\n\n### 创建和使用类\n\n语法：\n\n```python\nclass 类名():\n    # 类中的所有方法都需要一个名为self的形参\n    类中的方法\n   \n```\n\n<!--more-->\n\n示例：\n\n```python\nclass Book():\n    \"\"\"书籍\"\"\"\n    def __init__(self,name,price):\n        \"\"\"\"初始化书名和价格\"\"\"\n        self.name = name\n        self.price = price\n    \n    def describe(self):\n        \"\"\"打印书的所有描述信息\"\"\"\n        print(\"name:\"+self.name+\",price:\"+str(self.price))\n```\n\n上面的代码创建了一个Book类。类中的函数称为方法，前一节中关于函数的一切介绍都适用于方法。\n\n第三行中的\\_\\_init\\_\\_()是一个特殊的方法（实例化方法，类似于Java中的构造器），开头和末尾各有两个下划线。每当我们根据Book类创建实例时，python都会自动运行它。\n\n值得注意的是，**\\_\\_init\\_\\_()中的形参self是必不可少的，且必须位于其他形参的前面**，它代表的是某一次实例化所产生的实例。当我们通过实参向Book()传递名字和价格的时候，self会自动传递，不需要我们去传递它。\n\n第五、六行中定义的两个变量都有前缀self。python中，**以self为前缀的变量都可供类中的所有方法使用**，也可以通过类的任意实例来访问这些变量。像这样可以通过实例访问的变量称为属性。\n\n#### 创建类的实例\n\n```python\n# 使用上面定义的Book类创建实例    \nbook = Book('Java8 in action',59.8)\nbook.describe()\n```\n\n遇到第二行代码时，python使用实参'Java8 in action'和59.0调用Book类的\\_\\_init\\_\\_()，创建一个特定的书籍实例，并使用我们提供的值来设置name和price。方法\\_\\_init\\_\\_()并未显示地包含return语句，但python会自动返回一个书籍实例。\n\n输出结果：\n\n```python\nname:Java8 in action,price:59.8\n```\n\n#### 访问属性\n\n要访问实例的属性，可使用句点表示法( . )。\n\n示例：\n\n```python\nprint(book.name)\n```\n\n输出结果：\n\n```python\nJava8 in action\n```\n\n#### 调用方法\n\n要调用类中的方法，也是用句点表示法( . )。\n\n### 使用实例\n\n#### 给属性指定默认值\n\n类中的每个属性都必须有初始值，哪怕这个值为0或者空字符串。在有些情况下，如设置默认值时，可以在方法\\_\\_init\\_\\_()内指定属性的初始值，从而无需包含为该属性提供初始值的形参。\n\n示例：\n\n```python\nclass Book():\n    \"\"\"书籍\"\"\"\n    def __init__(self,name,price):\n        \"\"\"\"初始化书名和价格\"\"\"\n        self.name = name\n        self.price = price\n        self.publish_time = 2018\n    \n    def describe(self):\n        \"\"\"打印书的所有描述信息\"\"\"\n        print(\"name:\"+self.name\n              +\",price:\"+str(self.price)\n              +\",publish_time:\"+str(self.publish_time))\n        \nbook = Book('Java8 in action',59.8)\nbook.describe()\n```\n\n输出结果：\n\n```python\nname:Java8 in action,price:59.8,publish_time:2018\n```\n\n#### 修改属性的值\n\n* 直接修改属性的值\n\n通过类的实例直接修改属性的值。\n\n示例：\n\n```python\nbook = Book('Java8 in action',59.8)\nbook.publish_time = 2020\nbook.describe()\n```\n\n输出结果：\n\n```python\nname:Java8 in action,price:59.8,publish_time:2020\n```\n\n* 通过方法修改属性的值\n\n通过类中定义的方法修改属性的值，从而隐藏实现细节。\n\n示例：\n\n```python\n\t# 在上面的Book类中新增一个update_price(self)方法    \n    def update_price(self,price):\n        \"\"\"更改书的价格\"\"\"\n        self.price = price\n\nbook = Book('Java8 in action',59.8)\nbook.update_price(66.6)\nbook.describe()\n```\n\n输出结果：\n\n```python\nname:Java8 in action,price:66.6,publish_time:2018\n```\n\n### 继承\n\n编写类时，并非总是要从头开始。如果我们编写的类是另一个现成类的某种特殊情况，可以使用继承。一个类继承另一个类时，它将自动获得另一个类的所有属性和方法。原有的类称为父类，新的类称为子类。子类在继承父类所有属性和方法的同时，还可以定义自己特有的属性和方法。\n\n基本语法：\n\n```python\n# 在定义子类时，必须在括号中指定父类的名称。\nclass 类名(父类名):\n    类中的方法\n```\n\n#### 子类的\\_\\_init\\_\\_()\n\n子类在实例化的时候，首先需要为父类的所有属性赋值。下面定义了一个Book类的子类CultureBook。\n\n```python\nclass CultureBook(Book):\n    def __init__(self,name,price):\n        # 调用父类Book的__init__()方法\n        super().__init__(name,price)\n     \nbook2 = CultureBook('红楼梦',45.5)\nbook2.describe()\n```\n\n创建子类时，父类必须包含在当前文件中，且位于子类的前面。\n\n上面第三行中的函数super()，将父类Book和子类CultureBook关联起来，这行代码让python调用父类Book中的\\_\\_init\\_\\_()，从而使CultureBook的实例包含了父类的所有属性。\n\n输出结果：\n\n```python\nname:红楼梦,price:45.5,publish_time:2018\n```\n\n#### 定义子类独有的属性和方法\n\n```python\nclass CultureBook(Book):\n    \"\"\"文学书\"\"\"\n    def __init__(self,name,price,author):\n        super().__init__(name,price)\n        self.author = author\n    \n    def get_book_info(self):\n        \"\"\"描述文学书的相关信息\"\"\"\n        print(\"{'name':'\" + self.name + \n              \"','price':\" + str(self.price) +\n              \",'author':'\"+self.author+\"'}\")\n     \nbook2 = CultureBook('红楼梦',45.5,'曹雪芹')\nbook2.get_book_info()\n```\n\n输出结果：\n\n```python\n{'name':'红楼梦','price':45.5,'author':'曹雪芹'}\n```\n\n需要注意的是，第四行中的super().\\_\\_init\\_\\_()并不一定要写在子类\\_\\_init\\_\\_()方法的第一行。事实上，第四、五行的顺序完全可以颠倒过来（这在Java中是不可以的）。\n\n#### 重写父类的方法\n\n如果父类的某个（些）方法不适合子类，完全可以在子类中重写父类的方法，只需要**在子类中定义一个与父类方法同名的方法**即可。这样，python将不会考虑这个父类方法，而只关注子类中定义的同名方法。\n\n示例：\n\n```python\n# 父类Book没有author属性，在CultureBook中重写父类的describe()方法\nclass CultureBook(Book):\n    \n    # 省略之前的代码\n    \n    def describe(self):\n        print(\"name:\"+self.name+\n              \",price:\"+str(self.price)+\n              \",publish_time:\"+str(self.publish_time)+\n              \",author:\"+self.author)\n\nbook2 = CultureBook('红楼梦',45.5,'曹雪芹')\nbook2.describe()\n```\n\n输出结果：\n\n```python\nname:红楼梦,price:45.5,publish_time:2018,author:曹雪芹\n```\n\n可以看到，调用describe()后，确实将父类Book中没有的author属性也打印出来了。\n\n### 导入类\n\n为了使程序尽可能整洁，我们可以将类存储在模块中，然后在需要使用的程序中导入该模块。这部分的内容与前面将的从模块中导入函数基本一致。\n\n#### 导入单（多）个类\n\n语法：\n\n```python\nfrom 模块名 import 类名,类名,...\n```\n\n将Book类存储在一个名为book.py的模块中\n\nbook.py\n\n```python\nclass Book():\n    \"\"\"书籍\"\"\"\n    def __init__(self,name,price):\n        \"\"\"\"初始化书名和价格\"\"\"\n        self.name = name\n        self.price = price\n        self.publish_time = 2018\n    \n    def describe(self):\n        \"\"\"打印书的所有描述信息\"\"\"\n        print(\"name:\"+self.name+\n              \",price:\"+str(self.price)+\n              \",publish_time:\"+str(self.publish_time))\n    \n    def update_price(self,price):\n        \"\"\"更改书的价格\"\"\"\n        self.price = price\n\nclass CultureBook(Book):\n    \"\"\"文学书\"\"\"\n    def __init__(self,name,price,author):\n        self.author = author\n        super().__init__(name,price)\n    \n    def get_book_info(self):\n        \"\"\"描述文学书的相关信息\"\"\"\n        print(\"{'name':'\" + self.name + \n              \"','price':\" + str(self.price) +\n              \",'author':'\"+self.author+\"'}\")\n    \n    def describe(self):\n        print(\"name:\"+self.name+\n              \",price:\"+str(self.price)+\n              \",publish_time:\"+str(self.publish_time)+\n              \",author:\"+self.author)\n```\n\n创建一个新的文件my_book.py，在其中导入Book类并创建实例\n\n```python\nfrom book import Book,CultureBook\n\nbook = Book('Java8 in action',59.8)\nbook.update_price(66.6)\nbook.describe()\nprint(book.name)\n\nbook2 = CultureBook('红楼梦',45.5,'曹雪芹')\nbook2.describe()\n```\n\n输出结果：\n\n```python\nname:Java8 in action,price:66.6,publish_time:2018\nJava8 in action\nname:红楼梦,price:45.5,publish_time:2018,author:曹雪芹\n```\n\n#### 导入整个模块\n\n示例：\n\nmy_books.py\n\n```python\nimport book\n\nbook = book.Book('Java8 in action',59.8)\nbook.update_price(66.6)\nbook.describe()\nprint(book.name)\n\nbook2 = book.CultureBook('红楼梦',45.5,'曹雪芹')\nbook2.describe()\n```\n\n输出与之前一般无二。\n\n#### 导入模块中的所有类\n\n语法：\n\n```python\nfrom 模块名 import *\n```\n\n像之前讲的从模块中导入函数一样，不推荐使用该方式，理由类似。\n\n","slug":"python3-tutorial-chapter11-class","published":1,"updated":"2019-01-19T07:23:57.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9au800doj1q0thqfoue8","content":"<h3 id=\"创建和使用类\"><a href=\"#创建和使用类\" class=\"headerlink\" title=\"创建和使用类\"></a>创建和使用类</h3><p>语法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名<span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 类中的所有方法都需要一个名为self的形参</span></span><br><span class=\"line\">    类中的方法</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"书籍\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,price)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"\"初始化书名和价格\"\"\"</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">describe</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"打印书的所有描述信息\"\"\"</span></span><br><span class=\"line\">        print(<span class=\"string\">\"name:\"</span>+self.name+<span class=\"string\">\",price:\"</span>+str(self.price))</span><br></pre></td></tr></table></figure>\n<p>上面的代码创建了一个Book类。类中的函数称为方法，前一节中关于函数的一切介绍都适用于方法。</p>\n<p>第三行中的__init__()是一个特殊的方法（实例化方法，类似于Java中的构造器），开头和末尾各有两个下划线。每当我们根据Book类创建实例时，python都会自动运行它。</p>\n<p>值得注意的是，<strong>__init__()中的形参self是必不可少的，且必须位于其他形参的前面</strong>，它代表的是某一次实例化所产生的实例。当我们通过实参向Book()传递名字和价格的时候，self会自动传递，不需要我们去传递它。</p>\n<p>第五、六行中定义的两个变量都有前缀self。python中，<strong>以self为前缀的变量都可供类中的所有方法使用</strong>，也可以通过类的任意实例来访问这些变量。像这样可以通过实例访问的变量称为属性。</p>\n<h4 id=\"创建类的实例\"><a href=\"#创建类的实例\" class=\"headerlink\" title=\"创建类的实例\"></a>创建类的实例</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用上面定义的Book类创建实例    </span></span><br><span class=\"line\">book = Book(<span class=\"string\">'Java8 in action'</span>,<span class=\"number\">59.8</span>)</span><br><span class=\"line\">book.describe()</span><br></pre></td></tr></table></figure>\n<p>遇到第二行代码时，python使用实参’Java8 in action’和59.0调用Book类的__init__()，创建一个特定的书籍实例，并使用我们提供的值来设置name和price。方法__init__()并未显示地包含return语句，但python会自动返回一个书籍实例。</p>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name:Java8 <span class=\"keyword\">in</span> action,price:<span class=\"number\">59.8</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"访问属性\"><a href=\"#访问属性\" class=\"headerlink\" title=\"访问属性\"></a>访问属性</h4><p>要访问实例的属性，可使用句点表示法( . )。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(book.name)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java8 <span class=\"keyword\">in</span> action</span><br></pre></td></tr></table></figure>\n<h4 id=\"调用方法\"><a href=\"#调用方法\" class=\"headerlink\" title=\"调用方法\"></a>调用方法</h4><p>要调用类中的方法，也是用句点表示法( . )。</p>\n<h3 id=\"使用实例\"><a href=\"#使用实例\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h3><h4 id=\"给属性指定默认值\"><a href=\"#给属性指定默认值\" class=\"headerlink\" title=\"给属性指定默认值\"></a>给属性指定默认值</h4><p>类中的每个属性都必须有初始值，哪怕这个值为0或者空字符串。在有些情况下，如设置默认值时，可以在方法__init__()内指定属性的初始值，从而无需包含为该属性提供初始值的形参。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"书籍\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,price)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"\"初始化书名和价格\"\"\"</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\">        self.publish_time = <span class=\"number\">2018</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">describe</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"打印书的所有描述信息\"\"\"</span></span><br><span class=\"line\">        print(<span class=\"string\">\"name:\"</span>+self.name</span><br><span class=\"line\">              +<span class=\"string\">\",price:\"</span>+str(self.price)</span><br><span class=\"line\">              +<span class=\"string\">\",publish_time:\"</span>+str(self.publish_time))</span><br><span class=\"line\">        </span><br><span class=\"line\">book = Book(<span class=\"string\">'Java8 in action'</span>,<span class=\"number\">59.8</span>)</span><br><span class=\"line\">book.describe()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name:Java8 <span class=\"keyword\">in</span> action,price:<span class=\"number\">59.8</span>,publish_time:<span class=\"number\">2018</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"修改属性的值\"><a href=\"#修改属性的值\" class=\"headerlink\" title=\"修改属性的值\"></a>修改属性的值</h4><ul>\n<li>直接修改属性的值</li>\n</ul>\n<p>通过类的实例直接修改属性的值。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">book = Book(<span class=\"string\">'Java8 in action'</span>,<span class=\"number\">59.8</span>)</span><br><span class=\"line\">book.publish_time = <span class=\"number\">2020</span></span><br><span class=\"line\">book.describe()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name:Java8 <span class=\"keyword\">in</span> action,price:<span class=\"number\">59.8</span>,publish_time:<span class=\"number\">2020</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过方法修改属性的值</li>\n</ul>\n<p>通过类中定义的方法修改属性的值，从而隐藏实现细节。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"comment\"># 在上面的Book类中新增一个update_price(self)方法    </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_price</span><span class=\"params\">(self,price)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"更改书的价格\"\"\"</span></span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\"></span><br><span class=\"line\">book = Book(<span class=\"string\">'Java8 in action'</span>,<span class=\"number\">59.8</span>)</span><br><span class=\"line\">book.update_price(<span class=\"number\">66.6</span>)</span><br><span class=\"line\">book.describe()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name:Java8 <span class=\"keyword\">in</span> action,price:<span class=\"number\">66.6</span>,publish_time:<span class=\"number\">2018</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>编写类时，并非总是要从头开始。如果我们编写的类是另一个现成类的某种特殊情况，可以使用继承。一个类继承另一个类时，它将自动获得另一个类的所有属性和方法。原有的类称为父类，新的类称为子类。子类在继承父类所有属性和方法的同时，还可以定义自己特有的属性和方法。</p>\n<p>基本语法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在定义子类时，必须在括号中指定父类的名称。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名<span class=\"params\">(父类名)</span>:</span></span><br><span class=\"line\">    类中的方法</span><br></pre></td></tr></table></figure>\n<h4 id=\"子类的-init\"><a href=\"#子类的-init\" class=\"headerlink\" title=\"子类的__init__()\"></a>子类的__init__()</h4><p>子类在实例化的时候，首先需要为父类的所有属性赋值。下面定义了一个Book类的子类CultureBook。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CultureBook</span><span class=\"params\">(Book)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,price)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 调用父类Book的__init__()方法</span></span><br><span class=\"line\">        super().__init__(name,price)</span><br><span class=\"line\">     </span><br><span class=\"line\">book2 = CultureBook(<span class=\"string\">'红楼梦'</span>,<span class=\"number\">45.5</span>)</span><br><span class=\"line\">book2.describe()</span><br></pre></td></tr></table></figure>\n<p>创建子类时，父类必须包含在当前文件中，且位于子类的前面。</p>\n<p>上面第三行中的函数super()，将父类Book和子类CultureBook关联起来，这行代码让python调用父类Book中的__init__()，从而使CultureBook的实例包含了父类的所有属性。</p>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name:红楼梦,price:<span class=\"number\">45.5</span>,publish_time:<span class=\"number\">2018</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"定义子类独有的属性和方法\"><a href=\"#定义子类独有的属性和方法\" class=\"headerlink\" title=\"定义子类独有的属性和方法\"></a>定义子类独有的属性和方法</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CultureBook</span><span class=\"params\">(Book)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"文学书\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,price,author)</span>:</span></span><br><span class=\"line\">        super().__init__(name,price)</span><br><span class=\"line\">        self.author = author</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_book_info</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"描述文学书的相关信息\"\"\"</span></span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;'name':'\"</span> + self.name + </span><br><span class=\"line\">              <span class=\"string\">\"','price':\"</span> + str(self.price) +</span><br><span class=\"line\">              <span class=\"string\">\",'author':'\"</span>+self.author+<span class=\"string\">\"'&#125;\"</span>)</span><br><span class=\"line\">     </span><br><span class=\"line\">book2 = CultureBook(<span class=\"string\">'红楼梦'</span>,<span class=\"number\">45.5</span>,<span class=\"string\">'曹雪芹'</span>)</span><br><span class=\"line\">book2.get_book_info()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'红楼梦'</span>,<span class=\"string\">'price'</span>:<span class=\"number\">45.5</span>,<span class=\"string\">'author'</span>:<span class=\"string\">'曹雪芹'</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，第四行中的super().__init__()并不一定要写在子类__init__()方法的第一行。事实上，第四、五行的顺序完全可以颠倒过来（这在Java中是不可以的）。</p>\n<h4 id=\"重写父类的方法\"><a href=\"#重写父类的方法\" class=\"headerlink\" title=\"重写父类的方法\"></a>重写父类的方法</h4><p>如果父类的某个（些）方法不适合子类，完全可以在子类中重写父类的方法，只需要<strong>在子类中定义一个与父类方法同名的方法</strong>即可。这样，python将不会考虑这个父类方法，而只关注子类中定义的同名方法。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 父类Book没有author属性，在CultureBook中重写父类的describe()方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CultureBook</span><span class=\"params\">(Book)</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 省略之前的代码</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">describe</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"name:\"</span>+self.name+</span><br><span class=\"line\">              <span class=\"string\">\",price:\"</span>+str(self.price)+</span><br><span class=\"line\">              <span class=\"string\">\",publish_time:\"</span>+str(self.publish_time)+</span><br><span class=\"line\">              <span class=\"string\">\",author:\"</span>+self.author)</span><br><span class=\"line\"></span><br><span class=\"line\">book2 = CultureBook(<span class=\"string\">'红楼梦'</span>,<span class=\"number\">45.5</span>,<span class=\"string\">'曹雪芹'</span>)</span><br><span class=\"line\">book2.describe()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name:红楼梦,price:<span class=\"number\">45.5</span>,publish_time:<span class=\"number\">2018</span>,author:曹雪芹</span><br></pre></td></tr></table></figure>\n<p>可以看到，调用describe()后，确实将父类Book中没有的author属性也打印出来了。</p>\n<h3 id=\"导入类\"><a href=\"#导入类\" class=\"headerlink\" title=\"导入类\"></a>导入类</h3><p>为了使程序尽可能整洁，我们可以将类存储在模块中，然后在需要使用的程序中导入该模块。这部分的内容与前面将的从模块中导入函数基本一致。</p>\n<h4 id=\"导入单（多）个类\"><a href=\"#导入单（多）个类\" class=\"headerlink\" title=\"导入单（多）个类\"></a>导入单（多）个类</h4><p>语法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> 模块名 <span class=\"keyword\">import</span> 类名,类名,...</span><br></pre></td></tr></table></figure>\n<p>将Book类存储在一个名为book.py的模块中</p>\n<p>book.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"书籍\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,price)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"\"初始化书名和价格\"\"\"</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\">        self.publish_time = <span class=\"number\">2018</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">describe</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"打印书的所有描述信息\"\"\"</span></span><br><span class=\"line\">        print(<span class=\"string\">\"name:\"</span>+self.name+</span><br><span class=\"line\">              <span class=\"string\">\",price:\"</span>+str(self.price)+</span><br><span class=\"line\">              <span class=\"string\">\",publish_time:\"</span>+str(self.publish_time))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_price</span><span class=\"params\">(self,price)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"更改书的价格\"\"\"</span></span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CultureBook</span><span class=\"params\">(Book)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"文学书\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,price,author)</span>:</span></span><br><span class=\"line\">        self.author = author</span><br><span class=\"line\">        super().__init__(name,price)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_book_info</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"描述文学书的相关信息\"\"\"</span></span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;'name':'\"</span> + self.name + </span><br><span class=\"line\">              <span class=\"string\">\"','price':\"</span> + str(self.price) +</span><br><span class=\"line\">              <span class=\"string\">\",'author':'\"</span>+self.author+<span class=\"string\">\"'&#125;\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">describe</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"name:\"</span>+self.name+</span><br><span class=\"line\">              <span class=\"string\">\",price:\"</span>+str(self.price)+</span><br><span class=\"line\">              <span class=\"string\">\",publish_time:\"</span>+str(self.publish_time)+</span><br><span class=\"line\">              <span class=\"string\">\",author:\"</span>+self.author)</span><br></pre></td></tr></table></figure>\n<p>创建一个新的文件my_book.py，在其中导入Book类并创建实例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> book <span class=\"keyword\">import</span> Book,CultureBook</span><br><span class=\"line\"></span><br><span class=\"line\">book = Book(<span class=\"string\">'Java8 in action'</span>,<span class=\"number\">59.8</span>)</span><br><span class=\"line\">book.update_price(<span class=\"number\">66.6</span>)</span><br><span class=\"line\">book.describe()</span><br><span class=\"line\">print(book.name)</span><br><span class=\"line\"></span><br><span class=\"line\">book2 = CultureBook(<span class=\"string\">'红楼梦'</span>,<span class=\"number\">45.5</span>,<span class=\"string\">'曹雪芹'</span>)</span><br><span class=\"line\">book2.describe()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name:Java8 <span class=\"keyword\">in</span> action,price:<span class=\"number\">66.6</span>,publish_time:<span class=\"number\">2018</span></span><br><span class=\"line\">Java8 <span class=\"keyword\">in</span> action</span><br><span class=\"line\">name:红楼梦,price:<span class=\"number\">45.5</span>,publish_time:<span class=\"number\">2018</span>,author:曹雪芹</span><br></pre></td></tr></table></figure>\n<h4 id=\"导入整个模块\"><a href=\"#导入整个模块\" class=\"headerlink\" title=\"导入整个模块\"></a>导入整个模块</h4><p>示例：</p>\n<p>my_books.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> book</span><br><span class=\"line\"></span><br><span class=\"line\">book = book.Book(<span class=\"string\">'Java8 in action'</span>,<span class=\"number\">59.8</span>)</span><br><span class=\"line\">book.update_price(<span class=\"number\">66.6</span>)</span><br><span class=\"line\">book.describe()</span><br><span class=\"line\">print(book.name)</span><br><span class=\"line\"></span><br><span class=\"line\">book2 = book.CultureBook(<span class=\"string\">'红楼梦'</span>,<span class=\"number\">45.5</span>,<span class=\"string\">'曹雪芹'</span>)</span><br><span class=\"line\">book2.describe()</span><br></pre></td></tr></table></figure>\n<p>输出与之前一般无二。</p>\n<h4 id=\"导入模块中的所有类\"><a href=\"#导入模块中的所有类\" class=\"headerlink\" title=\"导入模块中的所有类\"></a>导入模块中的所有类</h4><p>语法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> 模块名 <span class=\"keyword\">import</span> *</span><br></pre></td></tr></table></figure>\n<p>像之前讲的从模块中导入函数一样，不推荐使用该方式，理由类似。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"创建和使用类\"><a href=\"#创建和使用类\" class=\"headerlink\" title=\"创建和使用类\"></a>创建和使用类</h3><p>语法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名<span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 类中的所有方法都需要一个名为self的形参</span></span><br><span class=\"line\">    类中的方法</span><br></pre></td></tr></table></figure>","more":"<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"书籍\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,price)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"\"初始化书名和价格\"\"\"</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">describe</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"打印书的所有描述信息\"\"\"</span></span><br><span class=\"line\">        print(<span class=\"string\">\"name:\"</span>+self.name+<span class=\"string\">\",price:\"</span>+str(self.price))</span><br></pre></td></tr></table></figure>\n<p>上面的代码创建了一个Book类。类中的函数称为方法，前一节中关于函数的一切介绍都适用于方法。</p>\n<p>第三行中的__init__()是一个特殊的方法（实例化方法，类似于Java中的构造器），开头和末尾各有两个下划线。每当我们根据Book类创建实例时，python都会自动运行它。</p>\n<p>值得注意的是，<strong>__init__()中的形参self是必不可少的，且必须位于其他形参的前面</strong>，它代表的是某一次实例化所产生的实例。当我们通过实参向Book()传递名字和价格的时候，self会自动传递，不需要我们去传递它。</p>\n<p>第五、六行中定义的两个变量都有前缀self。python中，<strong>以self为前缀的变量都可供类中的所有方法使用</strong>，也可以通过类的任意实例来访问这些变量。像这样可以通过实例访问的变量称为属性。</p>\n<h4 id=\"创建类的实例\"><a href=\"#创建类的实例\" class=\"headerlink\" title=\"创建类的实例\"></a>创建类的实例</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用上面定义的Book类创建实例    </span></span><br><span class=\"line\">book = Book(<span class=\"string\">'Java8 in action'</span>,<span class=\"number\">59.8</span>)</span><br><span class=\"line\">book.describe()</span><br></pre></td></tr></table></figure>\n<p>遇到第二行代码时，python使用实参’Java8 in action’和59.0调用Book类的__init__()，创建一个特定的书籍实例，并使用我们提供的值来设置name和price。方法__init__()并未显示地包含return语句，但python会自动返回一个书籍实例。</p>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name:Java8 <span class=\"keyword\">in</span> action,price:<span class=\"number\">59.8</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"访问属性\"><a href=\"#访问属性\" class=\"headerlink\" title=\"访问属性\"></a>访问属性</h4><p>要访问实例的属性，可使用句点表示法( . )。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(book.name)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java8 <span class=\"keyword\">in</span> action</span><br></pre></td></tr></table></figure>\n<h4 id=\"调用方法\"><a href=\"#调用方法\" class=\"headerlink\" title=\"调用方法\"></a>调用方法</h4><p>要调用类中的方法，也是用句点表示法( . )。</p>\n<h3 id=\"使用实例\"><a href=\"#使用实例\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h3><h4 id=\"给属性指定默认值\"><a href=\"#给属性指定默认值\" class=\"headerlink\" title=\"给属性指定默认值\"></a>给属性指定默认值</h4><p>类中的每个属性都必须有初始值，哪怕这个值为0或者空字符串。在有些情况下，如设置默认值时，可以在方法__init__()内指定属性的初始值，从而无需包含为该属性提供初始值的形参。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"书籍\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,price)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"\"初始化书名和价格\"\"\"</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\">        self.publish_time = <span class=\"number\">2018</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">describe</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"打印书的所有描述信息\"\"\"</span></span><br><span class=\"line\">        print(<span class=\"string\">\"name:\"</span>+self.name</span><br><span class=\"line\">              +<span class=\"string\">\",price:\"</span>+str(self.price)</span><br><span class=\"line\">              +<span class=\"string\">\",publish_time:\"</span>+str(self.publish_time))</span><br><span class=\"line\">        </span><br><span class=\"line\">book = Book(<span class=\"string\">'Java8 in action'</span>,<span class=\"number\">59.8</span>)</span><br><span class=\"line\">book.describe()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name:Java8 <span class=\"keyword\">in</span> action,price:<span class=\"number\">59.8</span>,publish_time:<span class=\"number\">2018</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"修改属性的值\"><a href=\"#修改属性的值\" class=\"headerlink\" title=\"修改属性的值\"></a>修改属性的值</h4><ul>\n<li>直接修改属性的值</li>\n</ul>\n<p>通过类的实例直接修改属性的值。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">book = Book(<span class=\"string\">'Java8 in action'</span>,<span class=\"number\">59.8</span>)</span><br><span class=\"line\">book.publish_time = <span class=\"number\">2020</span></span><br><span class=\"line\">book.describe()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name:Java8 <span class=\"keyword\">in</span> action,price:<span class=\"number\">59.8</span>,publish_time:<span class=\"number\">2020</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过方法修改属性的值</li>\n</ul>\n<p>通过类中定义的方法修改属性的值，从而隐藏实现细节。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"comment\"># 在上面的Book类中新增一个update_price(self)方法    </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_price</span><span class=\"params\">(self,price)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"更改书的价格\"\"\"</span></span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\"></span><br><span class=\"line\">book = Book(<span class=\"string\">'Java8 in action'</span>,<span class=\"number\">59.8</span>)</span><br><span class=\"line\">book.update_price(<span class=\"number\">66.6</span>)</span><br><span class=\"line\">book.describe()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name:Java8 <span class=\"keyword\">in</span> action,price:<span class=\"number\">66.6</span>,publish_time:<span class=\"number\">2018</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>编写类时，并非总是要从头开始。如果我们编写的类是另一个现成类的某种特殊情况，可以使用继承。一个类继承另一个类时，它将自动获得另一个类的所有属性和方法。原有的类称为父类，新的类称为子类。子类在继承父类所有属性和方法的同时，还可以定义自己特有的属性和方法。</p>\n<p>基本语法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在定义子类时，必须在括号中指定父类的名称。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名<span class=\"params\">(父类名)</span>:</span></span><br><span class=\"line\">    类中的方法</span><br></pre></td></tr></table></figure>\n<h4 id=\"子类的-init\"><a href=\"#子类的-init\" class=\"headerlink\" title=\"子类的__init__()\"></a>子类的__init__()</h4><p>子类在实例化的时候，首先需要为父类的所有属性赋值。下面定义了一个Book类的子类CultureBook。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CultureBook</span><span class=\"params\">(Book)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,price)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 调用父类Book的__init__()方法</span></span><br><span class=\"line\">        super().__init__(name,price)</span><br><span class=\"line\">     </span><br><span class=\"line\">book2 = CultureBook(<span class=\"string\">'红楼梦'</span>,<span class=\"number\">45.5</span>)</span><br><span class=\"line\">book2.describe()</span><br></pre></td></tr></table></figure>\n<p>创建子类时，父类必须包含在当前文件中，且位于子类的前面。</p>\n<p>上面第三行中的函数super()，将父类Book和子类CultureBook关联起来，这行代码让python调用父类Book中的__init__()，从而使CultureBook的实例包含了父类的所有属性。</p>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name:红楼梦,price:<span class=\"number\">45.5</span>,publish_time:<span class=\"number\">2018</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"定义子类独有的属性和方法\"><a href=\"#定义子类独有的属性和方法\" class=\"headerlink\" title=\"定义子类独有的属性和方法\"></a>定义子类独有的属性和方法</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CultureBook</span><span class=\"params\">(Book)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"文学书\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,price,author)</span>:</span></span><br><span class=\"line\">        super().__init__(name,price)</span><br><span class=\"line\">        self.author = author</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_book_info</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"描述文学书的相关信息\"\"\"</span></span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;'name':'\"</span> + self.name + </span><br><span class=\"line\">              <span class=\"string\">\"','price':\"</span> + str(self.price) +</span><br><span class=\"line\">              <span class=\"string\">\",'author':'\"</span>+self.author+<span class=\"string\">\"'&#125;\"</span>)</span><br><span class=\"line\">     </span><br><span class=\"line\">book2 = CultureBook(<span class=\"string\">'红楼梦'</span>,<span class=\"number\">45.5</span>,<span class=\"string\">'曹雪芹'</span>)</span><br><span class=\"line\">book2.get_book_info()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'红楼梦'</span>,<span class=\"string\">'price'</span>:<span class=\"number\">45.5</span>,<span class=\"string\">'author'</span>:<span class=\"string\">'曹雪芹'</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，第四行中的super().__init__()并不一定要写在子类__init__()方法的第一行。事实上，第四、五行的顺序完全可以颠倒过来（这在Java中是不可以的）。</p>\n<h4 id=\"重写父类的方法\"><a href=\"#重写父类的方法\" class=\"headerlink\" title=\"重写父类的方法\"></a>重写父类的方法</h4><p>如果父类的某个（些）方法不适合子类，完全可以在子类中重写父类的方法，只需要<strong>在子类中定义一个与父类方法同名的方法</strong>即可。这样，python将不会考虑这个父类方法，而只关注子类中定义的同名方法。</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 父类Book没有author属性，在CultureBook中重写父类的describe()方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CultureBook</span><span class=\"params\">(Book)</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 省略之前的代码</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">describe</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"name:\"</span>+self.name+</span><br><span class=\"line\">              <span class=\"string\">\",price:\"</span>+str(self.price)+</span><br><span class=\"line\">              <span class=\"string\">\",publish_time:\"</span>+str(self.publish_time)+</span><br><span class=\"line\">              <span class=\"string\">\",author:\"</span>+self.author)</span><br><span class=\"line\"></span><br><span class=\"line\">book2 = CultureBook(<span class=\"string\">'红楼梦'</span>,<span class=\"number\">45.5</span>,<span class=\"string\">'曹雪芹'</span>)</span><br><span class=\"line\">book2.describe()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name:红楼梦,price:<span class=\"number\">45.5</span>,publish_time:<span class=\"number\">2018</span>,author:曹雪芹</span><br></pre></td></tr></table></figure>\n<p>可以看到，调用describe()后，确实将父类Book中没有的author属性也打印出来了。</p>\n<h3 id=\"导入类\"><a href=\"#导入类\" class=\"headerlink\" title=\"导入类\"></a>导入类</h3><p>为了使程序尽可能整洁，我们可以将类存储在模块中，然后在需要使用的程序中导入该模块。这部分的内容与前面将的从模块中导入函数基本一致。</p>\n<h4 id=\"导入单（多）个类\"><a href=\"#导入单（多）个类\" class=\"headerlink\" title=\"导入单（多）个类\"></a>导入单（多）个类</h4><p>语法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> 模块名 <span class=\"keyword\">import</span> 类名,类名,...</span><br></pre></td></tr></table></figure>\n<p>将Book类存储在一个名为book.py的模块中</p>\n<p>book.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"书籍\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,price)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"\"初始化书名和价格\"\"\"</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\">        self.publish_time = <span class=\"number\">2018</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">describe</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"打印书的所有描述信息\"\"\"</span></span><br><span class=\"line\">        print(<span class=\"string\">\"name:\"</span>+self.name+</span><br><span class=\"line\">              <span class=\"string\">\",price:\"</span>+str(self.price)+</span><br><span class=\"line\">              <span class=\"string\">\",publish_time:\"</span>+str(self.publish_time))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_price</span><span class=\"params\">(self,price)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"更改书的价格\"\"\"</span></span><br><span class=\"line\">        self.price = price</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CultureBook</span><span class=\"params\">(Book)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"文学书\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,price,author)</span>:</span></span><br><span class=\"line\">        self.author = author</span><br><span class=\"line\">        super().__init__(name,price)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_book_info</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"描述文学书的相关信息\"\"\"</span></span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;'name':'\"</span> + self.name + </span><br><span class=\"line\">              <span class=\"string\">\"','price':\"</span> + str(self.price) +</span><br><span class=\"line\">              <span class=\"string\">\",'author':'\"</span>+self.author+<span class=\"string\">\"'&#125;\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">describe</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"name:\"</span>+self.name+</span><br><span class=\"line\">              <span class=\"string\">\",price:\"</span>+str(self.price)+</span><br><span class=\"line\">              <span class=\"string\">\",publish_time:\"</span>+str(self.publish_time)+</span><br><span class=\"line\">              <span class=\"string\">\",author:\"</span>+self.author)</span><br></pre></td></tr></table></figure>\n<p>创建一个新的文件my_book.py，在其中导入Book类并创建实例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> book <span class=\"keyword\">import</span> Book,CultureBook</span><br><span class=\"line\"></span><br><span class=\"line\">book = Book(<span class=\"string\">'Java8 in action'</span>,<span class=\"number\">59.8</span>)</span><br><span class=\"line\">book.update_price(<span class=\"number\">66.6</span>)</span><br><span class=\"line\">book.describe()</span><br><span class=\"line\">print(book.name)</span><br><span class=\"line\"></span><br><span class=\"line\">book2 = CultureBook(<span class=\"string\">'红楼梦'</span>,<span class=\"number\">45.5</span>,<span class=\"string\">'曹雪芹'</span>)</span><br><span class=\"line\">book2.describe()</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name:Java8 <span class=\"keyword\">in</span> action,price:<span class=\"number\">66.6</span>,publish_time:<span class=\"number\">2018</span></span><br><span class=\"line\">Java8 <span class=\"keyword\">in</span> action</span><br><span class=\"line\">name:红楼梦,price:<span class=\"number\">45.5</span>,publish_time:<span class=\"number\">2018</span>,author:曹雪芹</span><br></pre></td></tr></table></figure>\n<h4 id=\"导入整个模块\"><a href=\"#导入整个模块\" class=\"headerlink\" title=\"导入整个模块\"></a>导入整个模块</h4><p>示例：</p>\n<p>my_books.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> book</span><br><span class=\"line\"></span><br><span class=\"line\">book = book.Book(<span class=\"string\">'Java8 in action'</span>,<span class=\"number\">59.8</span>)</span><br><span class=\"line\">book.update_price(<span class=\"number\">66.6</span>)</span><br><span class=\"line\">book.describe()</span><br><span class=\"line\">print(book.name)</span><br><span class=\"line\"></span><br><span class=\"line\">book2 = book.CultureBook(<span class=\"string\">'红楼梦'</span>,<span class=\"number\">45.5</span>,<span class=\"string\">'曹雪芹'</span>)</span><br><span class=\"line\">book2.describe()</span><br></pre></td></tr></table></figure>\n<p>输出与之前一般无二。</p>\n<h4 id=\"导入模块中的所有类\"><a href=\"#导入模块中的所有类\" class=\"headerlink\" title=\"导入模块中的所有类\"></a>导入模块中的所有类</h4><p>语法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> 模块名 <span class=\"keyword\">import</span> *</span><br></pre></td></tr></table></figure>\n<p>像之前讲的从模块中导入函数一样，不推荐使用该方式，理由类似。</p>"},{"title":"python3教程-第7章 列表","date":"2018-06-14T08:32:38.000Z","_content":"\n列表由一系列按特定顺序排列的元素组成。\n\n在python中，**用方括号 []来表示列表**，并用**逗号**来分隔其中的元素。\n\n<!--more-->\n\n下面定义了一个关于学校的列表\n\n```python\nschools = ['ccnu','whu','hust','thu']\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612171510.png)\n\n可以看到python将方括号也打印出来了，但这肯定不是我们想要的结果，下面来看下如何访问列表中的元素\n\n### 访问列表中的元素\n\n列表是有序集合，要访问列表中的任意元素，只需将该元素的索引告诉python即可。\n\n下面我们打印下上面的列表schools中的第二个元素\n\n```python\nschools = ['ccnu','whu','hust','thu']\nprint(schools[1])\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612172256.png)\n\n可以看到，python只返回了元素值，并没有打印方括号\n\n需要注意的是，**元素的索引号是从0开始的**，而不是1。如果学习过其他编程语言的话，应该很容易理解。\n\n另外，python为访问列表中的元素提供了一种特殊的语法：通过**将索引号指定为负数**，可以返回列表中倒数第几个元素。\n\n下面指定索引号为-1，打印列表中的最后一个元素‘thu’\n\n```python\nschools = ['ccnu','whu','hust','thu']\nprint(schools[-1])\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612173007.png)\n\n可以看到，python确实打印了最后一个元素thu。如果指定索引号为-2，则打印倒数第二个元素，其他负数索引以此类推。\n\n大部分情况下，我们是不知道列表的长度的，因此，这种语法可以使我们很方便的访问列表中的最后一个元素。\n\n### 修改列表元素\n\n修改列表元素的语法与访问列表元素的语法类似。指定列表名和要修改的元素索引，通过“=”赋新值即可。\n\n下面修改schools中的第三个元素 ’hust‘（索引为2）的值为 ‘pku‘\n\n```python\nschools = ['ccnu','whu','hust','thu']\nschools[2] = 'pku'\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612174422.png)\n\n可以看到第三个元素的值确实改变了。通过这种方式，我们可以改变任何列表元素的值。\n\n### 在列表中添加元素\n\n在列表中添加元素，可分为以下两种情况：\n\n#### 在列表末尾添加元素\n\n使用列表的**append()**方法，可以将新元素添加到列表末尾。\n\n下面在schools末尾添加一个元素 ‘mit’\n\n```python\nschools = ['ccnu','whu','hust','thu']\nschools.append('mit')\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612175142.png)\n\n事实上，下面的方式可能更常用：先创建一个空的列表，然后使用append()方法，动态添加元素。\n\n我们也来尝试下：\n\n```python\n# 创建空的列表\nschools = []\nschools.append('ccnu')\nschools.append('whu')\nschools.append('thu')\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612180024.png)\n\n\n\n#### 在列表中插入元素\n\n使用列表的**insert()**方法，通过指定新元素的索引和值，我们可以在列表的任意位置添加新的元素。\n\n```python\n# insert()方法的第一个参数为索引，第二个参数为新元素的值\nschools = ['ccnu','whu','hust','thu']\nschools.insert(0,'zju')\nschools.insert(4,'mit')\nprint(schools)\n```\n\n第三行的schools.insert(0,'zju') 表示将 ‘zju’ 插入到列表头部，插入后，列表为\n\n```python\nschools = ['zju','ccnu','whu','hust','thu']\n```\n\n然后在执行第四行的 schools.insert(4,'mit')，插入后，列表为\n\n```python\nschools = ['zju','ccnu','whu','hust','mit','thu']\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612180947.png)\n\n### 从列表中删除元素\n\n从列表中删除元素，可分为以下两种情况。\n\n#### 使用del语句删除元素\n\n如果知道要删除的元素在列表中的位置（索引），可以使用del语句。\n\n下面用del语句删除schools中的第三个元素 'hust'\n\n```python\nschools = ['ccnu','whu','hust','thu']\ndel schools[2]\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612212950.png)\n\n可以看到第三个元素 ‘hust’ 确实被删除了\n\n#### 使用pop()删除元素\n\n* pop()方法可以删除列表末尾的元素，并返回该元素的值。\n\n下面用pop()方法删除schools中的最后一个元素 'thu'\n\n```python\nschools = ['ccnu','whu','hust','thu']\nschool = schools.pop()\nprint(schools)\nprint(school)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612213459.png)\n\n可以看到pop()方法确实删除了schools中的最后一个元素 'hut'，并把该元素的值存储到了变量school中\n\n* 事实上，pop()方法也可以用来删除列表中任何位置的元素，只需在括号中指定要删除的元素的索引即可。\n\n下面使用pop()方法删除schools的第二个元素 ‘whu’\n\n```python\nschools = ['ccnu','whu','hust','thu']\nschool = schools.pop(1)\nprint(schools)\nprint(school)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612214121.png)\n\n#### 根据值删除元素\n\n如果我们不知道要删除的元素在列表中的位置（索引），但是知道要删除元素的值，我们可以使用remove()。\n\n下面使用remove()方法删除schools中值等于 ’whu‘ 的元素\n\n```python\n# 为了演示remove方法，我在schools中添加了多个值为whu的元素\nschools = ['ccnu','whu','hust','whu','thu','whu']\nschools.remove('whu')\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612214822.png)\n\n可以看到，只有第一个值为 ‘whu’ 的元素被删除了，其他值为 ‘whu’ 的元素并没有被删除。\n\n**remove()方法只删除列表中满足条件的第一个元素**。如果要删除的值在列表中出现多次，需要使用循环。\n\n这里简单实现下，关于循环的具体内容，在后面的章节中会详细讲述\n\n```python\nschools = ['ccnu','whu','hust','whu','thu','whu']\nwhile schools.count('whu') > 0:\n    schools.remove('whu')\n\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612220210.png)\n\n### 对列表中的元素进行排序\n\n#### 使用sort()方法对列表进行永久性排序\n\n首先，我们假定列表中全为字符串\n\n* 对字符串列表进行排序\n\n```python\nschools = ['ccnu','whu','hust','thu']\nschools.sort()\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613150413.png)\n\n可以看到sort()方法永久性地修改了列表中元素的排列顺序。\n\n```python\nschools = ['CCnu','whu','hust','Thu']\nschools.sort()\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613150907.png)\n\n```python\nschools = [1,2,3,'CCnu','whu','hust','Thu']\nschools.sort()\nprint(schools)\n```\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613151320.png)\n\n* 反序排序\n\n```python\nschools = ['ccnu','whu','hust','thu']\nschools.sort(reverse=True)\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613151531.png)\n\n#### 使用函数sorted()对列表进行临时排序\n\n有时候我们只想以特定的顺序展示列表元素，但不想真的改变列表元素原来的排列顺序，这时候我们可以使用函数sorted()对列表进行临时排序。\n\n```python\nschools = ['ccnu','whu','hust','thu']\nnewSchools = sorted(schools)\nprint(newSchools)\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613153145.png)\n\n可以看到执行完sorted(schools)后，schools中元素的排列顺序并没有被改变。\n\n当然，如果想要按与字母顺序相反的顺序显示列表，也可以向sorted()传递参数reverse=True\n\n### 反转列表\n\n使用reverse()方法，可以反转列表元素的排列顺序。\n\n```python\nschools = ['ccnu','whu','hust','thu']\nschools.reverse()\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613153749.png)\n\nreverse()永久性地修改了列表元素的排列顺序，但我们可以随时恢复到原来的排列顺序，只需要再次调用reverse()即可。\n\n### 确定列表的长度\n\n使用函数len()可以取得列表的长度。\n\n```python\n# len()函数返回一个整数\nschools = ['ccnu','whu','hust','thu']\nlen(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613161520.png)\n\n当然，我们也可以这样\n\n```python\nschools = ['ccnu','whu','hust','thu']\nlength = len(schools)\nprint(length)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613161805.png)\n\ncount()\n\nindex()\n\nclear()\n\ncopy()\n\nextend()","source":"_posts/python3-tutorial-chapter7-list.md","raw":"---\ntitle: python3教程-第7章 列表\ndate: 2018-06-14 16:32:38\ntags: python\ncategories: python\n---\n\n列表由一系列按特定顺序排列的元素组成。\n\n在python中，**用方括号 []来表示列表**，并用**逗号**来分隔其中的元素。\n\n<!--more-->\n\n下面定义了一个关于学校的列表\n\n```python\nschools = ['ccnu','whu','hust','thu']\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612171510.png)\n\n可以看到python将方括号也打印出来了，但这肯定不是我们想要的结果，下面来看下如何访问列表中的元素\n\n### 访问列表中的元素\n\n列表是有序集合，要访问列表中的任意元素，只需将该元素的索引告诉python即可。\n\n下面我们打印下上面的列表schools中的第二个元素\n\n```python\nschools = ['ccnu','whu','hust','thu']\nprint(schools[1])\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612172256.png)\n\n可以看到，python只返回了元素值，并没有打印方括号\n\n需要注意的是，**元素的索引号是从0开始的**，而不是1。如果学习过其他编程语言的话，应该很容易理解。\n\n另外，python为访问列表中的元素提供了一种特殊的语法：通过**将索引号指定为负数**，可以返回列表中倒数第几个元素。\n\n下面指定索引号为-1，打印列表中的最后一个元素‘thu’\n\n```python\nschools = ['ccnu','whu','hust','thu']\nprint(schools[-1])\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612173007.png)\n\n可以看到，python确实打印了最后一个元素thu。如果指定索引号为-2，则打印倒数第二个元素，其他负数索引以此类推。\n\n大部分情况下，我们是不知道列表的长度的，因此，这种语法可以使我们很方便的访问列表中的最后一个元素。\n\n### 修改列表元素\n\n修改列表元素的语法与访问列表元素的语法类似。指定列表名和要修改的元素索引，通过“=”赋新值即可。\n\n下面修改schools中的第三个元素 ’hust‘（索引为2）的值为 ‘pku‘\n\n```python\nschools = ['ccnu','whu','hust','thu']\nschools[2] = 'pku'\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612174422.png)\n\n可以看到第三个元素的值确实改变了。通过这种方式，我们可以改变任何列表元素的值。\n\n### 在列表中添加元素\n\n在列表中添加元素，可分为以下两种情况：\n\n#### 在列表末尾添加元素\n\n使用列表的**append()**方法，可以将新元素添加到列表末尾。\n\n下面在schools末尾添加一个元素 ‘mit’\n\n```python\nschools = ['ccnu','whu','hust','thu']\nschools.append('mit')\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612175142.png)\n\n事实上，下面的方式可能更常用：先创建一个空的列表，然后使用append()方法，动态添加元素。\n\n我们也来尝试下：\n\n```python\n# 创建空的列表\nschools = []\nschools.append('ccnu')\nschools.append('whu')\nschools.append('thu')\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612180024.png)\n\n\n\n#### 在列表中插入元素\n\n使用列表的**insert()**方法，通过指定新元素的索引和值，我们可以在列表的任意位置添加新的元素。\n\n```python\n# insert()方法的第一个参数为索引，第二个参数为新元素的值\nschools = ['ccnu','whu','hust','thu']\nschools.insert(0,'zju')\nschools.insert(4,'mit')\nprint(schools)\n```\n\n第三行的schools.insert(0,'zju') 表示将 ‘zju’ 插入到列表头部，插入后，列表为\n\n```python\nschools = ['zju','ccnu','whu','hust','thu']\n```\n\n然后在执行第四行的 schools.insert(4,'mit')，插入后，列表为\n\n```python\nschools = ['zju','ccnu','whu','hust','mit','thu']\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612180947.png)\n\n### 从列表中删除元素\n\n从列表中删除元素，可分为以下两种情况。\n\n#### 使用del语句删除元素\n\n如果知道要删除的元素在列表中的位置（索引），可以使用del语句。\n\n下面用del语句删除schools中的第三个元素 'hust'\n\n```python\nschools = ['ccnu','whu','hust','thu']\ndel schools[2]\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612212950.png)\n\n可以看到第三个元素 ‘hust’ 确实被删除了\n\n#### 使用pop()删除元素\n\n* pop()方法可以删除列表末尾的元素，并返回该元素的值。\n\n下面用pop()方法删除schools中的最后一个元素 'thu'\n\n```python\nschools = ['ccnu','whu','hust','thu']\nschool = schools.pop()\nprint(schools)\nprint(school)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612213459.png)\n\n可以看到pop()方法确实删除了schools中的最后一个元素 'hut'，并把该元素的值存储到了变量school中\n\n* 事实上，pop()方法也可以用来删除列表中任何位置的元素，只需在括号中指定要删除的元素的索引即可。\n\n下面使用pop()方法删除schools的第二个元素 ‘whu’\n\n```python\nschools = ['ccnu','whu','hust','thu']\nschool = schools.pop(1)\nprint(schools)\nprint(school)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612214121.png)\n\n#### 根据值删除元素\n\n如果我们不知道要删除的元素在列表中的位置（索引），但是知道要删除元素的值，我们可以使用remove()。\n\n下面使用remove()方法删除schools中值等于 ’whu‘ 的元素\n\n```python\n# 为了演示remove方法，我在schools中添加了多个值为whu的元素\nschools = ['ccnu','whu','hust','whu','thu','whu']\nschools.remove('whu')\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612214822.png)\n\n可以看到，只有第一个值为 ‘whu’ 的元素被删除了，其他值为 ‘whu’ 的元素并没有被删除。\n\n**remove()方法只删除列表中满足条件的第一个元素**。如果要删除的值在列表中出现多次，需要使用循环。\n\n这里简单实现下，关于循环的具体内容，在后面的章节中会详细讲述\n\n```python\nschools = ['ccnu','whu','hust','whu','thu','whu']\nwhile schools.count('whu') > 0:\n    schools.remove('whu')\n\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612220210.png)\n\n### 对列表中的元素进行排序\n\n#### 使用sort()方法对列表进行永久性排序\n\n首先，我们假定列表中全为字符串\n\n* 对字符串列表进行排序\n\n```python\nschools = ['ccnu','whu','hust','thu']\nschools.sort()\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613150413.png)\n\n可以看到sort()方法永久性地修改了列表中元素的排列顺序。\n\n```python\nschools = ['CCnu','whu','hust','Thu']\nschools.sort()\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613150907.png)\n\n```python\nschools = [1,2,3,'CCnu','whu','hust','Thu']\nschools.sort()\nprint(schools)\n```\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613151320.png)\n\n* 反序排序\n\n```python\nschools = ['ccnu','whu','hust','thu']\nschools.sort(reverse=True)\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613151531.png)\n\n#### 使用函数sorted()对列表进行临时排序\n\n有时候我们只想以特定的顺序展示列表元素，但不想真的改变列表元素原来的排列顺序，这时候我们可以使用函数sorted()对列表进行临时排序。\n\n```python\nschools = ['ccnu','whu','hust','thu']\nnewSchools = sorted(schools)\nprint(newSchools)\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613153145.png)\n\n可以看到执行完sorted(schools)后，schools中元素的排列顺序并没有被改变。\n\n当然，如果想要按与字母顺序相反的顺序显示列表，也可以向sorted()传递参数reverse=True\n\n### 反转列表\n\n使用reverse()方法，可以反转列表元素的排列顺序。\n\n```python\nschools = ['ccnu','whu','hust','thu']\nschools.reverse()\nprint(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613153749.png)\n\nreverse()永久性地修改了列表元素的排列顺序，但我们可以随时恢复到原来的排列顺序，只需要再次调用reverse()即可。\n\n### 确定列表的长度\n\n使用函数len()可以取得列表的长度。\n\n```python\n# len()函数返回一个整数\nschools = ['ccnu','whu','hust','thu']\nlen(schools)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613161520.png)\n\n当然，我们也可以这样\n\n```python\nschools = ['ccnu','whu','hust','thu']\nlength = len(schools)\nprint(length)\n```\n\n输出结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613161805.png)\n\ncount()\n\nindex()\n\nclear()\n\ncopy()\n\nextend()","slug":"python3-tutorial-chapter7-list","published":1,"updated":"2019-01-19T07:23:57.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju3j9au800dqj1q014z97zyo","content":"<p>列表由一系列按特定顺序排列的元素组成。</p>\n<p>在python中，<strong>用方括号 []来表示列表</strong>，并用<strong>逗号</strong>来分隔其中的元素。</p>\n<a id=\"more\"></a>\n<p>下面定义了一个关于学校的列表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612171510.png\" alt=\"\"></p>\n<p>可以看到python将方括号也打印出来了，但这肯定不是我们想要的结果，下面来看下如何访问列表中的元素</p>\n<h3 id=\"访问列表中的元素\"><a href=\"#访问列表中的元素\" class=\"headerlink\" title=\"访问列表中的元素\"></a>访问列表中的元素</h3><p>列表是有序集合，要访问列表中的任意元素，只需将该元素的索引告诉python即可。</p>\n<p>下面我们打印下上面的列表schools中的第二个元素</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">print(schools[<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612172256.png\" alt=\"\"></p>\n<p>可以看到，python只返回了元素值，并没有打印方括号</p>\n<p>需要注意的是，<strong>元素的索引号是从0开始的</strong>，而不是1。如果学习过其他编程语言的话，应该很容易理解。</p>\n<p>另外，python为访问列表中的元素提供了一种特殊的语法：通过<strong>将索引号指定为负数</strong>，可以返回列表中倒数第几个元素。</p>\n<p>下面指定索引号为-1，打印列表中的最后一个元素‘thu’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">print(schools[<span class=\"number\">-1</span>])</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612173007.png\" alt=\"\"></p>\n<p>可以看到，python确实打印了最后一个元素thu。如果指定索引号为-2，则打印倒数第二个元素，其他负数索引以此类推。</p>\n<p>大部分情况下，我们是不知道列表的长度的，因此，这种语法可以使我们很方便的访问列表中的最后一个元素。</p>\n<h3 id=\"修改列表元素\"><a href=\"#修改列表元素\" class=\"headerlink\" title=\"修改列表元素\"></a>修改列表元素</h3><p>修改列表元素的语法与访问列表元素的语法类似。指定列表名和要修改的元素索引，通过“=”赋新值即可。</p>\n<p>下面修改schools中的第三个元素 ’hust‘（索引为2）的值为 ‘pku‘</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">schools[<span class=\"number\">2</span>] = <span class=\"string\">'pku'</span></span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612174422.png\" alt=\"\"></p>\n<p>可以看到第三个元素的值确实改变了。通过这种方式，我们可以改变任何列表元素的值。</p>\n<h3 id=\"在列表中添加元素\"><a href=\"#在列表中添加元素\" class=\"headerlink\" title=\"在列表中添加元素\"></a>在列表中添加元素</h3><p>在列表中添加元素，可分为以下两种情况：</p>\n<h4 id=\"在列表末尾添加元素\"><a href=\"#在列表末尾添加元素\" class=\"headerlink\" title=\"在列表末尾添加元素\"></a>在列表末尾添加元素</h4><p>使用列表的<strong>append()</strong>方法，可以将新元素添加到列表末尾。</p>\n<p>下面在schools末尾添加一个元素 ‘mit’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">schools.append(<span class=\"string\">'mit'</span>)</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612175142.png\" alt=\"\"></p>\n<p>事实上，下面的方式可能更常用：先创建一个空的列表，然后使用append()方法，动态添加元素。</p>\n<p>我们也来尝试下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建空的列表</span></span><br><span class=\"line\">schools = []</span><br><span class=\"line\">schools.append(<span class=\"string\">'ccnu'</span>)</span><br><span class=\"line\">schools.append(<span class=\"string\">'whu'</span>)</span><br><span class=\"line\">schools.append(<span class=\"string\">'thu'</span>)</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612180024.png\" alt=\"\"></p>\n<h4 id=\"在列表中插入元素\"><a href=\"#在列表中插入元素\" class=\"headerlink\" title=\"在列表中插入元素\"></a>在列表中插入元素</h4><p>使用列表的<strong>insert()</strong>方法，通过指定新元素的索引和值，我们可以在列表的任意位置添加新的元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># insert()方法的第一个参数为索引，第二个参数为新元素的值</span></span><br><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">schools.insert(<span class=\"number\">0</span>,<span class=\"string\">'zju'</span>)</span><br><span class=\"line\">schools.insert(<span class=\"number\">4</span>,<span class=\"string\">'mit'</span>)</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>第三行的schools.insert(0,’zju’) 表示将 ‘zju’ 插入到列表头部，插入后，列表为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'zju'</span>,<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br></pre></td></tr></table></figure>\n<p>然后在执行第四行的 schools.insert(4,’mit’)，插入后，列表为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'zju'</span>,<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'mit'</span>,<span class=\"string\">'thu'</span>]</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612180947.png\" alt=\"\"></p>\n<h3 id=\"从列表中删除元素\"><a href=\"#从列表中删除元素\" class=\"headerlink\" title=\"从列表中删除元素\"></a>从列表中删除元素</h3><p>从列表中删除元素，可分为以下两种情况。</p>\n<h4 id=\"使用del语句删除元素\"><a href=\"#使用del语句删除元素\" class=\"headerlink\" title=\"使用del语句删除元素\"></a>使用del语句删除元素</h4><p>如果知道要删除的元素在列表中的位置（索引），可以使用del语句。</p>\n<p>下面用del语句删除schools中的第三个元素 ‘hust’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\"><span class=\"keyword\">del</span> schools[<span class=\"number\">2</span>]</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612212950.png\" alt=\"\"></p>\n<p>可以看到第三个元素 ‘hust’ 确实被删除了</p>\n<h4 id=\"使用pop-删除元素\"><a href=\"#使用pop-删除元素\" class=\"headerlink\" title=\"使用pop()删除元素\"></a>使用pop()删除元素</h4><ul>\n<li>pop()方法可以删除列表末尾的元素，并返回该元素的值。</li>\n</ul>\n<p>下面用pop()方法删除schools中的最后一个元素 ‘thu’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">school = schools.pop()</span><br><span class=\"line\">print(schools)</span><br><span class=\"line\">print(school)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612213459.png\" alt=\"\"></p>\n<p>可以看到pop()方法确实删除了schools中的最后一个元素 ‘hut’，并把该元素的值存储到了变量school中</p>\n<ul>\n<li>事实上，pop()方法也可以用来删除列表中任何位置的元素，只需在括号中指定要删除的元素的索引即可。</li>\n</ul>\n<p>下面使用pop()方法删除schools的第二个元素 ‘whu’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">school = schools.pop(<span class=\"number\">1</span>)</span><br><span class=\"line\">print(schools)</span><br><span class=\"line\">print(school)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612214121.png\" alt=\"\"></p>\n<h4 id=\"根据值删除元素\"><a href=\"#根据值删除元素\" class=\"headerlink\" title=\"根据值删除元素\"></a>根据值删除元素</h4><p>如果我们不知道要删除的元素在列表中的位置（索引），但是知道要删除元素的值，我们可以使用remove()。</p>\n<p>下面使用remove()方法删除schools中值等于 ’whu‘ 的元素</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 为了演示remove方法，我在schools中添加了多个值为whu的元素</span></span><br><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'thu'</span>,<span class=\"string\">'whu'</span>]</span><br><span class=\"line\">schools.remove(<span class=\"string\">'whu'</span>)</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612214822.png\" alt=\"\"></p>\n<p>可以看到，只有第一个值为 ‘whu’ 的元素被删除了，其他值为 ‘whu’ 的元素并没有被删除。</p>\n<p><strong>remove()方法只删除列表中满足条件的第一个元素</strong>。如果要删除的值在列表中出现多次，需要使用循环。</p>\n<p>这里简单实现下，关于循环的具体内容，在后面的章节中会详细讲述</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'thu'</span>,<span class=\"string\">'whu'</span>]</span><br><span class=\"line\"><span class=\"keyword\">while</span> schools.count(<span class=\"string\">'whu'</span>) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    schools.remove(<span class=\"string\">'whu'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612220210.png\" alt=\"\"></p>\n<h3 id=\"对列表中的元素进行排序\"><a href=\"#对列表中的元素进行排序\" class=\"headerlink\" title=\"对列表中的元素进行排序\"></a>对列表中的元素进行排序</h3><h4 id=\"使用sort-方法对列表进行永久性排序\"><a href=\"#使用sort-方法对列表进行永久性排序\" class=\"headerlink\" title=\"使用sort()方法对列表进行永久性排序\"></a>使用sort()方法对列表进行永久性排序</h4><p>首先，我们假定列表中全为字符串</p>\n<ul>\n<li>对字符串列表进行排序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">schools.sort()</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613150413.png\" alt=\"\"></p>\n<p>可以看到sort()方法永久性地修改了列表中元素的排列顺序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'CCnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'Thu'</span>]</span><br><span class=\"line\">schools.sort()</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613150907.png\" alt=\"\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">'CCnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'Thu'</span>]</span><br><span class=\"line\">schools.sort()</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613151320.png\" alt=\"\"></p>\n<ul>\n<li>反序排序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">schools.sort(reverse=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613151531.png\" alt=\"\"></p>\n<h4 id=\"使用函数sorted-对列表进行临时排序\"><a href=\"#使用函数sorted-对列表进行临时排序\" class=\"headerlink\" title=\"使用函数sorted()对列表进行临时排序\"></a>使用函数sorted()对列表进行临时排序</h4><p>有时候我们只想以特定的顺序展示列表元素，但不想真的改变列表元素原来的排列顺序，这时候我们可以使用函数sorted()对列表进行临时排序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">newSchools = sorted(schools)</span><br><span class=\"line\">print(newSchools)</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613153145.png\" alt=\"\"></p>\n<p>可以看到执行完sorted(schools)后，schools中元素的排列顺序并没有被改变。</p>\n<p>当然，如果想要按与字母顺序相反的顺序显示列表，也可以向sorted()传递参数reverse=True</p>\n<h3 id=\"反转列表\"><a href=\"#反转列表\" class=\"headerlink\" title=\"反转列表\"></a>反转列表</h3><p>使用reverse()方法，可以反转列表元素的排列顺序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">schools.reverse()</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613153749.png\" alt=\"\"></p>\n<p>reverse()永久性地修改了列表元素的排列顺序，但我们可以随时恢复到原来的排列顺序，只需要再次调用reverse()即可。</p>\n<h3 id=\"确定列表的长度\"><a href=\"#确定列表的长度\" class=\"headerlink\" title=\"确定列表的长度\"></a>确定列表的长度</h3><p>使用函数len()可以取得列表的长度。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># len()函数返回一个整数</span></span><br><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">len(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613161520.png\" alt=\"\"></p>\n<p>当然，我们也可以这样</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">length = len(schools)</span><br><span class=\"line\">print(length)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613161805.png\" alt=\"\"></p>\n<p>count()</p>\n<p>index()</p>\n<p>clear()</p>\n<p>copy()</p>\n<p>extend()</p>\n","site":{"data":{}},"excerpt":"<p>列表由一系列按特定顺序排列的元素组成。</p>\n<p>在python中，<strong>用方括号 []来表示列表</strong>，并用<strong>逗号</strong>来分隔其中的元素。</p>","more":"<p>下面定义了一个关于学校的列表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612171510.png\" alt=\"\"></p>\n<p>可以看到python将方括号也打印出来了，但这肯定不是我们想要的结果，下面来看下如何访问列表中的元素</p>\n<h3 id=\"访问列表中的元素\"><a href=\"#访问列表中的元素\" class=\"headerlink\" title=\"访问列表中的元素\"></a>访问列表中的元素</h3><p>列表是有序集合，要访问列表中的任意元素，只需将该元素的索引告诉python即可。</p>\n<p>下面我们打印下上面的列表schools中的第二个元素</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">print(schools[<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612172256.png\" alt=\"\"></p>\n<p>可以看到，python只返回了元素值，并没有打印方括号</p>\n<p>需要注意的是，<strong>元素的索引号是从0开始的</strong>，而不是1。如果学习过其他编程语言的话，应该很容易理解。</p>\n<p>另外，python为访问列表中的元素提供了一种特殊的语法：通过<strong>将索引号指定为负数</strong>，可以返回列表中倒数第几个元素。</p>\n<p>下面指定索引号为-1，打印列表中的最后一个元素‘thu’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">print(schools[<span class=\"number\">-1</span>])</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612173007.png\" alt=\"\"></p>\n<p>可以看到，python确实打印了最后一个元素thu。如果指定索引号为-2，则打印倒数第二个元素，其他负数索引以此类推。</p>\n<p>大部分情况下，我们是不知道列表的长度的，因此，这种语法可以使我们很方便的访问列表中的最后一个元素。</p>\n<h3 id=\"修改列表元素\"><a href=\"#修改列表元素\" class=\"headerlink\" title=\"修改列表元素\"></a>修改列表元素</h3><p>修改列表元素的语法与访问列表元素的语法类似。指定列表名和要修改的元素索引，通过“=”赋新值即可。</p>\n<p>下面修改schools中的第三个元素 ’hust‘（索引为2）的值为 ‘pku‘</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">schools[<span class=\"number\">2</span>] = <span class=\"string\">'pku'</span></span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612174422.png\" alt=\"\"></p>\n<p>可以看到第三个元素的值确实改变了。通过这种方式，我们可以改变任何列表元素的值。</p>\n<h3 id=\"在列表中添加元素\"><a href=\"#在列表中添加元素\" class=\"headerlink\" title=\"在列表中添加元素\"></a>在列表中添加元素</h3><p>在列表中添加元素，可分为以下两种情况：</p>\n<h4 id=\"在列表末尾添加元素\"><a href=\"#在列表末尾添加元素\" class=\"headerlink\" title=\"在列表末尾添加元素\"></a>在列表末尾添加元素</h4><p>使用列表的<strong>append()</strong>方法，可以将新元素添加到列表末尾。</p>\n<p>下面在schools末尾添加一个元素 ‘mit’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">schools.append(<span class=\"string\">'mit'</span>)</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612175142.png\" alt=\"\"></p>\n<p>事实上，下面的方式可能更常用：先创建一个空的列表，然后使用append()方法，动态添加元素。</p>\n<p>我们也来尝试下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建空的列表</span></span><br><span class=\"line\">schools = []</span><br><span class=\"line\">schools.append(<span class=\"string\">'ccnu'</span>)</span><br><span class=\"line\">schools.append(<span class=\"string\">'whu'</span>)</span><br><span class=\"line\">schools.append(<span class=\"string\">'thu'</span>)</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612180024.png\" alt=\"\"></p>\n<h4 id=\"在列表中插入元素\"><a href=\"#在列表中插入元素\" class=\"headerlink\" title=\"在列表中插入元素\"></a>在列表中插入元素</h4><p>使用列表的<strong>insert()</strong>方法，通过指定新元素的索引和值，我们可以在列表的任意位置添加新的元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># insert()方法的第一个参数为索引，第二个参数为新元素的值</span></span><br><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">schools.insert(<span class=\"number\">0</span>,<span class=\"string\">'zju'</span>)</span><br><span class=\"line\">schools.insert(<span class=\"number\">4</span>,<span class=\"string\">'mit'</span>)</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>第三行的schools.insert(0,’zju’) 表示将 ‘zju’ 插入到列表头部，插入后，列表为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'zju'</span>,<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br></pre></td></tr></table></figure>\n<p>然后在执行第四行的 schools.insert(4,’mit’)，插入后，列表为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'zju'</span>,<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'mit'</span>,<span class=\"string\">'thu'</span>]</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612180947.png\" alt=\"\"></p>\n<h3 id=\"从列表中删除元素\"><a href=\"#从列表中删除元素\" class=\"headerlink\" title=\"从列表中删除元素\"></a>从列表中删除元素</h3><p>从列表中删除元素，可分为以下两种情况。</p>\n<h4 id=\"使用del语句删除元素\"><a href=\"#使用del语句删除元素\" class=\"headerlink\" title=\"使用del语句删除元素\"></a>使用del语句删除元素</h4><p>如果知道要删除的元素在列表中的位置（索引），可以使用del语句。</p>\n<p>下面用del语句删除schools中的第三个元素 ‘hust’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\"><span class=\"keyword\">del</span> schools[<span class=\"number\">2</span>]</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612212950.png\" alt=\"\"></p>\n<p>可以看到第三个元素 ‘hust’ 确实被删除了</p>\n<h4 id=\"使用pop-删除元素\"><a href=\"#使用pop-删除元素\" class=\"headerlink\" title=\"使用pop()删除元素\"></a>使用pop()删除元素</h4><ul>\n<li>pop()方法可以删除列表末尾的元素，并返回该元素的值。</li>\n</ul>\n<p>下面用pop()方法删除schools中的最后一个元素 ‘thu’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">school = schools.pop()</span><br><span class=\"line\">print(schools)</span><br><span class=\"line\">print(school)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612213459.png\" alt=\"\"></p>\n<p>可以看到pop()方法确实删除了schools中的最后一个元素 ‘hut’，并把该元素的值存储到了变量school中</p>\n<ul>\n<li>事实上，pop()方法也可以用来删除列表中任何位置的元素，只需在括号中指定要删除的元素的索引即可。</li>\n</ul>\n<p>下面使用pop()方法删除schools的第二个元素 ‘whu’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">school = schools.pop(<span class=\"number\">1</span>)</span><br><span class=\"line\">print(schools)</span><br><span class=\"line\">print(school)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612214121.png\" alt=\"\"></p>\n<h4 id=\"根据值删除元素\"><a href=\"#根据值删除元素\" class=\"headerlink\" title=\"根据值删除元素\"></a>根据值删除元素</h4><p>如果我们不知道要删除的元素在列表中的位置（索引），但是知道要删除元素的值，我们可以使用remove()。</p>\n<p>下面使用remove()方法删除schools中值等于 ’whu‘ 的元素</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 为了演示remove方法，我在schools中添加了多个值为whu的元素</span></span><br><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'thu'</span>,<span class=\"string\">'whu'</span>]</span><br><span class=\"line\">schools.remove(<span class=\"string\">'whu'</span>)</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612214822.png\" alt=\"\"></p>\n<p>可以看到，只有第一个值为 ‘whu’ 的元素被删除了，其他值为 ‘whu’ 的元素并没有被删除。</p>\n<p><strong>remove()方法只删除列表中满足条件的第一个元素</strong>。如果要删除的值在列表中出现多次，需要使用循环。</p>\n<p>这里简单实现下，关于循环的具体内容，在后面的章节中会详细讲述</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'thu'</span>,<span class=\"string\">'whu'</span>]</span><br><span class=\"line\"><span class=\"keyword\">while</span> schools.count(<span class=\"string\">'whu'</span>) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    schools.remove(<span class=\"string\">'whu'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/12/20180612220210.png\" alt=\"\"></p>\n<h3 id=\"对列表中的元素进行排序\"><a href=\"#对列表中的元素进行排序\" class=\"headerlink\" title=\"对列表中的元素进行排序\"></a>对列表中的元素进行排序</h3><h4 id=\"使用sort-方法对列表进行永久性排序\"><a href=\"#使用sort-方法对列表进行永久性排序\" class=\"headerlink\" title=\"使用sort()方法对列表进行永久性排序\"></a>使用sort()方法对列表进行永久性排序</h4><p>首先，我们假定列表中全为字符串</p>\n<ul>\n<li>对字符串列表进行排序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">schools.sort()</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613150413.png\" alt=\"\"></p>\n<p>可以看到sort()方法永久性地修改了列表中元素的排列顺序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'CCnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'Thu'</span>]</span><br><span class=\"line\">schools.sort()</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613150907.png\" alt=\"\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">'CCnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'Thu'</span>]</span><br><span class=\"line\">schools.sort()</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613151320.png\" alt=\"\"></p>\n<ul>\n<li>反序排序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">schools.sort(reverse=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613151531.png\" alt=\"\"></p>\n<h4 id=\"使用函数sorted-对列表进行临时排序\"><a href=\"#使用函数sorted-对列表进行临时排序\" class=\"headerlink\" title=\"使用函数sorted()对列表进行临时排序\"></a>使用函数sorted()对列表进行临时排序</h4><p>有时候我们只想以特定的顺序展示列表元素，但不想真的改变列表元素原来的排列顺序，这时候我们可以使用函数sorted()对列表进行临时排序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">newSchools = sorted(schools)</span><br><span class=\"line\">print(newSchools)</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613153145.png\" alt=\"\"></p>\n<p>可以看到执行完sorted(schools)后，schools中元素的排列顺序并没有被改变。</p>\n<p>当然，如果想要按与字母顺序相反的顺序显示列表，也可以向sorted()传递参数reverse=True</p>\n<h3 id=\"反转列表\"><a href=\"#反转列表\" class=\"headerlink\" title=\"反转列表\"></a>反转列表</h3><p>使用reverse()方法，可以反转列表元素的排列顺序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">schools.reverse()</span><br><span class=\"line\">print(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613153749.png\" alt=\"\"></p>\n<p>reverse()永久性地修改了列表元素的排列顺序，但我们可以随时恢复到原来的排列顺序，只需要再次调用reverse()即可。</p>\n<h3 id=\"确定列表的长度\"><a href=\"#确定列表的长度\" class=\"headerlink\" title=\"确定列表的长度\"></a>确定列表的长度</h3><p>使用函数len()可以取得列表的长度。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># len()函数返回一个整数</span></span><br><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">len(schools)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613161520.png\" alt=\"\"></p>\n<p>当然，我们也可以这样</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schools = [<span class=\"string\">'ccnu'</span>,<span class=\"string\">'whu'</span>,<span class=\"string\">'hust'</span>,<span class=\"string\">'thu'</span>]</span><br><span class=\"line\">length = len(schools)</span><br><span class=\"line\">print(length)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/13/20180613161805.png\" alt=\"\"></p>\n<p>count()</p>\n<p>index()</p>\n<p>clear()</p>\n<p>copy()</p>\n<p>extend()</p>"},{"title":"CCF CSP 201803-1 跳一跳","date":"2018-06-05T06:24:03.000Z","updated":"2018-06-05T06:24:03.000Z","_content":"\n> 为了准备九月的CCF CSP第十四次认证，从今天起，尽量保证每天刷一道CCF CSP的题。\n\n**问题描述**\n\n　　近来，跳一跳这款小游戏风靡全国，受到不少玩家的喜爱。\n　　简化后的跳一跳规则如下：玩家每次从当前方块跳到下一个方块，如果没有跳到下一个方块上则游戏结束。\n　　如果跳到了方块上，但没有跳到方块的中心则获得1分；跳到方块中心时，若上一次的得分为1分或这是本局游戏的第一次跳跃则此次得分为2分，否则此次得分比上一次得分多两分（即连续跳到方块中心时，总得分将+2，+4，+6，+8...）。\n　　现在给出一个人跳一跳的全过程，请你求出他本局游戏的得分（按照题目描述的规则）。\n\n<!--more-->\n\n**输入格式**\n\n　　输入包含多个数字，用空格分隔，每个数字都是1，2，0之一，1表示此次跳跃跳到了方块上但是没有跳到中心，2表示此次跳跃跳到了方块上并且跳到了方块中心，0表示此次跳跃没有跳到方块上（此时游戏结束）。\n\n**输出格式**\n\n　　输出一个整数，为本局游戏的得分（在本题的规则下）。\n\n**样例输入**\n\n1 1 2 2 2 1 1 2 2 0\n\n**样例输出**\n\n22\n\n**数据规模和约定**\n\n　　对于所有评测用例，输入的数字不超过30个，保证0正好出现一次且为最后一个数字。\n\n```java\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tString str = scan.nextLine();\n\t\tInteger[] arr = toIntegerArray(str.split(\"\\\\s+\"));\n\t\tint sum = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0 ; i < arr.length ; i++) {\n\t\t\tif(arr[i] == 1) {\n\t\t\t\tsum += 1;\n\t\t\t} else if(arr[i] == 2) {\n\t\t\t\tif(i == 0 || arr[i-1] == 1) {\n\t\t\t\t\tsum += 2;\n\t\t\t\t} else {\n\t\t\t\t\tcount = count(arr,i);\n\t\t\t\t\tsum += 2 * count;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(sum);\n\t\tscan.close();\n\t}\n\t//根据索引号数连续2的个数\n\tprivate static int count(Integer[] arr,int i) {\n\t\tint count = 0;\n\t\tfor(int j = i ; j >= 0 ; j--) {\n\t\t\tif(arr[j]==1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n\t\n\tprivate static Integer[] toIntegerArray(String[] sArr) {\n\t\tInteger[] intArr = new Integer[sArr.length];\n\t\tfor(int i = 0 ; i < sArr.length ;i++) {\n\t\t\tintArr[i] = Integer.valueOf(sArr[i]);\n\t\t}\n\t\treturn intArr;\n\t}\n}\n```\n\n测试结果\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/05/20180605151033.png)","source":"_posts/ccf-csp-20180301-jump.md","raw":"---\ntitle: CCF CSP 201803-1 跳一跳\ndate: 2018-06-05 14:24:03\nupdated: 2018-06-05 14:24:03\ntags: ccf csp\ncategories: ccf csp\n---\n\n> 为了准备九月的CCF CSP第十四次认证，从今天起，尽量保证每天刷一道CCF CSP的题。\n\n**问题描述**\n\n　　近来，跳一跳这款小游戏风靡全国，受到不少玩家的喜爱。\n　　简化后的跳一跳规则如下：玩家每次从当前方块跳到下一个方块，如果没有跳到下一个方块上则游戏结束。\n　　如果跳到了方块上，但没有跳到方块的中心则获得1分；跳到方块中心时，若上一次的得分为1分或这是本局游戏的第一次跳跃则此次得分为2分，否则此次得分比上一次得分多两分（即连续跳到方块中心时，总得分将+2，+4，+6，+8...）。\n　　现在给出一个人跳一跳的全过程，请你求出他本局游戏的得分（按照题目描述的规则）。\n\n<!--more-->\n\n**输入格式**\n\n　　输入包含多个数字，用空格分隔，每个数字都是1，2，0之一，1表示此次跳跃跳到了方块上但是没有跳到中心，2表示此次跳跃跳到了方块上并且跳到了方块中心，0表示此次跳跃没有跳到方块上（此时游戏结束）。\n\n**输出格式**\n\n　　输出一个整数，为本局游戏的得分（在本题的规则下）。\n\n**样例输入**\n\n1 1 2 2 2 1 1 2 2 0\n\n**样例输出**\n\n22\n\n**数据规模和约定**\n\n　　对于所有评测用例，输入的数字不超过30个，保证0正好出现一次且为最后一个数字。\n\n```java\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tString str = scan.nextLine();\n\t\tInteger[] arr = toIntegerArray(str.split(\"\\\\s+\"));\n\t\tint sum = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0 ; i < arr.length ; i++) {\n\t\t\tif(arr[i] == 1) {\n\t\t\t\tsum += 1;\n\t\t\t} else if(arr[i] == 2) {\n\t\t\t\tif(i == 0 || arr[i-1] == 1) {\n\t\t\t\t\tsum += 2;\n\t\t\t\t} else {\n\t\t\t\t\tcount = count(arr,i);\n\t\t\t\t\tsum += 2 * count;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(sum);\n\t\tscan.close();\n\t}\n\t//根据索引号数连续2的个数\n\tprivate static int count(Integer[] arr,int i) {\n\t\tint count = 0;\n\t\tfor(int j = i ; j >= 0 ; j--) {\n\t\t\tif(arr[j]==1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n\t\n\tprivate static Integer[] toIntegerArray(String[] sArr) {\n\t\tInteger[] intArr = new Integer[sArr.length];\n\t\tfor(int i = 0 ; i < sArr.length ;i++) {\n\t\t\tintArr[i] = Integer.valueOf(sArr[i]);\n\t\t}\n\t\treturn intArr;\n\t}\n}\n```\n\n测试结果\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/05/20180605151033.png)","slug":"ccf-csp-20180301-jump","published":1,"_id":"cju3jjta300dyj1q0ee9cwx1l","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>为了准备九月的CCF CSP第十四次认证，从今天起，尽量保证每天刷一道CCF CSP的题。</p>\n</blockquote>\n<p><strong>问题描述</strong></p>\n<p>　　近来，跳一跳这款小游戏风靡全国，受到不少玩家的喜爱。<br>　　简化后的跳一跳规则如下：玩家每次从当前方块跳到下一个方块，如果没有跳到下一个方块上则游戏结束。<br>　　如果跳到了方块上，但没有跳到方块的中心则获得1分；跳到方块中心时，若上一次的得分为1分或这是本局游戏的第一次跳跃则此次得分为2分，否则此次得分比上一次得分多两分（即连续跳到方块中心时，总得分将+2，+4，+6，+8…）。<br>　　现在给出一个人跳一跳的全过程，请你求出他本局游戏的得分（按照题目描述的规则）。</p>\n<a id=\"more\"></a>\n<p><strong>输入格式</strong></p>\n<p>　　输入包含多个数字，用空格分隔，每个数字都是1，2，0之一，1表示此次跳跃跳到了方块上但是没有跳到中心，2表示此次跳跃跳到了方块上并且跳到了方块中心，0表示此次跳跃没有跳到方块上（此时游戏结束）。</p>\n<p><strong>输出格式</strong></p>\n<p>　　输出一个整数，为本局游戏的得分（在本题的规则下）。</p>\n<p><strong>样例输入</strong></p>\n<p>1 1 2 2 2 1 1 2 2 0</p>\n<p><strong>样例输出</strong></p>\n<p>22</p>\n<p><strong>数据规模和约定</strong></p>\n<p>　　对于所有评测用例，输入的数字不超过30个，保证0正好出现一次且为最后一个数字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tScanner scan = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\tString str = scan.nextLine();</span><br><span class=\"line\">\t\tInteger[] arr = toIntegerArray(str.split(<span class=\"string\">\"\\\\s+\"</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; arr.length ; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr[i] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tsum += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[i] == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(i == <span class=\"number\">0</span> || arr[i-<span class=\"number\">1</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tsum += <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tcount = count(arr,i);</span><br><span class=\"line\">\t\t\t\t\tsum += <span class=\"number\">2</span> * count;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(sum);</span><br><span class=\"line\">\t\tscan.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//根据索引号数连续2的个数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">(Integer[] arr,<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i ; j &gt;= <span class=\"number\">0</span> ; j--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr[j]==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Integer[] toIntegerArray(String[] sArr) &#123;</span><br><span class=\"line\">\t\tInteger[] intArr = <span class=\"keyword\">new</span> Integer[sArr.length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; sArr.length ;i++) &#123;</span><br><span class=\"line\">\t\t\tintArr[i] = Integer.valueOf(sArr[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> intArr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试结果</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/05/20180605151033.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>为了准备九月的CCF CSP第十四次认证，从今天起，尽量保证每天刷一道CCF CSP的题。</p>\n</blockquote>\n<p><strong>问题描述</strong></p>\n<p>　　近来，跳一跳这款小游戏风靡全国，受到不少玩家的喜爱。<br>　　简化后的跳一跳规则如下：玩家每次从当前方块跳到下一个方块，如果没有跳到下一个方块上则游戏结束。<br>　　如果跳到了方块上，但没有跳到方块的中心则获得1分；跳到方块中心时，若上一次的得分为1分或这是本局游戏的第一次跳跃则此次得分为2分，否则此次得分比上一次得分多两分（即连续跳到方块中心时，总得分将+2，+4，+6，+8…）。<br>　　现在给出一个人跳一跳的全过程，请你求出他本局游戏的得分（按照题目描述的规则）。</p>","more":"<p><strong>输入格式</strong></p>\n<p>　　输入包含多个数字，用空格分隔，每个数字都是1，2，0之一，1表示此次跳跃跳到了方块上但是没有跳到中心，2表示此次跳跃跳到了方块上并且跳到了方块中心，0表示此次跳跃没有跳到方块上（此时游戏结束）。</p>\n<p><strong>输出格式</strong></p>\n<p>　　输出一个整数，为本局游戏的得分（在本题的规则下）。</p>\n<p><strong>样例输入</strong></p>\n<p>1 1 2 2 2 1 1 2 2 0</p>\n<p><strong>样例输出</strong></p>\n<p>22</p>\n<p><strong>数据规模和约定</strong></p>\n<p>　　对于所有评测用例，输入的数字不超过30个，保证0正好出现一次且为最后一个数字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tScanner scan = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\tString str = scan.nextLine();</span><br><span class=\"line\">\t\tInteger[] arr = toIntegerArray(str.split(<span class=\"string\">\"\\\\s+\"</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; arr.length ; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr[i] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tsum += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[i] == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(i == <span class=\"number\">0</span> || arr[i-<span class=\"number\">1</span>] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tsum += <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tcount = count(arr,i);</span><br><span class=\"line\">\t\t\t\t\tsum += <span class=\"number\">2</span> * count;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(sum);</span><br><span class=\"line\">\t\tscan.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//根据索引号数连续2的个数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">(Integer[] arr,<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i ; j &gt;= <span class=\"number\">0</span> ; j--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr[j]==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Integer[] toIntegerArray(String[] sArr) &#123;</span><br><span class=\"line\">\t\tInteger[] intArr = <span class=\"keyword\">new</span> Integer[sArr.length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; sArr.length ;i++) &#123;</span><br><span class=\"line\">\t\t\tintArr[i] = Integer.valueOf(sArr[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> intArr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试结果</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/05/20180605151033.png\" alt=\"\"></p>"},{"title":"CCF CSP 201803-2 碰撞的小球","date":"2018-06-06T12:35:08.000Z","updated":"2018-06-06T12:35:08.000Z","_content":"\n**问题描述**\n\n　　数轴上有一条长度为L（L为偶数)的线段，左端点在原点，右端点在坐标L处。有n个不计体积的小球在线段上，开始时所有的小球都处在偶数坐标上，速度方向向右，速度大小为1单位长度每秒。\n　　当小球到达线段的端点（左端点或右端点）的时候，会立即向相反的方向移动，速度大小仍然为原来大小。\n　　当两个小球撞到一起的时候，两个小球会分别向与自己原来移动的方向相反的方向，以原来的速度大小继续移动。\n　　现在，告诉你线段的长度L，小球数量n，以及n个小球的初始位置，请你计算t秒之后，各个小球的位置。\n\n**提示**\n\n　　因为所有小球的初始位置都为偶数，而且线段的长度为偶数，可以证明，不会有三个小球同时相撞，小球到达线段端点以及小球之间的碰撞时刻均为整数。\n　　同时也可以证明两个小球发生碰撞的位置一定是整数（但不一定是偶数）。\n\n<!--more-->\n\n**输入格式**\n\n　　输入的第一行包含三个整数n, L, t，用空格分隔，分别表示小球的个数、线段长度和你需要计算t秒之后小球的位置。\n　　第二行包含n个整数a1, a2, …, an，用空格分隔，表示初始时刻n个小球的位置。\n\n**输出格式**\n\n　　输出一行包含n个整数，用空格分隔，第i个整数代表初始时刻位于ai的小球，在t秒之后的位置。\n\n**样例输入**\n\n3 10 5\n4 6 8\n\n**样例输出**\n\n7 9 9\n\n**样例说明**\n\n　　初始时，三个小球的位置分别为4, 6, 8。\n![img](http://118.190.20.162/RequireFile.do?fid=b6beJN6e)\n　　一秒后，三个小球的位置分别为5, 7, 9。\n![img](http://118.190.20.162/RequireFile.do?fid=Ab8QmfeR)\n　　两秒后，第三个小球碰到墙壁，速度反向，三个小球位置分别为6, 8, 10。\n![img](http://118.190.20.162/RequireFile.do?fid=fgQLYbNn)\n　　三秒后，第二个小球与第三个小球在位置9发生碰撞，速度反向（注意碰撞位置不一定为偶数），三个小球位置分别为7, 9, 9。\n![img](http://118.190.20.162/RequireFile.do?fid=erfyNJDT)\n　　四秒后，第一个小球与第二个小球在位置8发生碰撞，速度反向，第三个小球碰到墙壁，速度反向，三个小球位置分别为8, 8, 10。\n![img](http://118.190.20.162/RequireFile.do?fid=m5EBf6q8)\n　　五秒后，三个小球的位置分别为7, 9, 9。\n![img](http://118.190.20.162/RequireFile.do?fid=JRHaHt4T)\n\n**样例输入**\n\n10 22 30\n14 12 16 6 10 2 8 20 18 4\n\n**样例输出**\n\n6 6 8 2 4 0 4 12 10 2\n\n**数据规模和约定**\n\n　　对于所有评测用例，1 ≤ n ≤ 100，1 ≤ t ≤ 100，2 ≤ L ≤ 1000，0 < ai < L。L为偶数。\n　　保证所有小球的初始位置互不相同且均为偶数。\n\n```java\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint[] condition = toIntArray(scan.nextLine().split(\" \"));\n\t\tint[] data = toIntArray(scan.nextLine().split(\" \"));\n\t\t\n\t\tint[] lastPosition = new int[data.length];\n\t\tint line = condition[1];\n\t\tint t = condition[2];\n\t\tint[] directions = new int[data.length];\n\t\tfor (int i = 0; i < directions.length; i++) {\n\t\t\tdirections[i] = 1;//默认向右移动\n\t\t}\n\t\t// 执行t次\n\t\tfor (int i = 0; i < t; i++) {\n\t\t\t// 上一次小球的位置\n\t\t\tfor (int j = 0; j < lastPosition.length; j++) {\n\t\t\t\tlastPosition[j] = data[j];\n\t\t\t}\n\t\t\tfor (int j = 0; j < lastPosition.length; j++) {\n\t\t\t\tif (lastPosition[j] == line || lastPosition[j] == 0) { \n\t\t\t\t\t//若为线段两端点\n\t\t\t\t\tdirections[j] = -directions[j];\n\t\t\t\t} else {\n\t\t\t\t\t//如果存在位置相同的小球，则发生了碰撞\n\t\t\t\t\tfor (int k = 0; k < lastPosition.length; k++) {\n\t\t\t\t\t\tif(j != k && lastPosition[j] == lastPosition[k]) {\n\t\t\t\t\t\t\tdirections[j] = -directions[j];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdata[j] += directions[j];\n\t\t\t}\n\t\t}\n\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < data.length; i++) {\n\t\t\tsb.append(data[i] + \" \");\n\t\t}\n\t\tSystem.out.println(sb.toString());\n\t\tscan.close();\n\t}\n\n\tprivate static int[] toIntArray(String[] sArr) {\n\t\tint[] intArr = new int[sArr.length];\n\t\tfor (int i = 0; i < sArr.length; i++) {\n\t\t\tintArr[i] = Integer.valueOf(sArr[i]);\n\t\t}\n\t\treturn intArr;\n\t}\n}\n```\n\n测试结果\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/08/20180608224518.png)\n\n之前全写的包装类型Integer，一直不能通过测试，总显示得分：30，全改为int就正确了，看来以后做题还是得用基本数据类型。\n\n这题目其实不难，但是刚开始没思路，后来又想复杂了，困扰了我好几天，也是够了&gt;_&lt;","source":"_posts/ccf-csp-20180302-crash.md","raw":"---\ntitle: CCF CSP 201803-2 碰撞的小球\ndate: 2018-06-06 20:35:08\nupdated: 2018-06-06 20:35:08\ntags: ccf csp\ncategories: ccf csp\n---\n\n**问题描述**\n\n　　数轴上有一条长度为L（L为偶数)的线段，左端点在原点，右端点在坐标L处。有n个不计体积的小球在线段上，开始时所有的小球都处在偶数坐标上，速度方向向右，速度大小为1单位长度每秒。\n　　当小球到达线段的端点（左端点或右端点）的时候，会立即向相反的方向移动，速度大小仍然为原来大小。\n　　当两个小球撞到一起的时候，两个小球会分别向与自己原来移动的方向相反的方向，以原来的速度大小继续移动。\n　　现在，告诉你线段的长度L，小球数量n，以及n个小球的初始位置，请你计算t秒之后，各个小球的位置。\n\n**提示**\n\n　　因为所有小球的初始位置都为偶数，而且线段的长度为偶数，可以证明，不会有三个小球同时相撞，小球到达线段端点以及小球之间的碰撞时刻均为整数。\n　　同时也可以证明两个小球发生碰撞的位置一定是整数（但不一定是偶数）。\n\n<!--more-->\n\n**输入格式**\n\n　　输入的第一行包含三个整数n, L, t，用空格分隔，分别表示小球的个数、线段长度和你需要计算t秒之后小球的位置。\n　　第二行包含n个整数a1, a2, …, an，用空格分隔，表示初始时刻n个小球的位置。\n\n**输出格式**\n\n　　输出一行包含n个整数，用空格分隔，第i个整数代表初始时刻位于ai的小球，在t秒之后的位置。\n\n**样例输入**\n\n3 10 5\n4 6 8\n\n**样例输出**\n\n7 9 9\n\n**样例说明**\n\n　　初始时，三个小球的位置分别为4, 6, 8。\n![img](http://118.190.20.162/RequireFile.do?fid=b6beJN6e)\n　　一秒后，三个小球的位置分别为5, 7, 9。\n![img](http://118.190.20.162/RequireFile.do?fid=Ab8QmfeR)\n　　两秒后，第三个小球碰到墙壁，速度反向，三个小球位置分别为6, 8, 10。\n![img](http://118.190.20.162/RequireFile.do?fid=fgQLYbNn)\n　　三秒后，第二个小球与第三个小球在位置9发生碰撞，速度反向（注意碰撞位置不一定为偶数），三个小球位置分别为7, 9, 9。\n![img](http://118.190.20.162/RequireFile.do?fid=erfyNJDT)\n　　四秒后，第一个小球与第二个小球在位置8发生碰撞，速度反向，第三个小球碰到墙壁，速度反向，三个小球位置分别为8, 8, 10。\n![img](http://118.190.20.162/RequireFile.do?fid=m5EBf6q8)\n　　五秒后，三个小球的位置分别为7, 9, 9。\n![img](http://118.190.20.162/RequireFile.do?fid=JRHaHt4T)\n\n**样例输入**\n\n10 22 30\n14 12 16 6 10 2 8 20 18 4\n\n**样例输出**\n\n6 6 8 2 4 0 4 12 10 2\n\n**数据规模和约定**\n\n　　对于所有评测用例，1 ≤ n ≤ 100，1 ≤ t ≤ 100，2 ≤ L ≤ 1000，0 < ai < L。L为偶数。\n　　保证所有小球的初始位置互不相同且均为偶数。\n\n```java\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint[] condition = toIntArray(scan.nextLine().split(\" \"));\n\t\tint[] data = toIntArray(scan.nextLine().split(\" \"));\n\t\t\n\t\tint[] lastPosition = new int[data.length];\n\t\tint line = condition[1];\n\t\tint t = condition[2];\n\t\tint[] directions = new int[data.length];\n\t\tfor (int i = 0; i < directions.length; i++) {\n\t\t\tdirections[i] = 1;//默认向右移动\n\t\t}\n\t\t// 执行t次\n\t\tfor (int i = 0; i < t; i++) {\n\t\t\t// 上一次小球的位置\n\t\t\tfor (int j = 0; j < lastPosition.length; j++) {\n\t\t\t\tlastPosition[j] = data[j];\n\t\t\t}\n\t\t\tfor (int j = 0; j < lastPosition.length; j++) {\n\t\t\t\tif (lastPosition[j] == line || lastPosition[j] == 0) { \n\t\t\t\t\t//若为线段两端点\n\t\t\t\t\tdirections[j] = -directions[j];\n\t\t\t\t} else {\n\t\t\t\t\t//如果存在位置相同的小球，则发生了碰撞\n\t\t\t\t\tfor (int k = 0; k < lastPosition.length; k++) {\n\t\t\t\t\t\tif(j != k && lastPosition[j] == lastPosition[k]) {\n\t\t\t\t\t\t\tdirections[j] = -directions[j];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdata[j] += directions[j];\n\t\t\t}\n\t\t}\n\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < data.length; i++) {\n\t\t\tsb.append(data[i] + \" \");\n\t\t}\n\t\tSystem.out.println(sb.toString());\n\t\tscan.close();\n\t}\n\n\tprivate static int[] toIntArray(String[] sArr) {\n\t\tint[] intArr = new int[sArr.length];\n\t\tfor (int i = 0; i < sArr.length; i++) {\n\t\t\tintArr[i] = Integer.valueOf(sArr[i]);\n\t\t}\n\t\treturn intArr;\n\t}\n}\n```\n\n测试结果\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/08/20180608224518.png)\n\n之前全写的包装类型Integer，一直不能通过测试，总显示得分：30，全改为int就正确了，看来以后做题还是得用基本数据类型。\n\n这题目其实不难，但是刚开始没思路，后来又想复杂了，困扰了我好几天，也是够了&gt;_&lt;","slug":"ccf-csp-20180302-crash","published":1,"_id":"cju3jk1a400e1j1q05najoxjw","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>问题描述</strong></p>\n<p>　　数轴上有一条长度为L（L为偶数)的线段，左端点在原点，右端点在坐标L处。有n个不计体积的小球在线段上，开始时所有的小球都处在偶数坐标上，速度方向向右，速度大小为1单位长度每秒。<br>　　当小球到达线段的端点（左端点或右端点）的时候，会立即向相反的方向移动，速度大小仍然为原来大小。<br>　　当两个小球撞到一起的时候，两个小球会分别向与自己原来移动的方向相反的方向，以原来的速度大小继续移动。<br>　　现在，告诉你线段的长度L，小球数量n，以及n个小球的初始位置，请你计算t秒之后，各个小球的位置。</p>\n<p><strong>提示</strong></p>\n<p>　　因为所有小球的初始位置都为偶数，而且线段的长度为偶数，可以证明，不会有三个小球同时相撞，小球到达线段端点以及小球之间的碰撞时刻均为整数。<br>　　同时也可以证明两个小球发生碰撞的位置一定是整数（但不一定是偶数）。</p>\n<a id=\"more\"></a>\n<p><strong>输入格式</strong></p>\n<p>　　输入的第一行包含三个整数n, L, t，用空格分隔，分别表示小球的个数、线段长度和你需要计算t秒之后小球的位置。<br>　　第二行包含n个整数a1, a2, …, an，用空格分隔，表示初始时刻n个小球的位置。</p>\n<p><strong>输出格式</strong></p>\n<p>　　输出一行包含n个整数，用空格分隔，第i个整数代表初始时刻位于ai的小球，在t秒之后的位置。</p>\n<p><strong>样例输入</strong></p>\n<p>3 10 5<br>4 6 8</p>\n<p><strong>样例输出</strong></p>\n<p>7 9 9</p>\n<p><strong>样例说明</strong></p>\n<p>　　初始时，三个小球的位置分别为4, 6, 8。<br><img src=\"http://118.190.20.162/RequireFile.do?fid=b6beJN6e\" alt=\"img\"><br>　　一秒后，三个小球的位置分别为5, 7, 9。<br><img src=\"http://118.190.20.162/RequireFile.do?fid=Ab8QmfeR\" alt=\"img\"><br>　　两秒后，第三个小球碰到墙壁，速度反向，三个小球位置分别为6, 8, 10。<br><img src=\"http://118.190.20.162/RequireFile.do?fid=fgQLYbNn\" alt=\"img\"><br>　　三秒后，第二个小球与第三个小球在位置9发生碰撞，速度反向（注意碰撞位置不一定为偶数），三个小球位置分别为7, 9, 9。<br><img src=\"http://118.190.20.162/RequireFile.do?fid=erfyNJDT\" alt=\"img\"><br>　　四秒后，第一个小球与第二个小球在位置8发生碰撞，速度反向，第三个小球碰到墙壁，速度反向，三个小球位置分别为8, 8, 10。<br><img src=\"http://118.190.20.162/RequireFile.do?fid=m5EBf6q8\" alt=\"img\"><br>　　五秒后，三个小球的位置分别为7, 9, 9。<br><img src=\"http://118.190.20.162/RequireFile.do?fid=JRHaHt4T\" alt=\"img\"></p>\n<p><strong>样例输入</strong></p>\n<p>10 22 30<br>14 12 16 6 10 2 8 20 18 4</p>\n<p><strong>样例输出</strong></p>\n<p>6 6 8 2 4 0 4 12 10 2</p>\n<p><strong>数据规模和约定</strong></p>\n<p>　　对于所有评测用例，1 ≤ n ≤ 100，1 ≤ t ≤ 100，2 ≤ L ≤ 1000，0 &lt; ai &lt; L。L为偶数。<br>　　保证所有小球的初始位置互不相同且均为偶数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tScanner scan = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] condition = toIntArray(scan.nextLine().split(<span class=\"string\">\" \"</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] data = toIntArray(scan.nextLine().split(<span class=\"string\">\" \"</span>));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] lastPosition = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[data.length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> line = condition[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> t = condition[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] directions = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[data.length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; directions.length; i++) &#123;</span><br><span class=\"line\">\t\t\tdirections[i] = <span class=\"number\">1</span>;<span class=\"comment\">//默认向右移动</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行t次</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; t; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 上一次小球的位置</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lastPosition.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\tlastPosition[j] = data[j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lastPosition.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (lastPosition[j] == line || lastPosition[j] == <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//若为线段两端点</span></span><br><span class=\"line\">\t\t\t\t\tdirections[j] = -directions[j];</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//如果存在位置相同的小球，则发生了碰撞</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; lastPosition.length; k++) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(j != k &amp;&amp; lastPosition[j] == lastPosition[k]) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tdirections[j] = -directions[j];</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tdata[j] += directions[j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">\t\t\tsb.append(data[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(sb.toString());</span><br><span class=\"line\">\t\tscan.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] toIntArray(String[] sArr) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] intArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[sArr.length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sArr.length; i++) &#123;</span><br><span class=\"line\">\t\t\tintArr[i] = Integer.valueOf(sArr[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> intArr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试结果</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/08/20180608224518.png\" alt=\"\"></p>\n<p>之前全写的包装类型Integer，一直不能通过测试，总显示得分：30，全改为int就正确了，看来以后做题还是得用基本数据类型。</p>\n<p>这题目其实不难，但是刚开始没思路，后来又想复杂了，困扰了我好几天，也是够了&gt;_&lt;</p>\n","site":{"data":{}},"excerpt":"<p><strong>问题描述</strong></p>\n<p>　　数轴上有一条长度为L（L为偶数)的线段，左端点在原点，右端点在坐标L处。有n个不计体积的小球在线段上，开始时所有的小球都处在偶数坐标上，速度方向向右，速度大小为1单位长度每秒。<br>　　当小球到达线段的端点（左端点或右端点）的时候，会立即向相反的方向移动，速度大小仍然为原来大小。<br>　　当两个小球撞到一起的时候，两个小球会分别向与自己原来移动的方向相反的方向，以原来的速度大小继续移动。<br>　　现在，告诉你线段的长度L，小球数量n，以及n个小球的初始位置，请你计算t秒之后，各个小球的位置。</p>\n<p><strong>提示</strong></p>\n<p>　　因为所有小球的初始位置都为偶数，而且线段的长度为偶数，可以证明，不会有三个小球同时相撞，小球到达线段端点以及小球之间的碰撞时刻均为整数。<br>　　同时也可以证明两个小球发生碰撞的位置一定是整数（但不一定是偶数）。</p>","more":"<p><strong>输入格式</strong></p>\n<p>　　输入的第一行包含三个整数n, L, t，用空格分隔，分别表示小球的个数、线段长度和你需要计算t秒之后小球的位置。<br>　　第二行包含n个整数a1, a2, …, an，用空格分隔，表示初始时刻n个小球的位置。</p>\n<p><strong>输出格式</strong></p>\n<p>　　输出一行包含n个整数，用空格分隔，第i个整数代表初始时刻位于ai的小球，在t秒之后的位置。</p>\n<p><strong>样例输入</strong></p>\n<p>3 10 5<br>4 6 8</p>\n<p><strong>样例输出</strong></p>\n<p>7 9 9</p>\n<p><strong>样例说明</strong></p>\n<p>　　初始时，三个小球的位置分别为4, 6, 8。<br><img src=\"http://118.190.20.162/RequireFile.do?fid=b6beJN6e\" alt=\"img\"><br>　　一秒后，三个小球的位置分别为5, 7, 9。<br><img src=\"http://118.190.20.162/RequireFile.do?fid=Ab8QmfeR\" alt=\"img\"><br>　　两秒后，第三个小球碰到墙壁，速度反向，三个小球位置分别为6, 8, 10。<br><img src=\"http://118.190.20.162/RequireFile.do?fid=fgQLYbNn\" alt=\"img\"><br>　　三秒后，第二个小球与第三个小球在位置9发生碰撞，速度反向（注意碰撞位置不一定为偶数），三个小球位置分别为7, 9, 9。<br><img src=\"http://118.190.20.162/RequireFile.do?fid=erfyNJDT\" alt=\"img\"><br>　　四秒后，第一个小球与第二个小球在位置8发生碰撞，速度反向，第三个小球碰到墙壁，速度反向，三个小球位置分别为8, 8, 10。<br><img src=\"http://118.190.20.162/RequireFile.do?fid=m5EBf6q8\" alt=\"img\"><br>　　五秒后，三个小球的位置分别为7, 9, 9。<br><img src=\"http://118.190.20.162/RequireFile.do?fid=JRHaHt4T\" alt=\"img\"></p>\n<p><strong>样例输入</strong></p>\n<p>10 22 30<br>14 12 16 6 10 2 8 20 18 4</p>\n<p><strong>样例输出</strong></p>\n<p>6 6 8 2 4 0 4 12 10 2</p>\n<p><strong>数据规模和约定</strong></p>\n<p>　　对于所有评测用例，1 ≤ n ≤ 100，1 ≤ t ≤ 100，2 ≤ L ≤ 1000，0 &lt; ai &lt; L。L为偶数。<br>　　保证所有小球的初始位置互不相同且均为偶数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tScanner scan = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] condition = toIntArray(scan.nextLine().split(<span class=\"string\">\" \"</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] data = toIntArray(scan.nextLine().split(<span class=\"string\">\" \"</span>));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] lastPosition = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[data.length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> line = condition[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> t = condition[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] directions = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[data.length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; directions.length; i++) &#123;</span><br><span class=\"line\">\t\t\tdirections[i] = <span class=\"number\">1</span>;<span class=\"comment\">//默认向右移动</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行t次</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; t; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 上一次小球的位置</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lastPosition.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\tlastPosition[j] = data[j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lastPosition.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (lastPosition[j] == line || lastPosition[j] == <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//若为线段两端点</span></span><br><span class=\"line\">\t\t\t\t\tdirections[j] = -directions[j];</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//如果存在位置相同的小球，则发生了碰撞</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; lastPosition.length; k++) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(j != k &amp;&amp; lastPosition[j] == lastPosition[k]) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tdirections[j] = -directions[j];</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tdata[j] += directions[j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">\t\t\tsb.append(data[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(sb.toString());</span><br><span class=\"line\">\t\tscan.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] toIntArray(String[] sArr) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] intArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[sArr.length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sArr.length; i++) &#123;</span><br><span class=\"line\">\t\t\tintArr[i] = Integer.valueOf(sArr[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> intArr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试结果</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/08/20180608224518.png\" alt=\"\"></p>\n<p>之前全写的包装类型Integer，一直不能通过测试，总显示得分：30，全改为int就正确了，看来以后做题还是得用基本数据类型。</p>\n<p>这题目其实不难，但是刚开始没思路，后来又想复杂了，困扰了我好几天，也是够了&gt;_&lt;</p>"},{"title":"CCF CSP 201803-3 URL映射","date":"2018-06-06T14:20:10.000Z","updated":"2018-06-06T14:20:10.000Z","_content":"\n**问题描述**\n\n　　URL 映射是诸如 Django、Ruby on Rails 等网页框架 (web frameworks) 的一个重要组件。对于从浏览器发来的 HTTP 请求，URL 映射模块会解析请求中的 URL 地址，并将其分派给相应的处理代码。现在，请你来实现一个简单的 URL 映射功能。\n　　本题中 URL 映射功能的配置由若干条 URL 映射规则组成。当一个请求到达时，URL 映射功能会将请求中的 URL 地址按照配置的先后顺序逐一与这些规则进行匹配。当遇到第一条完全匹配的规则时，匹配成功，得到匹配的规则以及匹配的参数。若不能匹配任何一条规则，则匹配失败。\n　　本题输入的 URL 地址是以斜杠 / 作为分隔符的路径，保证以斜杠开头。其他合法字符还包括大小写英文字母、阿拉伯数字、减号 -、下划线 _ 和小数点 .。例如，/person/123/ 是一个合法的 URL 地址，而 /person/123? 则不合法（存在不合法的字符问号 ?）。另外，英文字母区分大小写，因此 /case/ 和 /CAse/ 是不同的 URL 地址。\n　　对于 URL 映射规则，同样是以斜杠开始。除了可以是正常的 URL 地址外，还可以包含参数，有以下 3 种：\n　　字符串 &lt;str&gt;：用于匹配一段字符串，注意字符串里不能包含斜杠。例如，abcde0123。\n　　整数 &lt;int&gt;：用于匹配一个不带符号的整数，全部由阿拉伯数字组成。例如，01234。\n　　路径 &lt;path&gt;：用于匹配一段字符串，字符串可以包含斜杠。例如，abcd/0123/。\n　　以上 3 种参数都必须匹配非空的字符串。简便起见，题目规定规则中 &lt;str&gt; 和 &lt;int&gt; 前面一定是斜杠，后面要么是斜杠，要么是规则的结束（也就是该参数是规则的最后一部分）。而 &lt;path&gt; 的前面一定是斜杠，后面一定是规则的结束。无论是 URL 地址还是规则，都不会出现连续的斜杠。\n\n<!--more-->\n\n**输入格式**\n\n　　输入第一行是两个正整数 *n* 和 *m*，分别表示 URL 映射的规则条数和待处理的 URL 地址个数，中间用一个空格字符分隔。\n　　第 2 行至第 *n*+1 行按匹配的先后顺序描述 URL 映射规则的配置信息。第 *i*+1 行包含两个字符串 *pi* 和 *ri*，其中 *pi* 表示 URL 匹配的规则，*ri* 表示这条 URL 匹配的名字。两个字符串都非空，且不包含空格字符，两者中间用一个空格字符分隔。\n　　第 *n*+2 行至第 *n*+*m*+1 行描述待处理的 URL 地址。第 *n*+1+*i* 行包含一个字符串 *qi*，表示待处理的 URL 地址，字符串中不包含空格字符。\n\n**输出格式**\n\n　　输入共 *m* 行，第 *i* 行表示 *qi* 的匹配结果。如果匹配成功，设匹配了规则 *pj* ，则输出对应的 *rj*。同时，如果规则中有参数，则在同一行内依次输出匹配后的参数。注意整数参数输出时要把前导零去掉。相邻两项之间用一个空格字符分隔。如果匹配失败，则输出 404。\n\n**样例输入**\n\n5 4\n/articles/2003/ special_case_2003\n/articles/&lt;int&gt;/ year_archive\n/articles/&lt;int&gt;/&lt;int&gt;/ month_archive\n/articles/&lt;int&gt;/&lt;int&gt;/&lt;str&gt;/ article_detail\n/static/&lt;path&gt; static_serve\n/articles/2004/\n/articles/1985/09/aloha/\n/articles/hello/\n/static/js/jquery.js\n\n**样例输出**\n\nyear_archive 2004\narticle_detail 1985 9 aloha\n404\nstatic_serve js/jquery.js\n\n**样例说明**\n\n　　对于第 1 个地址 /articles/2004/，无法匹配第 1 条规则，可以匹配第 2 条规则，参数为 2004。\n　　对于第 2 个地址 /articles/1985/09/aloha/，只能匹配第 4 条规则，参数依次为 1985、9（已经去掉前导零）和 aloha。\n　　对于第 3 个地址 /articles/hello/，无法匹配任何一条规则。\n　　对于第 4 个地址 /static/js/jquery.js，可以匹配最后一条规则，参数为 js/jquery.js。\n\n**数据规模和约定**\n\n　　1 ≤ *n* ≤ 100，1 ≤ *m* ≤ 100。\n　　所有输入行的长度不超过 100 个字符（不包含换行符）。\n　　保证输入的规则都是合法的。\n\n```java\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tInteger[] data = toIntegerArray(scan.nextLine().split(\" \"));\n\t\tUrlMapping[] mappings = new UrlMapping[data[0]];\n\t\tString[] url = new String[data[1]];\n\t\tfor (int i = 0; i < data[0]; i++) {\n\t\t\tString[] sArr = scan.nextLine().split(\" \");\n\t\t\tUrlMapping urlMapping = new UrlMapping();\n\t\t\turlMapping.setExpression(sArr[0]);\n\t\t\turlMapping.setName(sArr[1]);\n\t\t\tmappings[i] = urlMapping;\n\t\t}\n\t\tfor (int i = 0; i < url.length; i++) {\n\t\t\turl[i] = scan.nextLine();\n\t\t}\n\n\t\tfor (int i = 0; i < url.length; i++) {\n\t\t\tboolean flag = false;\n\t\t\tif (url[i].matches(\"(/[\\\\w-\\\\.]+)+/?\")) {// 判断url是否合法\n\t\t\t\tfor (UrlMapping urlMapping : mappings) {\n\t\t\t\t\tif (matches(urlMapping, url[i])) {\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!flag) {\n\t\t\t\tSystem.out.println(404);\n\t\t\t}\n\t\t}\n\t\tscan.close();\n\t}\n\n\tprivate static boolean matches(UrlMapping urlMapping, String url) {\n\n\t\tString expression = urlMapping.getExpression();\n\t\tString[] mappingArr = expression.split(\"/\");\n\t\tString[] urlArr = url.split(\"/\");\n\t\t/*如果映射规则分割后的长度小于url的长度，但是映射规则不包含<path>，\n\t\t或者映射规则分割后的长度大于url的长度，则不匹配*/\n\t\tif ((mappingArr.length < urlArr.length && !expression.endsWith(\"<path>\"))\n\t\t\t\t|| mappingArr.length > urlArr.length) {\n\t\t\treturn false;\n\t\t}\n\t\tif (expression.endsWith(\"/\") && !url.endsWith(\"/\")) {\n\t\t\treturn false;\n\t\t}\n\t\tif ((!expression.endsWith(\"<path>\") && !expression.endsWith(\"/\")) \n            & url.endsWith(\"/\")) {\n\t\t\treturn false;\n\t\t}\n\t\tString[] args = new String[urlArr.length];\n\t\tint count = 0;\n\t\tfor (int i = 0; i < mappingArr.length; i++) {\n\t\t\tif (mappingArr[i].equals(\"<str>\")) {\n                 //<str>不能匹配纯数字\n\t\t\t\tif (!urlArr[i].matches(\"[\\\\w-\\\\.]+\") || urlArr[i].matches(\"[0-9]+\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\targs[count++] = urlArr[i];\n\t\t\t} else if (mappingArr[i].equals(\"<int>\")) {\n\t\t\t\tif (!urlArr[i].matches(\"[0-9]+\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\targs[count++] = deleteStartsZero(urlArr[i]);\n\t\t\t} else if (mappingArr[i].equals(\"<path>\")) {\n\t\t\t\tStringBuilder sb = new StringBuilder(urlArr[i]);\n\t\t\t\tfor (int j = i + 1; j < urlArr.length; j++) {\n\t\t\t\t\tsb.append(\"/\" + urlArr[j]);\n\t\t\t\t}\n\t\t\t\tif (url.endsWith(\"/\")) {// 加上url结尾的/\n\t\t\t\t\tsb.append(\"/\");\n\t\t\t\t}\n\t\t\t\targs[count++] = sb.toString();\n\t\t\t} else if (!mappingArr[i].equals(urlArr[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tStringBuilder sb = new StringBuilder(urlMapping.getName() + \" \");\n\t\tfor (int k = 0; k < count; k++) {\n\t\t\tsb.append(args[k] + \" \");\n\t\t}\n\t\tSystem.out.println(sb);\n\t\treturn true;\n\t}\n\t\n\t//更简洁的做法：String.valueOf(Integer.parseInt(str));\n\tprivate static String deleteStartsZero(String str) {\n\t\tint i;\n\t\tfor(i = 0 ; i < str.length();i++) {\n\t\t\tif(str.charAt(i) != '0') {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn str.substring(i);\n\t}\n\n\tprivate static Integer[] toIntegerArray(String[] sArr) {\n\t\tInteger[] intArr = new Integer[sArr.length];\n\t\tfor (int i = 0; i < sArr.length; i++) {\n\t\t\tintArr[i] = Integer.valueOf(sArr[i]);\n\t\t}\n\t\treturn intArr;\n\t}\n\n\tprivate static class UrlMapping {\n\t\tString expression;\n\t\tString name;\n\n\t\tpublic String getExpression() {\n\t\t\treturn expression;\n\t\t}\n\n\t\tpublic void setExpression(String expression) {\n\t\t\tthis.expression = expression;\n\t\t}\n\n\t\tpublic String getName() {\n\t\t\treturn name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t}\n}\n```\n\n测试结果（提交了n次，还是90分..）\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/06/20180606222621.png)\n\n<hr>\n\n2018/06/09 更新\n\n偶然发现，上次写的代码，之所以一直不能通过，显示得分90，原因在于我在上面第23行做了一个URL正则过滤，过滤不合法的URL，估计可能是我正则表达式写的不对，导致有些测试用例没运行matches方法，直接输出了404.\n\n其实题目已经写明了保证所有输入都合法，我们没必要再去处理不合法输入的情况=_=\n\n```java\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tInteger[] data = toIntegerArray(scan.nextLine().split(\" \"));\n\t\tUrlMapping[] mappings = new UrlMapping[data[0]];\n\t\tString[] url = new String[data[1]];\n\t\tfor (int i = 0; i < data[0]; i++) {\n\t\t\tString[] sArr = scan.nextLine().split(\" \");\n\t\t\tUrlMapping urlMapping = new UrlMapping();\n\t\t\turlMapping.setExpression(sArr[0]);\n\t\t\turlMapping.setName(sArr[1]);\n\t\t\tmappings[i] = urlMapping;\n\t\t}\n\t\tfor (int i = 0; i < url.length; i++) {\n\t\t\turl[i] = scan.nextLine();\n\t\t}\n\n\t\tfor (int i = 0; i < url.length; i++) {\n\t\t\tboolean flag = false;\n\t\t\tfor (UrlMapping urlMapping : mappings) {\n\t\t\t\tif (matches(urlMapping, url[i])) {\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n             }\n\t\t\tif (!flag) {\n\t\t\t\tSystem.out.println(404);\n\t\t\t}\n\t\t}\n\t\tscan.close();\n\t}\n\n\tprivate static boolean matches(UrlMapping urlMapping, String url) {\n\n\t\tString expression = urlMapping.getExpression();\n\t\tString[] mappingArr = expression.split(\"/\");\n\t\tString[] urlArr = url.split(\"/\");\n\t\t/*如果映射规则分割后的长度小于url的长度，但是映射规则不包含<path>，\n\t\t或者映射规则分割后的长度大于url的长度，则不匹配*/\n\t\tif ((mappingArr.length < urlArr.length && !expression.endsWith(\"<path>\"))\n\t\t\t\t|| mappingArr.length > urlArr.length) {\n\t\t\treturn false;\n\t\t}\n\t\tif (expression.endsWith(\"/\") && !url.endsWith(\"/\")) {\n\t\t\treturn false;\n\t\t}\n\t\tif ((!expression.endsWith(\"<path>\") && !expression.endsWith(\"/\")) \n            & url.endsWith(\"/\")) {\n\t\t\treturn false;\n\t\t}\n\t\tString[] args = new String[urlArr.length];\n\t\tint count = 0;\n\t\tfor (int i = 0; i < mappingArr.length; i++) {\n\t\t\tif (mappingArr[i].equals(\"<str>\")) {\n                 //<str>不能匹配纯数字\n\t\t\t\tif (!urlArr[i].matches(\"[\\\\w-\\\\.]+\") || urlArr[i].matches(\"[0-9]+\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\targs[count++] = urlArr[i];\n\t\t\t} else if (mappingArr[i].equals(\"<int>\")) {\n\t\t\t\tif (!urlArr[i].matches(\"[0-9]+\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\targs[count++] = deleteStartsZero(urlArr[i]);\n\t\t\t} else if (mappingArr[i].equals(\"<path>\")) {\n\t\t\t\tStringBuilder sb = new StringBuilder(urlArr[i]);\n\t\t\t\tfor (int j = i + 1; j < urlArr.length; j++) {\n\t\t\t\t\tsb.append(\"/\" + urlArr[j]);\n\t\t\t\t}\n\t\t\t\tif (url.endsWith(\"/\")) {// 加上url结尾的/\n\t\t\t\t\tsb.append(\"/\");\n\t\t\t\t}\n\t\t\t\targs[count++] = sb.toString();\n\t\t\t} else if (!mappingArr[i].equals(urlArr[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tStringBuilder sb = new StringBuilder(urlMapping.getName() + \" \");\n\t\tfor (int k = 0; k < count; k++) {\n\t\t\tsb.append(args[k] + \" \");\n\t\t}\n\t\tSystem.out.println(sb);\n\t\treturn true;\n\t}\n\t\n\t//更简洁的做法：String.valueOf(Integer.parseInt(str));\n\tprivate static String deleteStartsZero(String str) {\n\t\tint i;\n\t\tfor(i = 0 ; i < str.length();i++) {\n\t\t\tif(str.charAt(i) != '0') {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn str.substring(i);\n\t}\n\n\tprivate static Integer[] toIntegerArray(String[] sArr) {\n\t\tInteger[] intArr = new Integer[sArr.length];\n\t\tfor (int i = 0; i < sArr.length; i++) {\n\t\t\tintArr[i] = Integer.valueOf(sArr[i]);\n\t\t}\n\t\treturn intArr;\n\t}\n\n\tprivate static class UrlMapping {\n\t\tString expression;\n\t\tString name;\n\n\t\tpublic String getExpression() {\n\t\t\treturn expression;\n\t\t}\n\n\t\tpublic void setExpression(String expression) {\n\t\t\tthis.expression = expression;\n\t\t}\n\n\t\tpublic String getName() {\n\t\t\treturn name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t}\n}\n```\n\n\n\n新的测试结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/09/20180609170312.png)","source":"_posts/ccf-csp-20180303-urlmapping.md","raw":"---\ntitle: CCF CSP 201803-3 URL映射\ndate: 2018-06-06 22:20:10\nupdated: 2018-06-06 22:20:10\ntags: ccf csp\ncategories: ccf csp\n---\n\n**问题描述**\n\n　　URL 映射是诸如 Django、Ruby on Rails 等网页框架 (web frameworks) 的一个重要组件。对于从浏览器发来的 HTTP 请求，URL 映射模块会解析请求中的 URL 地址，并将其分派给相应的处理代码。现在，请你来实现一个简单的 URL 映射功能。\n　　本题中 URL 映射功能的配置由若干条 URL 映射规则组成。当一个请求到达时，URL 映射功能会将请求中的 URL 地址按照配置的先后顺序逐一与这些规则进行匹配。当遇到第一条完全匹配的规则时，匹配成功，得到匹配的规则以及匹配的参数。若不能匹配任何一条规则，则匹配失败。\n　　本题输入的 URL 地址是以斜杠 / 作为分隔符的路径，保证以斜杠开头。其他合法字符还包括大小写英文字母、阿拉伯数字、减号 -、下划线 _ 和小数点 .。例如，/person/123/ 是一个合法的 URL 地址，而 /person/123? 则不合法（存在不合法的字符问号 ?）。另外，英文字母区分大小写，因此 /case/ 和 /CAse/ 是不同的 URL 地址。\n　　对于 URL 映射规则，同样是以斜杠开始。除了可以是正常的 URL 地址外，还可以包含参数，有以下 3 种：\n　　字符串 &lt;str&gt;：用于匹配一段字符串，注意字符串里不能包含斜杠。例如，abcde0123。\n　　整数 &lt;int&gt;：用于匹配一个不带符号的整数，全部由阿拉伯数字组成。例如，01234。\n　　路径 &lt;path&gt;：用于匹配一段字符串，字符串可以包含斜杠。例如，abcd/0123/。\n　　以上 3 种参数都必须匹配非空的字符串。简便起见，题目规定规则中 &lt;str&gt; 和 &lt;int&gt; 前面一定是斜杠，后面要么是斜杠，要么是规则的结束（也就是该参数是规则的最后一部分）。而 &lt;path&gt; 的前面一定是斜杠，后面一定是规则的结束。无论是 URL 地址还是规则，都不会出现连续的斜杠。\n\n<!--more-->\n\n**输入格式**\n\n　　输入第一行是两个正整数 *n* 和 *m*，分别表示 URL 映射的规则条数和待处理的 URL 地址个数，中间用一个空格字符分隔。\n　　第 2 行至第 *n*+1 行按匹配的先后顺序描述 URL 映射规则的配置信息。第 *i*+1 行包含两个字符串 *pi* 和 *ri*，其中 *pi* 表示 URL 匹配的规则，*ri* 表示这条 URL 匹配的名字。两个字符串都非空，且不包含空格字符，两者中间用一个空格字符分隔。\n　　第 *n*+2 行至第 *n*+*m*+1 行描述待处理的 URL 地址。第 *n*+1+*i* 行包含一个字符串 *qi*，表示待处理的 URL 地址，字符串中不包含空格字符。\n\n**输出格式**\n\n　　输入共 *m* 行，第 *i* 行表示 *qi* 的匹配结果。如果匹配成功，设匹配了规则 *pj* ，则输出对应的 *rj*。同时，如果规则中有参数，则在同一行内依次输出匹配后的参数。注意整数参数输出时要把前导零去掉。相邻两项之间用一个空格字符分隔。如果匹配失败，则输出 404。\n\n**样例输入**\n\n5 4\n/articles/2003/ special_case_2003\n/articles/&lt;int&gt;/ year_archive\n/articles/&lt;int&gt;/&lt;int&gt;/ month_archive\n/articles/&lt;int&gt;/&lt;int&gt;/&lt;str&gt;/ article_detail\n/static/&lt;path&gt; static_serve\n/articles/2004/\n/articles/1985/09/aloha/\n/articles/hello/\n/static/js/jquery.js\n\n**样例输出**\n\nyear_archive 2004\narticle_detail 1985 9 aloha\n404\nstatic_serve js/jquery.js\n\n**样例说明**\n\n　　对于第 1 个地址 /articles/2004/，无法匹配第 1 条规则，可以匹配第 2 条规则，参数为 2004。\n　　对于第 2 个地址 /articles/1985/09/aloha/，只能匹配第 4 条规则，参数依次为 1985、9（已经去掉前导零）和 aloha。\n　　对于第 3 个地址 /articles/hello/，无法匹配任何一条规则。\n　　对于第 4 个地址 /static/js/jquery.js，可以匹配最后一条规则，参数为 js/jquery.js。\n\n**数据规模和约定**\n\n　　1 ≤ *n* ≤ 100，1 ≤ *m* ≤ 100。\n　　所有输入行的长度不超过 100 个字符（不包含换行符）。\n　　保证输入的规则都是合法的。\n\n```java\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tInteger[] data = toIntegerArray(scan.nextLine().split(\" \"));\n\t\tUrlMapping[] mappings = new UrlMapping[data[0]];\n\t\tString[] url = new String[data[1]];\n\t\tfor (int i = 0; i < data[0]; i++) {\n\t\t\tString[] sArr = scan.nextLine().split(\" \");\n\t\t\tUrlMapping urlMapping = new UrlMapping();\n\t\t\turlMapping.setExpression(sArr[0]);\n\t\t\turlMapping.setName(sArr[1]);\n\t\t\tmappings[i] = urlMapping;\n\t\t}\n\t\tfor (int i = 0; i < url.length; i++) {\n\t\t\turl[i] = scan.nextLine();\n\t\t}\n\n\t\tfor (int i = 0; i < url.length; i++) {\n\t\t\tboolean flag = false;\n\t\t\tif (url[i].matches(\"(/[\\\\w-\\\\.]+)+/?\")) {// 判断url是否合法\n\t\t\t\tfor (UrlMapping urlMapping : mappings) {\n\t\t\t\t\tif (matches(urlMapping, url[i])) {\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!flag) {\n\t\t\t\tSystem.out.println(404);\n\t\t\t}\n\t\t}\n\t\tscan.close();\n\t}\n\n\tprivate static boolean matches(UrlMapping urlMapping, String url) {\n\n\t\tString expression = urlMapping.getExpression();\n\t\tString[] mappingArr = expression.split(\"/\");\n\t\tString[] urlArr = url.split(\"/\");\n\t\t/*如果映射规则分割后的长度小于url的长度，但是映射规则不包含<path>，\n\t\t或者映射规则分割后的长度大于url的长度，则不匹配*/\n\t\tif ((mappingArr.length < urlArr.length && !expression.endsWith(\"<path>\"))\n\t\t\t\t|| mappingArr.length > urlArr.length) {\n\t\t\treturn false;\n\t\t}\n\t\tif (expression.endsWith(\"/\") && !url.endsWith(\"/\")) {\n\t\t\treturn false;\n\t\t}\n\t\tif ((!expression.endsWith(\"<path>\") && !expression.endsWith(\"/\")) \n            & url.endsWith(\"/\")) {\n\t\t\treturn false;\n\t\t}\n\t\tString[] args = new String[urlArr.length];\n\t\tint count = 0;\n\t\tfor (int i = 0; i < mappingArr.length; i++) {\n\t\t\tif (mappingArr[i].equals(\"<str>\")) {\n                 //<str>不能匹配纯数字\n\t\t\t\tif (!urlArr[i].matches(\"[\\\\w-\\\\.]+\") || urlArr[i].matches(\"[0-9]+\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\targs[count++] = urlArr[i];\n\t\t\t} else if (mappingArr[i].equals(\"<int>\")) {\n\t\t\t\tif (!urlArr[i].matches(\"[0-9]+\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\targs[count++] = deleteStartsZero(urlArr[i]);\n\t\t\t} else if (mappingArr[i].equals(\"<path>\")) {\n\t\t\t\tStringBuilder sb = new StringBuilder(urlArr[i]);\n\t\t\t\tfor (int j = i + 1; j < urlArr.length; j++) {\n\t\t\t\t\tsb.append(\"/\" + urlArr[j]);\n\t\t\t\t}\n\t\t\t\tif (url.endsWith(\"/\")) {// 加上url结尾的/\n\t\t\t\t\tsb.append(\"/\");\n\t\t\t\t}\n\t\t\t\targs[count++] = sb.toString();\n\t\t\t} else if (!mappingArr[i].equals(urlArr[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tStringBuilder sb = new StringBuilder(urlMapping.getName() + \" \");\n\t\tfor (int k = 0; k < count; k++) {\n\t\t\tsb.append(args[k] + \" \");\n\t\t}\n\t\tSystem.out.println(sb);\n\t\treturn true;\n\t}\n\t\n\t//更简洁的做法：String.valueOf(Integer.parseInt(str));\n\tprivate static String deleteStartsZero(String str) {\n\t\tint i;\n\t\tfor(i = 0 ; i < str.length();i++) {\n\t\t\tif(str.charAt(i) != '0') {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn str.substring(i);\n\t}\n\n\tprivate static Integer[] toIntegerArray(String[] sArr) {\n\t\tInteger[] intArr = new Integer[sArr.length];\n\t\tfor (int i = 0; i < sArr.length; i++) {\n\t\t\tintArr[i] = Integer.valueOf(sArr[i]);\n\t\t}\n\t\treturn intArr;\n\t}\n\n\tprivate static class UrlMapping {\n\t\tString expression;\n\t\tString name;\n\n\t\tpublic String getExpression() {\n\t\t\treturn expression;\n\t\t}\n\n\t\tpublic void setExpression(String expression) {\n\t\t\tthis.expression = expression;\n\t\t}\n\n\t\tpublic String getName() {\n\t\t\treturn name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t}\n}\n```\n\n测试结果（提交了n次，还是90分..）\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/06/20180606222621.png)\n\n<hr>\n\n2018/06/09 更新\n\n偶然发现，上次写的代码，之所以一直不能通过，显示得分90，原因在于我在上面第23行做了一个URL正则过滤，过滤不合法的URL，估计可能是我正则表达式写的不对，导致有些测试用例没运行matches方法，直接输出了404.\n\n其实题目已经写明了保证所有输入都合法，我们没必要再去处理不合法输入的情况=_=\n\n```java\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tInteger[] data = toIntegerArray(scan.nextLine().split(\" \"));\n\t\tUrlMapping[] mappings = new UrlMapping[data[0]];\n\t\tString[] url = new String[data[1]];\n\t\tfor (int i = 0; i < data[0]; i++) {\n\t\t\tString[] sArr = scan.nextLine().split(\" \");\n\t\t\tUrlMapping urlMapping = new UrlMapping();\n\t\t\turlMapping.setExpression(sArr[0]);\n\t\t\turlMapping.setName(sArr[1]);\n\t\t\tmappings[i] = urlMapping;\n\t\t}\n\t\tfor (int i = 0; i < url.length; i++) {\n\t\t\turl[i] = scan.nextLine();\n\t\t}\n\n\t\tfor (int i = 0; i < url.length; i++) {\n\t\t\tboolean flag = false;\n\t\t\tfor (UrlMapping urlMapping : mappings) {\n\t\t\t\tif (matches(urlMapping, url[i])) {\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n             }\n\t\t\tif (!flag) {\n\t\t\t\tSystem.out.println(404);\n\t\t\t}\n\t\t}\n\t\tscan.close();\n\t}\n\n\tprivate static boolean matches(UrlMapping urlMapping, String url) {\n\n\t\tString expression = urlMapping.getExpression();\n\t\tString[] mappingArr = expression.split(\"/\");\n\t\tString[] urlArr = url.split(\"/\");\n\t\t/*如果映射规则分割后的长度小于url的长度，但是映射规则不包含<path>，\n\t\t或者映射规则分割后的长度大于url的长度，则不匹配*/\n\t\tif ((mappingArr.length < urlArr.length && !expression.endsWith(\"<path>\"))\n\t\t\t\t|| mappingArr.length > urlArr.length) {\n\t\t\treturn false;\n\t\t}\n\t\tif (expression.endsWith(\"/\") && !url.endsWith(\"/\")) {\n\t\t\treturn false;\n\t\t}\n\t\tif ((!expression.endsWith(\"<path>\") && !expression.endsWith(\"/\")) \n            & url.endsWith(\"/\")) {\n\t\t\treturn false;\n\t\t}\n\t\tString[] args = new String[urlArr.length];\n\t\tint count = 0;\n\t\tfor (int i = 0; i < mappingArr.length; i++) {\n\t\t\tif (mappingArr[i].equals(\"<str>\")) {\n                 //<str>不能匹配纯数字\n\t\t\t\tif (!urlArr[i].matches(\"[\\\\w-\\\\.]+\") || urlArr[i].matches(\"[0-9]+\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\targs[count++] = urlArr[i];\n\t\t\t} else if (mappingArr[i].equals(\"<int>\")) {\n\t\t\t\tif (!urlArr[i].matches(\"[0-9]+\")) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\targs[count++] = deleteStartsZero(urlArr[i]);\n\t\t\t} else if (mappingArr[i].equals(\"<path>\")) {\n\t\t\t\tStringBuilder sb = new StringBuilder(urlArr[i]);\n\t\t\t\tfor (int j = i + 1; j < urlArr.length; j++) {\n\t\t\t\t\tsb.append(\"/\" + urlArr[j]);\n\t\t\t\t}\n\t\t\t\tif (url.endsWith(\"/\")) {// 加上url结尾的/\n\t\t\t\t\tsb.append(\"/\");\n\t\t\t\t}\n\t\t\t\targs[count++] = sb.toString();\n\t\t\t} else if (!mappingArr[i].equals(urlArr[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tStringBuilder sb = new StringBuilder(urlMapping.getName() + \" \");\n\t\tfor (int k = 0; k < count; k++) {\n\t\t\tsb.append(args[k] + \" \");\n\t\t}\n\t\tSystem.out.println(sb);\n\t\treturn true;\n\t}\n\t\n\t//更简洁的做法：String.valueOf(Integer.parseInt(str));\n\tprivate static String deleteStartsZero(String str) {\n\t\tint i;\n\t\tfor(i = 0 ; i < str.length();i++) {\n\t\t\tif(str.charAt(i) != '0') {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn str.substring(i);\n\t}\n\n\tprivate static Integer[] toIntegerArray(String[] sArr) {\n\t\tInteger[] intArr = new Integer[sArr.length];\n\t\tfor (int i = 0; i < sArr.length; i++) {\n\t\t\tintArr[i] = Integer.valueOf(sArr[i]);\n\t\t}\n\t\treturn intArr;\n\t}\n\n\tprivate static class UrlMapping {\n\t\tString expression;\n\t\tString name;\n\n\t\tpublic String getExpression() {\n\t\t\treturn expression;\n\t\t}\n\n\t\tpublic void setExpression(String expression) {\n\t\t\tthis.expression = expression;\n\t\t}\n\n\t\tpublic String getName() {\n\t\t\treturn name;\n\t\t}\n\n\t\tpublic void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t}\n}\n```\n\n\n\n新的测试结果：\n\n![](http://p64uw9x5j.bkt.clouddn.com/image/2018/06/09/20180609170312.png)","slug":"ccf-csp-20180303-urlmapping","published":1,"_id":"cju3jk6ca00e4j1q0gj1c0s4r","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>问题描述</strong></p>\n<p>　　URL 映射是诸如 Django、Ruby on Rails 等网页框架 (web frameworks) 的一个重要组件。对于从浏览器发来的 HTTP 请求，URL 映射模块会解析请求中的 URL 地址，并将其分派给相应的处理代码。现在，请你来实现一个简单的 URL 映射功能。<br>　　本题中 URL 映射功能的配置由若干条 URL 映射规则组成。当一个请求到达时，URL 映射功能会将请求中的 URL 地址按照配置的先后顺序逐一与这些规则进行匹配。当遇到第一条完全匹配的规则时，匹配成功，得到匹配的规则以及匹配的参数。若不能匹配任何一条规则，则匹配失败。<br>　　本题输入的 URL 地址是以斜杠 / 作为分隔符的路径，保证以斜杠开头。其他合法字符还包括大小写英文字母、阿拉伯数字、减号 -、下划线 _ 和小数点 .。例如，/person/123/ 是一个合法的 URL 地址，而 /person/123? 则不合法（存在不合法的字符问号 ?）。另外，英文字母区分大小写，因此 /case/ 和 /CAse/ 是不同的 URL 地址。<br>　　对于 URL 映射规则，同样是以斜杠开始。除了可以是正常的 URL 地址外，还可以包含参数，有以下 3 种：<br>　　字符串 &lt;str&gt;：用于匹配一段字符串，注意字符串里不能包含斜杠。例如，abcde0123。<br>　　整数 &lt;int&gt;：用于匹配一个不带符号的整数，全部由阿拉伯数字组成。例如，01234。<br>　　路径 &lt;path&gt;：用于匹配一段字符串，字符串可以包含斜杠。例如，abcd/0123/。<br>　　以上 3 种参数都必须匹配非空的字符串。简便起见，题目规定规则中 &lt;str&gt; 和 &lt;int&gt; 前面一定是斜杠，后面要么是斜杠，要么是规则的结束（也就是该参数是规则的最后一部分）。而 &lt;path&gt; 的前面一定是斜杠，后面一定是规则的结束。无论是 URL 地址还是规则，都不会出现连续的斜杠。</p>\n<a id=\"more\"></a>\n<p><strong>输入格式</strong></p>\n<p>　　输入第一行是两个正整数 <em>n</em> 和 <em>m</em>，分别表示 URL 映射的规则条数和待处理的 URL 地址个数，中间用一个空格字符分隔。<br>　　第 2 行至第 <em>n</em>+1 行按匹配的先后顺序描述 URL 映射规则的配置信息。第 <em>i</em>+1 行包含两个字符串 <em>pi</em> 和 <em>ri</em>，其中 <em>pi</em> 表示 URL 匹配的规则，<em>ri</em> 表示这条 URL 匹配的名字。两个字符串都非空，且不包含空格字符，两者中间用一个空格字符分隔。<br>　　第 <em>n</em>+2 行至第 <em>n</em>+<em>m</em>+1 行描述待处理的 URL 地址。第 <em>n</em>+1+<em>i</em> 行包含一个字符串 <em>qi</em>，表示待处理的 URL 地址，字符串中不包含空格字符。</p>\n<p><strong>输出格式</strong></p>\n<p>　　输入共 <em>m</em> 行，第 <em>i</em> 行表示 <em>qi</em> 的匹配结果。如果匹配成功，设匹配了规则 <em>pj</em> ，则输出对应的 <em>rj</em>。同时，如果规则中有参数，则在同一行内依次输出匹配后的参数。注意整数参数输出时要把前导零去掉。相邻两项之间用一个空格字符分隔。如果匹配失败，则输出 404。</p>\n<p><strong>样例输入</strong></p>\n<p>5 4<br>/articles/2003/ special_case_2003<br>/articles/&lt;int&gt;/ year_archive<br>/articles/&lt;int&gt;/&lt;int&gt;/ month_archive<br>/articles/&lt;int&gt;/&lt;int&gt;/&lt;str&gt;/ article_detail<br>/static/&lt;path&gt; static_serve<br>/articles/2004/<br>/articles/1985/09/aloha/<br>/articles/hello/<br>/static/js/jquery.js</p>\n<p><strong>样例输出</strong></p>\n<p>year_archive 2004<br>article_detail 1985 9 aloha<br>404<br>static_serve js/jquery.js</p>\n<p><strong>样例说明</strong></p>\n<p>　　对于第 1 个地址 /articles/2004/，无法匹配第 1 条规则，可以匹配第 2 条规则，参数为 2004。<br>　　对于第 2 个地址 /articles/1985/09/aloha/，只能匹配第 4 条规则，参数依次为 1985、9（已经去掉前导零）和 aloha。<br>　　对于第 3 个地址 /articles/hello/，无法匹配任何一条规则。<br>　　对于第 4 个地址 /static/js/jquery.js，可以匹配最后一条规则，参数为 js/jquery.js。</p>\n<p><strong>数据规模和约定</strong></p>\n<p>　　1 ≤ <em>n</em> ≤ 100，1 ≤ <em>m</em> ≤ 100。<br>　　所有输入行的长度不超过 100 个字符（不包含换行符）。<br>　　保证输入的规则都是合法的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tScanner scan = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\tInteger[] data = toIntegerArray(scan.nextLine().split(<span class=\"string\">\" \"</span>));</span><br><span class=\"line\">\t\tUrlMapping[] mappings = <span class=\"keyword\">new</span> UrlMapping[data[<span class=\"number\">0</span>]];</span><br><span class=\"line\">\t\tString[] url = <span class=\"keyword\">new</span> String[data[<span class=\"number\">1</span>]];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; data[<span class=\"number\">0</span>]; i++) &#123;</span><br><span class=\"line\">\t\t\tString[] sArr = scan.nextLine().split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t\tUrlMapping urlMapping = <span class=\"keyword\">new</span> UrlMapping();</span><br><span class=\"line\">\t\t\turlMapping.setExpression(sArr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\turlMapping.setName(sArr[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\tmappings[i] = urlMapping;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; url.length; i++) &#123;</span><br><span class=\"line\">\t\t\turl[i] = scan.nextLine();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; url.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (url[i].matches(<span class=\"string\">\"(/[\\\\w-\\\\.]+)+/?\"</span>)) &#123;<span class=\"comment\">// 判断url是否合法</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (UrlMapping urlMapping : mappings) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (matches(urlMapping, url[i])) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!flag) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"number\">404</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tscan.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(UrlMapping urlMapping, String url)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString expression = urlMapping.getExpression();</span><br><span class=\"line\">\t\tString[] mappingArr = expression.split(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">\t\tString[] urlArr = url.split(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">/*如果映射规则分割后的长度小于url的长度，但是映射规则不包含&lt;path&gt;，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t或者映射规则分割后的长度大于url的长度，则不匹配*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((mappingArr.length &lt; urlArr.length &amp;&amp; !expression.endsWith(<span class=\"string\">\"&lt;path&gt;\"</span>))</span><br><span class=\"line\">\t\t\t\t|| mappingArr.length &gt; urlArr.length) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (expression.endsWith(<span class=\"string\">\"/\"</span>) &amp;&amp; !url.endsWith(<span class=\"string\">\"/\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((!expression.endsWith(<span class=\"string\">\"&lt;path&gt;\"</span>) &amp;&amp; !expression.endsWith(<span class=\"string\">\"/\"</span>)) </span><br><span class=\"line\">            &amp; url.endsWith(<span class=\"string\">\"/\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString[] args = <span class=\"keyword\">new</span> String[urlArr.length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mappingArr.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappingArr[i].equals(<span class=\"string\">\"&lt;str&gt;\"</span>)) &#123;</span><br><span class=\"line\">                 <span class=\"comment\">//&lt;str&gt;不能匹配纯数字</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!urlArr[i].matches(<span class=\"string\">\"[\\\\w-\\\\.]+\"</span>) || urlArr[i].matches(<span class=\"string\">\"[0-9]+\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\targs[count++] = urlArr[i];</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mappingArr[i].equals(<span class=\"string\">\"&lt;int&gt;\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!urlArr[i].matches(<span class=\"string\">\"[0-9]+\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\targs[count++] = deleteStartsZero(urlArr[i]);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mappingArr[i].equals(<span class=\"string\">\"&lt;path&gt;\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(urlArr[i]);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; urlArr.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\t\tsb.append(<span class=\"string\">\"/\"</span> + urlArr[j]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (url.endsWith(<span class=\"string\">\"/\"</span>)) &#123;<span class=\"comment\">// 加上url结尾的/</span></span><br><span class=\"line\">\t\t\t\t\tsb.append(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\targs[count++] = sb.toString();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!mappingArr[i].equals(urlArr[i])) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(urlMapping.getName() + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; count; k++) &#123;</span><br><span class=\"line\">\t\t\tsb.append(args[k] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(sb);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//更简洁的做法：String.valueOf(Integer.parseInt(str));</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">deleteStartsZero</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; i &lt; str.length();i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(str.charAt(i) != <span class=\"string\">'0'</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.substring(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Integer[] toIntegerArray(String[] sArr) &#123;</span><br><span class=\"line\">\t\tInteger[] intArr = <span class=\"keyword\">new</span> Integer[sArr.length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sArr.length; i++) &#123;</span><br><span class=\"line\">\t\t\tintArr[i] = Integer.valueOf(sArr[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> intArr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UrlMapping</span> </span>&#123;</span><br><span class=\"line\">\t\tString expression;</span><br><span class=\"line\">\t\tString name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getExpression</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> expression;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setExpression</span><span class=\"params\">(String expression)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.expression = expression;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试结果（提交了n次，还是90分..）</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/06/20180606222621.png\" alt=\"\"></p>\n<hr>\n\n<p>2018/06/09 更新</p>\n<p>偶然发现，上次写的代码，之所以一直不能通过，显示得分90，原因在于我在上面第23行做了一个URL正则过滤，过滤不合法的URL，估计可能是我正则表达式写的不对，导致有些测试用例没运行matches方法，直接输出了404.</p>\n<p>其实题目已经写明了保证所有输入都合法，我们没必要再去处理不合法输入的情况=_=</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tScanner scan = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\tInteger[] data = toIntegerArray(scan.nextLine().split(<span class=\"string\">\" \"</span>));</span><br><span class=\"line\">\t\tUrlMapping[] mappings = <span class=\"keyword\">new</span> UrlMapping[data[<span class=\"number\">0</span>]];</span><br><span class=\"line\">\t\tString[] url = <span class=\"keyword\">new</span> String[data[<span class=\"number\">1</span>]];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; data[<span class=\"number\">0</span>]; i++) &#123;</span><br><span class=\"line\">\t\t\tString[] sArr = scan.nextLine().split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t\tUrlMapping urlMapping = <span class=\"keyword\">new</span> UrlMapping();</span><br><span class=\"line\">\t\t\turlMapping.setExpression(sArr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\turlMapping.setName(sArr[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\tmappings[i] = urlMapping;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; url.length; i++) &#123;</span><br><span class=\"line\">\t\t\turl[i] = scan.nextLine();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; url.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (UrlMapping urlMapping : mappings) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (matches(urlMapping, url[i])) &#123;</span><br><span class=\"line\">\t\t\t\t\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!flag) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"number\">404</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tscan.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(UrlMapping urlMapping, String url)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString expression = urlMapping.getExpression();</span><br><span class=\"line\">\t\tString[] mappingArr = expression.split(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">\t\tString[] urlArr = url.split(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">/*如果映射规则分割后的长度小于url的长度，但是映射规则不包含&lt;path&gt;，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t或者映射规则分割后的长度大于url的长度，则不匹配*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((mappingArr.length &lt; urlArr.length &amp;&amp; !expression.endsWith(<span class=\"string\">\"&lt;path&gt;\"</span>))</span><br><span class=\"line\">\t\t\t\t|| mappingArr.length &gt; urlArr.length) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (expression.endsWith(<span class=\"string\">\"/\"</span>) &amp;&amp; !url.endsWith(<span class=\"string\">\"/\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((!expression.endsWith(<span class=\"string\">\"&lt;path&gt;\"</span>) &amp;&amp; !expression.endsWith(<span class=\"string\">\"/\"</span>)) </span><br><span class=\"line\">            &amp; url.endsWith(<span class=\"string\">\"/\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString[] args = <span class=\"keyword\">new</span> String[urlArr.length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mappingArr.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappingArr[i].equals(<span class=\"string\">\"&lt;str&gt;\"</span>)) &#123;</span><br><span class=\"line\">                 <span class=\"comment\">//&lt;str&gt;不能匹配纯数字</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!urlArr[i].matches(<span class=\"string\">\"[\\\\w-\\\\.]+\"</span>) || urlArr[i].matches(<span class=\"string\">\"[0-9]+\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\targs[count++] = urlArr[i];</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mappingArr[i].equals(<span class=\"string\">\"&lt;int&gt;\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!urlArr[i].matches(<span class=\"string\">\"[0-9]+\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\targs[count++] = deleteStartsZero(urlArr[i]);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mappingArr[i].equals(<span class=\"string\">\"&lt;path&gt;\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(urlArr[i]);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; urlArr.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\t\tsb.append(<span class=\"string\">\"/\"</span> + urlArr[j]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (url.endsWith(<span class=\"string\">\"/\"</span>)) &#123;<span class=\"comment\">// 加上url结尾的/</span></span><br><span class=\"line\">\t\t\t\t\tsb.append(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\targs[count++] = sb.toString();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!mappingArr[i].equals(urlArr[i])) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(urlMapping.getName() + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; count; k++) &#123;</span><br><span class=\"line\">\t\t\tsb.append(args[k] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(sb);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//更简洁的做法：String.valueOf(Integer.parseInt(str));</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">deleteStartsZero</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; i &lt; str.length();i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(str.charAt(i) != <span class=\"string\">'0'</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.substring(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Integer[] toIntegerArray(String[] sArr) &#123;</span><br><span class=\"line\">\t\tInteger[] intArr = <span class=\"keyword\">new</span> Integer[sArr.length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sArr.length; i++) &#123;</span><br><span class=\"line\">\t\t\tintArr[i] = Integer.valueOf(sArr[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> intArr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UrlMapping</span> </span>&#123;</span><br><span class=\"line\">\t\tString expression;</span><br><span class=\"line\">\t\tString name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getExpression</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> expression;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setExpression</span><span class=\"params\">(String expression)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.expression = expression;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新的测试结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/09/20180609170312.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p><strong>问题描述</strong></p>\n<p>　　URL 映射是诸如 Django、Ruby on Rails 等网页框架 (web frameworks) 的一个重要组件。对于从浏览器发来的 HTTP 请求，URL 映射模块会解析请求中的 URL 地址，并将其分派给相应的处理代码。现在，请你来实现一个简单的 URL 映射功能。<br>　　本题中 URL 映射功能的配置由若干条 URL 映射规则组成。当一个请求到达时，URL 映射功能会将请求中的 URL 地址按照配置的先后顺序逐一与这些规则进行匹配。当遇到第一条完全匹配的规则时，匹配成功，得到匹配的规则以及匹配的参数。若不能匹配任何一条规则，则匹配失败。<br>　　本题输入的 URL 地址是以斜杠 / 作为分隔符的路径，保证以斜杠开头。其他合法字符还包括大小写英文字母、阿拉伯数字、减号 -、下划线 _ 和小数点 .。例如，/person/123/ 是一个合法的 URL 地址，而 /person/123? 则不合法（存在不合法的字符问号 ?）。另外，英文字母区分大小写，因此 /case/ 和 /CAse/ 是不同的 URL 地址。<br>　　对于 URL 映射规则，同样是以斜杠开始。除了可以是正常的 URL 地址外，还可以包含参数，有以下 3 种：<br>　　字符串 &lt;str&gt;：用于匹配一段字符串，注意字符串里不能包含斜杠。例如，abcde0123。<br>　　整数 &lt;int&gt;：用于匹配一个不带符号的整数，全部由阿拉伯数字组成。例如，01234。<br>　　路径 &lt;path&gt;：用于匹配一段字符串，字符串可以包含斜杠。例如，abcd/0123/。<br>　　以上 3 种参数都必须匹配非空的字符串。简便起见，题目规定规则中 &lt;str&gt; 和 &lt;int&gt; 前面一定是斜杠，后面要么是斜杠，要么是规则的结束（也就是该参数是规则的最后一部分）。而 &lt;path&gt; 的前面一定是斜杠，后面一定是规则的结束。无论是 URL 地址还是规则，都不会出现连续的斜杠。</p>","more":"<p><strong>输入格式</strong></p>\n<p>　　输入第一行是两个正整数 <em>n</em> 和 <em>m</em>，分别表示 URL 映射的规则条数和待处理的 URL 地址个数，中间用一个空格字符分隔。<br>　　第 2 行至第 <em>n</em>+1 行按匹配的先后顺序描述 URL 映射规则的配置信息。第 <em>i</em>+1 行包含两个字符串 <em>pi</em> 和 <em>ri</em>，其中 <em>pi</em> 表示 URL 匹配的规则，<em>ri</em> 表示这条 URL 匹配的名字。两个字符串都非空，且不包含空格字符，两者中间用一个空格字符分隔。<br>　　第 <em>n</em>+2 行至第 <em>n</em>+<em>m</em>+1 行描述待处理的 URL 地址。第 <em>n</em>+1+<em>i</em> 行包含一个字符串 <em>qi</em>，表示待处理的 URL 地址，字符串中不包含空格字符。</p>\n<p><strong>输出格式</strong></p>\n<p>　　输入共 <em>m</em> 行，第 <em>i</em> 行表示 <em>qi</em> 的匹配结果。如果匹配成功，设匹配了规则 <em>pj</em> ，则输出对应的 <em>rj</em>。同时，如果规则中有参数，则在同一行内依次输出匹配后的参数。注意整数参数输出时要把前导零去掉。相邻两项之间用一个空格字符分隔。如果匹配失败，则输出 404。</p>\n<p><strong>样例输入</strong></p>\n<p>5 4<br>/articles/2003/ special_case_2003<br>/articles/&lt;int&gt;/ year_archive<br>/articles/&lt;int&gt;/&lt;int&gt;/ month_archive<br>/articles/&lt;int&gt;/&lt;int&gt;/&lt;str&gt;/ article_detail<br>/static/&lt;path&gt; static_serve<br>/articles/2004/<br>/articles/1985/09/aloha/<br>/articles/hello/<br>/static/js/jquery.js</p>\n<p><strong>样例输出</strong></p>\n<p>year_archive 2004<br>article_detail 1985 9 aloha<br>404<br>static_serve js/jquery.js</p>\n<p><strong>样例说明</strong></p>\n<p>　　对于第 1 个地址 /articles/2004/，无法匹配第 1 条规则，可以匹配第 2 条规则，参数为 2004。<br>　　对于第 2 个地址 /articles/1985/09/aloha/，只能匹配第 4 条规则，参数依次为 1985、9（已经去掉前导零）和 aloha。<br>　　对于第 3 个地址 /articles/hello/，无法匹配任何一条规则。<br>　　对于第 4 个地址 /static/js/jquery.js，可以匹配最后一条规则，参数为 js/jquery.js。</p>\n<p><strong>数据规模和约定</strong></p>\n<p>　　1 ≤ <em>n</em> ≤ 100，1 ≤ <em>m</em> ≤ 100。<br>　　所有输入行的长度不超过 100 个字符（不包含换行符）。<br>　　保证输入的规则都是合法的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tScanner scan = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\tInteger[] data = toIntegerArray(scan.nextLine().split(<span class=\"string\">\" \"</span>));</span><br><span class=\"line\">\t\tUrlMapping[] mappings = <span class=\"keyword\">new</span> UrlMapping[data[<span class=\"number\">0</span>]];</span><br><span class=\"line\">\t\tString[] url = <span class=\"keyword\">new</span> String[data[<span class=\"number\">1</span>]];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; data[<span class=\"number\">0</span>]; i++) &#123;</span><br><span class=\"line\">\t\t\tString[] sArr = scan.nextLine().split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t\tUrlMapping urlMapping = <span class=\"keyword\">new</span> UrlMapping();</span><br><span class=\"line\">\t\t\turlMapping.setExpression(sArr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\turlMapping.setName(sArr[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\tmappings[i] = urlMapping;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; url.length; i++) &#123;</span><br><span class=\"line\">\t\t\turl[i] = scan.nextLine();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; url.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (url[i].matches(<span class=\"string\">\"(/[\\\\w-\\\\.]+)+/?\"</span>)) &#123;<span class=\"comment\">// 判断url是否合法</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (UrlMapping urlMapping : mappings) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (matches(urlMapping, url[i])) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!flag) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"number\">404</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tscan.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(UrlMapping urlMapping, String url)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString expression = urlMapping.getExpression();</span><br><span class=\"line\">\t\tString[] mappingArr = expression.split(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">\t\tString[] urlArr = url.split(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">/*如果映射规则分割后的长度小于url的长度，但是映射规则不包含&lt;path&gt;，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t或者映射规则分割后的长度大于url的长度，则不匹配*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((mappingArr.length &lt; urlArr.length &amp;&amp; !expression.endsWith(<span class=\"string\">\"&lt;path&gt;\"</span>))</span><br><span class=\"line\">\t\t\t\t|| mappingArr.length &gt; urlArr.length) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (expression.endsWith(<span class=\"string\">\"/\"</span>) &amp;&amp; !url.endsWith(<span class=\"string\">\"/\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((!expression.endsWith(<span class=\"string\">\"&lt;path&gt;\"</span>) &amp;&amp; !expression.endsWith(<span class=\"string\">\"/\"</span>)) </span><br><span class=\"line\">            &amp; url.endsWith(<span class=\"string\">\"/\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString[] args = <span class=\"keyword\">new</span> String[urlArr.length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mappingArr.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappingArr[i].equals(<span class=\"string\">\"&lt;str&gt;\"</span>)) &#123;</span><br><span class=\"line\">                 <span class=\"comment\">//&lt;str&gt;不能匹配纯数字</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!urlArr[i].matches(<span class=\"string\">\"[\\\\w-\\\\.]+\"</span>) || urlArr[i].matches(<span class=\"string\">\"[0-9]+\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\targs[count++] = urlArr[i];</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mappingArr[i].equals(<span class=\"string\">\"&lt;int&gt;\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!urlArr[i].matches(<span class=\"string\">\"[0-9]+\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\targs[count++] = deleteStartsZero(urlArr[i]);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mappingArr[i].equals(<span class=\"string\">\"&lt;path&gt;\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(urlArr[i]);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; urlArr.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\t\tsb.append(<span class=\"string\">\"/\"</span> + urlArr[j]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (url.endsWith(<span class=\"string\">\"/\"</span>)) &#123;<span class=\"comment\">// 加上url结尾的/</span></span><br><span class=\"line\">\t\t\t\t\tsb.append(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\targs[count++] = sb.toString();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!mappingArr[i].equals(urlArr[i])) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(urlMapping.getName() + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; count; k++) &#123;</span><br><span class=\"line\">\t\t\tsb.append(args[k] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(sb);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//更简洁的做法：String.valueOf(Integer.parseInt(str));</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">deleteStartsZero</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; i &lt; str.length();i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(str.charAt(i) != <span class=\"string\">'0'</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.substring(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Integer[] toIntegerArray(String[] sArr) &#123;</span><br><span class=\"line\">\t\tInteger[] intArr = <span class=\"keyword\">new</span> Integer[sArr.length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sArr.length; i++) &#123;</span><br><span class=\"line\">\t\t\tintArr[i] = Integer.valueOf(sArr[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> intArr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UrlMapping</span> </span>&#123;</span><br><span class=\"line\">\t\tString expression;</span><br><span class=\"line\">\t\tString name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getExpression</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> expression;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setExpression</span><span class=\"params\">(String expression)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.expression = expression;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试结果（提交了n次，还是90分..）</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/06/20180606222621.png\" alt=\"\"></p>\n<hr>\n\n<p>2018/06/09 更新</p>\n<p>偶然发现，上次写的代码，之所以一直不能通过，显示得分90，原因在于我在上面第23行做了一个URL正则过滤，过滤不合法的URL，估计可能是我正则表达式写的不对，导致有些测试用例没运行matches方法，直接输出了404.</p>\n<p>其实题目已经写明了保证所有输入都合法，我们没必要再去处理不合法输入的情况=_=</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tScanner scan = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\tInteger[] data = toIntegerArray(scan.nextLine().split(<span class=\"string\">\" \"</span>));</span><br><span class=\"line\">\t\tUrlMapping[] mappings = <span class=\"keyword\">new</span> UrlMapping[data[<span class=\"number\">0</span>]];</span><br><span class=\"line\">\t\tString[] url = <span class=\"keyword\">new</span> String[data[<span class=\"number\">1</span>]];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; data[<span class=\"number\">0</span>]; i++) &#123;</span><br><span class=\"line\">\t\t\tString[] sArr = scan.nextLine().split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t\tUrlMapping urlMapping = <span class=\"keyword\">new</span> UrlMapping();</span><br><span class=\"line\">\t\t\turlMapping.setExpression(sArr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\turlMapping.setName(sArr[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\tmappings[i] = urlMapping;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; url.length; i++) &#123;</span><br><span class=\"line\">\t\t\turl[i] = scan.nextLine();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; url.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (UrlMapping urlMapping : mappings) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (matches(urlMapping, url[i])) &#123;</span><br><span class=\"line\">\t\t\t\t\tflag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!flag) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"number\">404</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tscan.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(UrlMapping urlMapping, String url)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString expression = urlMapping.getExpression();</span><br><span class=\"line\">\t\tString[] mappingArr = expression.split(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">\t\tString[] urlArr = url.split(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">/*如果映射规则分割后的长度小于url的长度，但是映射规则不包含&lt;path&gt;，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t或者映射规则分割后的长度大于url的长度，则不匹配*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((mappingArr.length &lt; urlArr.length &amp;&amp; !expression.endsWith(<span class=\"string\">\"&lt;path&gt;\"</span>))</span><br><span class=\"line\">\t\t\t\t|| mappingArr.length &gt; urlArr.length) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (expression.endsWith(<span class=\"string\">\"/\"</span>) &amp;&amp; !url.endsWith(<span class=\"string\">\"/\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((!expression.endsWith(<span class=\"string\">\"&lt;path&gt;\"</span>) &amp;&amp; !expression.endsWith(<span class=\"string\">\"/\"</span>)) </span><br><span class=\"line\">            &amp; url.endsWith(<span class=\"string\">\"/\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString[] args = <span class=\"keyword\">new</span> String[urlArr.length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mappingArr.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappingArr[i].equals(<span class=\"string\">\"&lt;str&gt;\"</span>)) &#123;</span><br><span class=\"line\">                 <span class=\"comment\">//&lt;str&gt;不能匹配纯数字</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!urlArr[i].matches(<span class=\"string\">\"[\\\\w-\\\\.]+\"</span>) || urlArr[i].matches(<span class=\"string\">\"[0-9]+\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\targs[count++] = urlArr[i];</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mappingArr[i].equals(<span class=\"string\">\"&lt;int&gt;\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!urlArr[i].matches(<span class=\"string\">\"[0-9]+\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\targs[count++] = deleteStartsZero(urlArr[i]);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mappingArr[i].equals(<span class=\"string\">\"&lt;path&gt;\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(urlArr[i]);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; urlArr.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\t\tsb.append(<span class=\"string\">\"/\"</span> + urlArr[j]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (url.endsWith(<span class=\"string\">\"/\"</span>)) &#123;<span class=\"comment\">// 加上url结尾的/</span></span><br><span class=\"line\">\t\t\t\t\tsb.append(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\targs[count++] = sb.toString();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!mappingArr[i].equals(urlArr[i])) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tStringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(urlMapping.getName() + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; count; k++) &#123;</span><br><span class=\"line\">\t\t\tsb.append(args[k] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(sb);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//更简洁的做法：String.valueOf(Integer.parseInt(str));</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">deleteStartsZero</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; i &lt; str.length();i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(str.charAt(i) != <span class=\"string\">'0'</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.substring(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Integer[] toIntegerArray(String[] sArr) &#123;</span><br><span class=\"line\">\t\tInteger[] intArr = <span class=\"keyword\">new</span> Integer[sArr.length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sArr.length; i++) &#123;</span><br><span class=\"line\">\t\t\tintArr[i] = Integer.valueOf(sArr[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> intArr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UrlMapping</span> </span>&#123;</span><br><span class=\"line\">\t\tString expression;</span><br><span class=\"line\">\t\tString name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getExpression</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> expression;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setExpression</span><span class=\"params\">(String expression)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.expression = expression;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新的测试结果：</p>\n<p><img src=\"http://p64uw9x5j.bkt.clouddn.com/image/2018/06/09/20180609170312.png\" alt=\"\"></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cju3j9aoe0000j1q02snlopxm","category_id":"cju3j9aon0004j1q0rbz1t44c","_id":"cju3j9ap1000ij1q0lgp76jsz"},{"post_id":"cju3j9aok0002j1q09bbtebcu","category_id":"cju3j9aot000bj1q0zjb70h52","_id":"cju3j9ap4000oj1q04sbp9uko"},{"post_id":"cju3j9aop0006j1q0yb3mhemk","category_id":"cju3j9ap1000kj1q0fdope2i8","_id":"cju3j9ap6000vj1q0218d6gcu"},{"post_id":"cju3j9aor0008j1q0s80zlgm5","category_id":"cju3j9ap4000pj1q0yc8wr3lk","_id":"cju3j9ap90012j1q03pa5kht3"},{"post_id":"cju3j9aot000aj1q0g8lx7htk","category_id":"cju3j9ap1000kj1q0fdope2i8","_id":"cju3j9apc0018j1q00lok37jg"},{"post_id":"cju3j9aow000fj1q03mdefx89","category_id":"cju3j9ap1000kj1q0fdope2i8","_id":"cju3j9ape001dj1q0agmrn0uj"},{"post_id":"cju3j9ap3000nj1q02almfuse","category_id":"cju3j9api001kj1q0uyhjx16p","_id":"cju3j9apo001wj1q0sb030kw4"},{"post_id":"cju3j9ap4000rj1q0nybp0dm3","category_id":"cju3j9apm001rj1q07g3fc83k","_id":"cju3j9apr0022j1q0m5w8w9n6"},{"post_id":"cju3j9ap5000tj1q0vs42n5ve","category_id":"cju3j9apm001rj1q07g3fc83k","_id":"cju3j9apu0028j1q0w0hme415"},{"post_id":"cju3j9ap6000yj1q05tvvhetq","category_id":"cju3j9apm001rj1q07g3fc83k","_id":"cju3j9apx002dj1q0ciqqc5nm"},{"post_id":"cju3j9ap80010j1q028z8m0ar","category_id":"cju3j9apu0027j1q0llieuz2x","_id":"cju3j9aq0002kj1q086vngd8x"},{"post_id":"cju3j9apa0013j1q0bqg4hsn9","category_id":"cju3j9apu0027j1q0llieuz2x","_id":"cju3j9aq3002qj1q0lfr26b8j"},{"post_id":"cju3j9apb0016j1q0tilori4y","category_id":"cju3j9aq0002jj1q05ybulno1","_id":"cju3j9aq6002yj1q0ns3j382r"},{"post_id":"cju3j9apc0019j1q03a2m6lsr","category_id":"cju3j9aq0002jj1q05ybulno1","_id":"cju3j9aq90034j1q0ndtflik8"},{"post_id":"cju3j9ape001cj1q07gfozzcq","category_id":"cju3j9aq0002jj1q05ybulno1","_id":"cju3j9aqc003aj1q0j5ro4xl5"},{"post_id":"cju3j9ape001ej1q0fq8cuxek","category_id":"cju3j9aq0002jj1q05ybulno1","_id":"cju3j9aqf003gj1q0966nayx5"},{"post_id":"cju3j9apg001ij1q098fusft2","category_id":"cju3j9aq0002jj1q05ybulno1","_id":"cju3j9aqh003mj1q0iyuisvmm"},{"post_id":"cju3j9aph001jj1q06ed2etz3","category_id":"cju3j9aq0002jj1q05ybulno1","_id":"cju3j9aqk003sj1q02gy6py1t"},{"post_id":"cju3j9apj001nj1q0l72d6ppj","category_id":"cju3j9aq0002jj1q05ybulno1","_id":"cju3j9aqp003yj1q0qbh8yyzv"},{"post_id":"cju3j9apm001tj1q0ewf9tnpv","category_id":"cju3j9aq0002jj1q05ybulno1","_id":"cju3j9aqt0045j1q02fhl7ecf"},{"post_id":"cju3j9apn001vj1q0mz0z7g6p","category_id":"cju3j9aq0002jj1q05ybulno1","_id":"cju3j9aqx004bj1q0g1eth2hd"},{"post_id":"cju3j9app001zj1q0nt0pg7ey","category_id":"cju3j9aq0002jj1q05ybulno1","_id":"cju3j9ar2004hj1q0emd6uvnf"},{"post_id":"cju3j9apq0020j1q03bortal4","category_id":"cju3j9aq0002jj1q05ybulno1","_id":"cju3j9ar5004nj1q0pu0swo43"},{"post_id":"cju3j9apr0024j1q0f748a8uz","category_id":"cju3j9aq0002jj1q05ybulno1","_id":"cju3j9ar7004sj1q0ffvs2m0l"},{"post_id":"cju3j9apt0026j1q0i2a5vma1","category_id":"cju3j9ar5004mj1q0plq0fzpz","_id":"cju3j9arb004yj1q0k12o11yv"},{"post_id":"cju3j9apv002aj1q0ef757zn2","category_id":"cju3j9ar7004tj1q0zrvzzm5b","_id":"cju3j9arh0055j1q085rg9p3m"},{"post_id":"cju3j9apx002cj1q0wa2kkoqg","category_id":"cju3j9ar7004tj1q0zrvzzm5b","_id":"cju3j9arn005bj1q0m8yn1sl4"},{"post_id":"cju3j9apy002fj1q059sh5wwd","category_id":"cju3j9aq0002jj1q05ybulno1","_id":"cju3j9arp005gj1q0lohuff7j"},{"post_id":"cju3j9apz002hj1q0wfdnv04p","category_id":"cju3j9arm005aj1q0832sv4dh","_id":"cju3j9arr005nj1q0tx87f050"},{"post_id":"cju3j9aq0002lj1q0049nep4r","category_id":"cju3j9arm005aj1q0832sv4dh","_id":"cju3j9art005uj1q05hp5zgy5"},{"post_id":"cju3j9aq2002oj1q0i6c60r3h","category_id":"cju3j9arm005aj1q0832sv4dh","_id":"cju3j9arv0061j1q029prqfwp"},{"post_id":"cju3j9aq3002rj1q0dxhpnqth","category_id":"cju3j9arm005aj1q0832sv4dh","_id":"cju3j9arx0067j1q0knfhtyzc"},{"post_id":"cju3j9aq4002uj1q0559ufdfu","category_id":"cju3j9arv0060j1q0xyah9p3p","_id":"cju3j9as0006hj1q0s4x4m2z3"},{"post_id":"cju3j9aq5002wj1q0ahfaaz36","category_id":"cju3j9arv0060j1q0xyah9p3p","_id":"cju3j9as2006nj1q0c16njpc7"},{"post_id":"cju3j9aq70031j1q0t00ww7qb","category_id":"cju3j9arv0060j1q0xyah9p3p","_id":"cju3j9as5006uj1q0z1hbzitm"},{"post_id":"cju3j9aq80032j1q0w36xui5d","category_id":"cju3j9arv0060j1q0xyah9p3p","_id":"cju3j9as70070j1q0ts4c5f09"},{"post_id":"cju3j9aqa0036j1q0dkqrjutw","category_id":"cju3j9as5006tj1q0p64ok8pg","_id":"cju3j9asa0078j1q0gechswol"},{"post_id":"cju3j9aqc0038j1q0mvlvgbpt","category_id":"cju3j9as5006tj1q0p64ok8pg","_id":"cju3j9asc007fj1q0za6lb4mj"},{"post_id":"cju3j9aqd003dj1q0h1khf1co","category_id":"cju3j9as5006tj1q0p64ok8pg","_id":"cju3j9ase007mj1q067fcb4oy"},{"post_id":"cju3j9aqe003ej1q0fxqh45un","category_id":"cju3j9as5006tj1q0p64ok8pg","_id":"cju3j9asg007tj1q0ivp4bkgn"},{"post_id":"cju3j9aqg003ij1q0js7374ue","category_id":"cju3j9as5006tj1q0p64ok8pg","_id":"cju3j9ask0080j1q06eet6lva"},{"post_id":"cju3j9asg007rj1q0sec2cx6t","category_id":"cju3j9as5006tj1q0p64ok8pg","_id":"cju3j9asl0083j1q0iw8cadkb"},{"post_id":"cju3j9aqh003kj1q072jao0mp","category_id":"cju3j9as5006tj1q0p64ok8pg","_id":"cju3j9asm0086j1q0ainjiugo"},{"post_id":"cju3j9aqi003pj1q0ex84t3lj","category_id":"cju3j9as5006tj1q0p64ok8pg","_id":"cju3j9asn0089j1q01pwusglq"},{"post_id":"cju3j9aqj003qj1q031wm5zri","category_id":"cju3j9as5006tj1q0p64ok8pg","_id":"cju3j9aso008dj1q00ectctmw"},{"post_id":"cju3j9aql003uj1q018xfexy4","category_id":"cju3j9as5006tj1q0p64ok8pg","_id":"cju3j9asp008ij1q0fcm4e2um"},{"post_id":"cju3j9aqp003wj1q04fkjdy1m","category_id":"cju3j9as5006tj1q0p64ok8pg","_id":"cju3j9asq008mj1q0jo66perj"},{"post_id":"cju3j9aqq0041j1q0dj3z5wvj","category_id":"cju3j9as5006tj1q0p64ok8pg","_id":"cju3j9asq008qj1q007j6gqf1"},{"post_id":"cju3j9aqs0043j1q0saasdl2i","category_id":"cju3j9asq008lj1q08c4cd5g5","_id":"cju3j9asr008uj1q0q1rjdkjl"},{"post_id":"cju3j9aqu0047j1q0mdfxwzwo","category_id":"cju3j9asq008rj1q0t9qiwmto","_id":"cju3j9ass008zj1q0wqtwdtwk"},{"post_id":"cju3j9aqw0049j1q0htea0g5d","category_id":"cju3j9as5006tj1q0p64ok8pg","_id":"cju3j9ast0093j1q0t7rujzey"},{"post_id":"cju3j9aqx004dj1q0huv7fk5t","category_id":"cju3j9as5006tj1q0p64ok8pg","_id":"cju3j9ast0096j1q0ulea8c9n"},{"post_id":"cju3j9aqy004fj1q0hyc2q1xf","category_id":"cju3j9ass0092j1q0hvr551n4","_id":"cju3j9asu009aj1q0yvd4es8o"},{"post_id":"cju3j9ar3004jj1q05i55gdd1","category_id":"cju3j9ast0097j1q0p7sabyzp","_id":"cju3j9asu009ej1q0rduzwdw6"},{"post_id":"cju3j9ar4004lj1q058p8oiem","category_id":"cju3j9asu009bj1q0yjpvc4r1","_id":"cju3j9asv009jj1q0d04m2qtq"},{"post_id":"cju3j9ar5004pj1q0lvoe19n1","category_id":"cju3j9asu009bj1q0yjpvc4r1","_id":"cju3j9asw009nj1q01rkgv78f"},{"post_id":"cju3j9ar7004rj1q0nlpvc6vl","category_id":"cju3j9asu009bj1q0yjpvc4r1","_id":"cju3j9asw009rj1q0zsdaqhsv"},{"post_id":"cju3j9ar8004vj1q0j2csvc2f","category_id":"cju3j9asu009bj1q0yjpvc4r1","_id":"cju3j9asx009vj1q0caiejagl"},{"post_id":"cju3j9ara004xj1q0eeqcqpmx","category_id":"cju3j9asu009bj1q0yjpvc4r1","_id":"cju3j9asy009zj1q0juj9z786"},{"post_id":"cju3j9arb0051j1q0gt7unuqw","category_id":"cju3j9asu009bj1q0yjpvc4r1","_id":"cju3j9asy00a3j1q0g4uxuccz"},{"post_id":"cju3j9arc0053j1q0cor8qtt5","category_id":"cju3j9asu009bj1q0yjpvc4r1","_id":"cju3j9asz00a6j1q0pkz7rh3o"},{"post_id":"cju3j9arh0057j1q0tragtqoe","category_id":"cju3j9asu009bj1q0yjpvc4r1","_id":"cju3j9asz00a9j1q0bsiig9h9"},{"post_id":"cju3j9arj0059j1q0ybb54h7i","category_id":"cju3j9asz00a5j1q0p7qfep4u","_id":"cju3j9at000aej1q0fx3wzwc3"},{"post_id":"cju3j9arn005dj1q0hu5leq23","category_id":"cju3j9asz00a5j1q0p7qfep4u","_id":"cju3j9at000ahj1q0uut559na"},{"post_id":"cju3j9arp005fj1q0fr0wdmrh","category_id":"cju3j9at000adj1q0b1skmxe4","_id":"cju3j9at100amj1q0scy2y4za"},{"post_id":"cju3j9arq005jj1q0kv5ph4l5","category_id":"cju3j9at000adj1q0b1skmxe4","_id":"cju3j9at200aqj1q08hrqfrf1"},{"post_id":"cju3j9arr005lj1q0lss7fgg2","category_id":"cju3j9at000adj1q0b1skmxe4","_id":"cju3j9at300auj1q04nbl41me"},{"post_id":"cju3j9arr005pj1q0yflv8il4","category_id":"cju3j9at000adj1q0b1skmxe4","_id":"cju3j9at400ayj1q07zyu5c9j"},{"post_id":"cju3j9art005rj1q0c5j3zj80","category_id":"cju3j9at000adj1q0b1skmxe4","_id":"cju3j9at500b2j1q02hu7qmbo"},{"post_id":"cju3j9aru005wj1q0f5b50fas","category_id":"cju3j9at000adj1q0b1skmxe4","_id":"cju3j9at500b6j1q0ktco4bgx"},{"post_id":"cju3j9arv005yj1q077lhola6","category_id":"cju3j9at000adj1q0b1skmxe4","_id":"cju3j9at800baj1q0qso0qxtu"},{"post_id":"cju3j9arw0063j1q0uaujxep7","category_id":"cju3j9at000adj1q0b1skmxe4","_id":"cju3j9at900bej1q0eog24gmk"},{"post_id":"cju3j9arw0065j1q0naffhbps","category_id":"cju3j9at000adj1q0b1skmxe4","_id":"cju3j9ata00bij1q01c71m2r7"},{"post_id":"cju3j9arx0069j1q04bs8c9yh","category_id":"cju3j9at000adj1q0b1skmxe4","_id":"cju3j9ata00blj1q01yvdubhj"},{"post_id":"cju3j9ary006cj1q0a9gtcdqg","category_id":"cju3j9at000adj1q0b1skmxe4","_id":"cju3j9atb00bpj1q06b0vwlxq"},{"post_id":"cju3j9arz006fj1q0dmysluvx","category_id":"cju3j9at000adj1q0b1skmxe4","_id":"cju3j9atb00btj1q0dbv9py0p"},{"post_id":"cju3j9as0006jj1q0gv4l7mb6","category_id":"cju3j9at000adj1q0b1skmxe4","_id":"cju3j9atc00bxj1q0kd5cipkz"},{"post_id":"cju3j9as1006lj1q04swar8du","category_id":"cju3j9at000adj1q0b1skmxe4","_id":"cju3j9atc00c0j1q0l56x1zez"},{"post_id":"cju3j9as3006qj1q0kcvc98hb","category_id":"cju3j9atc00bwj1q0fzek48j5","_id":"cju3j9atd00c6j1q0e2hau7vi"},{"post_id":"cju3j9as4006sj1q0zap3mdaq","category_id":"cju3j9atc00bwj1q0fzek48j5","_id":"cju3j9ate00caj1q0xp8ynoxx"},{"post_id":"cju3j9as6006xj1q0p65m2pva","category_id":"cju3j9atc00bwj1q0fzek48j5","_id":"cju3j9atf00cdj1q01xhicckl"},{"post_id":"cju3j9as6006zj1q0ktgne3p1","category_id":"cju3j9ate00c9j1q0hkeewze5","_id":"cju3j9atf00cij1q0zxnly7vw"},{"post_id":"cju3j9as80074j1q0oo4b75o1","category_id":"cju3j9ate00c9j1q0hkeewze5","_id":"cju3j9atg00clj1q0jtu166hr"},{"post_id":"cju3j9as90076j1q0ul39k5rd","category_id":"cju3j9ate00c9j1q0hkeewze5","_id":"cju3j9ath00cpj1q0fy31tj0h"},{"post_id":"cju3j9asb007bj1q0g46kbjz1","category_id":"cju3j9ate00c9j1q0hkeewze5","_id":"cju3j9ati00cuj1q0435bq7h3"},{"post_id":"cju3j9asc007dj1q0zzyprnzb","category_id":"cju3j9ate00c9j1q0hkeewze5","_id":"cju3j9ati00cyj1q0146rtcat"},{"post_id":"cju3j9asd007ij1q0dedg2rfg","category_id":"cju3j9ate00c9j1q0hkeewze5","_id":"cju3j9atj00d2j1q09p4f2g0j"},{"post_id":"cju3j9ase007kj1q0ptvk9tvx","category_id":"cju3j9ate00c9j1q0hkeewze5","_id":"cju3j9atk00d5j1q0ld4rdy6l"},{"post_id":"cju3j9asf007pj1q0x86wscdh","category_id":"cju3j9atj00d1j1q0fxjrv17f","_id":"cju3j9atl00daj1q0noy640uz"},{"post_id":"cju3j9ash007wj1q0gmtijvw7","category_id":"cju3j9ass0092j1q0hvr551n4","_id":"cju3j9atl00ddj1q0rq91z19b"},{"post_id":"cju3j9asi007yj1q0j8w6wrmt","category_id":"cju3j9at000adj1q0b1skmxe4","_id":"cju3j9atm00dgj1q0ioy5kc8r"},{"post_id":"cju3j9au700dmj1q049iyu12x","category_id":"cju3j9aq0002jj1q05ybulno1","_id":"cju3j9au900dtj1q011ua6jd6"},{"post_id":"cju3j9au800doj1q0thqfoue8","category_id":"cju3j9at000adj1q0b1skmxe4","_id":"cju3j9aua00dvj1q0v28xfngj"},{"post_id":"cju3j9au800dqj1q014z97zyo","category_id":"cju3j9at000adj1q0b1skmxe4","_id":"cju3j9aua00dwj1q0x8rzlrrj"},{"post_id":"cju3jjta300dyj1q0ee9cwx1l","category_id":"cju3j9apc0017j1q0tfyaja4f","_id":"cju3jjta400e0j1q0nce1l6qu"},{"post_id":"cju3jk1a400e1j1q05najoxjw","category_id":"cju3j9apc0017j1q0tfyaja4f","_id":"cju3jk1a600e3j1q0j7gyunc3"},{"post_id":"cju3jk6ca00e4j1q0gj1c0s4r","category_id":"cju3j9apc0017j1q0tfyaja4f","_id":"cju3jk6cb00e6j1q0cxd6d1f2"}],"PostTag":[{"post_id":"cju3j9aoe0000j1q02snlopxm","tag_id":"cju3j9aop0005j1q0n7tf43s2","_id":"cju3j9aow000ej1q0x1gox59d"},{"post_id":"cju3j9aok0002j1q09bbtebcu","tag_id":"cju3j9aou000cj1q0v9bd4h88","_id":"cju3j9ap5000sj1q0lg7gd6yf"},{"post_id":"cju3j9aok0002j1q09bbtebcu","tag_id":"cju3j9ap1000lj1q01styax8k","_id":"cju3j9ap6000uj1q02zl685d6"},{"post_id":"cju3j9aop0006j1q0yb3mhemk","tag_id":"cju3j9ap4000qj1q0pzya6hv5","_id":"cju3j9ap8000zj1q0iezue0sm"},{"post_id":"cju3j9aor0008j1q0s80zlgm5","tag_id":"cju3j9ap6000xj1q05bgnmn4q","_id":"cju3j9apb0015j1q0p15f0g8c"},{"post_id":"cju3j9aot000aj1q0g8lx7htk","tag_id":"cju3j9ap4000qj1q0pzya6hv5","_id":"cju3j9apd001bj1q063i5w2xz"},{"post_id":"cju3j9aow000fj1q03mdefx89","tag_id":"cju3j9ap4000qj1q0pzya6hv5","_id":"cju3j9apg001hj1q0x0n1ji5k"},{"post_id":"cju3j9ap3000nj1q02almfuse","tag_id":"cju3j9apm001sj1q0m72l63hv","_id":"cju3j9apt0025j1q0p7ffsg2r"},{"post_id":"cju3j9ap3000nj1q02almfuse","tag_id":"cju3j9apo001yj1q035tvyann","_id":"cju3j9apu0029j1q0gw79hzx4"},{"post_id":"cju3j9ap4000rj1q0nybp0dm3","tag_id":"cju3j9apr0023j1q0vksy358v","_id":"cju3j9aq0002ij1q0n8n8zxnj"},{"post_id":"cju3j9ap4000rj1q0nybp0dm3","tag_id":"cju3j9apw002bj1q0cx0qe2q9","_id":"cju3j9aq1002mj1q04kwzx82s"},{"post_id":"cju3j9apy002fj1q059sh5wwd","tag_id":"cju3j9apw002bj1q0cx0qe2q9","_id":"cju3j9aq3002pj1q01tycpsjh"},{"post_id":"cju3j9ap5000tj1q0vs42n5ve","tag_id":"cju3j9apr0023j1q0vksy358v","_id":"cju3j9aq5002vj1q0t71rhhtl"},{"post_id":"cju3j9ap5000tj1q0vs42n5ve","tag_id":"cju3j9apw002bj1q0cx0qe2q9","_id":"cju3j9aq6002zj1q0n0i4qdzy"},{"post_id":"cju3j9ap6000yj1q05tvvhetq","tag_id":"cju3j9apr0023j1q0vksy358v","_id":"cju3j9aqb0037j1q0ophti0rm"},{"post_id":"cju3j9ap6000yj1q05tvvhetq","tag_id":"cju3j9apw002bj1q0cx0qe2q9","_id":"cju3j9aqc003bj1q0k2jf4981"},{"post_id":"cju3j9ap80010j1q028z8m0ar","tag_id":"cju3j9apr0023j1q0vksy358v","_id":"cju3j9aqg003jj1q0hqvy7xs5"},{"post_id":"cju3j9ap80010j1q028z8m0ar","tag_id":"cju3j9aqd003cj1q054xp22ip","_id":"cju3j9aqi003nj1q0bx9xg27f"},{"post_id":"cju3j9apa0013j1q0bqg4hsn9","tag_id":"cju3j9apr0023j1q0vksy358v","_id":"cju3j9aqn003vj1q0rrs519ka"},{"post_id":"cju3j9apa0013j1q0bqg4hsn9","tag_id":"cju3j9aqd003cj1q054xp22ip","_id":"cju3j9aqq003zj1q07sjs0w6d"},{"post_id":"cju3j9apb0016j1q0tilori4y","tag_id":"cju3j9apw002bj1q0cx0qe2q9","_id":"cju3j9aqr0042j1q0se1olkh6"},{"post_id":"cju3j9apc0019j1q03a2m6lsr","tag_id":"cju3j9aqq0040j1q0hcgx4x56","_id":"cju3j9aqw0048j1q0cipddq1d"},{"post_id":"cju3j9ape001cj1q07gfozzcq","tag_id":"cju3j9apw002bj1q0cx0qe2q9","_id":"cju3j9aqy004ej1q01kwzvstb"},{"post_id":"cju3j9ape001ej1q0fq8cuxek","tag_id":"cju3j9aqq0040j1q0hcgx4x56","_id":"cju3j9ar4004kj1q05irlwfto"},{"post_id":"cju3j9apg001ij1q098fusft2","tag_id":"cju3j9aqq0040j1q0hcgx4x56","_id":"cju3j9ar6004qj1q0wul0hida"},{"post_id":"cju3j9aph001jj1q06ed2etz3","tag_id":"cju3j9apw002bj1q0cx0qe2q9","_id":"cju3j9ara004wj1q010hsob5e"},{"post_id":"cju3j9apj001nj1q0l72d6ppj","tag_id":"cju3j9apw002bj1q0cx0qe2q9","_id":"cju3j9arc0052j1q02xvppyb7"},{"post_id":"cju3j9apk001pj1q02s64c4hi","tag_id":"cju3j9apw002bj1q0cx0qe2q9","_id":"cju3j9ari0058j1q0jpj9sn1e"},{"post_id":"cju3j9apm001tj1q0ewf9tnpv","tag_id":"cju3j9apw002bj1q0cx0qe2q9","_id":"cju3j9aro005ej1q0ux2jhak4"},{"post_id":"cju3j9apn001vj1q0mz0z7g6p","tag_id":"cju3j9apw002bj1q0cx0qe2q9","_id":"cju3j9arq005kj1q0q9gi3ki5"},{"post_id":"cju3j9app001zj1q0nt0pg7ey","tag_id":"cju3j9apw002bj1q0cx0qe2q9","_id":"cju3j9ars005qj1q077omz9m6"},{"post_id":"cju3j9arr005lj1q0lss7fgg2","tag_id":"cju3j9apm001sj1q0m72l63hv","_id":"cju3j9art005sj1q0ejwsoj7k"},{"post_id":"cju3j9arr005pj1q0yflv8il4","tag_id":"cju3j9apm001sj1q0m72l63hv","_id":"cju3j9aru005xj1q0sxoeu5g6"},{"post_id":"cju3j9apq0020j1q03bortal4","tag_id":"cju3j9apw002bj1q0cx0qe2q9","_id":"cju3j9arv005zj1q0psnxh21w"},{"post_id":"cju3j9art005rj1q0c5j3zj80","tag_id":"cju3j9apm001sj1q0m72l63hv","_id":"cju3j9arw0064j1q0xrm4icyo"},{"post_id":"cju3j9aru005wj1q0f5b50fas","tag_id":"cju3j9apm001sj1q0m72l63hv","_id":"cju3j9arx0066j1q0mca0g88g"},{"post_id":"cju3j9apr0024j1q0f748a8uz","tag_id":"cju3j9apw002bj1q0cx0qe2q9","_id":"cju3j9ary006bj1q0ug07ll88"},{"post_id":"cju3j9arv005yj1q077lhola6","tag_id":"cju3j9apm001sj1q0m72l63hv","_id":"cju3j9arz006dj1q06kjmtu0y"},{"post_id":"cju3j9arw0063j1q0uaujxep7","tag_id":"cju3j9apm001sj1q0m72l63hv","_id":"cju3j9as0006ij1q0g7avy0ij"},{"post_id":"cju3j9apt0026j1q0i2a5vma1","tag_id":"cju3j9apw002bj1q0cx0qe2q9","_id":"cju3j9as1006kj1q04a96e241"},{"post_id":"cju3j9arw0065j1q0naffhbps","tag_id":"cju3j9apm001sj1q0m72l63hv","_id":"cju3j9as2006pj1q0rsbpjl6a"},{"post_id":"cju3j9arx0069j1q04bs8c9yh","tag_id":"cju3j9apm001sj1q0m72l63hv","_id":"cju3j9as4006rj1q0cnop4itv"},{"post_id":"cju3j9ary006cj1q0a9gtcdqg","tag_id":"cju3j9apm001sj1q0m72l63hv","_id":"cju3j9as5006wj1q05io3y2da"},{"post_id":"cju3j9arz006fj1q0dmysluvx","tag_id":"cju3j9apm001sj1q0m72l63hv","_id":"cju3j9as6006yj1q08iqvcgzk"},{"post_id":"cju3j9as0006jj1q0gv4l7mb6","tag_id":"cju3j9apm001sj1q0m72l63hv","_id":"cju3j9as80073j1q00rwcngzi"},{"post_id":"cju3j9apv002aj1q0ef757zn2","tag_id":"cju3j9apw002bj1q0cx0qe2q9","_id":"cju3j9as90075j1q03u1vpo3u"},{"post_id":"cju3j9apv002aj1q0ef757zn2","tag_id":"cju3j9arz006ej1q0qju2eu75","_id":"cju3j9asb007aj1q0p0zvx8t0"},{"post_id":"cju3j9as1006lj1q04swar8du","tag_id":"cju3j9apm001sj1q0m72l63hv","_id":"cju3j9asb007cj1q0snbpjfj8"},{"post_id":"cju3j9apx002cj1q0wa2kkoqg","tag_id":"cju3j9apw002bj1q0cx0qe2q9","_id":"cju3j9asd007hj1q06ex7fi9p"},{"post_id":"cju3j9apx002cj1q0wa2kkoqg","tag_id":"cju3j9arz006ej1q0qju2eu75","_id":"cju3j9ase007jj1q0363pos4m"},{"post_id":"cju3j9apz002hj1q0wfdnv04p","tag_id":"cju3j9as5006vj1q09rqfxuwy","_id":"cju3j9asf007oj1q0kyr1hkd8"},{"post_id":"cju3j9aq0002lj1q0049nep4r","tag_id":"cju3j9as5006vj1q09rqfxuwy","_id":"cju3j9asf007qj1q0vq5q21yn"},{"post_id":"cju3j9aq2002oj1q0i6c60r3h","tag_id":"cju3j9as5006vj1q09rqfxuwy","_id":"cju3j9ash007vj1q0e4cjs7mu"},{"post_id":"cju3j9aq3002rj1q0dxhpnqth","tag_id":"cju3j9as5006vj1q09rqfxuwy","_id":"cju3j9asi007xj1q02m20eqbr"},{"post_id":"cju3j9aq4002uj1q0559ufdfu","tag_id":"cju3j9ase007nj1q0knvs9bsm","_id":"cju3j9asl0082j1q05bre4p3r"},{"post_id":"cju3j9asi007yj1q0j8w6wrmt","tag_id":"cju3j9apm001sj1q0m72l63hv","_id":"cju3j9asl0084j1q08jx0gphs"},{"post_id":"cju3j9aq5002wj1q0ahfaaz36","tag_id":"cju3j9ase007nj1q0knvs9bsm","_id":"cju3j9aso008bj1q0bp24660m"},{"post_id":"cju3j9aq5002wj1q0ahfaaz36","tag_id":"cju3j9ask0081j1q0kl1m99bz","_id":"cju3j9aso008ej1q0qsio2pc8"},{"post_id":"cju3j9aq5002wj1q0ahfaaz36","tag_id":"cju3j9asm0087j1q078n8j8xi","_id":"cju3j9asp008gj1q0hofwf6o6"},{"post_id":"cju3j9aq70031j1q0t00ww7qb","tag_id":"cju3j9ase007nj1q0knvs9bsm","_id":"cju3j9asq008kj1q0c2709gfn"},{"post_id":"cju3j9aq70031j1q0t00ww7qb","tag_id":"cju3j9aso008fj1q0syeh44ov","_id":"cju3j9asq008nj1q0vskaylwi"},{"post_id":"cju3j9aq80032j1q0w36xui5d","tag_id":"cju3j9ase007nj1q0knvs9bsm","_id":"cju3j9asq008pj1q0x1oqyj9e"},{"post_id":"cju3j9aqa0036j1q0dkqrjutw","tag_id":"cju3j9asq008oj1q0mp37ugqw","_id":"cju3j9asr008tj1q0uwb5g6n2"},{"post_id":"cju3j9aqc0038j1q0mvlvgbpt","tag_id":"cju3j9asq008sj1q0xgpvvhtq","_id":"cju3j9ass008xj1q0gx3hph5n"},{"post_id":"cju3j9aqd003dj1q0h1khf1co","tag_id":"cju3j9asq008oj1q0mp37ugqw","_id":"cju3j9ass0091j1q04qo9i2hh"},{"post_id":"cju3j9aqe003ej1q0fxqh45un","tag_id":"cju3j9asq008oj1q0mp37ugqw","_id":"cju3j9ast0095j1q0ei2gnakw"},{"post_id":"cju3j9aqg003ij1q0js7374ue","tag_id":"cju3j9asq008oj1q0mp37ugqw","_id":"cju3j9asu0099j1q0j3vgfr5k"},{"post_id":"cju3j9aqh003kj1q072jao0mp","tag_id":"cju3j9asq008oj1q0mp37ugqw","_id":"cju3j9asu009dj1q01t5fh3ya"},{"post_id":"cju3j9aqi003pj1q0ex84t3lj","tag_id":"cju3j9asq008oj1q0mp37ugqw","_id":"cju3j9asv009hj1q0l6oqedoh"},{"post_id":"cju3j9aqj003qj1q031wm5zri","tag_id":"cju3j9asv009gj1q05nnjz1c6","_id":"cju3j9asv009lj1q0fqmenkvz"},{"post_id":"cju3j9aql003uj1q018xfexy4","tag_id":"cju3j9asv009kj1q02sg1rr9c","_id":"cju3j9asw009pj1q0kzcf7anw"},{"post_id":"cju3j9aqp003wj1q04fkjdy1m","tag_id":"cju3j9asq008oj1q0mp37ugqw","_id":"cju3j9asx009tj1q02ornebd5"},{"post_id":"cju3j9aqq0041j1q0dj3z5wvj","tag_id":"cju3j9asq008oj1q0mp37ugqw","_id":"cju3j9asx009xj1q0qm03a6qe"},{"post_id":"cju3j9aqs0043j1q0saasdl2i","tag_id":"cju3j9asx009wj1q0doh9or8d","_id":"cju3j9asy00a1j1q07gxratvm"},{"post_id":"cju3j9aqu0047j1q0mdfxwzwo","tag_id":"cju3j9asy00a0j1q0w509e633","_id":"cju3j9asz00a7j1q0k9m6955y"},{"post_id":"cju3j9aqw0049j1q0htea0g5d","tag_id":"cju3j9asy00a4j1q0rheq2jdy","_id":"cju3j9asz00abj1q03jyxet1o"},{"post_id":"cju3j9aqx004dj1q0huv7fk5t","tag_id":"cju3j9asz00a8j1q0x4cxjx2j","_id":"cju3j9at000afj1q0refmqz64"},{"post_id":"cju3j9aqy004fj1q0hyc2q1xf","tag_id":"cju3j9at000acj1q0z4dvf18s","_id":"cju3j9at100ajj1q0pnfgwwzh"},{"post_id":"cju3j9ar3004jj1q05i55gdd1","tag_id":"cju3j9at000agj1q0r5y7cqcd","_id":"cju3j9at100anj1q0yinpm5rt"},{"post_id":"cju3j9ar4004lj1q058p8oiem","tag_id":"cju3j9at000agj1q0r5y7cqcd","_id":"cju3j9at300arj1q04aazis5g"},{"post_id":"cju3j9ar5004pj1q0lvoe19n1","tag_id":"cju3j9at000agj1q0r5y7cqcd","_id":"cju3j9at300avj1q0aa46yhy2"},{"post_id":"cju3j9ar7004rj1q0nlpvc6vl","tag_id":"cju3j9at000agj1q0r5y7cqcd","_id":"cju3j9at400azj1q0uzg6btt9"},{"post_id":"cju3j9ar8004vj1q0j2csvc2f","tag_id":"cju3j9at000agj1q0r5y7cqcd","_id":"cju3j9at500b3j1q0gs5oav0r"},{"post_id":"cju3j9ara004xj1q0eeqcqpmx","tag_id":"cju3j9at000agj1q0r5y7cqcd","_id":"cju3j9at700b7j1q0j0793uqp"},{"post_id":"cju3j9arb0051j1q0gt7unuqw","tag_id":"cju3j9at000agj1q0r5y7cqcd","_id":"cju3j9at800bbj1q09lbzgvxk"},{"post_id":"cju3j9arc0053j1q0cor8qtt5","tag_id":"cju3j9at000agj1q0r5y7cqcd","_id":"cju3j9at900bfj1q0r897ovfp"},{"post_id":"cju3j9arh0057j1q0tragtqoe","tag_id":"cju3j9at000agj1q0r5y7cqcd","_id":"cju3j9ata00bjj1q0u10jmpz0"},{"post_id":"cju3j9arj0059j1q0ybb54h7i","tag_id":"cju3j9at900bgj1q02grjx8rs","_id":"cju3j9atb00bnj1q03ot57d7l"},{"post_id":"cju3j9arn005dj1q0hu5leq23","tag_id":"cju3j9at900bgj1q02grjx8rs","_id":"cju3j9atb00brj1q0kolkv97v"},{"post_id":"cju3j9arp005fj1q0fr0wdmrh","tag_id":"cju3j9atb00bqj1q0jwmj84y2","_id":"cju3j9atc00bvj1q06r700x51"},{"post_id":"cju3j9arq005jj1q0kv5ph4l5","tag_id":"cju3j9apm001sj1q0m72l63hv","_id":"cju3j9atc00bzj1q07uylvc89"},{"post_id":"cju3j9arq005jj1q0kv5ph4l5","tag_id":"cju3j9atc00buj1q0asdt4s0u","_id":"cju3j9atd00c2j1q0exfcwuw9"},{"post_id":"cju3j9as3006qj1q0kcvc98hb","tag_id":"cju3j9atc00byj1q0jllszh50","_id":"cju3j9atd00c4j1q0um5bdtxi"},{"post_id":"cju3j9as4006sj1q0zap3mdaq","tag_id":"cju3j9atc00byj1q0jllszh50","_id":"cju3j9ate00c8j1q0tl5idgg6"},{"post_id":"cju3j9as6006xj1q0p65m2pva","tag_id":"cju3j9atc00byj1q0jllszh50","_id":"cju3j9ate00ccj1q0bgv9p0zj"},{"post_id":"cju3j9as6006zj1q0ktgne3p1","tag_id":"cju3j9ate00cbj1q0pp0fa9dd","_id":"cju3j9atf00cgj1q0vekb1e1j"},{"post_id":"cju3j9as80074j1q0oo4b75o1","tag_id":"cju3j9ate00cbj1q0pp0fa9dd","_id":"cju3j9ath00cnj1q058c8w4kj"},{"post_id":"cju3j9as80074j1q0oo4b75o1","tag_id":"cju3j9atg00cjj1q0ckqobnd3","_id":"cju3j9ath00cqj1q09al1nvzr"},{"post_id":"cju3j9as90076j1q0ul39k5rd","tag_id":"cju3j9ate00cbj1q0pp0fa9dd","_id":"cju3j9ath00csj1q0bw3n9jhr"},{"post_id":"cju3j9asb007bj1q0g46kbjz1","tag_id":"cju3j9ate00cbj1q0pp0fa9dd","_id":"cju3j9ati00cwj1q07sxzr1pf"},{"post_id":"cju3j9asc007dj1q0zzyprnzb","tag_id":"cju3j9ate00cbj1q0pp0fa9dd","_id":"cju3j9atj00d0j1q0121uyztg"},{"post_id":"cju3j9asd007ij1q0dedg2rfg","tag_id":"cju3j9ate00cbj1q0pp0fa9dd","_id":"cju3j9atk00d4j1q0rpjq6esw"},{"post_id":"cju3j9ase007kj1q0ptvk9tvx","tag_id":"cju3j9ate00cbj1q0pp0fa9dd","_id":"cju3j9atk00d8j1q0bu8j88mh"},{"post_id":"cju3j9asf007pj1q0x86wscdh","tag_id":"cju3j9atk00d7j1q0vdhjfo70","_id":"cju3j9atl00dcj1q0eufzxqis"},{"post_id":"cju3j9asg007rj1q0sec2cx6t","tag_id":"cju3j9asy00a4j1q0rheq2jdy","_id":"cju3j9atm00dfj1q04duimwgh"},{"post_id":"cju3j9ash007wj1q0gmtijvw7","tag_id":"cju3j9at000acj1q0z4dvf18s","_id":"cju3j9atm00dij1q07qevsg2l"},{"post_id":"cju3j9ash007wj1q0gmtijvw7","tag_id":"cju3j9atm00dhj1q0rtkrtwe1","_id":"cju3j9atm00djj1q0pcbq5paq"},{"post_id":"cju3j9au700dmj1q049iyu12x","tag_id":"cju3j9apw002bj1q0cx0qe2q9","_id":"cju3j9au800dpj1q0n7rmqsjm"},{"post_id":"cju3j9au800doj1q0thqfoue8","tag_id":"cju3j9apm001sj1q0m72l63hv","_id":"cju3j9au900dsj1q0zfqnk2cb"},{"post_id":"cju3j9au800dqj1q014z97zyo","tag_id":"cju3j9apm001sj1q0m72l63hv","_id":"cju3j9aua00duj1q08kntlwy8"},{"post_id":"cju3jjta300dyj1q0ee9cwx1l","tag_id":"cju3j9apg001gj1q0djlq0yf4","_id":"cju3jjta400dzj1q0qhvyarmd"},{"post_id":"cju3jk1a400e1j1q05najoxjw","tag_id":"cju3j9apg001gj1q0djlq0yf4","_id":"cju3jk1a600e2j1q0sc9qdvyb"},{"post_id":"cju3jk6ca00e4j1q0gj1c0s4r","tag_id":"cju3j9apg001gj1q0djlq0yf4","_id":"cju3jk6cb00e5j1q0phfkkszs"}],"Tag":[{"name":"任重而道远","_id":"cju3j9aop0005j1q0n7tf43s2"},{"name":"随笔","_id":"cju3j9aou000cj1q0v9bd4h88"},{"name":"生活","_id":"cju3j9ap1000lj1q01styax8k"},{"name":"c","_id":"cju3j9ap4000qj1q0pzya6hv5"},{"name":"cpp","_id":"cju3j9ap6000xj1q05bgnmn4q"},{"name":"ccf csp","_id":"cju3j9apg001gj1q0djlq0yf4"},{"name":"python","_id":"cju3j9apm001sj1q0m72l63hv"},{"name":"scrapy","_id":"cju3j9apo001yj1q035tvyann"},{"name":"数据结构","_id":"cju3j9apr0023j1q0vksy358v"},{"name":"java","_id":"cju3j9apw002bj1q0cx0qe2q9"},{"name":"c/c++","_id":"cju3j9aqd003cj1q054xp22ip"},{"name":"java collections api","_id":"cju3j9aqq0040j1q0hcgx4x56"},{"name":"网络爬虫","_id":"cju3j9arz006ej1q0qju2eu75"},{"name":"linked-list","_id":"cju3j9as5006vj1q09rqfxuwy"},{"name":"linux","_id":"cju3j9ase007nj1q0knvs9bsm"},{"name":"压缩","_id":"cju3j9ask0081j1q0kl1m99bz"},{"name":"解压缩","_id":"cju3j9asm0087j1q078n8j8xi"},{"name":"vi","_id":"cju3j9aso008fj1q0syeh44ov"},{"name":"机器学习","_id":"cju3j9asq008oj1q0mp37ugqw"},{"name":"关联分析","_id":"cju3j9asq008sj1q0xgpvvhtq"},{"name":"降维","_id":"cju3j9asv009gj1q05nnjz1c6"},{"name":"链接挖掘","_id":"cju3j9asv009kj1q02sg1rr9c"},{"name":"macos","_id":"cju3j9asx009wj1q0doh9or8d"},{"name":"mathjax","_id":"cju3j9asy00a0j1q0w509e633"},{"name":"线性代数","_id":"cju3j9asy00a4j1q0rheq2jdy"},{"name":"矩阵论","_id":"cju3j9asz00a8j1q0x4cxjx2j"},{"name":"nginx","_id":"cju3j9at000acj1q0z4dvf18s"},{"name":"pat","_id":"cju3j9at000agj1q0r5y7cqcd"},{"name":"putty","_id":"cju3j9at900bgj1q02grjx8rs"},{"name":"数据分析","_id":"cju3j9atb00bqj1q0jwmj84y2"},{"name":"matplotlib","_id":"cju3j9atc00buj1q0asdt4s0u"},{"name":"recommend system","_id":"cju3j9atc00byj1q0jllszh50"},{"name":"sql","_id":"cju3j9ate00cbj1q0pp0fa9dd"},{"name":"mysql","_id":"cju3j9atg00cjj1q0ckqobnd3"},{"name":"算法","_id":"cju3j9atk00d7j1q0vdhjfo70"},{"name":"tomcat","_id":"cju3j9atm00dhj1q0rtkrtwe1"}]}}